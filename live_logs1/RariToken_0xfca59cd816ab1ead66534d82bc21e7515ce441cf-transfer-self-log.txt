This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 03:25:41,005 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 03:25:41,006 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 03:25:41,016 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 03:25:41,016 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 03:25:41,017 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 03:25:41,018 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 03:25:41,020 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 03:25:41,021 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 03:25:41,022 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 03:25:41,022 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 03:25:41,023 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 03:25:41,023 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 03:25:41,024 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 03:25:41,025 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 03:25:41,025 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 03:25:41,026 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 03:25:41,027 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 03:25:41,029 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 03:25:41,030 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 03:25:41,031 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 03:25:41,031 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 03:25:41,033 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 03:25:41,033 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 03:25:41,034 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 03:25:41,034 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 03:25:41,034 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 03:25:41,035 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 03:25:41,035 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 03:25:41,036 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 03:25:41,036 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 03:25:41,037 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 03:25:41,037 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 03:25:41,038 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 03:25:41,038 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 03:25:41,038 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 03:25:41,039 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 03:25:41,039 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 03:25:41,039 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 03:25:41,040 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 03:25:41,040 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 03:25:41,041 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 03:25:41,048 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 03:25:41,048 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 03:25:41,049 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 03:25:41,049 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 03:25:41,049 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 03:25:41,049 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 03:25:41,049 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 03:25:41,049 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 03:25:41,049 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 03:25:41,050 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 03:25:41,050 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 03:25:41,050 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 03:25:41,050 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 03:25:41,050 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 03:25:41,050 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 03:25:41,050 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 03:25:41,050 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 03:25:41,051 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 03:25:41,051 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 03:25:41,051 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 03:25:41,051 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 03:25:41,051 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 03:25:41,051 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 03:25:41,051 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 03:25:41,051 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 03:25:41,051 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 03:25:41,071 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 03:25:41,082 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 03:25:41,085 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 03:25:41,087 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 03:25:41,087 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 03:25:41,088 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transfer-self.bpl
[2020-11-25 03:25:41,088 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transfer-self.bpl'
[2020-11-25 03:25:41,189 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 03:25:41,190 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 03:25:41,190 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 03:25:41,190 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 03:25:41,190 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 03:25:41,206 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:25:41" (1/1) ...
[2020-11-25 03:25:41,208 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:25:41" (1/1) ...
[2020-11-25 03:25:41,241 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:25:41" (1/1) ...
[2020-11-25 03:25:41,242 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:25:41" (1/1) ...
[2020-11-25 03:25:41,266 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:25:41" (1/1) ...
[2020-11-25 03:25:41,280 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:25:41" (1/1) ...
[2020-11-25 03:25:41,291 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:25:41" (1/1) ...
[2020-11-25 03:25:41,304 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 03:25:41,304 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 03:25:41,304 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 03:25:41,306 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 03:25:41,310 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:25:41" (1/1) ...
[2020-11-25 03:25:41,327 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && mintStopped_RariToken[this] == old(mintStopped_RariToken[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]))))
[2020-11-25 03:25:41,332 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && mintStopped_RariToken[this] == old(mintStopped_RariToken[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]))))
[2020-11-25 03:25:41,340 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && mintStopped_RariToken[this] == old(mintStopped_RariToken[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]))))
[2020-11-25 03:25:41,348 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s841 && value_s841<=_balances_ERC20[this][msg.sender] ) && value_s841>=0 ) && value_s841<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s841]>=0 ) && _balances_ERC20[this][to_s841]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IdentifierExpression[to_s841,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s841,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s841,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s841,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s841,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s841,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 03:25:41,351 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( __ret_0_==true && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this]==( old(_allowances_ERC20[this]) ) ) && mintStopped_RariToken[this]==( old(mintStopped_RariToken[this]) ) ) && _paused_Pausable[this]==( old(_paused_Pausable[this]) ) ) && _owner_Ownable[this]==( old(_owner_Ownable[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ERC20Pausable>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[mintStopped_RariToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[mintStopped_RariToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]]
[2020-11-25 03:25:41,358 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && mintStopped_RariToken[this] == old(mintStopped_RariToken[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]))))
[2020-11-25 03:25:41,358 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC20Pausable0) ==> ( <>AP(success_transfer_ERC20Pausable0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 03:25:41,375 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:25:41 PropertyContainer
[2020-11-25 03:25:41,375 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 03:25:41,376 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 03:25:41,376 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 03:25:41,376 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 03:25:41,377 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:25:41" (1/2) ...
[2020-11-25 03:25:41,378 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 03:25:41,378 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 03:25:41,398 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:25:41" (2/2) ...
[2020-11-25 03:25:41,399 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 03:25:41,399 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 03:25:41,399 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 03:25:41,399 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 03:25:41,400 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:25:41" (1/2) ...
[2020-11-25 03:25:41,450 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 03:25:41,450 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 03:25:41,450 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 03:25:41,450 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 03:25:41,450 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 03:25:41,450 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 03:25:41,451 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 03:25:41,451 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 03:25:41,451 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 03:25:41,451 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 03:25:41,451 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable
[2020-11-25 03:25:41,451 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable
[2020-11-25 03:25:41,451 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-25 03:25:41,451 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-25 03:25:41,451 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 03:25:41,451 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 03:25:41,452 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 03:25:41,452 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 03:25:41,452 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 03:25:41,452 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 03:25:41,452 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 03:25:41,452 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 03:25:41,452 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 03:25:41,452 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 03:25:41,452 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 03:25:41,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 03:25:41,453 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 03:25:41,453 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 03:25:41,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 03:25:41,453 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 03:25:41,453 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 03:25:41,453 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 03:25:41,453 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 03:25:41,453 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 03:25:41,453 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 03:25:41,453 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 03:25:41,454 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 03:25:41,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 03:25:41,454 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 03:25:41,454 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 03:25:41,454 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 03:25:41,454 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 03:25:41,454 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 03:25:41,454 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 03:25:41,454 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 03:25:41,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 03:25:41,455 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 03:25:41,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 03:25:41,455 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 03:25:41,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 03:25:41,455 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 03:25:41,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 03:25:41,455 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 03:25:41,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 03:25:41,455 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 03:25:41,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 03:25:41,456 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 03:25:41,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 03:25:41,456 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 03:25:41,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 03:25:41,456 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 03:25:41,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 03:25:41,456 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 03:25:41,456 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 03:25:41,456 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 03:25:41,456 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 03:25:41,457 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 03:25:41,457 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 03:25:41,457 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 03:25:41,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 03:25:41,457 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 03:25:41,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 03:25:41,457 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 03:25:41,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 03:25:41,457 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 03:25:41,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 03:25:41,458 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 03:25:41,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 03:25:41,458 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 03:25:41,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 03:25:41,458 INFO  L130     BoogieDeclarations]: Found specification of procedure RariToken_RariToken_NoBaseCtor__success
[2020-11-25 03:25:41,458 INFO  L130     BoogieDeclarations]: Found specification of procedure RariToken_RariToken
[2020-11-25 03:25:41,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure RariToken_RariToken
[2020-11-25 03:25:41,458 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_RariToken
[2020-11-25 03:25:41,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_RariToken
[2020-11-25 03:25:41,458 INFO  L130     BoogieDeclarations]: Found specification of procedure stopMint_RariToken
[2020-11-25 03:25:41,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopMint_RariToken
[2020-11-25 03:25:41,459 INFO  L130     BoogieDeclarations]: Found specification of procedure name_RariToken
[2020-11-25 03:25:41,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_RariToken
[2020-11-25 03:25:41,459 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_RariToken
[2020-11-25 03:25:41,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_RariToken
[2020-11-25 03:25:41,459 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_RariToken
[2020-11-25 03:25:41,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_RariToken
[2020-11-25 03:25:41,459 INFO  L130     BoogieDeclarations]: Found specification of procedure mintStopped_RariToken
[2020-11-25 03:25:41,459 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintStopped_RariToken
[2020-11-25 03:25:41,459 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 03:25:41,459 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 03:25:41,460 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 03:25:41,460 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 03:25:41,460 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 03:25:41,460 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 03:25:41,460 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 03:25:41,460 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 03:25:41,460 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 03:25:41,460 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 03:25:41,460 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 03:25:41,460 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 03:25:41,460 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 03:25:41,461 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 03:25:41,461 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 03:25:41,461 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 03:25:41,461 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 03:25:41,461 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 03:25:41,461 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 03:25:41,461 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 03:25:41,461 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_RariToken
[2020-11-25 03:25:41,461 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 03:25:41,461 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 03:25:41,462 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 03:25:41,462 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 03:25:41,462 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 03:25:41,462 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 03:25:41,462 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 03:25:41,462 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 03:25:41,462 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 03:25:41,462 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 03:25:41,462 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 03:25:41,463 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__success
[2020-11-25 03:25:41,463 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__fail
[2020-11-25 03:25:41,463 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-25 03:25:41,463 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-25 03:25:41,463 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 03:25:41,463 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 03:25:41,463 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 03:25:41,463 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 03:25:41,463 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 03:25:41,463 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 03:25:41,464 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 03:25:41,464 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 03:25:41,464 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 03:25:41,464 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 03:25:41,464 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 03:25:41,464 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 03:25:41,464 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 03:25:41,464 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 03:25:41,464 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 03:25:41,464 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 03:25:41,465 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 03:25:41,465 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 03:25:41,465 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 03:25:41,465 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:25:41,465 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 03:25:41,465 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:25:41,465 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:25:41,465 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 03:25:41,465 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 03:25:41,465 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 03:25:41,465 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 03:25:41,466 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 03:25:41,466 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 03:25:41,466 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 03:25:41,466 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 03:25:41,466 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 03:25:41,466 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 03:25:41,466 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 03:25:41,466 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 03:25:41,466 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 03:25:41,466 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 03:25:41,466 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 03:25:41,467 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:25:41,467 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:25:41,467 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:25:41,467 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:25:41,467 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 03:25:41,467 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 03:25:41,467 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 03:25:41,467 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 03:25:41,467 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 03:25:41,467 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 03:25:41,467 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 03:25:41,467 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 03:25:41,468 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 03:25:41,468 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 03:25:41,468 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 03:25:41,468 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 03:25:41,468 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 03:25:41,468 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 03:25:41,468 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 03:25:41,468 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 03:25:41,468 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 03:25:41,468 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 03:25:41,468 INFO  L130     BoogieDeclarations]: Found specification of procedure RariToken_RariToken_NoBaseCtor__fail
[2020-11-25 03:25:41,469 INFO  L130     BoogieDeclarations]: Found specification of procedure RariToken_RariToken__success
[2020-11-25 03:25:41,469 INFO  L130     BoogieDeclarations]: Found specification of procedure RariToken_RariToken__fail
[2020-11-25 03:25:41,469 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_RariToken__success
[2020-11-25 03:25:41,469 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_RariToken__fail
[2020-11-25 03:25:41,469 INFO  L130     BoogieDeclarations]: Found specification of procedure stopMint_RariToken__success
[2020-11-25 03:25:41,469 INFO  L130     BoogieDeclarations]: Found specification of procedure stopMint_RariToken__fail
[2020-11-25 03:25:41,469 INFO  L130     BoogieDeclarations]: Found specification of procedure name_RariToken__success
[2020-11-25 03:25:41,469 INFO  L130     BoogieDeclarations]: Found specification of procedure name_RariToken__fail
[2020-11-25 03:25:41,469 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_RariToken__success
[2020-11-25 03:25:41,469 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_RariToken__fail
[2020-11-25 03:25:41,469 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_RariToken__success
[2020-11-25 03:25:41,469 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_RariToken__fail
[2020-11-25 03:25:41,469 INFO  L130     BoogieDeclarations]: Found specification of procedure mintStopped_RariToken__success
[2020-11-25 03:25:41,470 INFO  L130     BoogieDeclarations]: Found specification of procedure mintStopped_RariToken__fail
[2020-11-25 03:25:41,470 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 03:25:41,470 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 03:25:41,470 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 03:25:41,470 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 03:25:41,470 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 03:25:41,470 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 03:25:41,470 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 03:25:41,470 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 03:25:41,470 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 03:25:41,470 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 03:25:41,470 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 03:25:41,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 03:25:41,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 03:25:41,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 03:25:41,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 03:25:41,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 03:25:41,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 03:25:41,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 03:25:41,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 03:25:41,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 03:25:41,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__fail
[2020-11-25 03:25:41,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__success
[2020-11-25 03:25:41,471 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-25 03:25:41,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-25 03:25:41,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 03:25:41,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 03:25:41,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 03:25:41,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 03:25:41,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 03:25:41,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 03:25:41,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 03:25:41,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 03:25:41,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 03:25:41,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 03:25:41,472 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 03:25:41,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 03:25:41,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 03:25:41,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 03:25:41,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 03:25:41,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 03:25:41,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 03:25:41,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 03:25:41,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 03:25:41,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 03:25:41,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 03:25:41,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 03:25:41,473 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 03:25:41,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 03:25:41,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:25:41,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 03:25:41,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 03:25:41,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 03:25:41,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:25:41,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 03:25:41,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:25:41,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 03:25:41,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 03:25:41,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 03:25:41,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 03:25:41,474 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 03:25:41,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 03:25:41,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 03:25:41,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 03:25:41,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 03:25:41,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 03:25:41,475 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 03:25:41,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 03:25:41,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 03:25:41,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 03:25:41,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 03:25:41,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 03:25:41,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 03:25:41,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:25:41,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:25:41,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:25:41,476 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:25:41,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 03:25:41,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 03:25:41,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 03:25:41,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 03:25:41,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 03:25:41,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 03:25:41,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 03:25:41,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 03:25:41,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 03:25:41,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 03:25:41,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 03:25:41,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 03:25:41,477 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 03:25:41,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 03:25:41,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 03:25:41,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 03:25:41,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 03:25:41,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 03:25:41,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 03:25:41,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 03:25:41,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 03:25:41,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 03:25:41,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 03:25:41,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 03:25:41,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure RariToken_RariToken_NoBaseCtor__fail
[2020-11-25 03:25:41,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure RariToken_RariToken_NoBaseCtor__success
[2020-11-25 03:25:41,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure RariToken_RariToken__fail
[2020-11-25 03:25:41,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure RariToken_RariToken__success
[2020-11-25 03:25:41,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_RariToken__fail
[2020-11-25 03:25:41,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_RariToken__success
[2020-11-25 03:25:41,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopMint_RariToken__fail
[2020-11-25 03:25:41,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopMint_RariToken__success
[2020-11-25 03:25:41,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_RariToken__fail
[2020-11-25 03:25:41,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_RariToken__success
[2020-11-25 03:25:41,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_RariToken__fail
[2020-11-25 03:25:41,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_RariToken__success
[2020-11-25 03:25:41,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_RariToken__fail
[2020-11-25 03:25:41,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_RariToken__success
[2020-11-25 03:25:41,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintStopped_RariToken__fail
[2020-11-25 03:25:41,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintStopped_RariToken__success
[2020-11-25 03:25:41,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 03:25:41,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 03:25:41,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 03:25:41,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 03:25:41,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 03:25:41,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 03:25:41,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 03:25:41,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 03:25:41,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 03:25:41,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 03:25:41,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 03:25:41,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 03:25:41,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 03:25:41,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 03:25:41,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 03:25:41,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 03:25:41,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 03:25:41,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 03:25:41,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 03:25:41,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 03:25:41,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 03:25:41,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 03:25:41,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 03:25:41,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 03:25:41,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 03:25:41,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 03:25:41,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_RariToken
[2020-11-25 03:25:41,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 03:25:41,481 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 03:25:41,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 03:25:42,090 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:25:42,090 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:25:42,091 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:25:42,436 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 03:25:42,436 INFO  L286             CfgBuilder]: Removed 8 assue(true) statements.
[2020-11-25 03:25:42,439 INFO  L202        PluginConnector]: Adding new model RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:25:42 BoogieIcfgContainer
[2020-11-25 03:25:42,439 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:25:41" (2/2) ...
[2020-11-25 03:25:42,439 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 03:25:42,439 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@2854840e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:25:42, skipping insertion in model container
[2020-11-25 03:25:42,440 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 03:25:42,440 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 03:25:42,440 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 03:25:42,441 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 03:25:42,441 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:25:41" (1/3) ...
[2020-11-25 03:25:42,442 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@61fdb706 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:25:42, skipping insertion in model container
[2020-11-25 03:25:42,442 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:25:41" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 03:25:42,478 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:25:42 NWAContainer
[2020-11-25 03:25:42,478 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 03:25:42,478 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 03:25:42,479 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 03:25:42,479 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 03:25:42,480 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:25:42" (3/4) ...
[2020-11-25 03:25:42,481 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@6d64cebc and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:25:42, skipping insertion in model container
[2020-11-25 03:25:42,481 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:25:42" (4/4) ...
[2020-11-25 03:25:42,484 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 03:25:42,490 INFO  L110   BuchiProductObserver]: Initial RCFG 2841 locations, 4272 edges
[2020-11-25 03:25:42,490 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 03:25:42,504 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 03:25:44,206 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 03:25:44,215 INFO  L110   BuchiProductObserver]: BuchiProgram size 7468 locations, 14048 edges
[2020-11-25 03:25:44,215 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:25:44 BoogieIcfgContainer
[2020-11-25 03:25:44,216 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 03:25:44,216 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 03:25:44,216 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 03:25:44,217 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 03:25:44,218 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:25:44" (1/1) ...
[2020-11-25 03:25:44,343 INFO  L313           BlockEncoder]: Initial Icfg 7468 locations, 14048 edges
[2020-11-25 03:25:44,343 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 03:25:44,344 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 03:25:44,344 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 03:25:44,344 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 03:25:44,359 INFO  L70    emoveInfeasibleEdges]: Removed 243 edges and 19 locations because of local infeasibility
[2020-11-25 03:25:44,371 INFO  L70        RemoveSinkStates]: Removed 164 edges and 109 locations by removing sink states
[2020-11-25 03:25:44,387 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 03:25:44,391 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 03:25:44,396 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 03:25:44,396 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 03:25:44,400 INFO  L313           BlockEncoder]: Encoded RCFG 7306 locations, 13591 edges
[2020-11-25 03:25:44,400 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:25:44 BasicIcfg
[2020-11-25 03:25:44,400 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 03:25:44,401 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 03:25:44,401 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 03:25:44,402 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 03:25:44,402 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:25:44,403 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:25:41" (1/6) ...
[2020-11-25 03:25:44,404 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2cd56ff5 and model type RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:25:44, skipping insertion in model container
[2020-11-25 03:25:44,404 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:25:44,404 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:25:41" (2/6) ...
[2020-11-25 03:25:44,404 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2cd56ff5 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:25:44, skipping insertion in model container
[2020-11-25 03:25:44,405 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:25:44,405 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:25:42" (3/6) ...
[2020-11-25 03:25:44,405 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2cd56ff5 and model type RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:25:44, skipping insertion in model container
[2020-11-25 03:25:44,405 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:25:44,405 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:25:42" (4/6) ...
[2020-11-25 03:25:44,405 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2cd56ff5 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:25:44, skipping insertion in model container
[2020-11-25 03:25:44,405 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:25:44,405 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:25:44" (5/6) ...
[2020-11-25 03:25:44,405 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2cd56ff5 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 03:25:44, skipping insertion in model container
[2020-11-25 03:25:44,406 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:25:44,406 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:25:44" (6/6) ...
[2020-11-25 03:25:44,406 INFO  L404   chiAutomizerObserver]: Analyzing ICFG RariToken_0xfca59cd816ab1ead66534d82bc21e7515ce441cf_transfer-self.bpl_BEv2
[2020-11-25 03:25:44,436 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 03:25:44,437 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 03:25:44,437 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 03:25:44,437 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 03:25:44,437 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 03:25:44,437 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 03:25:44,437 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 03:25:44,437 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 03:25:44,437 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 03:25:44,490 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7306 states.
[2020-11-25 03:25:44,560 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:25:44,560 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:25:44,560 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:25:44,570 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:25:44,570 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:25:44,570 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 03:25:44,570 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7306 states.
[2020-11-25 03:25:44,610 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:25:44,610 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:25:44,611 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:25:44,613 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:25:44,613 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND TRUE   revert
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND TRUE   choice == 21
[L7297]              gas := gas - 21000;
[L7298]  COND FALSE  !(gas >= 0)
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:25:44,630 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:25:44,631 INFO  L82        PathProgramCache]: Analyzing trace with hash 2052778715, now seen corresponding path program 1 times
[2020-11-25 03:25:44,636 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:25:44,661 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:25:44,710 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 03:25:44,713 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:25:44,713 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 03:25:45,107 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:25:45,119 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:25:45,120 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:25:45,121 INFO  L87              Difference]: Start difference. First operand 7306 states. Second operand 4 states.
[2020-11-25 03:25:47,729 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:25:47,729 INFO  L93              Difference]: Finished difference Result 6536 states and 10743 transitions.
[2020-11-25 03:25:47,729 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 03:25:47,731 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6536 states and 10743 transitions.
[2020-11-25 03:25:47,777 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 03:25:47,828 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6536 states to 6156 states and 10117 transitions.
[2020-11-25 03:25:47,828 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 13
[2020-11-25 03:25:47,833 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1381
[2020-11-25 03:25:47,833 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6156 states and 10117 transitions.
[2020-11-25 03:25:47,856 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:25:47,856 INFO  L728         BuchiCegarLoop]: Abstraction has 6156 states and 10117 transitions.
[2020-11-25 03:25:47,872 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6156 states and 10117 transitions.
[2020-11-25 03:25:47,955 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6156 to 5072.
[2020-11-25 03:25:47,955 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5072 states.
[2020-11-25 03:25:47,968 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5072 states to 5072 states and 8092 transitions.
[2020-11-25 03:25:47,969 INFO  L751         BuchiCegarLoop]: Abstraction has 5072 states and 8092 transitions.
[2020-11-25 03:25:47,969 INFO  L631         BuchiCegarLoop]: Abstraction has 5072 states and 8092 transitions.
[2020-11-25 03:25:47,969 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 03:25:47,969 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5072 states and 8092 transitions.
[2020-11-25 03:25:48,003 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:25:48,003 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:25:48,003 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:25:48,010 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:25:48,010 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L4979]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4979]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4983]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4987]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]  COND FALSE  !(revert)
[L4991]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4991]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4992]  COND FALSE  !(revert)
[L4995]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4641]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4641]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4642]  COND FALSE  !(revert)
[L4645]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4645]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4646]  COND FALSE  !(revert)
[L4649]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4649]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4650]  COND FALSE  !(revert)
[L4653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4654]  COND FALSE  !(revert)
[L4657]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4657]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4658]  COND FALSE  !(revert)
[L4661]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume msgsender_MSG != null;
[L4607]              Balance[this] := 0;
[L4661]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]  COND FALSE  !(revert)
[L4995]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4996]  COND FALSE  !(revert)
[L4999]  CALL        call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]              assume msgsender_MSG != null;
[L4933]              Balance[this] := 0;
[L4934]              name_RariToken[this] := 920169039;
[L4935]              symbol_RariToken[this] := 1865763617;
[L4936]              decimals_RariToken[this] := 18;
[L4937]              mintStopped_RariToken[this] := false;
[L4999]  RET         call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5000]  COND FALSE  !(revert)
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND TRUE   choice == 21
[L7297]              gas := gas - 21000;
[L7298]  COND FALSE  !(gas >= 0)
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:25:48,059 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:25:48,060 INFO  L82        PathProgramCache]: Analyzing trace with hash -1548972685, now seen corresponding path program 1 times
[2020-11-25 03:25:48,060 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:25:48,072 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:25:48,151 INFO  L134       CoverageAnalysis]: Checked inductivity of 550 backedges. 0 proven. 29 refuted. 0 times theorem prover too weak. 521 trivial. 0 not checked.
[2020-11-25 03:25:48,151 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:25:48,151 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-11-25 03:25:48,153 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:25:48,153 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:25:48,153 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:25:48,153 INFO  L87              Difference]: Start difference. First operand 5072 states and 8092 transitions. cyclomatic complexity: 3022 Second operand 4 states.
[2020-11-25 03:25:48,725 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:25:48,725 INFO  L93              Difference]: Finished difference Result 4685 states and 5402 transitions.
[2020-11-25 03:25:48,725 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 03:25:48,726 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4685 states and 5402 transitions.
[2020-11-25 03:25:48,736 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:25:48,748 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4685 states to 4685 states and 5402 transitions.
[2020-11-25 03:25:48,748 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1073
[2020-11-25 03:25:48,749 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1073
[2020-11-25 03:25:48,749 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4685 states and 5402 transitions.
[2020-11-25 03:25:48,753 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:25:48,753 INFO  L728         BuchiCegarLoop]: Abstraction has 4685 states and 5402 transitions.
[2020-11-25 03:25:48,757 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4685 states and 5402 transitions.
[2020-11-25 03:25:48,787 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4685 to 4685.
[2020-11-25 03:25:48,787 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4685 states.
[2020-11-25 03:25:48,792 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4685 states to 4685 states and 5402 transitions.
[2020-11-25 03:25:48,792 INFO  L751         BuchiCegarLoop]: Abstraction has 4685 states and 5402 transitions.
[2020-11-25 03:25:48,792 INFO  L631         BuchiCegarLoop]: Abstraction has 4685 states and 5402 transitions.
[2020-11-25 03:25:48,792 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 03:25:48,792 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4685 states and 5402 transitions.
[2020-11-25 03:25:48,798 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:25:48,798 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:25:48,798 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:25:48,801 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:25:48,801 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L4979]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4979]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4983]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4987]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]  COND FALSE  !(revert)
[L4991]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4991]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4992]  COND FALSE  !(revert)
[L4995]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4641]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4641]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4642]  COND FALSE  !(revert)
[L4645]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4645]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4646]  COND FALSE  !(revert)
[L4649]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4649]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4650]  COND FALSE  !(revert)
[L4653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4654]  COND FALSE  !(revert)
[L4657]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4657]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4658]  COND FALSE  !(revert)
[L4661]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume msgsender_MSG != null;
[L4607]              Balance[this] := 0;
[L4661]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]  COND FALSE  !(revert)
[L4995]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4996]  COND FALSE  !(revert)
[L4999]  CALL        call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]              assume msgsender_MSG != null;
[L4933]              Balance[this] := 0;
[L4934]              name_RariToken[this] := 920169039;
[L4935]              symbol_RariToken[this] := 1865763617;
[L4936]              decimals_RariToken[this] := 18;
[L4937]              mintStopped_RariToken[this] := false;
[L4999]  RET         call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5000]  COND FALSE  !(revert)
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND TRUE   __exception
[L1415]              __tmp__Balance := Balance;
[L1416]              __tmp__DType := DType;
[L1417]              __tmp__Alloc := Alloc;
[L1418]              __tmp__balance_ADDR := balance_ADDR;
[L1419]              __tmp__M_Ref_int := M_Ref_int;
[L1420]              __tmp__sum__balances0 := sum__balances0;
[L1421]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]              __tmp__sum__allowances1 := sum__allowances1;
[L1424]              __tmp__Length := Length;
[L1425]              __tmp__now := now;
[L1426]              __tmp___owner_Ownable := _owner_Ownable;
[L1427]              __tmp___paused_Pausable := _paused_Pausable;
[L1428]              __tmp___balances_ERC20 := _balances_ERC20;
[L1429]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]              __tmp__name_RariToken := name_RariToken;
[L1432]              __tmp__symbol_RariToken := symbol_RariToken;
[L1433]              __tmp__decimals_RariToken := decimals_RariToken;
[L1434]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND TRUE   !!__tmp___paused_Pausable[this]
[L6526]              revert := true;
[L4671]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND TRUE   revert
[L1435]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]              assume revert || gas < 0;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND TRUE   __exception
[L1415]              __tmp__Balance := Balance;
[L1416]              __tmp__DType := DType;
[L1417]              __tmp__Alloc := Alloc;
[L1418]              __tmp__balance_ADDR := balance_ADDR;
[L1419]              __tmp__M_Ref_int := M_Ref_int;
[L1420]              __tmp__sum__balances0 := sum__balances0;
[L1421]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]              __tmp__sum__allowances1 := sum__allowances1;
[L1424]              __tmp__Length := Length;
[L1425]              __tmp__now := now;
[L1426]              __tmp___owner_Ownable := _owner_Ownable;
[L1427]              __tmp___paused_Pausable := _paused_Pausable;
[L1428]              __tmp___balances_ERC20 := _balances_ERC20;
[L1429]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]              __tmp__name_RariToken := name_RariToken;
[L1432]              __tmp__symbol_RariToken := symbol_RariToken;
[L1433]              __tmp__decimals_RariToken := decimals_RariToken;
[L1434]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND TRUE   !!__tmp___paused_Pausable[this]
[L6526]              revert := true;
[L4671]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND TRUE   revert
[L1435]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]              assume revert || gas < 0;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:25:48,806 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:25:48,806 INFO  L82        PathProgramCache]: Analyzing trace with hash 1221947300, now seen corresponding path program 1 times
[2020-11-25 03:25:48,807 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:25:48,822 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:25:48,994 INFO  L134       CoverageAnalysis]: Checked inductivity of 709 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 703 trivial. 0 not checked.
[2020-11-25 03:25:48,995 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:25:48,995 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 03:25:48,995 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:25:48,995 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 03:25:48,996 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-11-25 03:25:48,996 INFO  L87              Difference]: Start difference. First operand 4685 states and 5402 transitions. cyclomatic complexity: 719 Second operand 14 states.
[2020-11-25 03:25:52,595 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:25:52,595 INFO  L93              Difference]: Finished difference Result 7276 states and 8464 transitions.
[2020-11-25 03:25:52,596 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 03:25:52,596 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7276 states and 8464 transitions.
[2020-11-25 03:25:52,610 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 03:25:52,634 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7276 states to 7276 states and 8464 transitions.
[2020-11-25 03:25:52,634 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1667
[2020-11-25 03:25:52,635 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1667
[2020-11-25 03:25:52,636 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7276 states and 8464 transitions.
[2020-11-25 03:25:52,643 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:25:52,643 INFO  L728         BuchiCegarLoop]: Abstraction has 7276 states and 8464 transitions.
[2020-11-25 03:25:52,647 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7276 states and 8464 transitions.
[2020-11-25 03:25:52,704 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7276 to 6689.
[2020-11-25 03:25:52,704 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6689 states.
[2020-11-25 03:25:52,712 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6689 states to 6689 states and 7855 transitions.
[2020-11-25 03:25:52,713 INFO  L751         BuchiCegarLoop]: Abstraction has 6689 states and 7855 transitions.
[2020-11-25 03:25:52,713 INFO  L631         BuchiCegarLoop]: Abstraction has 6689 states and 7855 transitions.
[2020-11-25 03:25:52,713 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 03:25:52,713 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6689 states and 7855 transitions.
[2020-11-25 03:25:52,721 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 03:25:52,721 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:25:52,721 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:25:52,724 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:25:52,724 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND TRUE   __exception
[L1727]              __tmp__Balance := Balance;
[L1728]              __tmp__DType := DType;
[L1729]              __tmp__Alloc := Alloc;
[L1730]              __tmp__balance_ADDR := balance_ADDR;
[L1731]              __tmp__M_Ref_int := M_Ref_int;
[L1732]              __tmp__sum__balances0 := sum__balances0;
[L1733]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1734]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1735]              __tmp__sum__allowances1 := sum__allowances1;
[L1736]              __tmp__Length := Length;
[L1737]              __tmp__now := now;
[L1738]              __tmp___owner_Ownable := _owner_Ownable;
[L1739]              __tmp___paused_Pausable := _paused_Pausable;
[L1740]              __tmp___balances_ERC20 := _balances_ERC20;
[L1741]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1742]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1743]              __tmp__name_RariToken := name_RariToken;
[L1744]              __tmp__symbol_RariToken := symbol_RariToken;
[L1745]              __tmp__decimals_RariToken := decimals_RariToken;
[L1746]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1747]  CALL        call RariToken_RariToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4943]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L4943]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4944]  COND FALSE  !(revert)
[L4947]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3014]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L3014]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3015]  COND FALSE  !(revert)
[L3018]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              __tmp__Balance[this] := 0;
[L2946]              __tmp___owner_Ownable[this] := null;
[L2948]  COND TRUE   __tmp__DType[this] == RariToken
[L2949]  CALL        call msgSender_s45 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2930]              __ret_0_ := msgsender_MSG;
[L2949]  RET         call msgSender_s45 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2971]              msgSender_s45 := msgSender_s45;
[L2972]              __tmp___owner_Ownable[this] := msgSender_s45;
[L3018]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3019]  COND FALSE  !(revert)
[L4947]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4948]  COND FALSE  !(revert)
[L4951]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3239]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L3239]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3240]  COND FALSE  !(revert)
[L3243]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3014]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L3014]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3015]  COND FALSE  !(revert)
[L3018]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              __tmp__Balance[this] := 0;
[L2946]              __tmp___owner_Ownable[this] := null;
[L2948]  COND TRUE   __tmp__DType[this] == RariToken
[L2949]  CALL        call msgSender_s45 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2930]              __ret_0_ := msgsender_MSG;
[L2949]  RET         call msgSender_s45 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2971]              msgSender_s45 := msgSender_s45;
[L2972]              __tmp___owner_Ownable[this] := msgSender_s45;
[L3018]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3019]  COND FALSE  !(revert)
[L3243]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3244]  COND FALSE  !(revert)
[L3247]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3220]              assume msgsender_MSG != null;
[L3221]              __tmp__Balance[this] := 0;
[L3222]              __tmp___paused_Pausable[this] := false;
[L3224]              __tmp___paused_Pausable[this] := false;
[L3247]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L4951]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4952]  COND FALSE  !(revert)
[L4955]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3353]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3338]              assume msgsender_MSG != null;
[L3339]              __tmp__Balance[this] := 0;
[L3353]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3354]  COND FALSE  !(revert)
[L4955]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4956]  COND FALSE  !(revert)
[L4959]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3551]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L3551]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3552]  COND FALSE  !(revert)
[L3555]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3353]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3338]              assume msgsender_MSG != null;
[L3339]              __tmp__Balance[this] := 0;
[L3353]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3354]  COND FALSE  !(revert)
[L3555]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3556]  COND FALSE  !(revert)
[L3559]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3526]              assume msgsender_MSG != null;
[L3527]              __tmp__Balance[this] := 0;
[L3528]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3529]              __tmp__sum__balances0[this] := 0;
[L3530]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3531]              __tmp__sum__allowances1[this] := 0;
[L3532]              __tmp___totalSupply_ERC20[this] := 0;
[L3559]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3560]  COND FALSE  !(revert)
[L4959]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4960]  COND FALSE  !(revert)
[L4963]  CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4613]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L4613]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4614]  COND FALSE  !(revert)
[L4617]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3014]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L3014]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3015]  COND FALSE  !(revert)
[L3018]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              __tmp__Balance[this] := 0;
[L2946]              __tmp___owner_Ownable[this] := null;
[L2948]  COND TRUE   __tmp__DType[this] == RariToken
[L2949]  CALL        call msgSender_s45 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2930]              __ret_0_ := msgsender_MSG;
[L2949]  RET         call msgSender_s45 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2971]              msgSender_s45 := msgSender_s45;
[L2972]              __tmp___owner_Ownable[this] := msgSender_s45;
[L3018]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3019]  COND FALSE  !(revert)
[L4617]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4618]  COND FALSE  !(revert)
[L4621]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3239]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L3239]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3240]  COND FALSE  !(revert)
[L3243]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3014]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L3014]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3015]  COND FALSE  !(revert)
[L3018]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2944]              assume msgsender_MSG != null;
[L2945]              __tmp__Balance[this] := 0;
[L2946]              __tmp___owner_Ownable[this] := null;
[L2948]  COND TRUE   __tmp__DType[this] == RariToken
[L2949]  CALL        call msgSender_s45 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2930]              __ret_0_ := msgsender_MSG;
[L2949]  RET         call msgSender_s45 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2971]              msgSender_s45 := msgSender_s45;
[L2972]              __tmp___owner_Ownable[this] := msgSender_s45;
[L3018]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3019]  COND FALSE  !(revert)
[L3243]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3244]  COND FALSE  !(revert)
[L3247]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3220]              assume msgsender_MSG != null;
[L3221]              __tmp__Balance[this] := 0;
[L3222]              __tmp___paused_Pausable[this] := false;
[L3224]              __tmp___paused_Pausable[this] := false;
[L3247]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L4621]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4622]  COND FALSE  !(revert)
[L4625]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3353]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3338]              assume msgsender_MSG != null;
[L3339]              __tmp__Balance[this] := 0;
[L3353]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3354]  COND FALSE  !(revert)
[L4625]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4626]  COND FALSE  !(revert)
[L4629]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3551]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2914]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              __tmp__Balance[this] := 0;
[L2914]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2915]  COND FALSE  !(revert)
[L3551]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3552]  COND FALSE  !(revert)
[L3555]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3353]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3338]              assume msgsender_MSG != null;
[L3339]              __tmp__Balance[this] := 0;
[L3353]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3354]  COND FALSE  !(revert)
[L3555]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3556]  COND FALSE  !(revert)
[L3559]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3526]              assume msgsender_MSG != null;
[L3527]              __tmp__Balance[this] := 0;
[L3528]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3529]              __tmp__sum__balances0[this] := 0;
[L3530]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L3531]              __tmp__sum__allowances1[this] := 0;
[L3532]              __tmp___totalSupply_ERC20[this] := 0;
[L3559]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3560]  COND FALSE  !(revert)
[L4629]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4630]  COND FALSE  !(revert)
[L4633]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4598]              assume msgsender_MSG != null;
[L4599]              __tmp__Balance[this] := 0;
[L4633]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4634]  COND FALSE  !(revert)
[L4963]  RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4964]  COND FALSE  !(revert)
[L4967]  CALL        call RariToken_RariToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4920]              assume msgsender_MSG != null;
[L4921]              __tmp__Balance[this] := 0;
[L4922]              __tmp__name_RariToken[this] := 920169039;
[L4923]              __tmp__symbol_RariToken[this] := 1865763617;
[L4924]              __tmp__decimals_RariToken[this] := 18;
[L4925]              __tmp__mintStopped_RariToken[this] := false;
[L4967]  RET         call RariToken_RariToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4968]  COND FALSE  !(revert)
[L1747]  RET         call RariToken_RariToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1748]              assume revert || gas < 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND TRUE   __exception
[L1415]              __tmp__Balance := Balance;
[L1416]              __tmp__DType := DType;
[L1417]              __tmp__Alloc := Alloc;
[L1418]              __tmp__balance_ADDR := balance_ADDR;
[L1419]              __tmp__M_Ref_int := M_Ref_int;
[L1420]              __tmp__sum__balances0 := sum__balances0;
[L1421]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]              __tmp__sum__allowances1 := sum__allowances1;
[L1424]              __tmp__Length := Length;
[L1425]              __tmp__now := now;
[L1426]              __tmp___owner_Ownable := _owner_Ownable;
[L1427]              __tmp___paused_Pausable := _paused_Pausable;
[L1428]              __tmp___balances_ERC20 := _balances_ERC20;
[L1429]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]              __tmp__name_RariToken := name_RariToken;
[L1432]              __tmp__symbol_RariToken := symbol_RariToken;
[L1433]              __tmp__decimals_RariToken := decimals_RariToken;
[L1434]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND TRUE   !!__tmp___paused_Pausable[this]
[L6526]              revert := true;
[L4671]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND TRUE   revert
[L1435]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]              assume revert || gas < 0;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND TRUE   __exception
[L1415]              __tmp__Balance := Balance;
[L1416]              __tmp__DType := DType;
[L1417]              __tmp__Alloc := Alloc;
[L1418]              __tmp__balance_ADDR := balance_ADDR;
[L1419]              __tmp__M_Ref_int := M_Ref_int;
[L1420]              __tmp__sum__balances0 := sum__balances0;
[L1421]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]              __tmp__sum__allowances1 := sum__allowances1;
[L1424]              __tmp__Length := Length;
[L1425]              __tmp__now := now;
[L1426]              __tmp___owner_Ownable := _owner_Ownable;
[L1427]              __tmp___paused_Pausable := _paused_Pausable;
[L1428]              __tmp___balances_ERC20 := _balances_ERC20;
[L1429]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]              __tmp__name_RariToken := name_RariToken;
[L1432]              __tmp__symbol_RariToken := symbol_RariToken;
[L1433]              __tmp__decimals_RariToken := decimals_RariToken;
[L1434]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L4671]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  COND TRUE   __tmp__DType[this] == RariToken
[L4676]  CALL        call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3608]  COND FALSE  !(__tmp__DType[this] == RariToken)
[L3613]  COND TRUE   __tmp__DType[this] == ERC20Pausable
[L3614]  CALL        call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2930]              __ret_0_ := msgsender_MSG;
[L3614]  RET         call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3615]  COND FALSE  !(revert)
[L3626]  COND TRUE   __tmp__DType[this] == RariToken
[L3627]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4233]              __var_16 := null;
[L4234]  COND TRUE   !(sender_s657 != null)
[L4235]              revert := true;
[L3627]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3628]  COND TRUE   revert
[L4676]  RET         call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4677]  COND TRUE   revert
[L1435]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]              assume revert || gas < 0;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:25:52,729 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:25:52,729 INFO  L82        PathProgramCache]: Analyzing trace with hash -1741639001, now seen corresponding path program 1 times
[2020-11-25 03:25:52,730 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:25:52,743 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:25:52,867 INFO  L134       CoverageAnalysis]: Checked inductivity of 703 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 703 trivial. 0 not checked.
[2020-11-25 03:25:52,868 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:25:52,868 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 03:25:52,868 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:25:52,868 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:25:52,868 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:25:52,868 INFO  L87              Difference]: Start difference. First operand 6689 states and 7855 transitions. cyclomatic complexity: 1170 Second operand 4 states.
[2020-11-25 03:25:53,419 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:25:53,419 INFO  L93              Difference]: Finished difference Result 8035 states and 9745 transitions.
[2020-11-25 03:25:53,419 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 03:25:53,419 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8035 states and 9745 transitions.
[2020-11-25 03:25:53,440 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 24
[2020-11-25 03:25:53,466 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8035 states to 7783 states and 9469 transitions.
[2020-11-25 03:25:53,467 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1816
[2020-11-25 03:25:53,468 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1816
[2020-11-25 03:25:53,468 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7783 states and 9469 transitions.
[2020-11-25 03:25:53,475 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:25:53,475 INFO  L728         BuchiCegarLoop]: Abstraction has 7783 states and 9469 transitions.
[2020-11-25 03:25:53,479 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7783 states and 9469 transitions.
[2020-11-25 03:25:53,549 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7783 to 7167.
[2020-11-25 03:25:53,549 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7167 states.
[2020-11-25 03:25:53,560 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7167 states to 7167 states and 8572 transitions.
[2020-11-25 03:25:53,560 INFO  L751         BuchiCegarLoop]: Abstraction has 7167 states and 8572 transitions.
[2020-11-25 03:25:53,560 INFO  L631         BuchiCegarLoop]: Abstraction has 7167 states and 8572 transitions.
[2020-11-25 03:25:53,560 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 03:25:53,560 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7167 states and 8572 transitions.
[2020-11-25 03:25:53,569 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 03:25:53,569 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:25:53,569 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:25:53,572 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:25:53,572 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L4979]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4979]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4983]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4987]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]  COND FALSE  !(revert)
[L4991]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4991]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4992]  COND FALSE  !(revert)
[L4995]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4641]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4641]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4642]  COND FALSE  !(revert)
[L4645]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4645]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4646]  COND FALSE  !(revert)
[L4649]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4649]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4650]  COND FALSE  !(revert)
[L4653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4654]  COND FALSE  !(revert)
[L4657]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4657]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4658]  COND FALSE  !(revert)
[L4661]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume msgsender_MSG != null;
[L4607]              Balance[this] := 0;
[L4661]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]  COND FALSE  !(revert)
[L4995]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4996]  COND FALSE  !(revert)
[L4999]  CALL        call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]              assume msgsender_MSG != null;
[L4933]              Balance[this] := 0;
[L4934]              name_RariToken[this] := 920169039;
[L4935]              symbol_RariToken[this] := 1865763617;
[L4936]              decimals_RariToken[this] := 18;
[L4937]              mintStopped_RariToken[this] := false;
[L4999]  RET         call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5000]  COND FALSE  !(revert)
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND TRUE   __exception
[L1415]              __tmp__Balance := Balance;
[L1416]              __tmp__DType := DType;
[L1417]              __tmp__Alloc := Alloc;
[L1418]              __tmp__balance_ADDR := balance_ADDR;
[L1419]              __tmp__M_Ref_int := M_Ref_int;
[L1420]              __tmp__sum__balances0 := sum__balances0;
[L1421]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]              __tmp__sum__allowances1 := sum__allowances1;
[L1424]              __tmp__Length := Length;
[L1425]              __tmp__now := now;
[L1426]              __tmp___owner_Ownable := _owner_Ownable;
[L1427]              __tmp___paused_Pausable := _paused_Pausable;
[L1428]              __tmp___balances_ERC20 := _balances_ERC20;
[L1429]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]              __tmp__name_RariToken := name_RariToken;
[L1432]              __tmp__symbol_RariToken := symbol_RariToken;
[L1433]              __tmp__decimals_RariToken := decimals_RariToken;
[L1434]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L4671]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  COND TRUE   __tmp__DType[this] == RariToken
[L4676]  CALL        call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3608]  COND FALSE  !(__tmp__DType[this] == RariToken)
[L3613]  COND TRUE   __tmp__DType[this] == ERC20Pausable
[L3614]  CALL        call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2930]              __ret_0_ := msgsender_MSG;
[L3614]  RET         call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3615]  COND FALSE  !(revert)
[L3626]  COND TRUE   __tmp__DType[this] == RariToken
[L3627]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4233]              __var_16 := null;
[L4234]  COND TRUE   !(sender_s657 != null)
[L4235]              revert := true;
[L3627]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3628]  COND TRUE   revert
[L4676]  RET         call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4677]  COND TRUE   revert
[L1435]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]              assume revert || gas < 0;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND TRUE   __exception
[L1415]              __tmp__Balance := Balance;
[L1416]              __tmp__DType := DType;
[L1417]              __tmp__Alloc := Alloc;
[L1418]              __tmp__balance_ADDR := balance_ADDR;
[L1419]              __tmp__M_Ref_int := M_Ref_int;
[L1420]              __tmp__sum__balances0 := sum__balances0;
[L1421]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]              __tmp__sum__allowances1 := sum__allowances1;
[L1424]              __tmp__Length := Length;
[L1425]              __tmp__now := now;
[L1426]              __tmp___owner_Ownable := _owner_Ownable;
[L1427]              __tmp___paused_Pausable := _paused_Pausable;
[L1428]              __tmp___balances_ERC20 := _balances_ERC20;
[L1429]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]              __tmp__name_RariToken := name_RariToken;
[L1432]              __tmp__symbol_RariToken := symbol_RariToken;
[L1433]              __tmp__decimals_RariToken := decimals_RariToken;
[L1434]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L4671]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  COND TRUE   __tmp__DType[this] == RariToken
[L4676]  CALL        call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3608]  COND FALSE  !(__tmp__DType[this] == RariToken)
[L3613]  COND TRUE   __tmp__DType[this] == ERC20Pausable
[L3614]  CALL        call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2930]              __ret_0_ := msgsender_MSG;
[L3614]  RET         call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3615]  COND FALSE  !(revert)
[L3626]  COND TRUE   __tmp__DType[this] == RariToken
[L3627]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4233]              __var_16 := null;
[L4234]  COND TRUE   !(sender_s657 != null)
[L4235]              revert := true;
[L3627]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3628]  COND TRUE   revert
[L4676]  RET         call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4677]  COND TRUE   revert
[L1435]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]              assume revert || gas < 0;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:25:53,577 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:25:53,577 INFO  L82        PathProgramCache]: Analyzing trace with hash 807515008, now seen corresponding path program 1 times
[2020-11-25 03:25:53,578 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:25:53,594 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:25:53,674 INFO  L134       CoverageAnalysis]: Checked inductivity of 709 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 709 trivial. 0 not checked.
[2020-11-25 03:25:53,675 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:25:53,675 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:25:53,675 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:25:53,675 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:25:53,675 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:25:53,675 INFO  L87              Difference]: Start difference. First operand 7167 states and 8572 transitions. cyclomatic complexity: 1409 Second operand 3 states.
[2020-11-25 03:25:53,725 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:25:53,725 INFO  L93              Difference]: Finished difference Result 7179 states and 8588 transitions.
[2020-11-25 03:25:53,725 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:25:53,725 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7179 states and 8588 transitions.
[2020-11-25 03:25:53,740 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 03:25:53,761 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7179 states to 7179 states and 8588 transitions.
[2020-11-25 03:25:53,761 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1711
[2020-11-25 03:25:53,762 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1711
[2020-11-25 03:25:53,762 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7179 states and 8588 transitions.
[2020-11-25 03:25:53,767 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:25:53,767 INFO  L728         BuchiCegarLoop]: Abstraction has 7179 states and 8588 transitions.
[2020-11-25 03:25:53,772 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7179 states and 8588 transitions.
[2020-11-25 03:25:53,847 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7179 to 7169.
[2020-11-25 03:25:53,847 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7169 states.
[2020-11-25 03:25:53,855 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7169 states to 7169 states and 8574 transitions.
[2020-11-25 03:25:53,855 INFO  L751         BuchiCegarLoop]: Abstraction has 7169 states and 8574 transitions.
[2020-11-25 03:25:53,855 INFO  L631         BuchiCegarLoop]: Abstraction has 7169 states and 8574 transitions.
[2020-11-25 03:25:53,855 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 03:25:53,855 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7169 states and 8574 transitions.
[2020-11-25 03:25:53,863 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 03:25:53,863 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:25:53,863 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:25:53,864 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:25:53,864 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L4979]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4979]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4983]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4987]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]  COND FALSE  !(revert)
[L4991]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4991]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4992]  COND FALSE  !(revert)
[L4995]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4641]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4641]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4642]  COND FALSE  !(revert)
[L4645]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4645]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4646]  COND FALSE  !(revert)
[L4649]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4649]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4650]  COND FALSE  !(revert)
[L4653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4654]  COND FALSE  !(revert)
[L4657]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4657]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4658]  COND FALSE  !(revert)
[L4661]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume msgsender_MSG != null;
[L4607]              Balance[this] := 0;
[L4661]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]  COND FALSE  !(revert)
[L4995]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4996]  COND FALSE  !(revert)
[L4999]  CALL        call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]              assume msgsender_MSG != null;
[L4933]              Balance[this] := 0;
[L4934]              name_RariToken[this] := 920169039;
[L4935]              symbol_RariToken[this] := 1865763617;
[L4936]              decimals_RariToken[this] := 18;
[L4937]              mintStopped_RariToken[this] := false;
[L4999]  RET         call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5000]  COND FALSE  !(revert)
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND TRUE   __exception
[L1415]              __tmp__Balance := Balance;
[L1416]              __tmp__DType := DType;
[L1417]              __tmp__Alloc := Alloc;
[L1418]              __tmp__balance_ADDR := balance_ADDR;
[L1419]              __tmp__M_Ref_int := M_Ref_int;
[L1420]              __tmp__sum__balances0 := sum__balances0;
[L1421]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]              __tmp__sum__allowances1 := sum__allowances1;
[L1424]              __tmp__Length := Length;
[L1425]              __tmp__now := now;
[L1426]              __tmp___owner_Ownable := _owner_Ownable;
[L1427]              __tmp___paused_Pausable := _paused_Pausable;
[L1428]              __tmp___balances_ERC20 := _balances_ERC20;
[L1429]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]              __tmp__name_RariToken := name_RariToken;
[L1432]              __tmp__symbol_RariToken := symbol_RariToken;
[L1433]              __tmp__decimals_RariToken := decimals_RariToken;
[L1434]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L4671]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  COND TRUE   __tmp__DType[this] == RariToken
[L4676]  CALL        call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3608]  COND TRUE   __tmp__DType[this] == RariToken
[L3609]  CALL        call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2930]              __ret_0_ := msgsender_MSG;
[L3609]  RET         call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3610]  COND FALSE  !(revert)
[L3626]  COND TRUE   __tmp__DType[this] == RariToken
[L3627]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4233]              __var_16 := null;
[L4234]  COND TRUE   !(sender_s657 != null)
[L4235]              revert := true;
[L3627]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3628]  COND TRUE   revert
[L4676]  RET         call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4677]  COND TRUE   revert
[L1435]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]              assume revert || gas < 0;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND TRUE   __exception
[L1415]              __tmp__Balance := Balance;
[L1416]              __tmp__DType := DType;
[L1417]              __tmp__Alloc := Alloc;
[L1418]              __tmp__balance_ADDR := balance_ADDR;
[L1419]              __tmp__M_Ref_int := M_Ref_int;
[L1420]              __tmp__sum__balances0 := sum__balances0;
[L1421]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]              __tmp__sum__allowances1 := sum__allowances1;
[L1424]              __tmp__Length := Length;
[L1425]              __tmp__now := now;
[L1426]              __tmp___owner_Ownable := _owner_Ownable;
[L1427]              __tmp___paused_Pausable := _paused_Pausable;
[L1428]              __tmp___balances_ERC20 := _balances_ERC20;
[L1429]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]              __tmp__name_RariToken := name_RariToken;
[L1432]              __tmp__symbol_RariToken := symbol_RariToken;
[L1433]              __tmp__decimals_RariToken := decimals_RariToken;
[L1434]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L4671]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  COND TRUE   __tmp__DType[this] == RariToken
[L4676]  CALL        call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3608]  COND TRUE   __tmp__DType[this] == RariToken
[L3609]  CALL        call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2930]              __ret_0_ := msgsender_MSG;
[L3609]  RET         call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3610]  COND FALSE  !(revert)
[L3626]  COND TRUE   __tmp__DType[this] == RariToken
[L3627]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4233]              __var_16 := null;
[L4234]  COND TRUE   !(sender_s657 != null)
[L4235]              revert := true;
[L3627]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3628]  COND TRUE   revert
[L4676]  RET         call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4677]  COND TRUE   revert
[L1435]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]              assume revert || gas < 0;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:25:53,875 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:25:53,875 INFO  L82        PathProgramCache]: Analyzing trace with hash -1707537425, now seen corresponding path program 1 times
[2020-11-25 03:25:53,875 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:25:53,888 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:25:53,979 INFO  L134       CoverageAnalysis]: Checked inductivity of 709 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 709 trivial. 0 not checked.
[2020-11-25 03:25:53,979 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:25:53,979 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 03:25:53,979 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:25:53,979 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 03:25:53,979 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 03:25:53,979 INFO  L87              Difference]: Start difference. First operand 7169 states and 8574 transitions. cyclomatic complexity: 1409 Second operand 9 states.
[2020-11-25 03:25:54,082 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:25:54,082 INFO  L93              Difference]: Finished difference Result 7209 states and 8624 transitions.
[2020-11-25 03:25:54,082 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 03:25:54,082 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7209 states and 8624 transitions.
[2020-11-25 03:25:54,097 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 03:25:54,114 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7209 states to 7173 states and 8582 transitions.
[2020-11-25 03:25:54,114 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1708
[2020-11-25 03:25:54,115 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1708
[2020-11-25 03:25:54,115 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7173 states and 8582 transitions.
[2020-11-25 03:25:54,120 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:25:54,120 INFO  L728         BuchiCegarLoop]: Abstraction has 7173 states and 8582 transitions.
[2020-11-25 03:25:54,124 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7173 states and 8582 transitions.
[2020-11-25 03:25:54,166 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7173 to 7173.
[2020-11-25 03:25:54,166 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7173 states.
[2020-11-25 03:25:54,175 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7173 states to 7173 states and 8582 transitions.
[2020-11-25 03:25:54,175 INFO  L751         BuchiCegarLoop]: Abstraction has 7173 states and 8582 transitions.
[2020-11-25 03:25:54,175 INFO  L631         BuchiCegarLoop]: Abstraction has 7173 states and 8582 transitions.
[2020-11-25 03:25:54,175 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 03:25:54,175 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7173 states and 8582 transitions.
[2020-11-25 03:25:54,183 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 03:25:54,183 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:25:54,183 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:25:54,184 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:25:54,184 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L4979]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4979]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4983]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4987]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]  COND FALSE  !(revert)
[L4991]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4991]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4992]  COND FALSE  !(revert)
[L4995]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4641]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4641]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4642]  COND FALSE  !(revert)
[L4645]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4645]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4646]  COND FALSE  !(revert)
[L4649]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4649]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4650]  COND FALSE  !(revert)
[L4653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4654]  COND FALSE  !(revert)
[L4657]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4657]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4658]  COND FALSE  !(revert)
[L4661]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume msgsender_MSG != null;
[L4607]              Balance[this] := 0;
[L4661]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]  COND FALSE  !(revert)
[L4995]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4996]  COND FALSE  !(revert)
[L4999]  CALL        call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]              assume msgsender_MSG != null;
[L4933]              Balance[this] := 0;
[L4934]              name_RariToken[this] := 920169039;
[L4935]              symbol_RariToken[this] := 1865763617;
[L4936]              decimals_RariToken[this] := 18;
[L4937]              mintStopped_RariToken[this] := false;
[L4999]  RET         call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5000]  COND FALSE  !(revert)
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND TRUE   __exception
[L1415]              __tmp__Balance := Balance;
[L1416]              __tmp__DType := DType;
[L1417]              __tmp__Alloc := Alloc;
[L1418]              __tmp__balance_ADDR := balance_ADDR;
[L1419]              __tmp__M_Ref_int := M_Ref_int;
[L1420]              __tmp__sum__balances0 := sum__balances0;
[L1421]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]              __tmp__sum__allowances1 := sum__allowances1;
[L1424]              __tmp__Length := Length;
[L1425]              __tmp__now := now;
[L1426]              __tmp___owner_Ownable := _owner_Ownable;
[L1427]              __tmp___paused_Pausable := _paused_Pausable;
[L1428]              __tmp___balances_ERC20 := _balances_ERC20;
[L1429]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]              __tmp__name_RariToken := name_RariToken;
[L1432]              __tmp__symbol_RariToken := symbol_RariToken;
[L1433]              __tmp__decimals_RariToken := decimals_RariToken;
[L1434]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L4671]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  COND TRUE   __tmp__DType[this] == RariToken
[L4676]  CALL        call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3608]  COND TRUE   __tmp__DType[this] == RariToken
[L3609]  CALL        call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2930]              __ret_0_ := msgsender_MSG;
[L3609]  RET         call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3610]  COND FALSE  !(revert)
[L3626]  COND TRUE   __tmp__DType[this] == RariToken
[L3627]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(sender_s657 != null))
[L4238]              __var_17 := null;
[L4239]  COND TRUE   !(recipient_s657 != null)
[L4240]              revert := true;
[L3627]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3628]  COND TRUE   revert
[L4676]  RET         call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4677]  COND TRUE   revert
[L1435]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]              assume revert || gas < 0;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND TRUE   __exception
[L1415]              __tmp__Balance := Balance;
[L1416]              __tmp__DType := DType;
[L1417]              __tmp__Alloc := Alloc;
[L1418]              __tmp__balance_ADDR := balance_ADDR;
[L1419]              __tmp__M_Ref_int := M_Ref_int;
[L1420]              __tmp__sum__balances0 := sum__balances0;
[L1421]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]              __tmp__sum__allowances1 := sum__allowances1;
[L1424]              __tmp__Length := Length;
[L1425]              __tmp__now := now;
[L1426]              __tmp___owner_Ownable := _owner_Ownable;
[L1427]              __tmp___paused_Pausable := _paused_Pausable;
[L1428]              __tmp___balances_ERC20 := _balances_ERC20;
[L1429]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]              __tmp__name_RariToken := name_RariToken;
[L1432]              __tmp__symbol_RariToken := symbol_RariToken;
[L1433]              __tmp__decimals_RariToken := decimals_RariToken;
[L1434]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L4671]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  COND TRUE   __tmp__DType[this] == RariToken
[L4676]  CALL        call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3608]  COND TRUE   __tmp__DType[this] == RariToken
[L3609]  CALL        call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2930]              __ret_0_ := msgsender_MSG;
[L3609]  RET         call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3610]  COND FALSE  !(revert)
[L3626]  COND TRUE   __tmp__DType[this] == RariToken
[L3627]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(sender_s657 != null))
[L4238]              __var_17 := null;
[L4239]  COND TRUE   !(recipient_s657 != null)
[L4240]              revert := true;
[L3627]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3628]  COND TRUE   revert
[L4676]  RET         call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4677]  COND TRUE   revert
[L1435]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]              assume revert || gas < 0;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:25:54,189 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:25:54,189 INFO  L82        PathProgramCache]: Analyzing trace with hash -431002039, now seen corresponding path program 1 times
[2020-11-25 03:25:54,189 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:25:54,201 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:25:54,322 INFO  L134       CoverageAnalysis]: Checked inductivity of 709 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 709 trivial. 0 not checked.
[2020-11-25 03:25:54,322 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:25:54,322 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 03:25:54,323 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:25:54,323 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 03:25:54,323 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 03:25:54,323 INFO  L87              Difference]: Start difference. First operand 7173 states and 8582 transitions. cyclomatic complexity: 1413 Second operand 8 states.
[2020-11-25 03:25:54,387 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:25:54,387 INFO  L93              Difference]: Finished difference Result 7331 states and 8774 transitions.
[2020-11-25 03:25:54,387 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 03:25:54,388 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7331 states and 8774 transitions.
[2020-11-25 03:25:54,402 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 03:25:54,418 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7331 states to 7323 states and 8766 transitions.
[2020-11-25 03:25:54,418 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1752
[2020-11-25 03:25:54,419 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1752
[2020-11-25 03:25:54,419 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7323 states and 8766 transitions.
[2020-11-25 03:25:54,424 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:25:54,424 INFO  L728         BuchiCegarLoop]: Abstraction has 7323 states and 8766 transitions.
[2020-11-25 03:25:54,428 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7323 states and 8766 transitions.
[2020-11-25 03:25:54,471 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7323 to 7291.
[2020-11-25 03:25:54,471 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7291 states.
[2020-11-25 03:25:54,480 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7291 states to 7291 states and 8727 transitions.
[2020-11-25 03:25:54,480 INFO  L751         BuchiCegarLoop]: Abstraction has 7291 states and 8727 transitions.
[2020-11-25 03:25:54,480 INFO  L631         BuchiCegarLoop]: Abstraction has 7291 states and 8727 transitions.
[2020-11-25 03:25:54,480 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 03:25:54,480 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7291 states and 8727 transitions.
[2020-11-25 03:25:54,488 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 03:25:54,489 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:25:54,489 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:25:54,490 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:25:54,490 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L4979]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4979]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4983]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4987]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]  COND FALSE  !(revert)
[L4991]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4991]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4992]  COND FALSE  !(revert)
[L4995]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4641]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4641]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4642]  COND FALSE  !(revert)
[L4645]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4645]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4646]  COND FALSE  !(revert)
[L4649]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4649]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4650]  COND FALSE  !(revert)
[L4653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4654]  COND FALSE  !(revert)
[L4657]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4657]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4658]  COND FALSE  !(revert)
[L4661]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume msgsender_MSG != null;
[L4607]              Balance[this] := 0;
[L4661]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]  COND FALSE  !(revert)
[L4995]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4996]  COND FALSE  !(revert)
[L4999]  CALL        call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]              assume msgsender_MSG != null;
[L4933]              Balance[this] := 0;
[L4934]              name_RariToken[this] := 920169039;
[L4935]              symbol_RariToken[this] := 1865763617;
[L4936]              decimals_RariToken[this] := 18;
[L4937]              mintStopped_RariToken[this] := false;
[L4999]  RET         call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5000]  COND FALSE  !(revert)
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND TRUE   __exception
[L1415]              __tmp__Balance := Balance;
[L1416]              __tmp__DType := DType;
[L1417]              __tmp__Alloc := Alloc;
[L1418]              __tmp__balance_ADDR := balance_ADDR;
[L1419]              __tmp__M_Ref_int := M_Ref_int;
[L1420]              __tmp__sum__balances0 := sum__balances0;
[L1421]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]              __tmp__sum__allowances1 := sum__allowances1;
[L1424]              __tmp__Length := Length;
[L1425]              __tmp__now := now;
[L1426]              __tmp___owner_Ownable := _owner_Ownable;
[L1427]              __tmp___paused_Pausable := _paused_Pausable;
[L1428]              __tmp___balances_ERC20 := _balances_ERC20;
[L1429]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]              __tmp__name_RariToken := name_RariToken;
[L1432]              __tmp__symbol_RariToken := symbol_RariToken;
[L1433]              __tmp__decimals_RariToken := decimals_RariToken;
[L1434]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L4671]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  COND TRUE   __tmp__DType[this] == RariToken
[L4676]  CALL        call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3608]  COND FALSE  !(__tmp__DType[this] == RariToken)
[L3613]  COND TRUE   __tmp__DType[this] == ERC20Pausable
[L3614]  CALL        call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2930]              __ret_0_ := msgsender_MSG;
[L3614]  RET         call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3615]  COND FALSE  !(revert)
[L3626]  COND FALSE  !(__tmp__DType[this] == RariToken)
[L3631]  COND TRUE   __tmp__DType[this] == ERC20Pausable
[L3632]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(sender_s657 != null))
[L4238]              __var_17 := null;
[L4239]  COND FALSE  !(!(recipient_s657 != null))
[L4243]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3426]  COND TRUE   !(b_s331 <= a_s331)
[L3427]              revert := true;
[L4243]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4244]  COND TRUE   revert
[L3632]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3633]  COND TRUE   revert
[L4676]  RET         call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4677]  COND TRUE   revert
[L1435]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]              assume revert || gas < 0;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND TRUE   __exception
[L1415]              __tmp__Balance := Balance;
[L1416]              __tmp__DType := DType;
[L1417]              __tmp__Alloc := Alloc;
[L1418]              __tmp__balance_ADDR := balance_ADDR;
[L1419]              __tmp__M_Ref_int := M_Ref_int;
[L1420]              __tmp__sum__balances0 := sum__balances0;
[L1421]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]              __tmp__sum__allowances1 := sum__allowances1;
[L1424]              __tmp__Length := Length;
[L1425]              __tmp__now := now;
[L1426]              __tmp___owner_Ownable := _owner_Ownable;
[L1427]              __tmp___paused_Pausable := _paused_Pausable;
[L1428]              __tmp___balances_ERC20 := _balances_ERC20;
[L1429]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]              __tmp__name_RariToken := name_RariToken;
[L1432]              __tmp__symbol_RariToken := symbol_RariToken;
[L1433]              __tmp__decimals_RariToken := decimals_RariToken;
[L1434]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L4671]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  COND TRUE   __tmp__DType[this] == RariToken
[L4676]  CALL        call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3608]  COND FALSE  !(__tmp__DType[this] == RariToken)
[L3613]  COND TRUE   __tmp__DType[this] == ERC20Pausable
[L3614]  CALL        call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2930]              __ret_0_ := msgsender_MSG;
[L3614]  RET         call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3615]  COND FALSE  !(revert)
[L3626]  COND FALSE  !(__tmp__DType[this] == RariToken)
[L3631]  COND TRUE   __tmp__DType[this] == ERC20Pausable
[L3632]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(sender_s657 != null))
[L4238]              __var_17 := null;
[L4239]  COND FALSE  !(!(recipient_s657 != null))
[L4243]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3426]  COND TRUE   !(b_s331 <= a_s331)
[L3427]              revert := true;
[L4243]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4244]  COND TRUE   revert
[L3632]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3633]  COND TRUE   revert
[L4676]  RET         call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4677]  COND TRUE   revert
[L1435]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]              assume revert || gas < 0;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:25:54,494 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:25:54,494 INFO  L82        PathProgramCache]: Analyzing trace with hash 1357056275, now seen corresponding path program 1 times
[2020-11-25 03:25:54,495 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:25:54,506 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:25:54,595 INFO  L134       CoverageAnalysis]: Checked inductivity of 709 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 709 trivial. 0 not checked.
[2020-11-25 03:25:54,595 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:25:54,596 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 03:25:54,596 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:25:54,596 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:25:54,596 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:25:54,596 INFO  L87              Difference]: Start difference. First operand 7291 states and 8727 transitions. cyclomatic complexity: 1440 Second operand 4 states.
[2020-11-25 03:25:54,654 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:25:54,654 INFO  L93              Difference]: Finished difference Result 7323 states and 8763 transitions.
[2020-11-25 03:25:54,654 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 03:25:54,654 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7323 states and 8763 transitions.
[2020-11-25 03:25:54,671 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 03:25:54,689 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7323 states to 7323 states and 8763 transitions.
[2020-11-25 03:25:54,689 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1766
[2020-11-25 03:25:54,690 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1766
[2020-11-25 03:25:54,690 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7323 states and 8763 transitions.
[2020-11-25 03:25:54,695 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:25:54,695 INFO  L728         BuchiCegarLoop]: Abstraction has 7323 states and 8763 transitions.
[2020-11-25 03:25:54,699 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7323 states and 8763 transitions.
[2020-11-25 03:25:54,738 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7323 to 7309.
[2020-11-25 03:25:54,738 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7309 states.
[2020-11-25 03:25:54,746 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7309 states to 7309 states and 8745 transitions.
[2020-11-25 03:25:54,746 INFO  L751         BuchiCegarLoop]: Abstraction has 7309 states and 8745 transitions.
[2020-11-25 03:25:54,747 INFO  L631         BuchiCegarLoop]: Abstraction has 7309 states and 8745 transitions.
[2020-11-25 03:25:54,747 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 03:25:54,747 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7309 states and 8745 transitions.
[2020-11-25 03:25:54,754 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 03:25:54,754 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:25:54,754 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:25:54,755 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:25:54,755 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L4979]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4979]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4983]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4987]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]  COND FALSE  !(revert)
[L4991]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4991]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4992]  COND FALSE  !(revert)
[L4995]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4641]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4641]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4642]  COND FALSE  !(revert)
[L4645]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4645]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4646]  COND FALSE  !(revert)
[L4649]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4649]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4650]  COND FALSE  !(revert)
[L4653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4654]  COND FALSE  !(revert)
[L4657]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4657]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4658]  COND FALSE  !(revert)
[L4661]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume msgsender_MSG != null;
[L4607]              Balance[this] := 0;
[L4661]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]  COND FALSE  !(revert)
[L4995]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4996]  COND FALSE  !(revert)
[L4999]  CALL        call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]              assume msgsender_MSG != null;
[L4933]              Balance[this] := 0;
[L4934]              name_RariToken[this] := 920169039;
[L4935]              symbol_RariToken[this] := 1865763617;
[L4936]              decimals_RariToken[this] := 18;
[L4937]              mintStopped_RariToken[this] := false;
[L4999]  RET         call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5000]  COND FALSE  !(revert)
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND TRUE   __exception
[L1415]              __tmp__Balance := Balance;
[L1416]              __tmp__DType := DType;
[L1417]              __tmp__Alloc := Alloc;
[L1418]              __tmp__balance_ADDR := balance_ADDR;
[L1419]              __tmp__M_Ref_int := M_Ref_int;
[L1420]              __tmp__sum__balances0 := sum__balances0;
[L1421]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]              __tmp__sum__allowances1 := sum__allowances1;
[L1424]              __tmp__Length := Length;
[L1425]              __tmp__now := now;
[L1426]              __tmp___owner_Ownable := _owner_Ownable;
[L1427]              __tmp___paused_Pausable := _paused_Pausable;
[L1428]              __tmp___balances_ERC20 := _balances_ERC20;
[L1429]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]              __tmp__name_RariToken := name_RariToken;
[L1432]              __tmp__symbol_RariToken := symbol_RariToken;
[L1433]              __tmp__decimals_RariToken := decimals_RariToken;
[L1434]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L4671]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  COND TRUE   __tmp__DType[this] == RariToken
[L4676]  CALL        call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3608]  COND TRUE   __tmp__DType[this] == RariToken
[L3609]  CALL        call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2930]              __ret_0_ := msgsender_MSG;
[L3609]  RET         call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3610]  COND FALSE  !(revert)
[L3626]  COND TRUE   __tmp__DType[this] == RariToken
[L3627]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(sender_s657 != null))
[L4238]              __var_17 := null;
[L4239]  COND FALSE  !(!(recipient_s657 != null))
[L4243]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3426]  COND TRUE   !(b_s331 <= a_s331)
[L3427]              revert := true;
[L4243]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4244]  COND TRUE   revert
[L3627]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3628]  COND TRUE   revert
[L4676]  RET         call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4677]  COND TRUE   revert
[L1435]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]              assume revert || gas < 0;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND TRUE   __exception
[L1415]              __tmp__Balance := Balance;
[L1416]              __tmp__DType := DType;
[L1417]              __tmp__Alloc := Alloc;
[L1418]              __tmp__balance_ADDR := balance_ADDR;
[L1419]              __tmp__M_Ref_int := M_Ref_int;
[L1420]              __tmp__sum__balances0 := sum__balances0;
[L1421]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]              __tmp__sum__allowances1 := sum__allowances1;
[L1424]              __tmp__Length := Length;
[L1425]              __tmp__now := now;
[L1426]              __tmp___owner_Ownable := _owner_Ownable;
[L1427]              __tmp___paused_Pausable := _paused_Pausable;
[L1428]              __tmp___balances_ERC20 := _balances_ERC20;
[L1429]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]              __tmp__name_RariToken := name_RariToken;
[L1432]              __tmp__symbol_RariToken := symbol_RariToken;
[L1433]              __tmp__decimals_RariToken := decimals_RariToken;
[L1434]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L4671]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  COND TRUE   __tmp__DType[this] == RariToken
[L4676]  CALL        call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3608]  COND TRUE   __tmp__DType[this] == RariToken
[L3609]  CALL        call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2930]              __ret_0_ := msgsender_MSG;
[L3609]  RET         call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3610]  COND FALSE  !(revert)
[L3626]  COND TRUE   __tmp__DType[this] == RariToken
[L3627]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(sender_s657 != null))
[L4238]              __var_17 := null;
[L4239]  COND FALSE  !(!(recipient_s657 != null))
[L4243]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3426]  COND TRUE   !(b_s331 <= a_s331)
[L3427]              revert := true;
[L4243]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4244]  COND TRUE   revert
[L3627]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3628]  COND TRUE   revert
[L4676]  RET         call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4677]  COND TRUE   revert
[L1435]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]              assume revert || gas < 0;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:25:54,760 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:25:54,760 INFO  L82        PathProgramCache]: Analyzing trace with hash 1191792212, now seen corresponding path program 1 times
[2020-11-25 03:25:54,760 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:25:54,774 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:25:54,935 INFO  L134       CoverageAnalysis]: Checked inductivity of 709 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 709 trivial. 0 not checked.
[2020-11-25 03:25:54,935 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:25:54,935 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-25 03:25:54,936 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:25:54,936 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 03:25:54,936 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=20, Invalid=90, Unknown=0, NotChecked=0, Total=110
[2020-11-25 03:25:54,936 INFO  L87              Difference]: Start difference. First operand 7309 states and 8745 transitions. cyclomatic complexity: 1440 Second operand 11 states.
[2020-11-25 03:25:57,044 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:25:57,044 INFO  L93              Difference]: Finished difference Result 7423 states and 8963 transitions.
[2020-11-25 03:25:57,044 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 03:25:57,044 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7423 states and 8963 transitions.
[2020-11-25 03:25:57,059 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 24
[2020-11-25 03:25:57,076 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7423 states to 7423 states and 8963 transitions.
[2020-11-25 03:25:57,076 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1810
[2020-11-25 03:25:57,077 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1810
[2020-11-25 03:25:57,077 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7423 states and 8963 transitions.
[2020-11-25 03:25:57,082 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:25:57,082 INFO  L728         BuchiCegarLoop]: Abstraction has 7423 states and 8963 transitions.
[2020-11-25 03:25:57,085 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7423 states and 8963 transitions.
[2020-11-25 03:25:57,125 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7423 to 7016.
[2020-11-25 03:25:57,125 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7016 states.
[2020-11-25 03:25:57,133 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7016 states to 7016 states and 8326 transitions.
[2020-11-25 03:25:57,133 INFO  L751         BuchiCegarLoop]: Abstraction has 7016 states and 8326 transitions.
[2020-11-25 03:25:57,133 INFO  L631         BuchiCegarLoop]: Abstraction has 7016 states and 8326 transitions.
[2020-11-25 03:25:57,133 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 03:25:57,133 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7016 states and 8326 transitions.
[2020-11-25 03:25:57,140 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 03:25:57,140 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:25:57,140 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:25:57,142 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:25:57,142 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L4979]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4979]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4983]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4987]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]  COND FALSE  !(revert)
[L4991]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4991]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4992]  COND FALSE  !(revert)
[L4995]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4641]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4641]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4642]  COND FALSE  !(revert)
[L4645]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4645]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4646]  COND FALSE  !(revert)
[L4649]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4649]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4650]  COND FALSE  !(revert)
[L4653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4654]  COND FALSE  !(revert)
[L4657]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4657]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4658]  COND FALSE  !(revert)
[L4661]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume msgsender_MSG != null;
[L4607]              Balance[this] := 0;
[L4661]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]  COND FALSE  !(revert)
[L4995]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4996]  COND FALSE  !(revert)
[L4999]  CALL        call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]              assume msgsender_MSG != null;
[L4933]              Balance[this] := 0;
[L4934]              name_RariToken[this] := 920169039;
[L4935]              symbol_RariToken[this] := 1865763617;
[L4936]              decimals_RariToken[this] := 18;
[L4937]              mintStopped_RariToken[this] := false;
[L4999]  RET         call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5000]  COND FALSE  !(revert)
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND FALSE  !(__exception)
[L1438]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4696]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4696]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4697]  COND FALSE  !(revert)
[L4700]  COND TRUE   DType[this] == RariToken
[L4701]  CALL        call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3651]  COND TRUE   DType[this] == RariToken
[L3652]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3652]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3653]  COND FALSE  !(revert)
[L3669]  COND TRUE   DType[this] == RariToken
[L3670]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4265]              __var_16 := null;
[L4266]  COND FALSE  !(!(sender_s657 != null))
[L4270]              __var_17 := null;
[L4271]  COND FALSE  !(!(recipient_s657 != null))
[L4275]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L4275]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4276]  COND FALSE  !(revert)
[L4279]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s657];
[L4280]              _balances_ERC20[this][sender_s657] := __var_18;
[L4281]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s657];
[L4282]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4282]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L4283]  COND FALSE  !(revert)
[L4286]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s657];
[L4287]              _balances_ERC20[this][recipient_s657] := __var_19;
[L4288]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s657];
[L4289]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3670]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3671]  COND FALSE  !(revert)
[L3687]              __ret_0_ := true;
[L4701]  RET         call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4702]  COND FALSE  !(revert)
[L4713]              __ret_0_ := __var_31;
[L1438]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1439]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && mintStopped_RariToken[this] == old(mintStopped_RariToken[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND FALSE  !(__exception)
[L1438]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4696]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4696]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4697]  COND FALSE  !(revert)
[L4700]  COND TRUE   DType[this] == RariToken
[L4701]  CALL        call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3651]  COND TRUE   DType[this] == RariToken
[L3652]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3652]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3653]  COND FALSE  !(revert)
[L3669]  COND TRUE   DType[this] == RariToken
[L3670]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4265]              __var_16 := null;
[L4266]  COND FALSE  !(!(sender_s657 != null))
[L4270]              __var_17 := null;
[L4271]  COND FALSE  !(!(recipient_s657 != null))
[L4275]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L4275]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4276]  COND FALSE  !(revert)
[L4279]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s657];
[L4280]              _balances_ERC20[this][sender_s657] := __var_18;
[L4281]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s657];
[L4282]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4282]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L4283]  COND FALSE  !(revert)
[L4286]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s657];
[L4287]              _balances_ERC20[this][recipient_s657] := __var_19;
[L4288]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s657];
[L4289]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3670]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3671]  COND FALSE  !(revert)
[L3687]              __ret_0_ := true;
[L4701]  RET         call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4702]  COND FALSE  !(revert)
[L4713]              __ret_0_ := __var_31;
[L1438]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1439]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && mintStopped_RariToken[this] == old(mintStopped_RariToken[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:25:57,146 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:25:57,146 INFO  L82        PathProgramCache]: Analyzing trace with hash 654351561, now seen corresponding path program 1 times
[2020-11-25 03:25:57,147 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:25:57,175 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:25:57,787 INFO  L134       CoverageAnalysis]: Checked inductivity of 709 backedges. 10 proven. 0 refuted. 0 times theorem prover too weak. 699 trivial. 0 not checked.
[2020-11-25 03:25:57,787 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:25:57,788 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [29] imperfect sequences [] total 29
[2020-11-25 03:25:57,789 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:25:57,789 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 30 interpolants.
[2020-11-25 03:25:57,789 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=73, Invalid=797, Unknown=0, NotChecked=0, Total=870
[2020-11-25 03:25:57,789 INFO  L87              Difference]: Start difference. First operand 7016 states and 8326 transitions. cyclomatic complexity: 1314 Second operand 30 states.
[2020-11-25 03:26:06,282 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:26:06,282 INFO  L93              Difference]: Finished difference Result 7113 states and 8531 transitions.
[2020-11-25 03:26:06,283 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 32 states. 
[2020-11-25 03:26:06,283 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7113 states and 8531 transitions.
[2020-11-25 03:26:06,298 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 28
[2020-11-25 03:26:06,314 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7113 states to 7113 states and 8531 transitions.
[2020-11-25 03:26:06,314 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1796
[2020-11-25 03:26:06,315 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1796
[2020-11-25 03:26:06,315 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7113 states and 8531 transitions.
[2020-11-25 03:26:06,320 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:26:06,320 INFO  L728         BuchiCegarLoop]: Abstraction has 7113 states and 8531 transitions.
[2020-11-25 03:26:06,324 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7113 states and 8531 transitions.
[2020-11-25 03:26:06,363 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7113 to 6900.
[2020-11-25 03:26:06,363 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6900 states.
[2020-11-25 03:26:06,372 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6900 states to 6900 states and 8203 transitions.
[2020-11-25 03:26:06,372 INFO  L751         BuchiCegarLoop]: Abstraction has 6900 states and 8203 transitions.
[2020-11-25 03:26:06,372 INFO  L631         BuchiCegarLoop]: Abstraction has 6900 states and 8203 transitions.
[2020-11-25 03:26:06,372 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 03:26:06,372 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6900 states and 8203 transitions.
[2020-11-25 03:26:06,379 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 20
[2020-11-25 03:26:06,379 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:26:06,379 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:26:06,381 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:26:06,381 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L4979]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4979]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4983]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4987]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]  COND FALSE  !(revert)
[L4991]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4991]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4992]  COND FALSE  !(revert)
[L4995]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4641]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4641]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4642]  COND FALSE  !(revert)
[L4645]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4645]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4646]  COND FALSE  !(revert)
[L4649]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4649]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4650]  COND FALSE  !(revert)
[L4653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4654]  COND FALSE  !(revert)
[L4657]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4657]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4658]  COND FALSE  !(revert)
[L4661]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume msgsender_MSG != null;
[L4607]              Balance[this] := 0;
[L4661]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]  COND FALSE  !(revert)
[L4995]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4996]  COND FALSE  !(revert)
[L4999]  CALL        call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]              assume msgsender_MSG != null;
[L4933]              Balance[this] := 0;
[L4934]              name_RariToken[this] := 920169039;
[L4935]              symbol_RariToken[this] := 1865763617;
[L4936]              decimals_RariToken[this] := 18;
[L4937]              mintStopped_RariToken[this] := false;
[L4999]  RET         call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5000]  COND FALSE  !(revert)
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND TRUE   __exception
[L1415]              __tmp__Balance := Balance;
[L1416]              __tmp__DType := DType;
[L1417]              __tmp__Alloc := Alloc;
[L1418]              __tmp__balance_ADDR := balance_ADDR;
[L1419]              __tmp__M_Ref_int := M_Ref_int;
[L1420]              __tmp__sum__balances0 := sum__balances0;
[L1421]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]              __tmp__sum__allowances1 := sum__allowances1;
[L1424]              __tmp__Length := Length;
[L1425]              __tmp__now := now;
[L1426]              __tmp___owner_Ownable := _owner_Ownable;
[L1427]              __tmp___paused_Pausable := _paused_Pausable;
[L1428]              __tmp___balances_ERC20 := _balances_ERC20;
[L1429]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]              __tmp__name_RariToken := name_RariToken;
[L1432]              __tmp__symbol_RariToken := symbol_RariToken;
[L1433]              __tmp__decimals_RariToken := decimals_RariToken;
[L1434]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L4671]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  COND TRUE   __tmp__DType[this] == RariToken
[L4676]  CALL        call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3608]  COND TRUE   __tmp__DType[this] == RariToken
[L3609]  CALL        call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2930]              __ret_0_ := msgsender_MSG;
[L3609]  RET         call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3610]  COND FALSE  !(revert)
[L3626]  COND TRUE   __tmp__DType[this] == RariToken
[L3627]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(sender_s657 != null))
[L4238]              __var_17 := null;
[L4239]  COND FALSE  !(!(recipient_s657 != null))
[L4243]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3426]  COND FALSE  !(!(b_s331 <= a_s331))
[L3430]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3431]              __ret_0_ := c_s331;
[L4243]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4244]  COND FALSE  !(revert)
[L4247]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s657];
[L4248]              __tmp___balances_ERC20[this][sender_s657] := __var_18;
[L4249]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s657];
[L4250]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s657], amount_s657);
[L3402]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3403]  COND TRUE   !(c_s304 >= a_s304)
[L3404]              revert := true;
[L4250]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s657], amount_s657);
[L4251]  COND TRUE   revert
[L3627]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3628]  COND TRUE   revert
[L4676]  RET         call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4677]  COND TRUE   revert
[L1435]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]              assume revert || gas < 0;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND TRUE   __exception
[L1415]              __tmp__Balance := Balance;
[L1416]              __tmp__DType := DType;
[L1417]              __tmp__Alloc := Alloc;
[L1418]              __tmp__balance_ADDR := balance_ADDR;
[L1419]              __tmp__M_Ref_int := M_Ref_int;
[L1420]              __tmp__sum__balances0 := sum__balances0;
[L1421]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]              __tmp__sum__allowances1 := sum__allowances1;
[L1424]              __tmp__Length := Length;
[L1425]              __tmp__now := now;
[L1426]              __tmp___owner_Ownable := _owner_Ownable;
[L1427]              __tmp___paused_Pausable := _paused_Pausable;
[L1428]              __tmp___balances_ERC20 := _balances_ERC20;
[L1429]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]              __tmp__name_RariToken := name_RariToken;
[L1432]              __tmp__symbol_RariToken := symbol_RariToken;
[L1433]              __tmp__decimals_RariToken := decimals_RariToken;
[L1434]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L4671]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  COND TRUE   __tmp__DType[this] == RariToken
[L4676]  CALL        call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3608]  COND TRUE   __tmp__DType[this] == RariToken
[L3609]  CALL        call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2930]              __ret_0_ := msgsender_MSG;
[L3609]  RET         call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3610]  COND FALSE  !(revert)
[L3626]  COND TRUE   __tmp__DType[this] == RariToken
[L3627]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(sender_s657 != null))
[L4238]              __var_17 := null;
[L4239]  COND FALSE  !(!(recipient_s657 != null))
[L4243]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3426]  COND FALSE  !(!(b_s331 <= a_s331))
[L3430]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3431]              __ret_0_ := c_s331;
[L4243]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4244]  COND FALSE  !(revert)
[L4247]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s657];
[L4248]              __tmp___balances_ERC20[this][sender_s657] := __var_18;
[L4249]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s657];
[L4250]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s657], amount_s657);
[L3402]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3403]  COND TRUE   !(c_s304 >= a_s304)
[L3404]              revert := true;
[L4250]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s657], amount_s657);
[L4251]  COND TRUE   revert
[L3627]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3628]  COND TRUE   revert
[L4676]  RET         call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4677]  COND TRUE   revert
[L1435]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]              assume revert || gas < 0;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:26:06,385 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:26:06,385 INFO  L82        PathProgramCache]: Analyzing trace with hash 73803741, now seen corresponding path program 1 times
[2020-11-25 03:26:06,385 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:26:06,398 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:26:06,711 INFO  L134       CoverageAnalysis]: Checked inductivity of 709 backedges. 10 proven. 0 refuted. 0 times theorem prover too weak. 699 trivial. 0 not checked.
[2020-11-25 03:26:06,712 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:26:06,712 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [25] imperfect sequences [] total 25
[2020-11-25 03:26:06,712 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:26:06,712 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 03:26:06,712 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=51, Invalid=599, Unknown=0, NotChecked=0, Total=650
[2020-11-25 03:26:06,713 INFO  L87              Difference]: Start difference. First operand 6900 states and 8203 transitions. cyclomatic complexity: 1311 Second operand 26 states.
[2020-11-25 03:26:15,272 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:26:15,272 INFO  L93              Difference]: Finished difference Result 6974 states and 8373 transitions.
[2020-11-25 03:26:15,272 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 03:26:15,272 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6974 states and 8373 transitions.
[2020-11-25 03:26:15,287 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 28
[2020-11-25 03:26:15,304 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6974 states to 6974 states and 8373 transitions.
[2020-11-25 03:26:15,304 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1726
[2020-11-25 03:26:15,305 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1726
[2020-11-25 03:26:15,305 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6974 states and 8373 transitions.
[2020-11-25 03:26:15,309 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:26:15,309 INFO  L728         BuchiCegarLoop]: Abstraction has 6974 states and 8373 transitions.
[2020-11-25 03:26:15,313 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6974 states and 8373 transitions.
[2020-11-25 03:26:15,387 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6974 to 6918.
[2020-11-25 03:26:15,387 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6918 states.
[2020-11-25 03:26:15,396 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6918 states to 6918 states and 8239 transitions.
[2020-11-25 03:26:15,396 INFO  L751         BuchiCegarLoop]: Abstraction has 6918 states and 8239 transitions.
[2020-11-25 03:26:15,396 INFO  L631         BuchiCegarLoop]: Abstraction has 6918 states and 8239 transitions.
[2020-11-25 03:26:15,396 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 03:26:15,396 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6918 states and 8239 transitions.
[2020-11-25 03:26:15,404 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 20
[2020-11-25 03:26:15,404 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:26:15,404 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:26:15,405 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:26:15,405 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L4979]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4979]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4983]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4987]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]  COND FALSE  !(revert)
[L4991]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4991]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4992]  COND FALSE  !(revert)
[L4995]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4641]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4641]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4642]  COND FALSE  !(revert)
[L4645]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4645]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4646]  COND FALSE  !(revert)
[L4649]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4649]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4650]  COND FALSE  !(revert)
[L4653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4654]  COND FALSE  !(revert)
[L4657]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4657]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4658]  COND FALSE  !(revert)
[L4661]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume msgsender_MSG != null;
[L4607]              Balance[this] := 0;
[L4661]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]  COND FALSE  !(revert)
[L4995]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4996]  COND FALSE  !(revert)
[L4999]  CALL        call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]              assume msgsender_MSG != null;
[L4933]              Balance[this] := 0;
[L4934]              name_RariToken[this] := 920169039;
[L4935]              symbol_RariToken[this] := 1865763617;
[L4936]              decimals_RariToken[this] := 18;
[L4937]              mintStopped_RariToken[this] := false;
[L4999]  RET         call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5000]  COND FALSE  !(revert)
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND TRUE   __exception
[L1415]              __tmp__Balance := Balance;
[L1416]              __tmp__DType := DType;
[L1417]              __tmp__Alloc := Alloc;
[L1418]              __tmp__balance_ADDR := balance_ADDR;
[L1419]              __tmp__M_Ref_int := M_Ref_int;
[L1420]              __tmp__sum__balances0 := sum__balances0;
[L1421]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]              __tmp__sum__allowances1 := sum__allowances1;
[L1424]              __tmp__Length := Length;
[L1425]              __tmp__now := now;
[L1426]              __tmp___owner_Ownable := _owner_Ownable;
[L1427]              __tmp___paused_Pausable := _paused_Pausable;
[L1428]              __tmp___balances_ERC20 := _balances_ERC20;
[L1429]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]              __tmp__name_RariToken := name_RariToken;
[L1432]              __tmp__symbol_RariToken := symbol_RariToken;
[L1433]              __tmp__decimals_RariToken := decimals_RariToken;
[L1434]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L4671]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  COND TRUE   __tmp__DType[this] == RariToken
[L4676]  CALL        call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3608]  COND TRUE   __tmp__DType[this] == RariToken
[L3609]  CALL        call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2930]              __ret_0_ := msgsender_MSG;
[L3609]  RET         call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3610]  COND FALSE  !(revert)
[L3626]  COND TRUE   __tmp__DType[this] == RariToken
[L3627]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(sender_s657 != null))
[L4238]              __var_17 := null;
[L4239]  COND FALSE  !(!(recipient_s657 != null))
[L4243]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3426]  COND FALSE  !(!(b_s331 <= a_s331))
[L3430]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3431]              __ret_0_ := c_s331;
[L4243]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4244]  COND FALSE  !(revert)
[L4247]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s657];
[L4248]              __tmp___balances_ERC20[this][sender_s657] := __var_18;
[L4249]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s657];
[L4250]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s657], amount_s657);
[L3402]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3403]  COND FALSE  !(!(c_s304 >= a_s304))
[L3407]              __ret_0_ := c_s304;
[L4250]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s657], amount_s657);
[L4251]  COND FALSE  !(revert)
[L4254]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][recipient_s657];
[L4255]              __tmp___balances_ERC20[this][recipient_s657] := __var_19;
[L4256]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][recipient_s657];
[L3627]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3628]  COND FALSE  !(revert)
[L3644]              __ret_0_ := true;
[L4676]  RET         call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4677]  COND FALSE  !(revert)
[L4688]              __ret_0_ := __var_31;
[L1435]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]              assume revert || gas < 0;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND TRUE   __exception
[L1415]              __tmp__Balance := Balance;
[L1416]              __tmp__DType := DType;
[L1417]              __tmp__Alloc := Alloc;
[L1418]              __tmp__balance_ADDR := balance_ADDR;
[L1419]              __tmp__M_Ref_int := M_Ref_int;
[L1420]              __tmp__sum__balances0 := sum__balances0;
[L1421]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]              __tmp__sum__allowances1 := sum__allowances1;
[L1424]              __tmp__Length := Length;
[L1425]              __tmp__now := now;
[L1426]              __tmp___owner_Ownable := _owner_Ownable;
[L1427]              __tmp___paused_Pausable := _paused_Pausable;
[L1428]              __tmp___balances_ERC20 := _balances_ERC20;
[L1429]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]              __tmp__name_RariToken := name_RariToken;
[L1432]              __tmp__symbol_RariToken := symbol_RariToken;
[L1433]              __tmp__decimals_RariToken := decimals_RariToken;
[L1434]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L4671]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  COND TRUE   __tmp__DType[this] == RariToken
[L4676]  CALL        call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3608]  COND TRUE   __tmp__DType[this] == RariToken
[L3609]  CALL        call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2930]              __ret_0_ := msgsender_MSG;
[L3609]  RET         call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3610]  COND FALSE  !(revert)
[L3626]  COND TRUE   __tmp__DType[this] == RariToken
[L3627]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(sender_s657 != null))
[L4238]              __var_17 := null;
[L4239]  COND FALSE  !(!(recipient_s657 != null))
[L4243]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3426]  COND FALSE  !(!(b_s331 <= a_s331))
[L3430]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3431]              __ret_0_ := c_s331;
[L4243]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4244]  COND FALSE  !(revert)
[L4247]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s657];
[L4248]              __tmp___balances_ERC20[this][sender_s657] := __var_18;
[L4249]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s657];
[L4250]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s657], amount_s657);
[L3402]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3403]  COND FALSE  !(!(c_s304 >= a_s304))
[L3407]              __ret_0_ := c_s304;
[L4250]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s657], amount_s657);
[L4251]  COND FALSE  !(revert)
[L4254]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][recipient_s657];
[L4255]              __tmp___balances_ERC20[this][recipient_s657] := __var_19;
[L4256]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][recipient_s657];
[L3627]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3628]  COND FALSE  !(revert)
[L3644]              __ret_0_ := true;
[L4676]  RET         call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4677]  COND FALSE  !(revert)
[L4688]              __ret_0_ := __var_31;
[L1435]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]              assume revert || gas < 0;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:26:15,419 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:26:15,419 INFO  L82        PathProgramCache]: Analyzing trace with hash -1288127481, now seen corresponding path program 1 times
[2020-11-25 03:26:15,419 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:26:15,431 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:26:15,518 INFO  L134       CoverageAnalysis]: Checked inductivity of 709 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 709 trivial. 0 not checked.
[2020-11-25 03:26:15,518 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:26:15,518 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 03:26:15,519 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:26:15,519 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 03:26:15,519 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 03:26:15,519 INFO  L87              Difference]: Start difference. First operand 6918 states and 8239 transitions. cyclomatic complexity: 1329 Second operand 5 states.
[2020-11-25 03:26:16,249 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:26:16,249 INFO  L93              Difference]: Finished difference Result 8105 states and 9927 transitions.
[2020-11-25 03:26:16,249 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 03:26:16,249 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8105 states and 9927 transitions.
[2020-11-25 03:26:16,270 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 44
[2020-11-25 03:26:16,291 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8105 states to 7253 states and 9016 transitions.
[2020-11-25 03:26:16,291 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1447
[2020-11-25 03:26:16,292 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1447
[2020-11-25 03:26:16,292 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7253 states and 9016 transitions.
[2020-11-25 03:26:16,298 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:26:16,298 INFO  L728         BuchiCegarLoop]: Abstraction has 7253 states and 9016 transitions.
[2020-11-25 03:26:16,301 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7253 states and 9016 transitions.
[2020-11-25 03:26:16,335 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7253 to 6181.
[2020-11-25 03:26:16,335 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6181 states.
[2020-11-25 03:26:16,342 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6181 states to 6181 states and 7407 transitions.
[2020-11-25 03:26:16,342 INFO  L751         BuchiCegarLoop]: Abstraction has 6181 states and 7407 transitions.
[2020-11-25 03:26:16,342 INFO  L631         BuchiCegarLoop]: Abstraction has 6181 states and 7407 transitions.
[2020-11-25 03:26:16,342 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 03:26:16,342 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6181 states and 7407 transitions.
[2020-11-25 03:26:16,348 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 03:26:16,348 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:26:16,348 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:26:16,349 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:26:16,349 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L4979]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4979]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4983]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4987]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]  COND FALSE  !(revert)
[L4991]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4991]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4992]  COND FALSE  !(revert)
[L4995]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4641]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4641]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4642]  COND FALSE  !(revert)
[L4645]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4645]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4646]  COND FALSE  !(revert)
[L4649]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4649]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4650]  COND FALSE  !(revert)
[L4653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4654]  COND FALSE  !(revert)
[L4657]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4657]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4658]  COND FALSE  !(revert)
[L4661]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume msgsender_MSG != null;
[L4607]              Balance[this] := 0;
[L4661]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]  COND FALSE  !(revert)
[L4995]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4996]  COND FALSE  !(revert)
[L4999]  CALL        call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]              assume msgsender_MSG != null;
[L4933]              Balance[this] := 0;
[L4934]              name_RariToken[this] := 920169039;
[L4935]              symbol_RariToken[this] := 1865763617;
[L4936]              decimals_RariToken[this] := 18;
[L4937]              mintStopped_RariToken[this] := false;
[L4999]  RET         call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5000]  COND FALSE  !(revert)
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND FALSE  !(choice == 12)
[L7357]  COND FALSE  !(choice == 11)
[L7363]  COND FALSE  !(choice == 10)
[L7370]  COND FALSE  !(choice == 9)
[L7377]  COND FALSE  !(choice == 8)
[L7384]  COND FALSE  !(choice == 7)
[L7391]  COND FALSE  !(choice == 6)
[L7397]  COND FALSE  !(choice == 5)
[L7403]  COND FALSE  !(choice == 4)
[L7409]  COND FALSE  !(choice == 3)
[L7415]  COND TRUE   choice == 2
[L7416]              gas := gas - 21000;
[L7417]  COND TRUE   gas >= 0
[L7418]              assume amount_s960 >= 0 && amount_s960 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7419]              assume msgvalue_MSG == 0;
[L7420]  CALL        call __ret_0_mint := mint~address~uint256_RariToken(this, msgsender_MSG, msgvalue_MSG, account_s960, amount_s960);
[L1783]              havoc __exception;
[L1784]              revert := false;
[L1785]  COND FALSE  !(__exception)
[L1809]  CALL        call __ret_0_ := mint~address~uint256_RariToken__success(this, msgsender_MSG, msgvalue_MSG, account_s960, amount_s960);
[L5029]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6494]  COND TRUE   DType[this] == RariToken
[L6495]  CALL        call __var_1 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3082]  COND TRUE   DType[this] == RariToken
[L3083]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3083]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3084]  COND FALSE  !(revert)
[L3105]              __ret_0_ := __var_2 == _owner_Ownable[this];
[L6495]  RET         call __var_1 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]  COND FALSE  !(revert)
[L6517]  COND FALSE  !(!__var_1)
[L5029]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5030]  COND FALSE  !(revert)
[L5033]  COND FALSE  !(!!mintStopped_RariToken[this])
[L5037]  COND TRUE   DType[this] == RariToken
[L5038]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s960, amount_s960);
[L4321]              __var_20 := null;
[L4322]  COND FALSE  !(!(account_s700 != null))
[L4326]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s700);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4326]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s700);
[L4327]  COND FALSE  !(revert)
[L4330]              _totalSupply_ERC20[this] := __var_21;
[L4331]  CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s700], amount_s700);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4331]  RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s700], amount_s700);
[L4332]  COND FALSE  !(revert)
[L4335]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s700];
[L4336]              _balances_ERC20[this][account_s700] := __var_22;
[L4337]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s700];
[L4338]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5038]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s960, amount_s960);
[L5039]  COND FALSE  !(revert)
[L5045]              __ret_0_ := true;
[L1809]  RET         call __ret_0_ := mint~address~uint256_RariToken__success(this, msgsender_MSG, msgvalue_MSG, account_s960, amount_s960);
[L1810]              assume !revert && gas >= 0;
[L7420]  RET         call __ret_0_mint := mint~address~uint256_RariToken(this, msgsender_MSG, msgvalue_MSG, account_s960, amount_s960);
[L7446]  RET         call CorralChoice_RariToken(this);
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND TRUE   __exception
[L1415]              __tmp__Balance := Balance;
[L1416]              __tmp__DType := DType;
[L1417]              __tmp__Alloc := Alloc;
[L1418]              __tmp__balance_ADDR := balance_ADDR;
[L1419]              __tmp__M_Ref_int := M_Ref_int;
[L1420]              __tmp__sum__balances0 := sum__balances0;
[L1421]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]              __tmp__sum__allowances1 := sum__allowances1;
[L1424]              __tmp__Length := Length;
[L1425]              __tmp__now := now;
[L1426]              __tmp___owner_Ownable := _owner_Ownable;
[L1427]              __tmp___paused_Pausable := _paused_Pausable;
[L1428]              __tmp___balances_ERC20 := _balances_ERC20;
[L1429]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]              __tmp__name_RariToken := name_RariToken;
[L1432]              __tmp__symbol_RariToken := symbol_RariToken;
[L1433]              __tmp__decimals_RariToken := decimals_RariToken;
[L1434]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L4671]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  COND TRUE   __tmp__DType[this] == RariToken
[L4676]  CALL        call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3608]  COND TRUE   __tmp__DType[this] == RariToken
[L3609]  CALL        call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2930]              __ret_0_ := msgsender_MSG;
[L3609]  RET         call __var_5 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3610]  COND FALSE  !(revert)
[L3626]  COND TRUE   __tmp__DType[this] == RariToken
[L3627]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4233]              __var_16 := null;
[L4234]  COND FALSE  !(!(sender_s657 != null))
[L4238]              __var_17 := null;
[L4239]  COND FALSE  !(!(recipient_s657 != null))
[L4243]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3426]  COND FALSE  !(!(b_s331 <= a_s331))
[L3430]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3431]              __ret_0_ := c_s331;
[L4243]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4244]  COND FALSE  !(revert)
[L4247]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s657];
[L4248]              __tmp___balances_ERC20[this][sender_s657] := __var_18;
[L4249]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s657];
[L4250]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s657], amount_s657);
[L3402]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3403]  COND TRUE   !(c_s304 >= a_s304)
[L3404]              revert := true;
[L4250]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s657], amount_s657);
[L4251]  COND TRUE   revert
[L3627]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3628]  COND TRUE   revert
[L4676]  RET         call __var_31 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4677]  COND TRUE   revert
[L1435]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]              assume revert || gas < 0;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND TRUE   choice == 21
[L7297]              gas := gas - 21000;
[L7298]  COND FALSE  !(gas >= 0)
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:26:16,353 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:26:16,353 INFO  L82        PathProgramCache]: Analyzing trace with hash 286038258, now seen corresponding path program 1 times
[2020-11-25 03:26:16,354 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:26:16,372 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:26:16,640 INFO  L134       CoverageAnalysis]: Checked inductivity of 790 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 790 trivial. 0 not checked.
[2020-11-25 03:26:16,640 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:26:16,640 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-25 03:26:16,641 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:26:16,641 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 03:26:16,641 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=36, Invalid=236, Unknown=0, NotChecked=0, Total=272
[2020-11-25 03:26:16,641 INFO  L87              Difference]: Start difference. First operand 6181 states and 7407 transitions. cyclomatic complexity: 1236 Second operand 17 states.
[2020-11-25 03:26:20,066 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:26:20,066 INFO  L93              Difference]: Finished difference Result 6209 states and 7460 transitions.
[2020-11-25 03:26:20,066 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 03:26:20,066 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6209 states and 7460 transitions.
[2020-11-25 03:26:20,077 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 20
[2020-11-25 03:26:20,091 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6209 states to 6209 states and 7460 transitions.
[2020-11-25 03:26:20,091 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1298
[2020-11-25 03:26:20,092 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1298
[2020-11-25 03:26:20,092 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6209 states and 7460 transitions.
[2020-11-25 03:26:20,096 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:26:20,096 INFO  L728         BuchiCegarLoop]: Abstraction has 6209 states and 7460 transitions.
[2020-11-25 03:26:20,098 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6209 states and 7460 transitions.
[2020-11-25 03:26:20,126 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6209 to 6131.
[2020-11-25 03:26:20,126 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6131 states.
[2020-11-25 03:26:20,132 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6131 states to 6131 states and 7323 transitions.
[2020-11-25 03:26:20,132 INFO  L751         BuchiCegarLoop]: Abstraction has 6131 states and 7323 transitions.
[2020-11-25 03:26:20,132 INFO  L631         BuchiCegarLoop]: Abstraction has 6131 states and 7323 transitions.
[2020-11-25 03:26:20,133 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 03:26:20,133 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6131 states and 7323 transitions.
[2020-11-25 03:26:20,138 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 03:26:20,138 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:26:20,138 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:26:20,139 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:26:20,139 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L4979]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4979]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4983]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4987]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]  COND FALSE  !(revert)
[L4991]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4991]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4992]  COND FALSE  !(revert)
[L4995]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4641]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4641]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4642]  COND FALSE  !(revert)
[L4645]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4645]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4646]  COND FALSE  !(revert)
[L4649]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4649]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4650]  COND FALSE  !(revert)
[L4653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4654]  COND FALSE  !(revert)
[L4657]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4657]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4658]  COND FALSE  !(revert)
[L4661]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume msgsender_MSG != null;
[L4607]              Balance[this] := 0;
[L4661]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]  COND FALSE  !(revert)
[L4995]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4996]  COND FALSE  !(revert)
[L4999]  CALL        call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]              assume msgsender_MSG != null;
[L4933]              Balance[this] := 0;
[L4934]              name_RariToken[this] := 920169039;
[L4935]              symbol_RariToken[this] := 1865763617;
[L4936]              decimals_RariToken[this] := 18;
[L4937]              mintStopped_RariToken[this] := false;
[L4999]  RET         call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5000]  COND FALSE  !(revert)
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND FALSE  !(choice == 12)
[L7357]  COND FALSE  !(choice == 11)
[L7363]  COND FALSE  !(choice == 10)
[L7370]  COND FALSE  !(choice == 9)
[L7377]  COND FALSE  !(choice == 8)
[L7384]  COND FALSE  !(choice == 7)
[L7391]  COND FALSE  !(choice == 6)
[L7397]  COND FALSE  !(choice == 5)
[L7403]  COND FALSE  !(choice == 4)
[L7409]  COND FALSE  !(choice == 3)
[L7415]  COND TRUE   choice == 2
[L7416]              gas := gas - 21000;
[L7417]  COND TRUE   gas >= 0
[L7418]              assume amount_s960 >= 0 && amount_s960 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7419]              assume msgvalue_MSG == 0;
[L7420]  CALL        call __ret_0_mint := mint~address~uint256_RariToken(this, msgsender_MSG, msgvalue_MSG, account_s960, amount_s960);
[L1783]              havoc __exception;
[L1784]              revert := false;
[L1785]  COND FALSE  !(__exception)
[L1809]  CALL        call __ret_0_ := mint~address~uint256_RariToken__success(this, msgsender_MSG, msgvalue_MSG, account_s960, amount_s960);
[L5029]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6494]  COND FALSE  !(DType[this] == RariToken)
[L6499]  COND FALSE  !(DType[this] == ERC20Pausable)
[L6504]  COND TRUE   DType[this] == Pausable
[L6505]  CALL        call __var_1 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3082]  COND TRUE   DType[this] == RariToken
[L3083]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3083]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3084]  COND FALSE  !(revert)
[L3105]              __ret_0_ := __var_2 == _owner_Ownable[this];
[L6505]  RET         call __var_1 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6506]  COND FALSE  !(revert)
[L6517]  COND FALSE  !(!__var_1)
[L5029]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5030]  COND FALSE  !(revert)
[L5033]  COND FALSE  !(!!mintStopped_RariToken[this])
[L5037]  COND TRUE   DType[this] == RariToken
[L5038]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s960, amount_s960);
[L4321]              __var_20 := null;
[L4322]  COND FALSE  !(!(account_s700 != null))
[L4326]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s700);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4326]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s700);
[L4327]  COND FALSE  !(revert)
[L4330]              _totalSupply_ERC20[this] := __var_21;
[L4331]  CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s700], amount_s700);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4331]  RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s700], amount_s700);
[L4332]  COND FALSE  !(revert)
[L4335]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s700];
[L4336]              _balances_ERC20[this][account_s700] := __var_22;
[L4337]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s700];
[L4338]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5038]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s960, amount_s960);
[L5039]  COND FALSE  !(revert)
[L5045]              __ret_0_ := true;
[L1809]  RET         call __ret_0_ := mint~address~uint256_RariToken__success(this, msgsender_MSG, msgvalue_MSG, account_s960, amount_s960);
[L1810]              assume !revert && gas >= 0;
[L7420]  RET         call __ret_0_mint := mint~address~uint256_RariToken(this, msgsender_MSG, msgvalue_MSG, account_s960, amount_s960);
[L7446]  RET         call CorralChoice_RariToken(this);
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND FALSE  !(__exception)
[L1438]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4696]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4696]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4697]  COND FALSE  !(revert)
[L4700]  COND TRUE   DType[this] == RariToken
[L4701]  CALL        call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3651]  COND TRUE   DType[this] == RariToken
[L3652]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3652]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3653]  COND FALSE  !(revert)
[L3669]  COND TRUE   DType[this] == RariToken
[L3670]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4265]              __var_16 := null;
[L4266]  COND FALSE  !(!(sender_s657 != null))
[L4270]              __var_17 := null;
[L4271]  COND FALSE  !(!(recipient_s657 != null))
[L4275]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L4275]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4276]  COND FALSE  !(revert)
[L4279]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s657];
[L4280]              _balances_ERC20[this][sender_s657] := __var_18;
[L4281]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s657];
[L4282]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4282]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L4283]  COND FALSE  !(revert)
[L4286]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s657];
[L4287]              _balances_ERC20[this][recipient_s657] := __var_19;
[L4288]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s657];
[L4289]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3670]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3671]  COND FALSE  !(revert)
[L3687]              __ret_0_ := true;
[L4701]  RET         call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4702]  COND FALSE  !(revert)
[L4713]              __ret_0_ := __var_31;
[L1438]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1439]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && mintStopped_RariToken[this] == old(mintStopped_RariToken[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND FALSE  !(__exception)
[L1438]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4696]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4696]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4697]  COND FALSE  !(revert)
[L4700]  COND TRUE   DType[this] == RariToken
[L4701]  CALL        call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3651]  COND TRUE   DType[this] == RariToken
[L3652]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3652]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3653]  COND FALSE  !(revert)
[L3669]  COND TRUE   DType[this] == RariToken
[L3670]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4265]              __var_16 := null;
[L4266]  COND FALSE  !(!(sender_s657 != null))
[L4270]              __var_17 := null;
[L4271]  COND FALSE  !(!(recipient_s657 != null))
[L4275]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L4275]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4276]  COND FALSE  !(revert)
[L4279]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s657];
[L4280]              _balances_ERC20[this][sender_s657] := __var_18;
[L4281]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s657];
[L4282]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4282]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L4283]  COND FALSE  !(revert)
[L4286]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s657];
[L4287]              _balances_ERC20[this][recipient_s657] := __var_19;
[L4288]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s657];
[L4289]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3670]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3671]  COND FALSE  !(revert)
[L3687]              __ret_0_ := true;
[L4701]  RET         call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4702]  COND FALSE  !(revert)
[L4713]              __ret_0_ := __var_31;
[L1438]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1439]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && mintStopped_RariToken[this] == old(mintStopped_RariToken[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:26:20,144 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:26:20,144 INFO  L82        PathProgramCache]: Analyzing trace with hash -2146700794, now seen corresponding path program 1 times
[2020-11-25 03:26:20,144 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:26:20,158 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:26:20,286 INFO  L134       CoverageAnalysis]: Checked inductivity of 790 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 789 trivial. 0 not checked.
[2020-11-25 03:26:20,286 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:26:20,286 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 03:26:20,287 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:26:20,287 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 03:26:20,287 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 03:26:20,287 INFO  L87              Difference]: Start difference. First operand 6131 states and 7323 transitions. cyclomatic complexity: 1202 Second operand 7 states.
[2020-11-25 03:26:20,364 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:26:20,364 INFO  L93              Difference]: Finished difference Result 6159 states and 7367 transitions.
[2020-11-25 03:26:20,364 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 03:26:20,364 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6159 states and 7367 transitions.
[2020-11-25 03:26:20,375 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 03:26:20,388 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6159 states to 6143 states and 7351 transitions.
[2020-11-25 03:26:20,388 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1262
[2020-11-25 03:26:20,389 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1262
[2020-11-25 03:26:20,389 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6143 states and 7351 transitions.
[2020-11-25 03:26:20,392 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:26:20,392 INFO  L728         BuchiCegarLoop]: Abstraction has 6143 states and 7351 transitions.
[2020-11-25 03:26:20,395 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6143 states and 7351 transitions.
[2020-11-25 03:26:20,422 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6143 to 6143.
[2020-11-25 03:26:20,423 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6143 states.
[2020-11-25 03:26:20,430 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6143 states to 6143 states and 7351 transitions.
[2020-11-25 03:26:20,430 INFO  L751         BuchiCegarLoop]: Abstraction has 6143 states and 7351 transitions.
[2020-11-25 03:26:20,430 INFO  L631         BuchiCegarLoop]: Abstraction has 6143 states and 7351 transitions.
[2020-11-25 03:26:20,430 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 03:26:20,430 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6143 states and 7351 transitions.
[2020-11-25 03:26:20,436 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 03:26:20,436 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:26:20,436 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:26:20,437 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:26:20,437 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L4979]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4979]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4983]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4987]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]  COND FALSE  !(revert)
[L4991]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4991]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4992]  COND FALSE  !(revert)
[L4995]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4641]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4641]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4642]  COND FALSE  !(revert)
[L4645]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4645]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4646]  COND FALSE  !(revert)
[L4649]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4649]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4650]  COND FALSE  !(revert)
[L4653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4654]  COND FALSE  !(revert)
[L4657]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4657]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4658]  COND FALSE  !(revert)
[L4661]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume msgsender_MSG != null;
[L4607]              Balance[this] := 0;
[L4661]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]  COND FALSE  !(revert)
[L4995]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4996]  COND FALSE  !(revert)
[L4999]  CALL        call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]              assume msgsender_MSG != null;
[L4933]              Balance[this] := 0;
[L4934]              name_RariToken[this] := 920169039;
[L4935]              symbol_RariToken[this] := 1865763617;
[L4936]              decimals_RariToken[this] := 18;
[L4937]              mintStopped_RariToken[this] := false;
[L4999]  RET         call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5000]  COND FALSE  !(revert)
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND FALSE  !(choice == 12)
[L7357]  COND FALSE  !(choice == 11)
[L7363]  COND FALSE  !(choice == 10)
[L7370]  COND FALSE  !(choice == 9)
[L7377]  COND FALSE  !(choice == 8)
[L7384]  COND FALSE  !(choice == 7)
[L7391]  COND FALSE  !(choice == 6)
[L7397]  COND FALSE  !(choice == 5)
[L7403]  COND FALSE  !(choice == 4)
[L7409]  COND FALSE  !(choice == 3)
[L7415]  COND TRUE   choice == 2
[L7416]              gas := gas - 21000;
[L7417]  COND TRUE   gas >= 0
[L7418]              assume amount_s960 >= 0 && amount_s960 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7419]              assume msgvalue_MSG == 0;
[L7420]  CALL        call __ret_0_mint := mint~address~uint256_RariToken(this, msgsender_MSG, msgvalue_MSG, account_s960, amount_s960);
[L1783]              havoc __exception;
[L1784]              revert := false;
[L1785]  COND FALSE  !(__exception)
[L1809]  CALL        call __ret_0_ := mint~address~uint256_RariToken__success(this, msgsender_MSG, msgvalue_MSG, account_s960, amount_s960);
[L5029]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6494]  COND FALSE  !(DType[this] == RariToken)
[L6499]  COND FALSE  !(DType[this] == ERC20Pausable)
[L6504]  COND FALSE  !(DType[this] == Pausable)
[L6509]  COND TRUE   DType[this] == Ownable
[L6510]  CALL        call __var_1 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3082]  COND TRUE   DType[this] == RariToken
[L3083]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3083]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3084]  COND FALSE  !(revert)
[L3105]              __ret_0_ := __var_2 == _owner_Ownable[this];
[L6510]  RET         call __var_1 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6511]  COND FALSE  !(revert)
[L6517]  COND FALSE  !(!__var_1)
[L5029]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5030]  COND FALSE  !(revert)
[L5033]  COND FALSE  !(!!mintStopped_RariToken[this])
[L5037]  COND TRUE   DType[this] == RariToken
[L5038]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s960, amount_s960);
[L4321]              __var_20 := null;
[L4322]  COND FALSE  !(!(account_s700 != null))
[L4326]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s700);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4326]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s700);
[L4327]  COND FALSE  !(revert)
[L4330]              _totalSupply_ERC20[this] := __var_21;
[L4331]  CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s700], amount_s700);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4331]  RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s700], amount_s700);
[L4332]  COND FALSE  !(revert)
[L4335]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s700];
[L4336]              _balances_ERC20[this][account_s700] := __var_22;
[L4337]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s700];
[L4338]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5038]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s960, amount_s960);
[L5039]  COND FALSE  !(revert)
[L5045]              __ret_0_ := true;
[L1809]  RET         call __ret_0_ := mint~address~uint256_RariToken__success(this, msgsender_MSG, msgvalue_MSG, account_s960, amount_s960);
[L1810]              assume !revert && gas >= 0;
[L7420]  RET         call __ret_0_mint := mint~address~uint256_RariToken(this, msgsender_MSG, msgvalue_MSG, account_s960, amount_s960);
[L7446]  RET         call CorralChoice_RariToken(this);
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND FALSE  !(__exception)
[L1438]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4696]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4696]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4697]  COND FALSE  !(revert)
[L4700]  COND TRUE   DType[this] == RariToken
[L4701]  CALL        call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3651]  COND TRUE   DType[this] == RariToken
[L3652]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3652]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3653]  COND FALSE  !(revert)
[L3669]  COND TRUE   DType[this] == RariToken
[L3670]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4265]              __var_16 := null;
[L4266]  COND FALSE  !(!(sender_s657 != null))
[L4270]              __var_17 := null;
[L4271]  COND FALSE  !(!(recipient_s657 != null))
[L4275]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L4275]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4276]  COND FALSE  !(revert)
[L4279]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s657];
[L4280]              _balances_ERC20[this][sender_s657] := __var_18;
[L4281]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s657];
[L4282]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4282]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L4283]  COND FALSE  !(revert)
[L4286]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s657];
[L4287]              _balances_ERC20[this][recipient_s657] := __var_19;
[L4288]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s657];
[L4289]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3670]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3671]  COND FALSE  !(revert)
[L3687]              __ret_0_ := true;
[L4701]  RET         call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4702]  COND FALSE  !(revert)
[L4713]              __ret_0_ := __var_31;
[L1438]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1439]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && mintStopped_RariToken[this] == old(mintStopped_RariToken[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND TRUE   choice == 21
[L7297]              gas := gas - 21000;
[L7298]  COND FALSE  !(gas >= 0)
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:26:20,441 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:26:20,441 INFO  L82        PathProgramCache]: Analyzing trace with hash 1919760532, now seen corresponding path program 1 times
[2020-11-25 03:26:20,442 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:26:20,456 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:26:20,604 INFO  L134       CoverageAnalysis]: Checked inductivity of 790 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 789 trivial. 0 not checked.
[2020-11-25 03:26:20,604 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:26:20,604 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 03:26:20,605 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:26:20,605 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 03:26:20,605 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 03:26:20,605 INFO  L87              Difference]: Start difference. First operand 6143 states and 7351 transitions. cyclomatic complexity: 1218 Second operand 7 states.
[2020-11-25 03:26:20,691 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:26:20,691 INFO  L93              Difference]: Finished difference Result 6171 states and 7395 transitions.
[2020-11-25 03:26:20,691 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 03:26:20,691 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6171 states and 7395 transitions.
[2020-11-25 03:26:20,702 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 03:26:20,715 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6171 states to 6155 states and 7379 transitions.
[2020-11-25 03:26:20,715 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1262
[2020-11-25 03:26:20,715 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1262
[2020-11-25 03:26:20,715 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6155 states and 7379 transitions.
[2020-11-25 03:26:20,719 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:26:20,719 INFO  L728         BuchiCegarLoop]: Abstraction has 6155 states and 7379 transitions.
[2020-11-25 03:26:20,722 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6155 states and 7379 transitions.
[2020-11-25 03:26:20,750 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6155 to 6143.
[2020-11-25 03:26:20,750 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6143 states.
[2020-11-25 03:26:20,757 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6143 states to 6143 states and 7351 transitions.
[2020-11-25 03:26:20,757 INFO  L751         BuchiCegarLoop]: Abstraction has 6143 states and 7351 transitions.
[2020-11-25 03:26:20,757 INFO  L631         BuchiCegarLoop]: Abstraction has 6143 states and 7351 transitions.
[2020-11-25 03:26:20,757 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 03:26:20,757 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6143 states and 7351 transitions.
[2020-11-25 03:26:20,763 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 03:26:20,763 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:26:20,763 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:26:20,764 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:26:20,764 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L4979]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4979]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4983]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4987]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]  COND FALSE  !(revert)
[L4991]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4991]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4992]  COND FALSE  !(revert)
[L4995]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4641]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4641]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4642]  COND FALSE  !(revert)
[L4645]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4645]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4646]  COND FALSE  !(revert)
[L4649]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4649]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4650]  COND FALSE  !(revert)
[L4653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4654]  COND FALSE  !(revert)
[L4657]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4657]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4658]  COND FALSE  !(revert)
[L4661]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume msgsender_MSG != null;
[L4607]              Balance[this] := 0;
[L4661]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]  COND FALSE  !(revert)
[L4995]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4996]  COND FALSE  !(revert)
[L4999]  CALL        call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]              assume msgsender_MSG != null;
[L4933]              Balance[this] := 0;
[L4934]              name_RariToken[this] := 920169039;
[L4935]              symbol_RariToken[this] := 1865763617;
[L4936]              decimals_RariToken[this] := 18;
[L4937]              mintStopped_RariToken[this] := false;
[L4999]  RET         call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5000]  COND FALSE  !(revert)
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND FALSE  !(choice == 12)
[L7357]  COND FALSE  !(choice == 11)
[L7363]  COND FALSE  !(choice == 10)
[L7370]  COND FALSE  !(choice == 9)
[L7377]  COND FALSE  !(choice == 8)
[L7384]  COND FALSE  !(choice == 7)
[L7391]  COND FALSE  !(choice == 6)
[L7397]  COND FALSE  !(choice == 5)
[L7403]  COND FALSE  !(choice == 4)
[L7409]  COND FALSE  !(choice == 3)
[L7415]  COND TRUE   choice == 2
[L7416]              gas := gas - 21000;
[L7417]  COND TRUE   gas >= 0
[L7418]              assume amount_s960 >= 0 && amount_s960 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7419]              assume msgvalue_MSG == 0;
[L7420]  CALL        call __ret_0_mint := mint~address~uint256_RariToken(this, msgsender_MSG, msgvalue_MSG, account_s960, amount_s960);
[L1783]              havoc __exception;
[L1784]              revert := false;
[L1785]  COND FALSE  !(__exception)
[L1809]  CALL        call __ret_0_ := mint~address~uint256_RariToken__success(this, msgsender_MSG, msgvalue_MSG, account_s960, amount_s960);
[L5029]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6494]  COND TRUE   DType[this] == RariToken
[L6495]  CALL        call __var_1 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3082]  COND TRUE   DType[this] == RariToken
[L3083]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3083]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3084]  COND FALSE  !(revert)
[L3105]              __ret_0_ := __var_2 == _owner_Ownable[this];
[L6495]  RET         call __var_1 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]  COND FALSE  !(revert)
[L6517]  COND FALSE  !(!__var_1)
[L5029]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5030]  COND FALSE  !(revert)
[L5033]  COND FALSE  !(!!mintStopped_RariToken[this])
[L5037]  COND TRUE   DType[this] == RariToken
[L5038]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s960, amount_s960);
[L4321]              __var_20 := null;
[L4322]  COND FALSE  !(!(account_s700 != null))
[L4326]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s700);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4326]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s700);
[L4327]  COND FALSE  !(revert)
[L4330]              _totalSupply_ERC20[this] := __var_21;
[L4331]  CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s700], amount_s700);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4331]  RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s700], amount_s700);
[L4332]  COND FALSE  !(revert)
[L4335]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s700];
[L4336]              _balances_ERC20[this][account_s700] := __var_22;
[L4337]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s700];
[L4338]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5038]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s960, amount_s960);
[L5039]  COND FALSE  !(revert)
[L5045]              __ret_0_ := true;
[L1809]  RET         call __ret_0_ := mint~address~uint256_RariToken__success(this, msgsender_MSG, msgvalue_MSG, account_s960, amount_s960);
[L1810]              assume !revert && gas >= 0;
[L7420]  RET         call __ret_0_mint := mint~address~uint256_RariToken(this, msgsender_MSG, msgvalue_MSG, account_s960, amount_s960);
[L7446]  RET         call CorralChoice_RariToken(this);
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND FALSE  !(__exception)
[L1438]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4696]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4696]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4697]  COND FALSE  !(revert)
[L4700]  COND TRUE   DType[this] == RariToken
[L4701]  CALL        call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3651]  COND TRUE   DType[this] == RariToken
[L3652]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3652]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3653]  COND FALSE  !(revert)
[L3669]  COND TRUE   DType[this] == RariToken
[L3670]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4265]              __var_16 := null;
[L4266]  COND FALSE  !(!(sender_s657 != null))
[L4270]              __var_17 := null;
[L4271]  COND FALSE  !(!(recipient_s657 != null))
[L4275]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L4275]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4276]  COND FALSE  !(revert)
[L4279]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s657];
[L4280]              _balances_ERC20[this][sender_s657] := __var_18;
[L4281]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s657];
[L4282]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4282]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L4283]  COND FALSE  !(revert)
[L4286]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s657];
[L4287]              _balances_ERC20[this][recipient_s657] := __var_19;
[L4288]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s657];
[L4289]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3670]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3671]  COND FALSE  !(revert)
[L3687]              __ret_0_ := true;
[L4701]  RET         call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4702]  COND FALSE  !(revert)
[L4713]              __ret_0_ := __var_31;
[L1438]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1439]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && mintStopped_RariToken[this] == old(mintStopped_RariToken[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND FALSE  !(__exception)
[L1438]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4696]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4696]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4697]  COND FALSE  !(revert)
[L4700]  COND TRUE   DType[this] == RariToken
[L4701]  CALL        call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3651]  COND TRUE   DType[this] == RariToken
[L3652]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3652]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3653]  COND FALSE  !(revert)
[L3669]  COND TRUE   DType[this] == RariToken
[L3670]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4265]              __var_16 := null;
[L4266]  COND FALSE  !(!(sender_s657 != null))
[L4270]              __var_17 := null;
[L4271]  COND FALSE  !(!(recipient_s657 != null))
[L4275]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L4275]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4276]  COND FALSE  !(revert)
[L4279]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s657];
[L4280]              _balances_ERC20[this][sender_s657] := __var_18;
[L4281]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s657];
[L4282]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4282]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L4283]  COND FALSE  !(revert)
[L4286]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s657];
[L4287]              _balances_ERC20[this][recipient_s657] := __var_19;
[L4288]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s657];
[L4289]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3670]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3671]  COND FALSE  !(revert)
[L3687]              __ret_0_ := true;
[L4701]  RET         call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4702]  COND FALSE  !(revert)
[L4713]              __ret_0_ := __var_31;
[L1438]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1439]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && mintStopped_RariToken[this] == old(mintStopped_RariToken[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:26:20,768 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:26:20,768 INFO  L82        PathProgramCache]: Analyzing trace with hash -1302825954, now seen corresponding path program 1 times
[2020-11-25 03:26:20,769 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:26:20,799 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:26:22,205 INFO  L134       CoverageAnalysis]: Checked inductivity of 790 backedges. 10 proven. 64 refuted. 0 times theorem prover too weak. 716 trivial. 0 not checked.
[2020-11-25 03:26:22,206 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:26:22,206 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [45] total 45
[2020-11-25 03:26:22,206 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:26:22,206 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 46 interpolants.
[2020-11-25 03:26:22,207 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=172, Invalid=1898, Unknown=0, NotChecked=0, Total=2070
[2020-11-25 03:26:22,207 INFO  L87              Difference]: Start difference. First operand 6143 states and 7351 transitions. cyclomatic complexity: 1218 Second operand 46 states.
[2020-11-25 03:26:36,316 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:26:36,317 INFO  L93              Difference]: Finished difference Result 6197 states and 7565 transitions.
[2020-11-25 03:26:36,317 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 45 states. 
[2020-11-25 03:26:36,317 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6197 states and 7565 transitions.
[2020-11-25 03:26:36,331 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 32
[2020-11-25 03:26:36,345 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6197 states to 6197 states and 7565 transitions.
[2020-11-25 03:26:36,345 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1282
[2020-11-25 03:26:36,345 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1282
[2020-11-25 03:26:36,346 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6197 states and 7565 transitions.
[2020-11-25 03:26:36,350 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:26:36,350 INFO  L728         BuchiCegarLoop]: Abstraction has 6197 states and 7565 transitions.
[2020-11-25 03:26:36,353 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6197 states and 7565 transitions.
[2020-11-25 03:26:36,381 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6197 to 6163.
[2020-11-25 03:26:36,381 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6163 states.
[2020-11-25 03:26:36,389 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6163 states to 6163 states and 7427 transitions.
[2020-11-25 03:26:36,389 INFO  L751         BuchiCegarLoop]: Abstraction has 6163 states and 7427 transitions.
[2020-11-25 03:26:36,389 INFO  L631         BuchiCegarLoop]: Abstraction has 6163 states and 7427 transitions.
[2020-11-25 03:26:36,389 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 03:26:36,389 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6163 states and 7427 transitions.
[2020-11-25 03:26:36,395 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 20
[2020-11-25 03:26:36,395 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:26:36,395 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:26:36,397 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:26:36,397 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L4979]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4979]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4983]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4987]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]  COND FALSE  !(revert)
[L4991]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4991]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4992]  COND FALSE  !(revert)
[L4995]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4641]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4641]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4642]  COND FALSE  !(revert)
[L4645]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4645]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4646]  COND FALSE  !(revert)
[L4649]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4649]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4650]  COND FALSE  !(revert)
[L4653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4654]  COND FALSE  !(revert)
[L4657]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4657]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4658]  COND FALSE  !(revert)
[L4661]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume msgsender_MSG != null;
[L4607]              Balance[this] := 0;
[L4661]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]  COND FALSE  !(revert)
[L4995]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4996]  COND FALSE  !(revert)
[L4999]  CALL        call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]              assume msgsender_MSG != null;
[L4933]              Balance[this] := 0;
[L4934]              name_RariToken[this] := 920169039;
[L4935]              symbol_RariToken[this] := 1865763617;
[L4936]              decimals_RariToken[this] := 18;
[L4937]              mintStopped_RariToken[this] := false;
[L4999]  RET         call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5000]  COND FALSE  !(revert)
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND FALSE  !(choice == 12)
[L7357]  COND FALSE  !(choice == 11)
[L7363]  COND FALSE  !(choice == 10)
[L7370]  COND TRUE   choice == 9
[L7371]              gas := gas - 21000;
[L7372]  COND TRUE   gas >= 0
[L7373]              assume value_s862 >= 0 && value_s862 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7374]              assume msgvalue_MSG == 0;
[L7375]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L1472]              havoc __exception;
[L1473]              revert := false;
[L1474]  COND FALSE  !(__exception)
[L1498]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L4746]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4746]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4747]  COND FALSE  !(revert)
[L4750]  COND FALSE  !(DType[this] == RariToken)
[L4755]  COND TRUE   DType[this] == ERC20Pausable
[L4756]  CALL        call __var_33 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L3879]  COND TRUE   DType[this] == RariToken
[L3880]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, recipient_s545, amount_s545);
[L4265]              __var_16 := null;
[L4266]  COND FALSE  !(!(sender_s657 != null))
[L4270]              __var_17 := null;
[L4271]  COND FALSE  !(!(recipient_s657 != null))
[L4275]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L4275]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4276]  COND FALSE  !(revert)
[L4279]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s657];
[L4280]              _balances_ERC20[this][sender_s657] := __var_18;
[L4281]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s657];
[L4282]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4282]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L4283]  COND FALSE  !(revert)
[L4286]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s657];
[L4287]              _balances_ERC20[this][recipient_s657] := __var_19;
[L4288]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s657];
[L4289]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3880]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, recipient_s545, amount_s545);
[L3881]  COND FALSE  !(revert)
[L3897]  COND TRUE   DType[this] == RariToken
[L3898]  CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3898]  RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3899]  COND FALSE  !(revert)
[L3915]  COND FALSE  !(DType[this] == RariToken)
[L3920]  COND TRUE   DType[this] == ERC20Pausable
[L3921]  CALL        call __var_9 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3921]  RET         call __var_9 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3922]  COND FALSE  !(revert)
[L3933]  CALL        call __var_8 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s545][__var_9], amount_s545, -1090383464);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L3933]  RET         call __var_8 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s545][__var_9], amount_s545, -1090383464);
[L3934]  COND FALSE  !(revert)
[L3937]  COND FALSE  !(DType[this] == RariToken)
[L3942]  COND FALSE  !(DType[this] == ERC20Pausable)
[L3947]  COND TRUE   DType[this] == ERC20
[L3948]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, __var_7, __var_8);
[L4413]              __var_26 := null;
[L4414]  COND FALSE  !(!(owner_s787 != null))
[L4418]              __var_27 := null;
[L4419]  COND FALSE  !(!(spender_s787 != null))
[L4423]              sum__allowances1[owner_s787] := sum__allowances1[owner_s787] - _allowances_ERC20[this][owner_s787][spender_s787];
[L4424]              _allowances_ERC20[this][owner_s787][spender_s787] := amount_s787;
[L4425]              sum__allowances1[owner_s787] := sum__allowances1[owner_s787] + _allowances_ERC20[this][owner_s787][spender_s787];
[L4426]              assert { :EventEmitted "Approval_ERC20" } true;
[L3948]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, __var_7, __var_8);
[L3949]  COND FALSE  !(revert)
[L3955]              __ret_0_ := true;
[L4756]  RET         call __var_33 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L4757]  COND FALSE  !(revert)
[L4763]              __ret_0_ := __var_33;
[L1498]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L1499]              assume !revert && gas >= 0;
[L7375]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L7446]  RET         call CorralChoice_RariToken(this);
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND FALSE  !(__exception)
[L1438]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4696]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4696]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4697]  COND FALSE  !(revert)
[L4700]  COND TRUE   DType[this] == RariToken
[L4701]  CALL        call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3651]  COND TRUE   DType[this] == RariToken
[L3652]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3652]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3653]  COND FALSE  !(revert)
[L3669]  COND TRUE   DType[this] == RariToken
[L3670]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4265]              __var_16 := null;
[L4266]  COND FALSE  !(!(sender_s657 != null))
[L4270]              __var_17 := null;
[L4271]  COND FALSE  !(!(recipient_s657 != null))
[L4275]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L4275]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4276]  COND FALSE  !(revert)
[L4279]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s657];
[L4280]              _balances_ERC20[this][sender_s657] := __var_18;
[L4281]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s657];
[L4282]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4282]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L4283]  COND FALSE  !(revert)
[L4286]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s657];
[L4287]              _balances_ERC20[this][recipient_s657] := __var_19;
[L4288]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s657];
[L4289]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3670]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3671]  COND FALSE  !(revert)
[L3687]              __ret_0_ := true;
[L4701]  RET         call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4702]  COND FALSE  !(revert)
[L4713]              __ret_0_ := __var_31;
[L1438]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1439]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && mintStopped_RariToken[this] == old(mintStopped_RariToken[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND TRUE   choice == 21
[L7297]              gas := gas - 21000;
[L7298]  COND FALSE  !(gas >= 0)
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:26:36,401 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:26:36,401 INFO  L82        PathProgramCache]: Analyzing trace with hash 1357052744, now seen corresponding path program 1 times
[2020-11-25 03:26:36,401 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:26:36,432 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:26:36,583 INFO  L134       CoverageAnalysis]: Checked inductivity of 805 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 804 trivial. 0 not checked.
[2020-11-25 03:26:36,584 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:26:36,584 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:26:36,584 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:26:36,584 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:26:36,584 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:26:36,584 INFO  L87              Difference]: Start difference. First operand 6163 states and 7427 transitions. cyclomatic complexity: 1278 Second operand 3 states.
[2020-11-25 03:26:36,689 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:26:36,689 INFO  L93              Difference]: Finished difference Result 6199 states and 7471 transitions.
[2020-11-25 03:26:36,690 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:26:36,690 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6199 states and 7471 transitions.
[2020-11-25 03:26:36,701 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 20
[2020-11-25 03:26:36,713 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6199 states to 6199 states and 7471 transitions.
[2020-11-25 03:26:36,714 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1282
[2020-11-25 03:26:36,714 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1282
[2020-11-25 03:26:36,714 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6199 states and 7471 transitions.
[2020-11-25 03:26:36,718 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:26:36,718 INFO  L728         BuchiCegarLoop]: Abstraction has 6199 states and 7471 transitions.
[2020-11-25 03:26:36,721 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6199 states and 7471 transitions.
[2020-11-25 03:26:36,749 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6199 to 6187.
[2020-11-25 03:26:36,749 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6187 states.
[2020-11-25 03:26:36,757 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6187 states to 6187 states and 7455 transitions.
[2020-11-25 03:26:36,757 INFO  L751         BuchiCegarLoop]: Abstraction has 6187 states and 7455 transitions.
[2020-11-25 03:26:36,757 INFO  L631         BuchiCegarLoop]: Abstraction has 6187 states and 7455 transitions.
[2020-11-25 03:26:36,757 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 03:26:36,757 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6187 states and 7455 transitions.
[2020-11-25 03:26:36,763 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 20
[2020-11-25 03:26:36,763 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:26:36,763 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:26:36,764 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:26:36,764 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L4979]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4979]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4983]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4987]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]  COND FALSE  !(revert)
[L4991]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4991]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4992]  COND FALSE  !(revert)
[L4995]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4641]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4641]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4642]  COND FALSE  !(revert)
[L4645]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4645]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4646]  COND FALSE  !(revert)
[L4649]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4649]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4650]  COND FALSE  !(revert)
[L4653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4654]  COND FALSE  !(revert)
[L4657]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4657]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4658]  COND FALSE  !(revert)
[L4661]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume msgsender_MSG != null;
[L4607]              Balance[this] := 0;
[L4661]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]  COND FALSE  !(revert)
[L4995]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4996]  COND FALSE  !(revert)
[L4999]  CALL        call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]              assume msgsender_MSG != null;
[L4933]              Balance[this] := 0;
[L4934]              name_RariToken[this] := 920169039;
[L4935]              symbol_RariToken[this] := 1865763617;
[L4936]              decimals_RariToken[this] := 18;
[L4937]              mintStopped_RariToken[this] := false;
[L4999]  RET         call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5000]  COND FALSE  !(revert)
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND FALSE  !(choice == 12)
[L7357]  COND FALSE  !(choice == 11)
[L7363]  COND FALSE  !(choice == 10)
[L7370]  COND TRUE   choice == 9
[L7371]              gas := gas - 21000;
[L7372]  COND TRUE   gas >= 0
[L7373]              assume value_s862 >= 0 && value_s862 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7374]              assume msgvalue_MSG == 0;
[L7375]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L1472]              havoc __exception;
[L1473]              revert := false;
[L1474]  COND FALSE  !(__exception)
[L1498]  CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L4746]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4746]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4747]  COND FALSE  !(revert)
[L4750]  COND TRUE   DType[this] == RariToken
[L4751]  CALL        call __var_33 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L3879]  COND TRUE   DType[this] == RariToken
[L3880]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, recipient_s545, amount_s545);
[L4265]              __var_16 := null;
[L4266]  COND FALSE  !(!(sender_s657 != null))
[L4270]              __var_17 := null;
[L4271]  COND FALSE  !(!(recipient_s657 != null))
[L4275]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L4275]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4276]  COND FALSE  !(revert)
[L4279]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s657];
[L4280]              _balances_ERC20[this][sender_s657] := __var_18;
[L4281]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s657];
[L4282]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4282]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L4283]  COND FALSE  !(revert)
[L4286]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s657];
[L4287]              _balances_ERC20[this][recipient_s657] := __var_19;
[L4288]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s657];
[L4289]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3880]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, recipient_s545, amount_s545);
[L3881]  COND FALSE  !(revert)
[L3897]  COND TRUE   DType[this] == RariToken
[L3898]  CALL        call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3898]  RET         call __var_7 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3899]  COND FALSE  !(revert)
[L3915]  COND TRUE   DType[this] == RariToken
[L3916]  CALL        call __var_9 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3916]  RET         call __var_9 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L3933]  CALL        call __var_8 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s545][__var_9], amount_s545, -1090383464);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L3933]  RET         call __var_8 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s545][__var_9], amount_s545, -1090383464);
[L3934]  COND FALSE  !(revert)
[L3937]  COND TRUE   DType[this] == RariToken
[L3938]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, __var_7, __var_8);
[L4413]              __var_26 := null;
[L4414]  COND FALSE  !(!(owner_s787 != null))
[L4418]              __var_27 := null;
[L4419]  COND FALSE  !(!(spender_s787 != null))
[L4423]              sum__allowances1[owner_s787] := sum__allowances1[owner_s787] - _allowances_ERC20[this][owner_s787][spender_s787];
[L4424]              _allowances_ERC20[this][owner_s787][spender_s787] := amount_s787;
[L4425]              sum__allowances1[owner_s787] := sum__allowances1[owner_s787] + _allowances_ERC20[this][owner_s787][spender_s787];
[L4426]              assert { :EventEmitted "Approval_ERC20" } true;
[L3938]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s545, __var_7, __var_8);
[L3939]  COND FALSE  !(revert)
[L3955]              __ret_0_ := true;
[L4751]  RET         call __var_33 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L4752]  COND FALSE  !(revert)
[L4763]              __ret_0_ := __var_33;
[L1498]  RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L1499]              assume !revert && gas >= 0;
[L7375]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s862, to_s862, value_s862);
[L7446]  RET         call CorralChoice_RariToken(this);
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND FALSE  !(__exception)
[L1438]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4696]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4696]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4697]  COND FALSE  !(revert)
[L4700]  COND TRUE   DType[this] == RariToken
[L4701]  CALL        call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3651]  COND TRUE   DType[this] == RariToken
[L3652]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3652]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3653]  COND FALSE  !(revert)
[L3669]  COND TRUE   DType[this] == RariToken
[L3670]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4265]              __var_16 := null;
[L4266]  COND FALSE  !(!(sender_s657 != null))
[L4270]              __var_17 := null;
[L4271]  COND FALSE  !(!(recipient_s657 != null))
[L4275]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L4275]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4276]  COND FALSE  !(revert)
[L4279]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s657];
[L4280]              _balances_ERC20[this][sender_s657] := __var_18;
[L4281]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s657];
[L4282]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4282]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L4283]  COND FALSE  !(revert)
[L4286]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s657];
[L4287]              _balances_ERC20[this][recipient_s657] := __var_19;
[L4288]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s657];
[L4289]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3670]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3671]  COND FALSE  !(revert)
[L3687]              __ret_0_ := true;
[L4701]  RET         call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4702]  COND FALSE  !(revert)
[L4713]              __ret_0_ := __var_31;
[L1438]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1439]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && mintStopped_RariToken[this] == old(mintStopped_RariToken[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND FALSE  !(__exception)
[L1438]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4696]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4696]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4697]  COND FALSE  !(revert)
[L4700]  COND TRUE   DType[this] == RariToken
[L4701]  CALL        call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3651]  COND TRUE   DType[this] == RariToken
[L3652]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3652]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3653]  COND FALSE  !(revert)
[L3669]  COND TRUE   DType[this] == RariToken
[L3670]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4265]              __var_16 := null;
[L4266]  COND FALSE  !(!(sender_s657 != null))
[L4270]              __var_17 := null;
[L4271]  COND FALSE  !(!(recipient_s657 != null))
[L4275]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L4275]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4276]  COND FALSE  !(revert)
[L4279]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s657];
[L4280]              _balances_ERC20[this][sender_s657] := __var_18;
[L4281]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s657];
[L4282]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4282]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L4283]  COND FALSE  !(revert)
[L4286]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s657];
[L4287]              _balances_ERC20[this][recipient_s657] := __var_19;
[L4288]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s657];
[L4289]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3670]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3671]  COND FALSE  !(revert)
[L3687]              __ret_0_ := true;
[L4701]  RET         call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4702]  COND FALSE  !(revert)
[L4713]              __ret_0_ := __var_31;
[L1438]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1439]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && mintStopped_RariToken[this] == old(mintStopped_RariToken[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:26:36,768 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:26:36,768 INFO  L82        PathProgramCache]: Analyzing trace with hash 660772194, now seen corresponding path program 1 times
[2020-11-25 03:26:36,769 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:26:36,798 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:26:38,645 INFO  L134       CoverageAnalysis]: Checked inductivity of 805 backedges. 11 proven. 67 refuted. 0 times theorem prover too weak. 727 trivial. 0 not checked.
[2020-11-25 03:26:38,645 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:26:38,645 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [52] total 52
[2020-11-25 03:26:38,645 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:26:38,645 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 53 interpolants.
[2020-11-25 03:26:38,646 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=179, Invalid=2577, Unknown=0, NotChecked=0, Total=2756
[2020-11-25 03:26:38,646 INFO  L87              Difference]: Start difference. First operand 6187 states and 7455 transitions. cyclomatic complexity: 1282 Second operand 53 states.
[2020-11-25 03:26:52,828 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:26:52,829 INFO  L93              Difference]: Finished difference Result 6269 states and 7870 transitions.
[2020-11-25 03:26:52,829 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 44 states. 
[2020-11-25 03:26:52,829 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6269 states and 7870 transitions.
[2020-11-25 03:26:52,845 INFO  L131   ngComponentsAnalysis]: Automaton has 10 accepting balls. 40
[2020-11-25 03:26:52,861 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6269 states to 6269 states and 7870 transitions.
[2020-11-25 03:26:52,861 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1304
[2020-11-25 03:26:52,862 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1304
[2020-11-25 03:26:52,862 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6269 states and 7870 transitions.
[2020-11-25 03:26:52,867 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:26:52,867 INFO  L728         BuchiCegarLoop]: Abstraction has 6269 states and 7870 transitions.
[2020-11-25 03:26:52,870 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6269 states and 7870 transitions.
[2020-11-25 03:26:52,902 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6269 to 6225.
[2020-11-25 03:26:52,902 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6225 states.
[2020-11-25 03:26:52,910 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6225 states to 6225 states and 7601 transitions.
[2020-11-25 03:26:52,910 INFO  L751         BuchiCegarLoop]: Abstraction has 6225 states and 7601 transitions.
[2020-11-25 03:26:52,910 INFO  L631         BuchiCegarLoop]: Abstraction has 6225 states and 7601 transitions.
[2020-11-25 03:26:52,910 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 03:26:52,911 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6225 states and 7601 transitions.
[2020-11-25 03:26:52,917 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 24
[2020-11-25 03:26:52,917 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:26:52,917 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:26:52,918 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:26:52,918 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L4979]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4979]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4983]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4987]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]  COND FALSE  !(revert)
[L4991]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4991]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4992]  COND FALSE  !(revert)
[L4995]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4641]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4641]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4642]  COND FALSE  !(revert)
[L4645]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4645]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4646]  COND FALSE  !(revert)
[L4649]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4649]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4650]  COND FALSE  !(revert)
[L4653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4654]  COND FALSE  !(revert)
[L4657]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4657]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4658]  COND FALSE  !(revert)
[L4661]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume msgsender_MSG != null;
[L4607]              Balance[this] := 0;
[L4661]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]  COND FALSE  !(revert)
[L4995]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4996]  COND FALSE  !(revert)
[L4999]  CALL        call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]              assume msgsender_MSG != null;
[L4933]              Balance[this] := 0;
[L4934]              name_RariToken[this] := 920169039;
[L4935]              symbol_RariToken[this] := 1865763617;
[L4936]              decimals_RariToken[this] := 18;
[L4937]              mintStopped_RariToken[this] := false;
[L4999]  RET         call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5000]  COND FALSE  !(revert)
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND FALSE  !(__exception)
[L1438]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4696]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4696]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4697]  COND FALSE  !(revert)
[L4700]  COND TRUE   DType[this] == RariToken
[L4701]  CALL        call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3651]  COND FALSE  !(DType[this] == RariToken)
[L3656]  COND FALSE  !(DType[this] == ERC20Pausable)
[L3661]  COND TRUE   DType[this] == ERC20
[L3662]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3662]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]  COND FALSE  !(revert)
[L3669]  COND FALSE  !(DType[this] == RariToken)
[L3674]  COND FALSE  !(DType[this] == ERC20Pausable)
[L3679]  COND TRUE   DType[this] == ERC20
[L3680]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4265]              __var_16 := null;
[L4266]  COND FALSE  !(!(sender_s657 != null))
[L4270]              __var_17 := null;
[L4271]  COND FALSE  !(!(recipient_s657 != null))
[L4275]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L4275]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4276]  COND FALSE  !(revert)
[L4279]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s657];
[L4280]              _balances_ERC20[this][sender_s657] := __var_18;
[L4281]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s657];
[L4282]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4282]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L4283]  COND FALSE  !(revert)
[L4286]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s657];
[L4287]              _balances_ERC20[this][recipient_s657] := __var_19;
[L4288]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s657];
[L4289]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3680]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3681]  COND FALSE  !(revert)
[L3687]              __ret_0_ := true;
[L4701]  RET         call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4702]  COND FALSE  !(revert)
[L4713]              __ret_0_ := __var_31;
[L1438]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1439]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && mintStopped_RariToken[this] == old(mintStopped_RariToken[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND FALSE  !(__exception)
[L1438]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4696]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4696]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4697]  COND FALSE  !(revert)
[L4700]  COND TRUE   DType[this] == RariToken
[L4701]  CALL        call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3651]  COND TRUE   DType[this] == RariToken
[L3652]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3652]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3653]  COND FALSE  !(revert)
[L3669]  COND TRUE   DType[this] == RariToken
[L3670]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4265]              __var_16 := null;
[L4266]  COND FALSE  !(!(sender_s657 != null))
[L4270]              __var_17 := null;
[L4271]  COND FALSE  !(!(recipient_s657 != null))
[L4275]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L4275]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4276]  COND FALSE  !(revert)
[L4279]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s657];
[L4280]              _balances_ERC20[this][sender_s657] := __var_18;
[L4281]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s657];
[L4282]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4282]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L4283]  COND FALSE  !(revert)
[L4286]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s657];
[L4287]              _balances_ERC20[this][recipient_s657] := __var_19;
[L4288]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s657];
[L4289]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3670]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3671]  COND FALSE  !(revert)
[L3687]              __ret_0_ := true;
[L4701]  RET         call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4702]  COND FALSE  !(revert)
[L4713]              __ret_0_ := __var_31;
[L1438]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1439]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && mintStopped_RariToken[this] == old(mintStopped_RariToken[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND FALSE  !(__exception)
[L1438]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4696]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4696]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4697]  COND FALSE  !(revert)
[L4700]  COND TRUE   DType[this] == RariToken
[L4701]  CALL        call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3651]  COND TRUE   DType[this] == RariToken
[L3652]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3652]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3653]  COND FALSE  !(revert)
[L3669]  COND TRUE   DType[this] == RariToken
[L3670]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4265]              __var_16 := null;
[L4266]  COND FALSE  !(!(sender_s657 != null))
[L4270]              __var_17 := null;
[L4271]  COND FALSE  !(!(recipient_s657 != null))
[L4275]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L4275]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4276]  COND FALSE  !(revert)
[L4279]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s657];
[L4280]              _balances_ERC20[this][sender_s657] := __var_18;
[L4281]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s657];
[L4282]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4282]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L4283]  COND FALSE  !(revert)
[L4286]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s657];
[L4287]              _balances_ERC20[this][recipient_s657] := __var_19;
[L4288]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s657];
[L4289]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3670]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3671]  COND FALSE  !(revert)
[L3687]              __ret_0_ := true;
[L4701]  RET         call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4702]  COND FALSE  !(revert)
[L4713]              __ret_0_ := __var_31;
[L1438]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1439]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && mintStopped_RariToken[this] == old(mintStopped_RariToken[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:26:52,922 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:26:52,922 INFO  L82        PathProgramCache]: Analyzing trace with hash 748981313, now seen corresponding path program 1 times
[2020-11-25 03:26:52,922 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:26:52,936 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:26:53,071 INFO  L134       CoverageAnalysis]: Checked inductivity of 794 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 793 trivial. 0 not checked.
[2020-11-25 03:26:53,071 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:26:53,071 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 03:26:53,071 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:26:53,071 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 03:26:53,071 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 03:26:53,071 INFO  L87              Difference]: Start difference. First operand 6225 states and 7601 transitions. cyclomatic complexity: 1396 Second operand 7 states.
[2020-11-25 03:26:53,163 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:26:53,163 INFO  L93              Difference]: Finished difference Result 6381 states and 7761 transitions.
[2020-11-25 03:26:53,164 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 03:26:53,164 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6381 states and 7761 transitions.
[2020-11-25 03:26:53,177 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 24
[2020-11-25 03:26:53,190 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6381 states to 6185 states and 7545 transitions.
[2020-11-25 03:26:53,190 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1282
[2020-11-25 03:26:53,191 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1282
[2020-11-25 03:26:53,191 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6185 states and 7545 transitions.
[2020-11-25 03:26:53,195 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:26:53,195 INFO  L728         BuchiCegarLoop]: Abstraction has 6185 states and 7545 transitions.
[2020-11-25 03:26:53,198 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6185 states and 7545 transitions.
[2020-11-25 03:26:53,264 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6185 to 6185.
[2020-11-25 03:26:53,264 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6185 states.
[2020-11-25 03:26:53,272 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6185 states to 6185 states and 7545 transitions.
[2020-11-25 03:26:53,272 INFO  L751         BuchiCegarLoop]: Abstraction has 6185 states and 7545 transitions.
[2020-11-25 03:26:53,272 INFO  L631         BuchiCegarLoop]: Abstraction has 6185 states and 7545 transitions.
[2020-11-25 03:26:53,272 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 03:26:53,272 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6185 states and 7545 transitions.
[2020-11-25 03:26:53,279 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 24
[2020-11-25 03:26:53,279 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:26:53,279 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:26:53,280 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:26:53,280 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L4979]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4979]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4983]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4987]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]  COND FALSE  !(revert)
[L4991]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4991]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4992]  COND FALSE  !(revert)
[L4995]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4641]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4641]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4642]  COND FALSE  !(revert)
[L4645]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4645]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4646]  COND FALSE  !(revert)
[L4649]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4649]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4650]  COND FALSE  !(revert)
[L4653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4654]  COND FALSE  !(revert)
[L4657]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4657]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4658]  COND FALSE  !(revert)
[L4661]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume msgsender_MSG != null;
[L4607]              Balance[this] := 0;
[L4661]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]  COND FALSE  !(revert)
[L4995]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4996]  COND FALSE  !(revert)
[L4999]  CALL        call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]              assume msgsender_MSG != null;
[L4933]              Balance[this] := 0;
[L4934]              name_RariToken[this] := 920169039;
[L4935]              symbol_RariToken[this] := 1865763617;
[L4936]              decimals_RariToken[this] := 18;
[L4937]              mintStopped_RariToken[this] := false;
[L4999]  RET         call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5000]  COND FALSE  !(revert)
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND FALSE  !(__exception)
[L1438]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4696]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4696]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4697]  COND FALSE  !(revert)
[L4700]  COND TRUE   DType[this] == RariToken
[L4701]  CALL        call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3651]  COND FALSE  !(DType[this] == RariToken)
[L3656]  COND TRUE   DType[this] == ERC20Pausable
[L3657]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3657]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3658]  COND FALSE  !(revert)
[L3669]  COND TRUE   DType[this] == RariToken
[L3670]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4265]              __var_16 := null;
[L4266]  COND FALSE  !(!(sender_s657 != null))
[L4270]              __var_17 := null;
[L4271]  COND FALSE  !(!(recipient_s657 != null))
[L4275]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L4275]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4276]  COND FALSE  !(revert)
[L4279]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s657];
[L4280]              _balances_ERC20[this][sender_s657] := __var_18;
[L4281]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s657];
[L4282]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4282]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L4283]  COND FALSE  !(revert)
[L4286]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s657];
[L4287]              _balances_ERC20[this][recipient_s657] := __var_19;
[L4288]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s657];
[L4289]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3670]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3671]  COND FALSE  !(revert)
[L3687]              __ret_0_ := true;
[L4701]  RET         call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4702]  COND FALSE  !(revert)
[L4713]              __ret_0_ := __var_31;
[L1438]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1439]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && mintStopped_RariToken[this] == old(mintStopped_RariToken[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND FALSE  !(__exception)
[L1438]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4696]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4696]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4697]  COND FALSE  !(revert)
[L4700]  COND TRUE   DType[this] == RariToken
[L4701]  CALL        call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3651]  COND TRUE   DType[this] == RariToken
[L3652]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3652]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3653]  COND FALSE  !(revert)
[L3669]  COND TRUE   DType[this] == RariToken
[L3670]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4265]              __var_16 := null;
[L4266]  COND FALSE  !(!(sender_s657 != null))
[L4270]              __var_17 := null;
[L4271]  COND FALSE  !(!(recipient_s657 != null))
[L4275]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L4275]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4276]  COND FALSE  !(revert)
[L4279]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s657];
[L4280]              _balances_ERC20[this][sender_s657] := __var_18;
[L4281]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s657];
[L4282]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4282]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L4283]  COND FALSE  !(revert)
[L4286]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s657];
[L4287]              _balances_ERC20[this][recipient_s657] := __var_19;
[L4288]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s657];
[L4289]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3670]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3671]  COND FALSE  !(revert)
[L3687]              __ret_0_ := true;
[L4701]  RET         call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4702]  COND FALSE  !(revert)
[L4713]              __ret_0_ := __var_31;
[L1438]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1439]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && mintStopped_RariToken[this] == old(mintStopped_RariToken[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND FALSE  !(__exception)
[L1438]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4696]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4696]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4697]  COND FALSE  !(revert)
[L4700]  COND TRUE   DType[this] == RariToken
[L4701]  CALL        call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3651]  COND TRUE   DType[this] == RariToken
[L3652]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3652]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3653]  COND FALSE  !(revert)
[L3669]  COND TRUE   DType[this] == RariToken
[L3670]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4265]              __var_16 := null;
[L4266]  COND FALSE  !(!(sender_s657 != null))
[L4270]              __var_17 := null;
[L4271]  COND FALSE  !(!(recipient_s657 != null))
[L4275]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L4275]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4276]  COND FALSE  !(revert)
[L4279]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s657];
[L4280]              _balances_ERC20[this][sender_s657] := __var_18;
[L4281]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s657];
[L4282]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4282]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L4283]  COND FALSE  !(revert)
[L4286]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s657];
[L4287]              _balances_ERC20[this][recipient_s657] := __var_19;
[L4288]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s657];
[L4289]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3670]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3671]  COND FALSE  !(revert)
[L3687]              __ret_0_ := true;
[L4701]  RET         call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4702]  COND FALSE  !(revert)
[L4713]              __ret_0_ := __var_31;
[L1438]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1439]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && mintStopped_RariToken[this] == old(mintStopped_RariToken[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:26:53,293 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:26:53,294 INFO  L82        PathProgramCache]: Analyzing trace with hash -1617221304, now seen corresponding path program 1 times
[2020-11-25 03:26:53,294 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:26:53,307 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:26:53,427 INFO  L134       CoverageAnalysis]: Checked inductivity of 794 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 793 trivial. 0 not checked.
[2020-11-25 03:26:53,427 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:26:53,427 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:26:53,428 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:26:53,428 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:26:53,428 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:26:53,428 INFO  L87              Difference]: Start difference. First operand 6185 states and 7545 transitions. cyclomatic complexity: 1380 Second operand 3 states.
[2020-11-25 03:26:53,463 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:26:53,463 INFO  L93              Difference]: Finished difference Result 6201 states and 7565 transitions.
[2020-11-25 03:26:53,463 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:26:53,463 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6201 states and 7565 transitions.
[2020-11-25 03:26:53,475 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 24
[2020-11-25 03:26:53,488 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6201 states to 6201 states and 7565 transitions.
[2020-11-25 03:26:53,488 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1288
[2020-11-25 03:26:53,489 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1288
[2020-11-25 03:26:53,489 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6201 states and 7565 transitions.
[2020-11-25 03:26:53,493 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:26:53,493 INFO  L728         BuchiCegarLoop]: Abstraction has 6201 states and 7565 transitions.
[2020-11-25 03:26:53,496 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6201 states and 7565 transitions.
[2020-11-25 03:26:53,525 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6201 to 6189.
[2020-11-25 03:26:53,525 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6189 states.
[2020-11-25 03:26:53,533 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6189 states to 6189 states and 7549 transitions.
[2020-11-25 03:26:53,533 INFO  L751         BuchiCegarLoop]: Abstraction has 6189 states and 7549 transitions.
[2020-11-25 03:26:53,533 INFO  L631         BuchiCegarLoop]: Abstraction has 6189 states and 7549 transitions.
[2020-11-25 03:26:53,533 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-25 03:26:53,533 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6189 states and 7549 transitions.
[2020-11-25 03:26:53,540 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 24
[2020-11-25 03:26:53,540 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:26:53,540 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:26:53,541 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:26:53,541 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L4979]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4979]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4983]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4987]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]  COND FALSE  !(revert)
[L4991]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4991]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4992]  COND FALSE  !(revert)
[L4995]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4641]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4641]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4642]  COND FALSE  !(revert)
[L4645]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4645]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4646]  COND FALSE  !(revert)
[L4649]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4649]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4650]  COND FALSE  !(revert)
[L4653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4654]  COND FALSE  !(revert)
[L4657]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4657]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4658]  COND FALSE  !(revert)
[L4661]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume msgsender_MSG != null;
[L4607]              Balance[this] := 0;
[L4661]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]  COND FALSE  !(revert)
[L4995]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4996]  COND FALSE  !(revert)
[L4999]  CALL        call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]              assume msgsender_MSG != null;
[L4933]              Balance[this] := 0;
[L4934]              name_RariToken[this] := 920169039;
[L4935]              symbol_RariToken[this] := 1865763617;
[L4936]              decimals_RariToken[this] := 18;
[L4937]              mintStopped_RariToken[this] := false;
[L4999]  RET         call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5000]  COND FALSE  !(revert)
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND FALSE  !(__exception)
[L1438]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4696]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4696]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4697]  COND FALSE  !(revert)
[L4700]  COND TRUE   DType[this] == RariToken
[L4701]  CALL        call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3651]  COND TRUE   DType[this] == RariToken
[L3652]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3652]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3653]  COND FALSE  !(revert)
[L3669]  COND TRUE   DType[this] == RariToken
[L3670]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4265]              __var_16 := null;
[L4266]  COND FALSE  !(!(sender_s657 != null))
[L4270]              __var_17 := null;
[L4271]  COND FALSE  !(!(recipient_s657 != null))
[L4275]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L4275]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4276]  COND FALSE  !(revert)
[L4279]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s657];
[L4280]              _balances_ERC20[this][sender_s657] := __var_18;
[L4281]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s657];
[L4282]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4282]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L4283]  COND FALSE  !(revert)
[L4286]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s657];
[L4287]              _balances_ERC20[this][recipient_s657] := __var_19;
[L4288]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s657];
[L4289]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3670]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3671]  COND FALSE  !(revert)
[L3687]              __ret_0_ := true;
[L4701]  RET         call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4702]  COND FALSE  !(revert)
[L4713]              __ret_0_ := __var_31;
[L1438]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1439]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && mintStopped_RariToken[this] == old(mintStopped_RariToken[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND FALSE  !(__exception)
[L1438]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4696]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4696]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4697]  COND FALSE  !(revert)
[L4700]  COND TRUE   DType[this] == RariToken
[L4701]  CALL        call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3651]  COND TRUE   DType[this] == RariToken
[L3652]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3652]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3653]  COND FALSE  !(revert)
[L3669]  COND TRUE   DType[this] == RariToken
[L3670]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4265]              __var_16 := null;
[L4266]  COND FALSE  !(!(sender_s657 != null))
[L4270]              __var_17 := null;
[L4271]  COND FALSE  !(!(recipient_s657 != null))
[L4275]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L4275]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4276]  COND FALSE  !(revert)
[L4279]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s657];
[L4280]              _balances_ERC20[this][sender_s657] := __var_18;
[L4281]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s657];
[L4282]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4282]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L4283]  COND FALSE  !(revert)
[L4286]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s657];
[L4287]              _balances_ERC20[this][recipient_s657] := __var_19;
[L4288]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s657];
[L4289]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3670]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3671]  COND FALSE  !(revert)
[L3687]              __ret_0_ := true;
[L4701]  RET         call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4702]  COND FALSE  !(revert)
[L4713]              __ret_0_ := __var_31;
[L1438]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1439]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && mintStopped_RariToken[this] == old(mintStopped_RariToken[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND FALSE  !(__exception)
[L1438]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4696]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L4696]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4697]  COND FALSE  !(revert)
[L4700]  COND TRUE   DType[this] == RariToken
[L4701]  CALL        call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L3651]  COND TRUE   DType[this] == RariToken
[L3652]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3652]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3653]  COND FALSE  !(revert)
[L3669]  COND TRUE   DType[this] == RariToken
[L3670]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L4265]              __var_16 := null;
[L4266]  COND FALSE  !(!(sender_s657 != null))
[L4270]              __var_17 := null;
[L4271]  COND FALSE  !(!(recipient_s657 != null))
[L4275]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L3438]  COND FALSE  !(!(b_s331 <= a_s331))
[L3442]              c_s331 := (a_s331 - b_s331) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3443]              __ret_0_ := c_s331;
[L4275]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s657], amount_s657, 430844307);
[L4276]  COND FALSE  !(revert)
[L4279]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s657];
[L4280]              _balances_ERC20[this][sender_s657] := __var_18;
[L4281]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s657];
[L4282]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L3414]              c_s304 := (a_s304 + b_s304) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3415]  COND FALSE  !(!(c_s304 >= a_s304))
[L3419]              __ret_0_ := c_s304;
[L4282]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s657], amount_s657);
[L4283]  COND FALSE  !(revert)
[L4286]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s657];
[L4287]              _balances_ERC20[this][recipient_s657] := __var_19;
[L4288]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s657];
[L4289]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3670]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, recipient_s474, amount_s474);
[L3671]  COND FALSE  !(revert)
[L3687]              __ret_0_ := true;
[L4701]  RET         call __var_31 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4702]  COND FALSE  !(revert)
[L4713]              __ret_0_ := __var_31;
[L1438]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1439]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && mintStopped_RariToken[this] == old(mintStopped_RariToken[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:26:53,545 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:26:53,545 INFO  L82        PathProgramCache]: Analyzing trace with hash 150256369, now seen corresponding path program 1 times
[2020-11-25 03:26:53,546 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:26:53,577 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:26:55,517 INFO  L134       CoverageAnalysis]: Checked inductivity of 794 backedges. 18 proven. 3 refuted. 0 times theorem prover too weak. 773 trivial. 0 not checked.
[2020-11-25 03:26:55,518 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:26:55,518 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [44] total 44
[2020-11-25 03:26:55,518 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:26:55,518 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 45 interpolants.
[2020-11-25 03:26:55,519 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=128, Invalid=1852, Unknown=0, NotChecked=0, Total=1980
[2020-11-25 03:26:55,519 INFO  L87              Difference]: Start difference. First operand 6189 states and 7549 transitions. cyclomatic complexity: 1380 Second operand 45 states.
[2020-11-25 03:26:59,497 WARN  L188               SmtUtils]: Spent 110.00 ms on a formula simplification that was a NOOP. DAG size: 85
[2020-11-25 03:26:59,773 WARN  L188               SmtUtils]: Spent 126.00 ms on a formula simplification. DAG size of input: 88 DAG size of output: 87
[2020-11-25 03:27:12,976 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:27:12,977 INFO  L93              Difference]: Finished difference Result 6253 states and 7942 transitions.
[2020-11-25 03:27:12,977 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 39 states. 
[2020-11-25 03:27:12,977 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6253 states and 7942 transitions.
[2020-11-25 03:27:12,994 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 46
[2020-11-25 03:27:13,011 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6253 states to 6253 states and 7942 transitions.
[2020-11-25 03:27:13,011 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1306
[2020-11-25 03:27:13,012 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1306
[2020-11-25 03:27:13,012 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6253 states and 7942 transitions.
[2020-11-25 03:27:13,017 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:27:13,017 INFO  L728         BuchiCegarLoop]: Abstraction has 6253 states and 7942 transitions.
[2020-11-25 03:27:13,020 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6253 states and 7942 transitions.
[2020-11-25 03:27:13,051 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6253 to 6177.
[2020-11-25 03:27:13,052 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6177 states.
[2020-11-25 03:27:13,060 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6177 states to 6177 states and 7524 transitions.
[2020-11-25 03:27:13,060 INFO  L751         BuchiCegarLoop]: Abstraction has 6177 states and 7524 transitions.
[2020-11-25 03:27:13,060 INFO  L631         BuchiCegarLoop]: Abstraction has 6177 states and 7524 transitions.
[2020-11-25 03:27:13,060 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-11-25 03:27:13,060 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6177 states and 7524 transitions.
[2020-11-25 03:27:13,066 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 26
[2020-11-25 03:27:13,066 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:27:13,066 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:27:13,067 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:27:13,068 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L4979]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4979]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4983]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4987]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]  COND FALSE  !(revert)
[L4991]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4991]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4992]  COND FALSE  !(revert)
[L4995]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4641]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4641]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4642]  COND FALSE  !(revert)
[L4645]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4645]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4646]  COND FALSE  !(revert)
[L4649]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4649]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4650]  COND FALSE  !(revert)
[L4653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4654]  COND FALSE  !(revert)
[L4657]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4657]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4658]  COND FALSE  !(revert)
[L4661]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume msgsender_MSG != null;
[L4607]              Balance[this] := 0;
[L4661]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]  COND FALSE  !(revert)
[L4995]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4996]  COND FALSE  !(revert)
[L4999]  CALL        call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]              assume msgsender_MSG != null;
[L4933]              Balance[this] := 0;
[L4934]              name_RariToken[this] := 920169039;
[L4935]              symbol_RariToken[this] := 1865763617;
[L4936]              decimals_RariToken[this] := 18;
[L4937]              mintStopped_RariToken[this] := false;
[L4999]  RET         call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5000]  COND FALSE  !(revert)
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND TRUE   choice == 15
[L7333]              gas := gas - 21000;
[L7334]  COND TRUE   gas >= 0
[L7335]              assume msgvalue_MSG == 0;
[L7336]  CALL        call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L597]               havoc __exception;
[L598]               revert := false;
[L599]   COND FALSE  !(__exception)
[L623]   CALL        call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3323]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6494]  COND FALSE  !(DType[this] == RariToken)
[L6499]  COND FALSE  !(DType[this] == ERC20Pausable)
[L6504]  COND TRUE   DType[this] == Pausable
[L6505]  CALL        call __var_1 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3082]  COND TRUE   DType[this] == RariToken
[L3083]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3083]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3084]  COND FALSE  !(revert)
[L3105]              __ret_0_ := __var_2 == _owner_Ownable[this];
[L6505]  RET         call __var_1 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6506]  COND FALSE  !(revert)
[L6517]  COND FALSE  !(!__var_1)
[L3323]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6549]  COND FALSE  !(!_paused_Pausable[this])
[L3327]  RET         call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3331]              _paused_Pausable[this] := false;
[L3332]              assert { :EventEmitted "Unpaused_Pausable" } true;
[L623]   RET         call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L624]               assume !revert && gas >= 0;
[L7336]  RET         call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L7446]  RET         call CorralChoice_RariToken(this);
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND TRUE   __exception
[L1415]              __tmp__Balance := Balance;
[L1416]              __tmp__DType := DType;
[L1417]              __tmp__Alloc := Alloc;
[L1418]              __tmp__balance_ADDR := balance_ADDR;
[L1419]              __tmp__M_Ref_int := M_Ref_int;
[L1420]              __tmp__sum__balances0 := sum__balances0;
[L1421]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]              __tmp__sum__allowances1 := sum__allowances1;
[L1424]              __tmp__Length := Length;
[L1425]              __tmp__now := now;
[L1426]              __tmp___owner_Ownable := _owner_Ownable;
[L1427]              __tmp___paused_Pausable := _paused_Pausable;
[L1428]              __tmp___balances_ERC20 := _balances_ERC20;
[L1429]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]              __tmp__name_RariToken := name_RariToken;
[L1432]              __tmp__symbol_RariToken := symbol_RariToken;
[L1433]              __tmp__decimals_RariToken := decimals_RariToken;
[L1434]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND TRUE   !!__tmp___paused_Pausable[this]
[L6526]              revert := true;
[L4671]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND TRUE   revert
[L1435]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]              assume revert || gas < 0;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND TRUE   __exception
[L1415]              __tmp__Balance := Balance;
[L1416]              __tmp__DType := DType;
[L1417]              __tmp__Alloc := Alloc;
[L1418]              __tmp__balance_ADDR := balance_ADDR;
[L1419]              __tmp__M_Ref_int := M_Ref_int;
[L1420]              __tmp__sum__balances0 := sum__balances0;
[L1421]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]              __tmp__sum__allowances1 := sum__allowances1;
[L1424]              __tmp__Length := Length;
[L1425]              __tmp__now := now;
[L1426]              __tmp___owner_Ownable := _owner_Ownable;
[L1427]              __tmp___paused_Pausable := _paused_Pausable;
[L1428]              __tmp___balances_ERC20 := _balances_ERC20;
[L1429]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]              __tmp__name_RariToken := name_RariToken;
[L1432]              __tmp__symbol_RariToken := symbol_RariToken;
[L1433]              __tmp__decimals_RariToken := decimals_RariToken;
[L1434]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND TRUE   !!__tmp___paused_Pausable[this]
[L6526]              revert := true;
[L4671]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND TRUE   revert
[L1435]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]              assume revert || gas < 0;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:27:13,071 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:27:13,071 INFO  L82        PathProgramCache]: Analyzing trace with hash -1439570691, now seen corresponding path program 1 times
[2020-11-25 03:27:13,072 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:27:13,084 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:27:13,240 INFO  L134       CoverageAnalysis]: Checked inductivity of 782 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 781 trivial. 0 not checked.
[2020-11-25 03:27:13,240 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:27:13,240 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 03:27:13,241 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:27:13,241 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 03:27:13,241 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 03:27:13,241 INFO  L87              Difference]: Start difference. First operand 6177 states and 7524 transitions. cyclomatic complexity: 1368 Second operand 7 states.
[2020-11-25 03:27:13,337 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:27:13,338 INFO  L93              Difference]: Finished difference Result 6221 states and 7588 transitions.
[2020-11-25 03:27:13,338 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 03:27:13,338 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6221 states and 7588 transitions.
[2020-11-25 03:27:13,351 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 26
[2020-11-25 03:27:13,365 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6221 states to 6189 states and 7548 transitions.
[2020-11-25 03:27:13,365 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1282
[2020-11-25 03:27:13,365 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1282
[2020-11-25 03:27:13,365 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6189 states and 7548 transitions.
[2020-11-25 03:27:13,370 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:27:13,370 INFO  L728         BuchiCegarLoop]: Abstraction has 6189 states and 7548 transitions.
[2020-11-25 03:27:13,373 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6189 states and 7548 transitions.
[2020-11-25 03:27:13,402 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6189 to 6189.
[2020-11-25 03:27:13,402 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6189 states.
[2020-11-25 03:27:13,410 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6189 states to 6189 states and 7548 transitions.
[2020-11-25 03:27:13,410 INFO  L751         BuchiCegarLoop]: Abstraction has 6189 states and 7548 transitions.
[2020-11-25 03:27:13,410 INFO  L631         BuchiCegarLoop]: Abstraction has 6189 states and 7548 transitions.
[2020-11-25 03:27:13,410 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-11-25 03:27:13,410 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6189 states and 7548 transitions.
[2020-11-25 03:27:13,416 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 26
[2020-11-25 03:27:13,416 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:27:13,416 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:27:13,417 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:27:13,417 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L4979]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4979]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4983]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4987]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]  COND FALSE  !(revert)
[L4991]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4991]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4992]  COND FALSE  !(revert)
[L4995]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4641]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4641]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4642]  COND FALSE  !(revert)
[L4645]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4645]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4646]  COND FALSE  !(revert)
[L4649]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4649]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4650]  COND FALSE  !(revert)
[L4653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4654]  COND FALSE  !(revert)
[L4657]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4657]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4658]  COND FALSE  !(revert)
[L4661]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume msgsender_MSG != null;
[L4607]              Balance[this] := 0;
[L4661]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]  COND FALSE  !(revert)
[L4995]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4996]  COND FALSE  !(revert)
[L4999]  CALL        call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]              assume msgsender_MSG != null;
[L4933]              Balance[this] := 0;
[L4934]              name_RariToken[this] := 920169039;
[L4935]              symbol_RariToken[this] := 1865763617;
[L4936]              decimals_RariToken[this] := 18;
[L4937]              mintStopped_RariToken[this] := false;
[L4999]  RET         call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5000]  COND FALSE  !(revert)
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND TRUE   choice == 15
[L7333]              gas := gas - 21000;
[L7334]  COND TRUE   gas >= 0
[L7335]              assume msgvalue_MSG == 0;
[L7336]  CALL        call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L597]               havoc __exception;
[L598]               revert := false;
[L599]   COND FALSE  !(__exception)
[L623]   CALL        call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3323]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6494]  COND FALSE  !(DType[this] == RariToken)
[L6499]  COND FALSE  !(DType[this] == ERC20Pausable)
[L6504]  COND FALSE  !(DType[this] == Pausable)
[L6509]  COND TRUE   DType[this] == Ownable
[L6510]  CALL        call __var_1 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3082]  COND TRUE   DType[this] == RariToken
[L3083]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3083]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3084]  COND FALSE  !(revert)
[L3105]              __ret_0_ := __var_2 == _owner_Ownable[this];
[L6510]  RET         call __var_1 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6511]  COND FALSE  !(revert)
[L6517]  COND FALSE  !(!__var_1)
[L3323]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6549]  COND FALSE  !(!_paused_Pausable[this])
[L3327]  RET         call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3331]              _paused_Pausable[this] := false;
[L3332]              assert { :EventEmitted "Unpaused_Pausable" } true;
[L623]   RET         call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L624]               assume !revert && gas >= 0;
[L7336]  RET         call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L7446]  RET         call CorralChoice_RariToken(this);
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND TRUE   __exception
[L1415]              __tmp__Balance := Balance;
[L1416]              __tmp__DType := DType;
[L1417]              __tmp__Alloc := Alloc;
[L1418]              __tmp__balance_ADDR := balance_ADDR;
[L1419]              __tmp__M_Ref_int := M_Ref_int;
[L1420]              __tmp__sum__balances0 := sum__balances0;
[L1421]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]              __tmp__sum__allowances1 := sum__allowances1;
[L1424]              __tmp__Length := Length;
[L1425]              __tmp__now := now;
[L1426]              __tmp___owner_Ownable := _owner_Ownable;
[L1427]              __tmp___paused_Pausable := _paused_Pausable;
[L1428]              __tmp___balances_ERC20 := _balances_ERC20;
[L1429]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]              __tmp__name_RariToken := name_RariToken;
[L1432]              __tmp__symbol_RariToken := symbol_RariToken;
[L1433]              __tmp__decimals_RariToken := decimals_RariToken;
[L1434]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND TRUE   !!__tmp___paused_Pausable[this]
[L6526]              revert := true;
[L4671]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND TRUE   revert
[L1435]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]              assume revert || gas < 0;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND TRUE   __exception
[L1415]              __tmp__Balance := Balance;
[L1416]              __tmp__DType := DType;
[L1417]              __tmp__Alloc := Alloc;
[L1418]              __tmp__balance_ADDR := balance_ADDR;
[L1419]              __tmp__M_Ref_int := M_Ref_int;
[L1420]              __tmp__sum__balances0 := sum__balances0;
[L1421]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]              __tmp__sum__allowances1 := sum__allowances1;
[L1424]              __tmp__Length := Length;
[L1425]              __tmp__now := now;
[L1426]              __tmp___owner_Ownable := _owner_Ownable;
[L1427]              __tmp___paused_Pausable := _paused_Pausable;
[L1428]              __tmp___balances_ERC20 := _balances_ERC20;
[L1429]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]              __tmp__name_RariToken := name_RariToken;
[L1432]              __tmp__symbol_RariToken := symbol_RariToken;
[L1433]              __tmp__decimals_RariToken := decimals_RariToken;
[L1434]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND TRUE   !!__tmp___paused_Pausable[this]
[L6526]              revert := true;
[L4671]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND TRUE   revert
[L1435]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]              assume revert || gas < 0;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:27:13,421 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:27:13,421 INFO  L82        PathProgramCache]: Analyzing trace with hash -880040135, now seen corresponding path program 1 times
[2020-11-25 03:27:13,421 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:27:13,433 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:27:13,540 INFO  L134       CoverageAnalysis]: Checked inductivity of 782 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 781 trivial. 0 not checked.
[2020-11-25 03:27:13,541 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:27:13,541 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 03:27:13,541 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:27:13,541 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 03:27:13,541 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 03:27:13,541 INFO  L87              Difference]: Start difference. First operand 6189 states and 7548 transitions. cyclomatic complexity: 1380 Second operand 7 states.
[2020-11-25 03:27:13,627 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:27:13,627 INFO  L93              Difference]: Finished difference Result 6221 states and 7584 transitions.
[2020-11-25 03:27:13,627 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 03:27:13,628 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6221 states and 7584 transitions.
[2020-11-25 03:27:13,640 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 26
[2020-11-25 03:27:13,654 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6221 states to 6189 states and 7544 transitions.
[2020-11-25 03:27:13,654 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1282
[2020-11-25 03:27:13,654 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1282
[2020-11-25 03:27:13,654 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6189 states and 7544 transitions.
[2020-11-25 03:27:13,658 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:27:13,658 INFO  L728         BuchiCegarLoop]: Abstraction has 6189 states and 7544 transitions.
[2020-11-25 03:27:13,661 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6189 states and 7544 transitions.
[2020-11-25 03:27:13,690 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6189 to 6177.
[2020-11-25 03:27:13,690 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6177 states.
[2020-11-25 03:27:13,699 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6177 states to 6177 states and 7520 transitions.
[2020-11-25 03:27:13,699 INFO  L751         BuchiCegarLoop]: Abstraction has 6177 states and 7520 transitions.
[2020-11-25 03:27:13,699 INFO  L631         BuchiCegarLoop]: Abstraction has 6177 states and 7520 transitions.
[2020-11-25 03:27:13,699 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-11-25 03:27:13,699 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6177 states and 7520 transitions.
[2020-11-25 03:27:13,705 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 26
[2020-11-25 03:27:13,705 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:27:13,705 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:27:13,706 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:27:13,706 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L4979]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4979]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4983]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4987]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]  COND FALSE  !(revert)
[L4991]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4991]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4992]  COND FALSE  !(revert)
[L4995]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4641]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4641]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4642]  COND FALSE  !(revert)
[L4645]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4645]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4646]  COND FALSE  !(revert)
[L4649]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4649]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4650]  COND FALSE  !(revert)
[L4653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4654]  COND FALSE  !(revert)
[L4657]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4657]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4658]  COND FALSE  !(revert)
[L4661]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume msgsender_MSG != null;
[L4607]              Balance[this] := 0;
[L4661]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]  COND FALSE  !(revert)
[L4995]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4996]  COND FALSE  !(revert)
[L4999]  CALL        call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]              assume msgsender_MSG != null;
[L4933]              Balance[this] := 0;
[L4934]              name_RariToken[this] := 920169039;
[L4935]              symbol_RariToken[this] := 1865763617;
[L4936]              decimals_RariToken[this] := 18;
[L4937]              mintStopped_RariToken[this] := false;
[L4999]  RET         call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5000]  COND FALSE  !(revert)
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND TRUE   choice == 15
[L7333]              gas := gas - 21000;
[L7334]  COND TRUE   gas >= 0
[L7335]              assume msgvalue_MSG == 0;
[L7336]  CALL        call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L597]               havoc __exception;
[L598]               revert := false;
[L599]   COND FALSE  !(__exception)
[L623]   CALL        call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3323]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6494]  COND TRUE   DType[this] == RariToken
[L6495]  CALL        call __var_1 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3082]  COND TRUE   DType[this] == RariToken
[L3083]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3083]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3084]  COND FALSE  !(revert)
[L3105]              __ret_0_ := __var_2 == _owner_Ownable[this];
[L6495]  RET         call __var_1 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]  COND FALSE  !(revert)
[L6517]  COND FALSE  !(!__var_1)
[L3323]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3324]  COND FALSE  !(revert)
[L3327]  CALL        call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6549]  COND FALSE  !(!_paused_Pausable[this])
[L3327]  RET         call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3328]  COND FALSE  !(revert)
[L3331]              _paused_Pausable[this] := false;
[L3332]              assert { :EventEmitted "Unpaused_Pausable" } true;
[L623]   RET         call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L624]               assume !revert && gas >= 0;
[L7336]  RET         call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L7446]  RET         call CorralChoice_RariToken(this);
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND TRUE   __exception
[L1415]              __tmp__Balance := Balance;
[L1416]              __tmp__DType := DType;
[L1417]              __tmp__Alloc := Alloc;
[L1418]              __tmp__balance_ADDR := balance_ADDR;
[L1419]              __tmp__M_Ref_int := M_Ref_int;
[L1420]              __tmp__sum__balances0 := sum__balances0;
[L1421]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]              __tmp__sum__allowances1 := sum__allowances1;
[L1424]              __tmp__Length := Length;
[L1425]              __tmp__now := now;
[L1426]              __tmp___owner_Ownable := _owner_Ownable;
[L1427]              __tmp___paused_Pausable := _paused_Pausable;
[L1428]              __tmp___balances_ERC20 := _balances_ERC20;
[L1429]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]              __tmp__name_RariToken := name_RariToken;
[L1432]              __tmp__symbol_RariToken := symbol_RariToken;
[L1433]              __tmp__decimals_RariToken := decimals_RariToken;
[L1434]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND TRUE   !!__tmp___paused_Pausable[this]
[L6526]              revert := true;
[L4671]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND TRUE   revert
[L1435]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]              assume revert || gas < 0;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND TRUE   choice == 21
[L7297]              gas := gas - 21000;
[L7298]  COND FALSE  !(gas >= 0)
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:27:13,709 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:27:13,709 INFO  L82        PathProgramCache]: Analyzing trace with hash -472675675, now seen corresponding path program 1 times
[2020-11-25 03:27:13,709 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:27:13,721 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:27:13,841 INFO  L134       CoverageAnalysis]: Checked inductivity of 782 backedges. 7 proven. 60 refuted. 0 times theorem prover too weak. 715 trivial. 0 not checked.
[2020-11-25 03:27:13,841 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:27:13,841 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-11-25 03:27:13,841 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:27:13,842 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 03:27:13,842 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=155, Unknown=0, NotChecked=0, Total=182
[2020-11-25 03:27:13,842 INFO  L87              Difference]: Start difference. First operand 6177 states and 7520 transitions. cyclomatic complexity: 1364 Second operand 14 states.
[2020-11-25 03:27:15,954 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:27:15,954 INFO  L93              Difference]: Finished difference Result 6181 states and 7542 transitions.
[2020-11-25 03:27:15,954 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 03:27:15,954 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6181 states and 7542 transitions.
[2020-11-25 03:27:15,968 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 26
[2020-11-25 03:27:15,982 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6181 states to 6181 states and 7542 transitions.
[2020-11-25 03:27:15,982 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1284
[2020-11-25 03:27:15,982 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1284
[2020-11-25 03:27:15,982 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6181 states and 7542 transitions.
[2020-11-25 03:27:15,987 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:27:15,987 INFO  L728         BuchiCegarLoop]: Abstraction has 6181 states and 7542 transitions.
[2020-11-25 03:27:15,990 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6181 states and 7542 transitions.
[2020-11-25 03:27:16,020 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6181 to 6181.
[2020-11-25 03:27:16,020 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6181 states.
[2020-11-25 03:27:16,028 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6181 states to 6181 states and 7542 transitions.
[2020-11-25 03:27:16,028 INFO  L751         BuchiCegarLoop]: Abstraction has 6181 states and 7542 transitions.
[2020-11-25 03:27:16,028 INFO  L631         BuchiCegarLoop]: Abstraction has 6181 states and 7542 transitions.
[2020-11-25 03:27:16,028 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-11-25 03:27:16,028 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6181 states and 7542 transitions.
[2020-11-25 03:27:16,034 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 26
[2020-11-25 03:27:16,034 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:27:16,034 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:27:16,035 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:27:16,035 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L4979]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4979]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4983]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4987]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]  COND FALSE  !(revert)
[L4991]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4991]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4992]  COND FALSE  !(revert)
[L4995]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4641]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4641]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4642]  COND FALSE  !(revert)
[L4645]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4645]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4646]  COND FALSE  !(revert)
[L4649]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4649]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4650]  COND FALSE  !(revert)
[L4653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4654]  COND FALSE  !(revert)
[L4657]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4657]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4658]  COND FALSE  !(revert)
[L4661]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume msgsender_MSG != null;
[L4607]              Balance[this] := 0;
[L4661]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]  COND FALSE  !(revert)
[L4995]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4996]  COND FALSE  !(revert)
[L4999]  CALL        call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]              assume msgsender_MSG != null;
[L4933]              Balance[this] := 0;
[L4934]              name_RariToken[this] := 920169039;
[L4935]              symbol_RariToken[this] := 1865763617;
[L4936]              decimals_RariToken[this] := 18;
[L4937]              mintStopped_RariToken[this] := false;
[L4999]  RET         call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5000]  COND FALSE  !(revert)
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND TRUE   choice == 16
[L7327]              gas := gas - 21000;
[L7328]  COND TRUE   gas >= 0
[L7329]              assume msgvalue_MSG == 0;
[L7330]  CALL        call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L540]               havoc __exception;
[L541]               revert := false;
[L542]   COND FALSE  !(__exception)
[L566]   CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6494]  COND FALSE  !(DType[this] == RariToken)
[L6499]  COND FALSE  !(DType[this] == ERC20Pausable)
[L6504]  COND TRUE   DType[this] == Pausable
[L6505]  CALL        call __var_1 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3082]  COND TRUE   DType[this] == RariToken
[L3083]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3083]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3084]  COND FALSE  !(revert)
[L3105]              __ret_0_ := __var_2 == _owner_Ownable[this];
[L6505]  RET         call __var_1 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6506]  COND FALSE  !(revert)
[L6517]  COND FALSE  !(!__var_1)
[L3296]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3297]  COND FALSE  !(revert)
[L3300]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L3300]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3301]  COND FALSE  !(revert)
[L3304]              _paused_Pausable[this] := true;
[L3305]              assert { :EventEmitted "Paused_Pausable" } true;
[L566]   RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L567]               assume !revert && gas >= 0;
[L7330]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L7446]  RET         call CorralChoice_RariToken(this);
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND TRUE   __exception
[L1415]              __tmp__Balance := Balance;
[L1416]              __tmp__DType := DType;
[L1417]              __tmp__Alloc := Alloc;
[L1418]              __tmp__balance_ADDR := balance_ADDR;
[L1419]              __tmp__M_Ref_int := M_Ref_int;
[L1420]              __tmp__sum__balances0 := sum__balances0;
[L1421]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]              __tmp__sum__allowances1 := sum__allowances1;
[L1424]              __tmp__Length := Length;
[L1425]              __tmp__now := now;
[L1426]              __tmp___owner_Ownable := _owner_Ownable;
[L1427]              __tmp___paused_Pausable := _paused_Pausable;
[L1428]              __tmp___balances_ERC20 := _balances_ERC20;
[L1429]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]              __tmp__name_RariToken := name_RariToken;
[L1432]              __tmp__symbol_RariToken := symbol_RariToken;
[L1433]              __tmp__decimals_RariToken := decimals_RariToken;
[L1434]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND TRUE   !!__tmp___paused_Pausable[this]
[L6526]              revert := true;
[L4671]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND TRUE   revert
[L1435]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]              assume revert || gas < 0;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND TRUE   __exception
[L1415]              __tmp__Balance := Balance;
[L1416]              __tmp__DType := DType;
[L1417]              __tmp__Alloc := Alloc;
[L1418]              __tmp__balance_ADDR := balance_ADDR;
[L1419]              __tmp__M_Ref_int := M_Ref_int;
[L1420]              __tmp__sum__balances0 := sum__balances0;
[L1421]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]              __tmp__sum__allowances1 := sum__allowances1;
[L1424]              __tmp__Length := Length;
[L1425]              __tmp__now := now;
[L1426]              __tmp___owner_Ownable := _owner_Ownable;
[L1427]              __tmp___paused_Pausable := _paused_Pausable;
[L1428]              __tmp___balances_ERC20 := _balances_ERC20;
[L1429]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]              __tmp__name_RariToken := name_RariToken;
[L1432]              __tmp__symbol_RariToken := symbol_RariToken;
[L1433]              __tmp__decimals_RariToken := decimals_RariToken;
[L1434]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND TRUE   !!__tmp___paused_Pausable[this]
[L6526]              revert := true;
[L4671]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND TRUE   revert
[L1435]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]              assume revert || gas < 0;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:27:16,038 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:27:16,038 INFO  L82        PathProgramCache]: Analyzing trace with hash 1147978873, now seen corresponding path program 1 times
[2020-11-25 03:27:16,039 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:27:16,051 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:27:16,158 INFO  L134       CoverageAnalysis]: Checked inductivity of 781 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 780 trivial. 0 not checked.
[2020-11-25 03:27:16,158 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:27:16,158 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 03:27:16,159 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:27:16,159 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 03:27:16,159 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 03:27:16,159 INFO  L87              Difference]: Start difference. First operand 6181 states and 7542 transitions. cyclomatic complexity: 1382 Second operand 7 states.
[2020-11-25 03:27:16,256 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:27:16,256 INFO  L93              Difference]: Finished difference Result 6231 states and 7610 transitions.
[2020-11-25 03:27:16,256 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 03:27:16,256 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6231 states and 7610 transitions.
[2020-11-25 03:27:16,269 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 26
[2020-11-25 03:27:16,283 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6231 states to 6193 states and 7562 transitions.
[2020-11-25 03:27:16,283 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1284
[2020-11-25 03:27:16,283 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1294
[2020-11-25 03:27:16,283 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6193 states and 7562 transitions.
[2020-11-25 03:27:16,288 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:27:16,288 INFO  L728         BuchiCegarLoop]: Abstraction has 6193 states and 7562 transitions.
[2020-11-25 03:27:16,291 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6193 states and 7562 transitions.
[2020-11-25 03:27:16,320 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6193 to 6193.
[2020-11-25 03:27:16,320 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6193 states.
[2020-11-25 03:27:16,328 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6193 states to 6193 states and 7562 transitions.
[2020-11-25 03:27:16,328 INFO  L751         BuchiCegarLoop]: Abstraction has 6193 states and 7562 transitions.
[2020-11-25 03:27:16,328 INFO  L631         BuchiCegarLoop]: Abstraction has 6193 states and 7562 transitions.
[2020-11-25 03:27:16,328 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-11-25 03:27:16,329 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6193 states and 7562 transitions.
[2020-11-25 03:27:16,335 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 26
[2020-11-25 03:27:16,335 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:27:16,335 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:27:16,336 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:27:16,336 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L4979]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4979]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4983]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4987]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]  COND FALSE  !(revert)
[L4991]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4991]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4992]  COND FALSE  !(revert)
[L4995]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4641]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4641]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4642]  COND FALSE  !(revert)
[L4645]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4645]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4646]  COND FALSE  !(revert)
[L4649]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4649]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4650]  COND FALSE  !(revert)
[L4653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4654]  COND FALSE  !(revert)
[L4657]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4657]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4658]  COND FALSE  !(revert)
[L4661]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume msgsender_MSG != null;
[L4607]              Balance[this] := 0;
[L4661]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]  COND FALSE  !(revert)
[L4995]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4996]  COND FALSE  !(revert)
[L4999]  CALL        call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]              assume msgsender_MSG != null;
[L4933]              Balance[this] := 0;
[L4934]              name_RariToken[this] := 920169039;
[L4935]              symbol_RariToken[this] := 1865763617;
[L4936]              decimals_RariToken[this] := 18;
[L4937]              mintStopped_RariToken[this] := false;
[L4999]  RET         call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5000]  COND FALSE  !(revert)
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND TRUE   choice == 16
[L7327]              gas := gas - 21000;
[L7328]  COND TRUE   gas >= 0
[L7329]              assume msgvalue_MSG == 0;
[L7330]  CALL        call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L540]               havoc __exception;
[L541]               revert := false;
[L542]   COND FALSE  !(__exception)
[L566]   CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6494]  COND FALSE  !(DType[this] == RariToken)
[L6499]  COND FALSE  !(DType[this] == ERC20Pausable)
[L6504]  COND FALSE  !(DType[this] == Pausable)
[L6509]  COND TRUE   DType[this] == Ownable
[L6510]  CALL        call __var_1 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3082]  COND TRUE   DType[this] == RariToken
[L3083]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3083]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3084]  COND FALSE  !(revert)
[L3105]              __ret_0_ := __var_2 == _owner_Ownable[this];
[L6510]  RET         call __var_1 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6511]  COND FALSE  !(revert)
[L6517]  COND FALSE  !(!__var_1)
[L3296]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3297]  COND FALSE  !(revert)
[L3300]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L3300]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3301]  COND FALSE  !(revert)
[L3304]              _paused_Pausable[this] := true;
[L3305]              assert { :EventEmitted "Paused_Pausable" } true;
[L566]   RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L567]               assume !revert && gas >= 0;
[L7330]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L7446]  RET         call CorralChoice_RariToken(this);
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND TRUE   __exception
[L1415]              __tmp__Balance := Balance;
[L1416]              __tmp__DType := DType;
[L1417]              __tmp__Alloc := Alloc;
[L1418]              __tmp__balance_ADDR := balance_ADDR;
[L1419]              __tmp__M_Ref_int := M_Ref_int;
[L1420]              __tmp__sum__balances0 := sum__balances0;
[L1421]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]              __tmp__sum__allowances1 := sum__allowances1;
[L1424]              __tmp__Length := Length;
[L1425]              __tmp__now := now;
[L1426]              __tmp___owner_Ownable := _owner_Ownable;
[L1427]              __tmp___paused_Pausable := _paused_Pausable;
[L1428]              __tmp___balances_ERC20 := _balances_ERC20;
[L1429]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]              __tmp__name_RariToken := name_RariToken;
[L1432]              __tmp__symbol_RariToken := symbol_RariToken;
[L1433]              __tmp__decimals_RariToken := decimals_RariToken;
[L1434]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND TRUE   !!__tmp___paused_Pausable[this]
[L6526]              revert := true;
[L4671]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND TRUE   revert
[L1435]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]              assume revert || gas < 0;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND TRUE   choice == 21
[L7297]              gas := gas - 21000;
[L7298]  COND FALSE  !(gas >= 0)
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:27:16,339 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:27:16,339 INFO  L82        PathProgramCache]: Analyzing trace with hash 1165232387, now seen corresponding path program 1 times
[2020-11-25 03:27:16,340 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:27:16,352 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:27:16,460 INFO  L134       CoverageAnalysis]: Checked inductivity of 781 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 780 trivial. 0 not checked.
[2020-11-25 03:27:16,461 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:27:16,461 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 03:27:16,461 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:27:16,461 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 03:27:16,461 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 03:27:16,461 INFO  L87              Difference]: Start difference. First operand 6193 states and 7562 transitions. cyclomatic complexity: 1390 Second operand 7 states.
[2020-11-25 03:27:16,565 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:27:16,566 INFO  L93              Difference]: Finished difference Result 6231 states and 7606 transitions.
[2020-11-25 03:27:16,566 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 03:27:16,566 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6231 states and 7606 transitions.
[2020-11-25 03:27:16,578 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 26
[2020-11-25 03:27:16,593 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6231 states to 6193 states and 7558 transitions.
[2020-11-25 03:27:16,593 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1294
[2020-11-25 03:27:16,594 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1308
[2020-11-25 03:27:16,594 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6193 states and 7558 transitions.
[2020-11-25 03:27:16,599 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:27:16,599 INFO  L728         BuchiCegarLoop]: Abstraction has 6193 states and 7558 transitions.
[2020-11-25 03:27:16,602 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6193 states and 7558 transitions.
[2020-11-25 03:27:16,667 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6193 to 6181.
[2020-11-25 03:27:16,667 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6181 states.
[2020-11-25 03:27:16,675 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6181 states to 6181 states and 7538 transitions.
[2020-11-25 03:27:16,675 INFO  L751         BuchiCegarLoop]: Abstraction has 6181 states and 7538 transitions.
[2020-11-25 03:27:16,675 INFO  L631         BuchiCegarLoop]: Abstraction has 6181 states and 7538 transitions.
[2020-11-25 03:27:16,675 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-11-25 03:27:16,675 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6181 states and 7538 transitions.
[2020-11-25 03:27:16,681 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 26
[2020-11-25 03:27:16,681 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:27:16,681 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:27:16,682 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:27:16,682 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L7436]              assume null == 0;
[L7437]  CALL        call this := FreshRefGenerator__success();
[L2890]              havoc newRef;
[L2891]              assume Alloc[newRef] == false;
[L2892]              Alloc[newRef] := true;
[L2893]              assume newRef != null;
[L7437]  RET         call this := FreshRefGenerator__success();
[L7438]              assume now >= 0;
[L7439]              assume DType[this] == RariToken;
[L7440]              assume msgvalue_MSG == 0;
[L7441]              gas := gas - 53000;
[L7442]  CALL        call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L4979]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4979]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4983]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4987]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]  COND FALSE  !(revert)
[L4991]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4991]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4992]  COND FALSE  !(revert)
[L4995]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4641]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4641]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4642]  COND FALSE  !(revert)
[L4645]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4645]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4646]  COND FALSE  !(revert)
[L4649]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4649]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4650]  COND FALSE  !(revert)
[L4653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4654]  COND FALSE  !(revert)
[L4657]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4657]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4658]  COND FALSE  !(revert)
[L4661]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume msgsender_MSG != null;
[L4607]              Balance[this] := 0;
[L4661]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]  COND FALSE  !(revert)
[L4995]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4996]  COND FALSE  !(revert)
[L4999]  CALL        call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]              assume msgsender_MSG != null;
[L4933]              Balance[this] := 0;
[L4934]              name_RariToken[this] := 920169039;
[L4935]              symbol_RariToken[this] := 1865763617;
[L4936]              decimals_RariToken[this] := 18;
[L4937]              mintStopped_RariToken[this] := false;
[L4999]  RET         call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5000]  COND FALSE  !(revert)
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
[L7443]              assume !revert && gas >= 0;
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND TRUE   choice == 16
[L7327]              gas := gas - 21000;
[L7328]  COND TRUE   gas >= 0
[L7329]              assume msgvalue_MSG == 0;
[L7330]  CALL        call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L540]               havoc __exception;
[L541]               revert := false;
[L542]   COND FALSE  !(__exception)
[L566]   CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6494]  COND TRUE   DType[this] == RariToken
[L6495]  CALL        call __var_1 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3082]  COND TRUE   DType[this] == RariToken
[L3083]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3083]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3084]  COND FALSE  !(revert)
[L3105]              __ret_0_ := __var_2 == _owner_Ownable[this];
[L6495]  RET         call __var_1 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]  COND FALSE  !(revert)
[L6517]  COND FALSE  !(!__var_1)
[L3296]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3297]  COND FALSE  !(revert)
[L3300]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L3300]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3301]  COND FALSE  !(revert)
[L3304]              _paused_Pausable[this] := true;
[L3305]              assert { :EventEmitted "Paused_Pausable" } true;
[L566]   RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L567]               assume !revert && gas >= 0;
[L7330]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L7446]  RET         call CorralChoice_RariToken(this);
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND TRUE   __exception
[L1415]              __tmp__Balance := Balance;
[L1416]              __tmp__DType := DType;
[L1417]              __tmp__Alloc := Alloc;
[L1418]              __tmp__balance_ADDR := balance_ADDR;
[L1419]              __tmp__M_Ref_int := M_Ref_int;
[L1420]              __tmp__sum__balances0 := sum__balances0;
[L1421]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]              __tmp__sum__allowances1 := sum__allowances1;
[L1424]              __tmp__Length := Length;
[L1425]              __tmp__now := now;
[L1426]              __tmp___owner_Ownable := _owner_Ownable;
[L1427]              __tmp___paused_Pausable := _paused_Pausable;
[L1428]              __tmp___balances_ERC20 := _balances_ERC20;
[L1429]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]              __tmp__name_RariToken := name_RariToken;
[L1432]              __tmp__symbol_RariToken := symbol_RariToken;
[L1433]              __tmp__decimals_RariToken := decimals_RariToken;
[L1434]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND TRUE   !!__tmp___paused_Pausable[this]
[L6526]              revert := true;
[L4671]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND TRUE   revert
[L1435]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]              assume revert || gas < 0;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

Loop:
[L7446]  CALL        call CorralChoice_RariToken(this);
[L7244]              havoc msgsender_MSG;
[L7245]              havoc msgvalue_MSG;
[L7246]              havoc choice;
[L7247]              havoc __ret_0_owner;
[L7248]              havoc __ret_0_isOwner;
[L7249]              havoc newOwner_s105;
[L7250]              havoc __ret_0_paused;
[L7251]              havoc __ret_0_totalSupply;
[L7252]              havoc account_s455;
[L7253]              havoc __ret_0_balanceOf;
[L7254]              havoc to_s841;
[L7255]              havoc value_s841;
[L7256]              havoc __ret_0_transfer;
[L7257]              havoc owner_s490;
[L7258]              havoc spender_s490;
[L7259]              havoc __ret_0_allowance;
[L7260]              havoc spender_s880;
[L7261]              havoc value_s880;
[L7262]              havoc __ret_0_approve;
[L7263]              havoc from_s862;
[L7264]              havoc to_s862;
[L7265]              havoc value_s862;
[L7266]              havoc __ret_0_transferFrom;
[L7267]              havoc spender_s898;
[L7268]              havoc addedValue_s898;
[L7269]              havoc __ret_0_increaseAllowance;
[L7270]              havoc spender_s916;
[L7271]              havoc subtractedValue_s916;
[L7272]              havoc __ret_0_decreaseAllowance;
[L7273]              havoc __ret_0_name;
[L7274]              havoc __ret_0_symbol;
[L7275]              havoc __ret_0_decimals;
[L7276]              havoc __ret_0_mintStopped;
[L7277]              havoc account_s960;
[L7278]              havoc amount_s960;
[L7279]              havoc __ret_0_mint;
[L7280]              havoc tmpNow;
[L7281]              havoc gas;
[L7282]              assume gas > 4000000 && gas <= 8000000;
[L7283]              tmpNow := now;
[L7284]              havoc now;
[L7285]              assume now > tmpNow;
[L7286]              assume msgsender_MSG != null;
[L7287]              assume DType[msgsender_MSG] != Context;
[L7288]              assume DType[msgsender_MSG] != Ownable;
[L7289]              assume DType[msgsender_MSG] != Pausable;
[L7290]              assume DType[msgsender_MSG] != IERC20;
[L7291]              assume DType[msgsender_MSG] != SafeMath;
[L7292]              assume DType[msgsender_MSG] != ERC20;
[L7293]              assume DType[msgsender_MSG] != ERC20Pausable;
[L7294]              assume DType[msgsender_MSG] != RariToken;
[L7295]              Alloc[msgsender_MSG] := true;
[L7296]  COND FALSE  !(choice == 21)
[L7302]  COND FALSE  !(choice == 20)
[L7308]  COND FALSE  !(choice == 19)
[L7314]  COND FALSE  !(choice == 18)
[L7320]  COND FALSE  !(choice == 17)
[L7326]  COND FALSE  !(choice == 16)
[L7332]  COND FALSE  !(choice == 15)
[L7338]  COND FALSE  !(choice == 14)
[L7344]  COND FALSE  !(choice == 13)
[L7350]  COND TRUE   choice == 12
[L7351]              gas := gas - 21000;
[L7352]  COND TRUE   gas >= 0
[L7353]              assume value_s841 >= 0 && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7354]              assume msgvalue_MSG == 0;
[L7355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1412]              havoc __exception;
[L1413]              revert := false;
[L1414]  COND TRUE   __exception
[L1415]              __tmp__Balance := Balance;
[L1416]              __tmp__DType := DType;
[L1417]              __tmp__Alloc := Alloc;
[L1418]              __tmp__balance_ADDR := balance_ADDR;
[L1419]              __tmp__M_Ref_int := M_Ref_int;
[L1420]              __tmp__sum__balances0 := sum__balances0;
[L1421]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]              __tmp__sum__allowances1 := sum__allowances1;
[L1424]              __tmp__Length := Length;
[L1425]              __tmp__now := now;
[L1426]              __tmp___owner_Ownable := _owner_Ownable;
[L1427]              __tmp___paused_Pausable := _paused_Pausable;
[L1428]              __tmp___balances_ERC20 := _balances_ERC20;
[L1429]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]              __tmp__name_RariToken := name_RariToken;
[L1432]              __tmp__symbol_RariToken := symbol_RariToken;
[L1433]              __tmp__decimals_RariToken := decimals_RariToken;
[L1434]              __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND TRUE   !!__tmp___paused_Pausable[this]
[L6526]              revert := true;
[L4671]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND TRUE   revert
[L1435]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]              assume revert || gas < 0;
[L7355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L7446]  RET         call CorralChoice_RariToken(this);

[2020-11-25 03:27:16,694 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:27:16,694 INFO  L82        PathProgramCache]: Analyzing trace with hash 961982561, now seen corresponding path program 1 times
[2020-11-25 03:27:16,695 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:27:16,707 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:27:16,722 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:27:16,829 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:27:16,829 INFO  L82        PathProgramCache]: Analyzing trace with hash 1739573507, now seen corresponding path program 1 times
[2020-11-25 03:27:16,829 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:27:16,833 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:27:16,836 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:27:16,843 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:27:16,843 INFO  L82        PathProgramCache]: Analyzing trace with hash 1174744227, now seen corresponding path program 1 times
[2020-11-25 03:27:16,844 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:27:16,860 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:27:16,877 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 139 to 277
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #6: 1237 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 3019 to 6037
[2020-11-25 03:27:17,264 WARN  L188               SmtUtils]: Spent 105.00 ms on a formula simplification that was a NOOP. DAG size: 184
[2020-11-25 03:27:17,601 WARN  L188               SmtUtils]: Spent 334.00 ms on a formula simplification. DAG size of input: 265 DAG size of output: 234
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3517 to 7027
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
[2020-11-25 03:27:18,019 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
[2020-11-25 03:27:18,406 WARN  L188               SmtUtils]: Spent 120.00 ms on a formula simplification. DAG size of input: 220 DAG size of output: 204
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2473 to 4943
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #6: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-11-25 03:27:19,242 WARN  L188               SmtUtils]: Spent 334.00 ms on a formula simplification. DAG size of input: 263 DAG size of output: 233
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
[2020-11-25 03:27:19,411 WARN  L188               SmtUtils]: Spent 102.00 ms on a formula simplification that was a NOOP. DAG size: 303
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
[2020-11-25 03:27:20,383 WARN  L188               SmtUtils]: Spent 877.00 ms on a formula simplification. DAG size of input: 608 DAG size of output: 594
Garbage collection #1: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #2: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #3: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #4: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #5: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #6: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #7: 16103 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 16103 to 32203
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3331 to 6661
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-25 03:27:20,854 WARN  L188               SmtUtils]: Spent 201.00 ms on a formula simplification. DAG size of input: 298 DAG size of output: 297
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3331 to 6661
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-25 03:27:20,970 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:27:20,991 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 03:27:21,001 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:27:21 BasicIcfg
[2020-11-25 03:27:21,001 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 03:27:21,002 INFO  L168              Benchmark]: Toolchain (without parser) took 99812.73 ms. Allocated memory was 1.0 GB in the beginning and 3.5 GB in the end (delta: 2.5 GB). Free memory was 929.8 MB in the beginning and 1.4 GB in the end (delta: -474.7 MB). Peak memory consumption was 2.5 GB. Max. memory is 15.3 GB.
[2020-11-25 03:27:21,002 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.18 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 03:27:21,002 INFO  L168              Benchmark]: Boogie Preprocessor took 114.07 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 03:27:21,002 INFO  L168              Benchmark]: UtopiaSpecLang took 71.09 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 03:27:21,003 INFO  L168              Benchmark]: Boogie Printer took 22.97 ms. Allocated memory is still 1.0 GB. Free memory is still 903.0 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 03:27:21,003 INFO  L168              Benchmark]: RCFGBuilder took 1040.65 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.4 MB). Free memory was 903.0 MB in the beginning and 977.7 MB in the end (delta: -74.7 MB). Peak memory consumption was 191.2 MB. Max. memory is 15.3 GB.
[2020-11-25 03:27:21,003 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.51 ms. Allocated memory is still 1.1 GB. Free memory was 977.7 MB in the beginning and 970.8 MB in the end (delta: 6.9 MB). Peak memory consumption was 6.9 MB. Max. memory is 15.3 GB.
[2020-11-25 03:27:21,003 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1737.16 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 162.0 MB). Free memory was 970.8 MB in the beginning and 815.6 MB in the end (delta: 155.2 MB). Peak memory consumption was 477.1 MB. Max. memory is 15.3 GB.
[2020-11-25 03:27:21,003 INFO  L168              Benchmark]: BlockEncodingV2 took 184.70 ms. Allocated memory is still 1.3 GB. Free memory was 815.6 MB in the beginning and 711.6 MB in the end (delta: 104.0 MB). Peak memory consumption was 104.0 MB. Max. memory is 15.3 GB.
[2020-11-25 03:27:21,004 INFO  L168              Benchmark]: BuchiAutomizer took 96600.63 ms. Allocated memory was 1.3 GB in the beginning and 3.5 GB in the end (delta: 2.3 GB). Free memory was 711.6 MB in the beginning and 1.4 GB in the end (delta: -692.9 MB). Peak memory consumption was 2.1 GB. Max. memory is 15.3 GB.
[2020-11-25 03:27:21,006 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    7468 locations, 14048 edges
  - StatisticsResult: Encoded RCFG
    7306 locations, 13591 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.18 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 114.07 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 71.09 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 22.97 ms. Allocated memory is still 1.0 GB. Free memory is still 903.0 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 1040.65 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.4 MB). Free memory was 903.0 MB in the beginning and 977.7 MB in the end (delta: -74.7 MB). Peak memory consumption was 191.2 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.51 ms. Allocated memory is still 1.1 GB. Free memory was 977.7 MB in the beginning and 970.8 MB in the end (delta: 6.9 MB). Peak memory consumption was 6.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1737.16 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 162.0 MB). Free memory was 970.8 MB in the beginning and 815.6 MB in the end (delta: 155.2 MB). Peak memory consumption was 477.1 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 184.70 ms. Allocated memory is still 1.3 GB. Free memory was 815.6 MB in the beginning and 711.6 MB in the end (delta: 104.0 MB). Peak memory consumption was 104.0 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 96600.63 ms. Allocated memory was 1.3 GB in the beginning and 3.5 GB in the end (delta: 2.3 GB). Free memory was 711.6 MB in the beginning and 1.4 GB in the end (delta: -692.9 MB). Peak memory consumption was 2.1 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2841 locations, 4272 edges
  - StatisticsResult: BuchiProgram size
    7468 locations, 14048 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 26 terminating modules (26 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.26 modules have a trivial ranking function, the largest among these consists of 53 locations. The remainder module has 6181 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 96.5s and 27 iterations.  TraceHistogramMax:10. Analysis of lassos took 14.0s. Construction of modules took 64.3s. BÃ¼chi inclusion checks took 15.2s. Highest rank in rank-based complementation 0. Minimization of det autom 26. Minimization of nondet autom 0. Automata minimization 1.4s AutomataMinimizationTime, 26 MinimizatonAttempts, 4383 StatesRemovedByMinimization, 19 NontrivialMinimizations. Non-live state removal took 0.8s Buchi closure took 0.0s. Biggest automaton had 7309 states and ocurred in iteration 8.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 121066 SDtfs, 74111 SDslu, 429209 SDs, 0 SdLazy, 667318 SolverSat, 15039 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 64.3s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU26 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(1865763625) = (new RariToken)({from : 1865763626});
[L1724]              havoc __exception;
[L1725]              revert := false;
[L1726]  COND FALSE  !(__exception)
[L1750]  CALL        call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4975]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4976]  COND FALSE  !(revert)
[L4979]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4979]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4980]  COND FALSE  !(revert)
[L4983]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4983]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4984]  COND FALSE  !(revert)
[L4987]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4987]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]  COND FALSE  !(revert)
[L4991]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4991]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4992]  COND FALSE  !(revert)
[L4995]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4641]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L4641]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4642]  COND FALSE  !(revert)
[L4645]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L4645]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4646]  COND FALSE  !(revert)
[L4649]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3255]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3255]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3256]  COND FALSE  !(revert)
[L3259]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3027]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3028]  COND FALSE  !(revert)
[L3031]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2979]              assume msgsender_MSG != null;
[L2980]              Balance[this] := 0;
[L2981]              _owner_Ownable[this] := null;
[L2983]  COND TRUE   DType[this] == RariToken
[L2984]  CALL        call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L2984]  RET         call msgSender_s45 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2985]  COND FALSE  !(revert)
[L3006]              msgSender_s45 := msgSender_s45;
[L3007]              _owner_Ownable[this] := msgSender_s45;
[L3008]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3031]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3032]  COND FALSE  !(revert)
[L3259]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  COND FALSE  !(revert)
[L3263]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3230]              assume msgsender_MSG != null;
[L3231]              Balance[this] := 0;
[L3232]              _paused_Pausable[this] := false;
[L3234]              _paused_Pausable[this] := false;
[L3263]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3264]  COND FALSE  !(revert)
[L4649]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4650]  COND FALSE  !(revert)
[L4653]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L4653]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4654]  COND FALSE  !(revert)
[L4657]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3567]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2922]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]              assume msgsender_MSG != null;
[L2908]              Balance[this] := 0;
[L2922]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2923]  COND FALSE  !(revert)
[L3567]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3568]  COND FALSE  !(revert)
[L3571]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3361]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3346]              assume msgsender_MSG != null;
[L3347]              Balance[this] := 0;
[L3361]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  COND FALSE  !(revert)
[L3571]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3572]  COND FALSE  !(revert)
[L3575]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3539]              assume msgsender_MSG != null;
[L3540]              Balance[this] := 0;
[L3541]              _balances_ERC20[this] := zeroRefintArr();
[L3542]              sum__balances0[this] := 0;
[L3543]              _allowances_ERC20[this] := zeroRefRefintArr();
[L3544]              sum__allowances1[this] := 0;
[L3545]              _totalSupply_ERC20[this] := 0;
[L3575]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3576]  COND FALSE  !(revert)
[L4657]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4658]  COND FALSE  !(revert)
[L4661]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume msgsender_MSG != null;
[L4607]              Balance[this] := 0;
[L4661]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]  COND FALSE  !(revert)
[L4995]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4996]  COND FALSE  !(revert)
[L4999]  CALL        call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4932]              assume msgsender_MSG != null;
[L4933]              Balance[this] := 0;
[L4934]              name_RariToken[this] := 920169039;
[L4935]              symbol_RariToken[this] := 1865763617;
[L4936]              decimals_RariToken[this] := 18;
[L4937]              mintStopped_RariToken[this] := false;
[L4999]  RET         call RariToken_RariToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5000]  COND FALSE  !(revert)
[L1750]  RET         call RariToken_RariToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1751]              assume !revert && gas >= 0;
[L7442]  RET         call RariToken_RariToken(this, msgsender_MSG, msgvalue_MSG);
Pausable(1865763625).pause.gas(3979002)({from : 1865763626});
[L540]               havoc __exception;
[L541]               revert := false;
[L542]   COND FALSE  !(__exception)
[L566]   CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3296]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6494]  COND TRUE   DType[this] == RariToken
[L6495]  CALL        call __var_1 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3082]  COND TRUE   DType[this] == RariToken
[L3083]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2936]              __ret_0_ := msgsender_MSG;
[L3083]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3084]  COND FALSE  !(revert)
[L3105]              __ret_0_ := __var_2 == _owner_Ownable[this];
[L6495]  RET         call __var_1 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]  COND FALSE  !(revert)
[L6517]  COND FALSE  !(!__var_1)
[L3296]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3297]  COND FALSE  !(revert)
[L3300]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6533]  COND FALSE  !(!!_paused_Pausable[this])
[L3300]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3301]  COND FALSE  !(revert)
[L3304]              _paused_Pausable[this] := true;
[L3305]              assert { :EventEmitted "Paused_Pausable" } true;
[L566]   RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L567]               assume !revert && gas >= 0;
[L7330]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
ERC20Pausable(1865763625).transfer~address~uint256.gas(3979003)({from : 1865763633, to : 1865763633, value : 0});
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_transfer_ERC20Pausable0 := true;
[L2]                call_transfer_ERC20Pausable0 := false;
[L2]                revert := revert_hold;
[L1412]             havoc __exception;
[L1413]             revert := false;
[L1414]  COND TRUE  __exception
[L1415]             __tmp__Balance := Balance;
[L1416]             __tmp__DType := DType;
[L1417]             __tmp__Alloc := Alloc;
[L1418]             __tmp__balance_ADDR := balance_ADDR;
[L1419]             __tmp__M_Ref_int := M_Ref_int;
[L1420]             __tmp__sum__balances0 := sum__balances0;
[L1421]             __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]             __tmp__sum__allowances1 := sum__allowances1;
[L1424]             __tmp__Length := Length;
[L1425]             __tmp__now := now;
[L1426]             __tmp___owner_Ownable := _owner_Ownable;
[L1427]             __tmp___paused_Pausable := _paused_Pausable;
[L1428]             __tmp___balances_ERC20 := _balances_ERC20;
[L1429]             __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]             __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]             __tmp__name_RariToken := name_RariToken;
[L1432]             __tmp__symbol_RariToken := symbol_RariToken;
[L1433]             __tmp__decimals_RariToken := decimals_RariToken;
[L1434]             __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL       call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL       call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND TRUE  !!__tmp___paused_Pausable[this]
[L6526]             revert := true;
[L4671]  RET        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND TRUE  revert
[L1435]  RET        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]             assume revert || gas < 0;
[L7355]  RET        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);

Loop:
ERC20Pausable(1865763625).transfer~address~uint256.gas(3979001)({from : 1865763635, to : 1865763635, value : 0});
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume ((((((msgsender_MSG == to_s841 && value_s841 <= _balances_ERC20[this][msgsender_MSG]) && value_s841 >= 0) && value_s841 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s841] >= 0) && _balances_ERC20[this][to_s841] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_transfer_ERC20Pausable0 := true;
[L2]                call_transfer_ERC20Pausable0 := false;
[L2]                revert := revert_hold;
[L1412]             havoc __exception;
[L1413]             revert := false;
[L1414]  COND TRUE  __exception
[L1415]             __tmp__Balance := Balance;
[L1416]             __tmp__DType := DType;
[L1417]             __tmp__Alloc := Alloc;
[L1418]             __tmp__balance_ADDR := balance_ADDR;
[L1419]             __tmp__M_Ref_int := M_Ref_int;
[L1420]             __tmp__sum__balances0 := sum__balances0;
[L1421]             __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1422]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1423]             __tmp__sum__allowances1 := sum__allowances1;
[L1424]             __tmp__Length := Length;
[L1425]             __tmp__now := now;
[L1426]             __tmp___owner_Ownable := _owner_Ownable;
[L1427]             __tmp___paused_Pausable := _paused_Pausable;
[L1428]             __tmp___balances_ERC20 := _balances_ERC20;
[L1429]             __tmp___allowances_ERC20 := _allowances_ERC20;
[L1430]             __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1431]             __tmp__name_RariToken := name_RariToken;
[L1432]             __tmp__symbol_RariToken := symbol_RariToken;
[L1433]             __tmp__decimals_RariToken := decimals_RariToken;
[L1434]             __tmp__mintStopped_RariToken := mintStopped_RariToken;
[L1435]  CALL       call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L4671]  CALL       call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6525]  COND TRUE  !!__tmp___paused_Pausable[this]
[L6526]             revert := true;
[L4671]  RET        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND TRUE  revert
[L1435]  RET        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);
[L1436]             assume revert || gas < 0;
[L7355]  RET        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s841, value_s841);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
