This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 09:51:34,842 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 09:51:34,844 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 09:51:34,857 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 09:51:34,857 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 09:51:34,857 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 09:51:34,858 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 09:51:34,860 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 09:51:34,862 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 09:51:34,862 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 09:51:34,863 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 09:51:34,863 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 09:51:34,864 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 09:51:34,865 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 09:51:34,866 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 09:51:34,866 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 09:51:34,867 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 09:51:34,868 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 09:51:34,870 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 09:51:34,871 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 09:51:34,872 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 09:51:34,873 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 09:51:34,874 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 09:51:34,875 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 09:51:34,875 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 09:51:34,875 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 09:51:34,876 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 09:51:34,876 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 09:51:34,877 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 09:51:34,877 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 09:51:34,877 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 09:51:34,878 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 09:51:34,878 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 09:51:34,879 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 09:51:34,880 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 09:51:34,880 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 09:51:34,880 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 09:51:34,881 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 09:51:34,881 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 09:51:34,881 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 09:51:34,882 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 09:51:34,882 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 09:51:34,890 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 09:51:34,890 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 09:51:34,891 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 09:51:34,891 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 09:51:34,892 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 09:51:34,892 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 09:51:34,892 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 09:51:34,892 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 09:51:34,892 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 09:51:34,892 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 09:51:34,892 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 09:51:34,892 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 09:51:34,892 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 09:51:34,893 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 09:51:34,893 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 09:51:34,893 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 09:51:34,893 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 09:51:34,893 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 09:51:34,893 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 09:51:34,893 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 09:51:34,893 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 09:51:34,893 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 09:51:34,893 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 09:51:34,894 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 09:51:34,894 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 09:51:34,894 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 09:51:34,917 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 09:51:34,927 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 09:51:34,930 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 09:51:34,931 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 09:51:34,931 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 09:51:34,932 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transfer-self.bpl
[2020-11-25 09:51:34,932 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transfer-self.bpl'
[2020-11-25 09:51:35,043 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 09:51:35,044 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 09:51:35,044 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 09:51:35,044 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 09:51:35,044 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 09:51:35,061 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:51:35" (1/1) ...
[2020-11-25 09:51:35,063 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:51:35" (1/1) ...
[2020-11-25 09:51:35,107 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:51:35" (1/1) ...
[2020-11-25 09:51:35,107 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:51:35" (1/1) ...
[2020-11-25 09:51:35,137 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:51:35" (1/1) ...
[2020-11-25 09:51:35,150 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:51:35" (1/1) ...
[2020-11-25 09:51:35,161 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:51:35" (1/1) ...
[2020-11-25 09:51:35,181 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 09:51:35,182 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 09:51:35,182 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 09:51:35,184 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 09:51:35,188 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:51:35" (1/1) ...
[2020-11-25 09:51:35,214 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(TokenERC20.transfer(to, value), msg.sender == to && value <= balances_TokenERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][msg.sender] >= 0 &&  balances_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && balances_TokenERC20[this] == old(balances_TokenERC20[this]) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this]) && aSBlock_ZAI[this] == old(aSBlock_ZAI[this]) && aEBlock_ZAI[this] == old(aEBlock_ZAI[this]) && aCap_ZAI[this] == old(aCap_ZAI[this]) && aTot_ZAI[this] == old(aTot_ZAI[this]) && aAmt_ZAI[this] == old(aAmt_ZAI[this]) && sSBlock_ZAI[this] == old(sSBlock_ZAI[this]) && sEBlock_ZAI[this] == old(sEBlock_ZAI[this]) && sCap_ZAI[this] == old(sCap_ZAI[this]) && sTot_ZAI[this] == old(sTot_ZAI[this]) && sChunk_ZAI[this] == old(sChunk_ZAI[this]) && sPrice_ZAI[this] == old(sPrice_ZAI[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 09:51:35,220 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(TokenERC20.transfer(to, value), msg.sender == to && value <= balances_TokenERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][msg.sender] >= 0 &&  balances_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && balances_TokenERC20[this] == old(balances_TokenERC20[this]) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this]) && aSBlock_ZAI[this] == old(aSBlock_ZAI[this]) && aEBlock_ZAI[this] == old(aEBlock_ZAI[this]) && aCap_ZAI[this] == old(aCap_ZAI[this]) && aTot_ZAI[this] == old(aTot_ZAI[this]) && aAmt_ZAI[this] == old(aAmt_ZAI[this]) && sSBlock_ZAI[this] == old(sSBlock_ZAI[this]) && sEBlock_ZAI[this] == old(sEBlock_ZAI[this]) && sCap_ZAI[this] == old(sCap_ZAI[this]) && sTot_ZAI[this] == old(sTot_ZAI[this]) && sChunk_ZAI[this] == old(sChunk_ZAI[this]) && sPrice_ZAI[this] == old(sPrice_ZAI[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 09:51:35,228 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(TokenERC20.transfer(to, value), msg.sender == to && value <= balances_TokenERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][msg.sender] >= 0 &&  balances_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && balances_TokenERC20[this] == old(balances_TokenERC20[this]) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this]) && aSBlock_ZAI[this] == old(aSBlock_ZAI[this]) && aEBlock_ZAI[this] == old(aEBlock_ZAI[this]) && aCap_ZAI[this] == old(aCap_ZAI[this]) && aTot_ZAI[this] == old(aTot_ZAI[this]) && aAmt_ZAI[this] == old(aAmt_ZAI[this]) && sSBlock_ZAI[this] == old(sSBlock_ZAI[this]) && sEBlock_ZAI[this] == old(sEBlock_ZAI[this]) && sCap_ZAI[this] == old(sCap_ZAI[this]) && sTot_ZAI[this] == old(sTot_ZAI[this]) && sChunk_ZAI[this] == old(sChunk_ZAI[this]) && sPrice_ZAI[this] == old(sPrice_ZAI[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 09:51:35,242 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s381 && tokens_s381<=balances_TokenERC20[this][msg.sender] ) && tokens_s381>=0 ) && tokens_s381<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_TokenERC20[this][to_s381]>=0 ) && balances_TokenERC20[this][to_s381]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_TokenERC20[this][msg.sender]>=0 ) && balances_TokenERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IdentifierExpression[to_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 09:51:35,247 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( success_s381==true && _totalSupply_TokenERC20[this]==( old(_totalSupply_TokenERC20[this]) ) ) && balances_TokenERC20[this]==( old(balances_TokenERC20[this]) ) ) && allowed_TokenERC20[this]==( old(allowed_TokenERC20[this]) ) ) && aSBlock_ZAI[this]==( old(aSBlock_ZAI[this]) ) ) && aEBlock_ZAI[this]==( old(aEBlock_ZAI[this]) ) ) && aCap_ZAI[this]==( old(aCap_ZAI[this]) ) ) && aTot_ZAI[this]==( old(aTot_ZAI[this]) ) ) && aAmt_ZAI[this]==( old(aAmt_ZAI[this]) ) ) && sSBlock_ZAI[this]==( old(sSBlock_ZAI[this]) ) ) && sEBlock_ZAI[this]==( old(sEBlock_ZAI[this]) ) ) && sCap_ZAI[this]==( old(sCap_ZAI[this]) ) ) && sTot_ZAI[this]==( old(sTot_ZAI[this]) ) ) && sChunk_ZAI[this]==( old(sChunk_ZAI[this]) ) ) && sPrice_ZAI[this]==( old(sPrice_ZAI[this]) ) ) && symbol_TokenERC20[this]==( old(symbol_TokenERC20[this]) ) ) && name_TokenERC20[this]==( old(name_TokenERC20[this]) ) ) && decimals_TokenERC20[this]==( old(decimals_TokenERC20[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s381,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_TokenERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aSBlock_ZAI,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aSBlock_ZAI,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aEBlock_ZAI,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aEBlock_ZAI,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aCap_ZAI,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aCap_ZAI,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aTot_ZAI,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aTot_ZAI,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aAmt_ZAI,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aAmt_ZAI,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sSBlock_ZAI,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sSBlock_ZAI,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sEBlock_ZAI,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sEBlock_ZAI,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sCap_ZAI,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sCap_ZAI,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sTot_ZAI,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sTot_ZAI,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sChunk_ZAI,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sChunk_ZAI,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sPrice_ZAI,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sPrice_ZAI,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]]
[2020-11-25 09:51:35,257 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(TokenERC20.transfer(to, value), msg.sender == to && value <= balances_TokenERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][msg.sender] >= 0 &&  balances_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && balances_TokenERC20[this] == old(balances_TokenERC20[this]) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this]) && aSBlock_ZAI[this] == old(aSBlock_ZAI[this]) && aEBlock_ZAI[this] == old(aEBlock_ZAI[this]) && aCap_ZAI[this] == old(aCap_ZAI[this]) && aTot_ZAI[this] == old(aTot_ZAI[this]) && aAmt_ZAI[this] == old(aAmt_ZAI[this]) && sSBlock_ZAI[this] == old(sSBlock_ZAI[this]) && sEBlock_ZAI[this] == old(sEBlock_ZAI[this]) && sCap_ZAI[this] == old(sCap_ZAI[this]) && sTot_ZAI[this] == old(sTot_ZAI[this]) && sChunk_ZAI[this] == old(sChunk_ZAI[this]) && sPrice_ZAI[this] == old(sPrice_ZAI[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 09:51:35,257 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_TokenERC200) ==> ( <>AP(success_transfer_TokenERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 09:51:35,273 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:51:35 PropertyContainer
[2020-11-25 09:51:35,273 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 09:51:35,273 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 09:51:35,273 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 09:51:35,274 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 09:51:35,275 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:51:35" (1/2) ...
[2020-11-25 09:51:35,275 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 09:51:35,275 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 09:51:35,295 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:51:35" (2/2) ...
[2020-11-25 09:51:35,295 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 09:51:35,296 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 09:51:35,296 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 09:51:35,296 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 09:51:35,296 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:51:35" (1/2) ...
[2020-11-25 09:51:35,355 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 09:51:35,355 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:51:35,355 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 09:51:35,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 09:51:35,356 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 09:51:35,356 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 09:51:35,356 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 09:51:35,356 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 09:51:35,356 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 09:51:35,356 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 09:51:35,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 09:51:35,356 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 09:51:35,357 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 09:51:35,357 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 09:51:35,357 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 09:51:35,357 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 09:51:35,357 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 09:51:35,358 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 09:51:35,358 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 09:51:35,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 09:51:35,358 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 09:51:35,358 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 09:51:35,358 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 09:51:35,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 09:51:35,358 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 09:51:35,358 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 09:51:35,359 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 09:51:35,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 09:51:35,359 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 09:51:35,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 09:51:35,359 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 09:51:35,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 09:51:35,359 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 09:51:35,359 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20
[2020-11-25 09:51:35,359 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20
[2020-11-25 09:51:35,359 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20
[2020-11-25 09:51:35,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20
[2020-11-25 09:51:35,360 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20
[2020-11-25 09:51:35,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20
[2020-11-25 09:51:35,360 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20
[2020-11-25 09:51:35,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20
[2020-11-25 09:51:35,360 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20
[2020-11-25 09:51:35,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20
[2020-11-25 09:51:35,360 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 09:51:35,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 09:51:35,360 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20
[2020-11-25 09:51:35,360 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20
[2020-11-25 09:51:35,361 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 09:51:35,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 09:51:35,361 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_TokenERC20__success
[2020-11-25 09:51:35,361 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20
[2020-11-25 09:51:35,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20
[2020-11-25 09:51:35,361 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20
[2020-11-25 09:51:35,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20
[2020-11-25 09:51:35,361 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20
[2020-11-25 09:51:35,361 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20
[2020-11-25 09:51:35,361 INFO  L130     BoogieDeclarations]: Found specification of procedure ZAI_ZAI_NoBaseCtor__success
[2020-11-25 09:51:35,362 INFO  L130     BoogieDeclarations]: Found specification of procedure ZAI_ZAI
[2020-11-25 09:51:35,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZAI_ZAI
[2020-11-25 09:51:35,362 INFO  L130     BoogieDeclarations]: Found specification of procedure getAirdrop~address_ZAI
[2020-11-25 09:51:35,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure getAirdrop~address_ZAI
[2020-11-25 09:51:35,362 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenSale~address_ZAI
[2020-11-25 09:51:35,362 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenSale~address_ZAI
[2020-11-25 09:51:35,362 INFO  L130     BoogieDeclarations]: Found specification of procedure viewAirdrop_ZAI
[2020-11-25 09:51:35,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewAirdrop_ZAI
[2020-11-25 09:51:35,363 INFO  L130     BoogieDeclarations]: Found specification of procedure viewSale_ZAI
[2020-11-25 09:51:35,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewSale_ZAI
[2020-11-25 09:51:35,363 INFO  L130     BoogieDeclarations]: Found specification of procedure startAirdrop~uint256~uint256~uint256~uint256_ZAI
[2020-11-25 09:51:35,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAirdrop~uint256~uint256~uint256~uint256_ZAI
[2020-11-25 09:51:35,363 INFO  L130     BoogieDeclarations]: Found specification of procedure startSale~uint256~uint256~uint256~uint256~uint256_ZAI
[2020-11-25 09:51:35,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure startSale~uint256~uint256~uint256~uint256~uint256_ZAI
[2020-11-25 09:51:35,363 INFO  L130     BoogieDeclarations]: Found specification of procedure clearETH_ZAI
[2020-11-25 09:51:35,363 INFO  L138     BoogieDeclarations]: Found implementation of procedure clearETH_ZAI
[2020-11-25 09:51:35,363 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ZAI__success
[2020-11-25 09:51:35,363 INFO  L130     BoogieDeclarations]: Found specification of procedure aSBlock_ZAI
[2020-11-25 09:51:35,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure aSBlock_ZAI
[2020-11-25 09:51:35,364 INFO  L130     BoogieDeclarations]: Found specification of procedure aEBlock_ZAI
[2020-11-25 09:51:35,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure aEBlock_ZAI
[2020-11-25 09:51:35,364 INFO  L130     BoogieDeclarations]: Found specification of procedure aCap_ZAI
[2020-11-25 09:51:35,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure aCap_ZAI
[2020-11-25 09:51:35,364 INFO  L130     BoogieDeclarations]: Found specification of procedure aTot_ZAI
[2020-11-25 09:51:35,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure aTot_ZAI
[2020-11-25 09:51:35,364 INFO  L130     BoogieDeclarations]: Found specification of procedure aAmt_ZAI
[2020-11-25 09:51:35,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure aAmt_ZAI
[2020-11-25 09:51:35,365 INFO  L130     BoogieDeclarations]: Found specification of procedure sSBlock_ZAI
[2020-11-25 09:51:35,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure sSBlock_ZAI
[2020-11-25 09:51:35,365 INFO  L130     BoogieDeclarations]: Found specification of procedure sEBlock_ZAI
[2020-11-25 09:51:35,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure sEBlock_ZAI
[2020-11-25 09:51:35,365 INFO  L130     BoogieDeclarations]: Found specification of procedure sCap_ZAI
[2020-11-25 09:51:35,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure sCap_ZAI
[2020-11-25 09:51:35,365 INFO  L130     BoogieDeclarations]: Found specification of procedure sTot_ZAI
[2020-11-25 09:51:35,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure sTot_ZAI
[2020-11-25 09:51:35,365 INFO  L130     BoogieDeclarations]: Found specification of procedure sChunk_ZAI
[2020-11-25 09:51:35,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure sChunk_ZAI
[2020-11-25 09:51:35,365 INFO  L130     BoogieDeclarations]: Found specification of procedure sPrice_ZAI
[2020-11-25 09:51:35,366 INFO  L138     BoogieDeclarations]: Found implementation of procedure sPrice_ZAI
[2020-11-25 09:51:35,366 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 09:51:35,366 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 09:51:35,366 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 09:51:35,366 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 09:51:35,366 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 09:51:35,366 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 09:51:35,366 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 09:51:35,366 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 09:51:35,366 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 09:51:35,366 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 09:51:35,367 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 09:51:35,367 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 09:51:35,367 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_TokenERC20
[2020-11-25 09:51:35,367 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_TokenERC20
[2020-11-25 09:51:35,367 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ZAI
[2020-11-25 09:51:35,367 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 09:51:35,367 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 09:51:35,367 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:51:35,367 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 09:51:35,368 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 09:51:35,368 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 09:51:35,368 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 09:51:35,368 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 09:51:35,368 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 09:51:35,368 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 09:51:35,368 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 09:51:35,368 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 09:51:35,368 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 09:51:35,369 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 09:51:35,369 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 09:51:35,369 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 09:51:35,369 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 09:51:35,369 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 09:51:35,369 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 09:51:35,369 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 09:51:35,369 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 09:51:35,369 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 09:51:35,369 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 09:51:35,370 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 09:51:35,370 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 09:51:35,370 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 09:51:35,370 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 09:51:35,370 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__success
[2020-11-25 09:51:35,370 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__fail
[2020-11-25 09:51:35,370 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__success
[2020-11-25 09:51:35,370 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__fail
[2020-11-25 09:51:35,370 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__success
[2020-11-25 09:51:35,370 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 09:51:35,371 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 09:51:35,371 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 09:51:35,371 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 09:51:35,371 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 09:51:35,371 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 09:51:35,371 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 09:51:35,371 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__success
[2020-11-25 09:51:35,371 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 09:51:35,372 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 09:51:35,372 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 09:51:35,372 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_TokenERC20__fail
[2020-11-25 09:51:35,372 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__success
[2020-11-25 09:51:35,372 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__fail
[2020-11-25 09:51:35,372 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__success
[2020-11-25 09:51:35,372 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__fail
[2020-11-25 09:51:35,372 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__success
[2020-11-25 09:51:35,372 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__fail
[2020-11-25 09:51:35,372 INFO  L130     BoogieDeclarations]: Found specification of procedure ZAI_ZAI_NoBaseCtor__fail
[2020-11-25 09:51:35,373 INFO  L130     BoogieDeclarations]: Found specification of procedure ZAI_ZAI__success
[2020-11-25 09:51:35,373 INFO  L130     BoogieDeclarations]: Found specification of procedure ZAI_ZAI__fail
[2020-11-25 09:51:35,373 INFO  L130     BoogieDeclarations]: Found specification of procedure getAirdrop~address_ZAI__success
[2020-11-25 09:51:35,373 INFO  L130     BoogieDeclarations]: Found specification of procedure getAirdrop~address_ZAI__fail
[2020-11-25 09:51:35,373 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenSale~address_ZAI__success
[2020-11-25 09:51:35,373 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenSale~address_ZAI__fail
[2020-11-25 09:51:35,373 INFO  L130     BoogieDeclarations]: Found specification of procedure viewAirdrop_ZAI__success
[2020-11-25 09:51:35,373 INFO  L130     BoogieDeclarations]: Found specification of procedure viewAirdrop_ZAI__fail
[2020-11-25 09:51:35,373 INFO  L130     BoogieDeclarations]: Found specification of procedure viewSale_ZAI__success
[2020-11-25 09:51:35,373 INFO  L130     BoogieDeclarations]: Found specification of procedure viewSale_ZAI__fail
[2020-11-25 09:51:35,373 INFO  L130     BoogieDeclarations]: Found specification of procedure startAirdrop~uint256~uint256~uint256~uint256_ZAI__success
[2020-11-25 09:51:35,374 INFO  L130     BoogieDeclarations]: Found specification of procedure startAirdrop~uint256~uint256~uint256~uint256_ZAI__fail
[2020-11-25 09:51:35,374 INFO  L130     BoogieDeclarations]: Found specification of procedure startSale~uint256~uint256~uint256~uint256~uint256_ZAI__success
[2020-11-25 09:51:35,374 INFO  L130     BoogieDeclarations]: Found specification of procedure startSale~uint256~uint256~uint256~uint256~uint256_ZAI__fail
[2020-11-25 09:51:35,374 INFO  L130     BoogieDeclarations]: Found specification of procedure clearETH_ZAI__success
[2020-11-25 09:51:35,374 INFO  L130     BoogieDeclarations]: Found specification of procedure clearETH_ZAI__fail
[2020-11-25 09:51:35,374 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ZAI__fail
[2020-11-25 09:51:35,374 INFO  L130     BoogieDeclarations]: Found specification of procedure aSBlock_ZAI__success
[2020-11-25 09:51:35,374 INFO  L130     BoogieDeclarations]: Found specification of procedure aSBlock_ZAI__fail
[2020-11-25 09:51:35,374 INFO  L130     BoogieDeclarations]: Found specification of procedure aEBlock_ZAI__success
[2020-11-25 09:51:35,374 INFO  L130     BoogieDeclarations]: Found specification of procedure aEBlock_ZAI__fail
[2020-11-25 09:51:35,375 INFO  L130     BoogieDeclarations]: Found specification of procedure aCap_ZAI__success
[2020-11-25 09:51:35,375 INFO  L130     BoogieDeclarations]: Found specification of procedure aCap_ZAI__fail
[2020-11-25 09:51:35,375 INFO  L130     BoogieDeclarations]: Found specification of procedure aTot_ZAI__success
[2020-11-25 09:51:35,375 INFO  L130     BoogieDeclarations]: Found specification of procedure aTot_ZAI__fail
[2020-11-25 09:51:35,375 INFO  L130     BoogieDeclarations]: Found specification of procedure aAmt_ZAI__success
[2020-11-25 09:51:35,375 INFO  L130     BoogieDeclarations]: Found specification of procedure aAmt_ZAI__fail
[2020-11-25 09:51:35,375 INFO  L130     BoogieDeclarations]: Found specification of procedure sSBlock_ZAI__success
[2020-11-25 09:51:35,375 INFO  L130     BoogieDeclarations]: Found specification of procedure sSBlock_ZAI__fail
[2020-11-25 09:51:35,375 INFO  L130     BoogieDeclarations]: Found specification of procedure sEBlock_ZAI__success
[2020-11-25 09:51:35,375 INFO  L130     BoogieDeclarations]: Found specification of procedure sEBlock_ZAI__fail
[2020-11-25 09:51:35,375 INFO  L130     BoogieDeclarations]: Found specification of procedure sCap_ZAI__success
[2020-11-25 09:51:35,375 INFO  L130     BoogieDeclarations]: Found specification of procedure sCap_ZAI__fail
[2020-11-25 09:51:35,376 INFO  L130     BoogieDeclarations]: Found specification of procedure sTot_ZAI__success
[2020-11-25 09:51:35,376 INFO  L130     BoogieDeclarations]: Found specification of procedure sTot_ZAI__fail
[2020-11-25 09:51:35,376 INFO  L130     BoogieDeclarations]: Found specification of procedure sChunk_ZAI__success
[2020-11-25 09:51:35,376 INFO  L130     BoogieDeclarations]: Found specification of procedure sChunk_ZAI__fail
[2020-11-25 09:51:35,376 INFO  L130     BoogieDeclarations]: Found specification of procedure sPrice_ZAI__success
[2020-11-25 09:51:35,376 INFO  L130     BoogieDeclarations]: Found specification of procedure sPrice_ZAI__fail
[2020-11-25 09:51:35,376 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 09:51:35,376 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 09:51:35,376 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 09:51:35,376 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 09:51:35,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 09:51:35,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 09:51:35,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:51:35,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:51:35,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 09:51:35,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 09:51:35,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 09:51:35,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 09:51:35,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 09:51:35,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 09:51:35,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 09:51:35,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 09:51:35,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 09:51:35,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 09:51:35,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 09:51:35,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 09:51:35,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 09:51:35,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 09:51:35,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 09:51:35,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 09:51:35,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 09:51:35,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 09:51:35,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 09:51:35,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 09:51:35,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 09:51:35,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 09:51:35,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 09:51:35,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 09:51:35,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 09:51:35,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 09:51:35,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 09:51:35,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 09:51:35,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 09:51:35,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 09:51:35,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 09:51:35,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 09:51:35,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__fail
[2020-11-25 09:51:35,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__success
[2020-11-25 09:51:35,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__fail
[2020-11-25 09:51:35,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__success
[2020-11-25 09:51:35,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 09:51:35,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__success
[2020-11-25 09:51:35,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 09:51:35,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 09:51:35,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 09:51:35,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 09:51:35,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 09:51:35,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 09:51:35,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 09:51:35,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__success
[2020-11-25 09:51:35,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 09:51:35,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 09:51:35,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_TokenERC20__fail
[2020-11-25 09:51:35,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_TokenERC20__success
[2020-11-25 09:51:35,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__fail
[2020-11-25 09:51:35,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__success
[2020-11-25 09:51:35,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__fail
[2020-11-25 09:51:35,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__success
[2020-11-25 09:51:35,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__fail
[2020-11-25 09:51:35,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__success
[2020-11-25 09:51:35,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZAI_ZAI_NoBaseCtor__fail
[2020-11-25 09:51:35,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZAI_ZAI_NoBaseCtor__success
[2020-11-25 09:51:35,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZAI_ZAI__fail
[2020-11-25 09:51:35,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZAI_ZAI__success
[2020-11-25 09:51:35,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure getAirdrop~address_ZAI__fail
[2020-11-25 09:51:35,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure getAirdrop~address_ZAI__success
[2020-11-25 09:51:35,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenSale~address_ZAI__fail
[2020-11-25 09:51:35,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenSale~address_ZAI__success
[2020-11-25 09:51:35,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewAirdrop_ZAI__fail
[2020-11-25 09:51:35,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewAirdrop_ZAI__success
[2020-11-25 09:51:35,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewSale_ZAI__fail
[2020-11-25 09:51:35,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewSale_ZAI__success
[2020-11-25 09:51:35,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAirdrop~uint256~uint256~uint256~uint256_ZAI__fail
[2020-11-25 09:51:35,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAirdrop~uint256~uint256~uint256~uint256_ZAI__success
[2020-11-25 09:51:35,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure startSale~uint256~uint256~uint256~uint256~uint256_ZAI__fail
[2020-11-25 09:51:35,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure startSale~uint256~uint256~uint256~uint256~uint256_ZAI__success
[2020-11-25 09:51:35,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure clearETH_ZAI__fail
[2020-11-25 09:51:35,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure clearETH_ZAI__success
[2020-11-25 09:51:35,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ZAI__fail
[2020-11-25 09:51:35,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ZAI__success
[2020-11-25 09:51:35,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure aSBlock_ZAI__fail
[2020-11-25 09:51:35,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure aSBlock_ZAI__success
[2020-11-25 09:51:35,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure aEBlock_ZAI__fail
[2020-11-25 09:51:35,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure aEBlock_ZAI__success
[2020-11-25 09:51:35,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure aCap_ZAI__fail
[2020-11-25 09:51:35,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure aCap_ZAI__success
[2020-11-25 09:51:35,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure aTot_ZAI__fail
[2020-11-25 09:51:35,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure aTot_ZAI__success
[2020-11-25 09:51:35,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure aAmt_ZAI__fail
[2020-11-25 09:51:35,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure aAmt_ZAI__success
[2020-11-25 09:51:35,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure sSBlock_ZAI__fail
[2020-11-25 09:51:35,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure sSBlock_ZAI__success
[2020-11-25 09:51:35,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure sEBlock_ZAI__fail
[2020-11-25 09:51:35,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure sEBlock_ZAI__success
[2020-11-25 09:51:35,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure sCap_ZAI__fail
[2020-11-25 09:51:35,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure sCap_ZAI__success
[2020-11-25 09:51:35,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure sTot_ZAI__fail
[2020-11-25 09:51:35,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure sTot_ZAI__success
[2020-11-25 09:51:35,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure sChunk_ZAI__fail
[2020-11-25 09:51:35,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure sChunk_ZAI__success
[2020-11-25 09:51:35,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure sPrice_ZAI__fail
[2020-11-25 09:51:35,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure sPrice_ZAI__success
[2020-11-25 09:51:35,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 09:51:35,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 09:51:35,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 09:51:35,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 09:51:35,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 09:51:35,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 09:51:35,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 09:51:35,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 09:51:35,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 09:51:35,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 09:51:35,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 09:51:35,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 09:51:35,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 09:51:35,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 09:51:35,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 09:51:35,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 09:51:35,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_TokenERC20
[2020-11-25 09:51:35,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_TokenERC20
[2020-11-25 09:51:35,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ZAI
[2020-11-25 09:51:35,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 09:51:35,387 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 09:51:35,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 09:51:36,318 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:51:36,319 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:51:36,319 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:51:36,366 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 09:51:36,366 INFO  L286             CfgBuilder]: Removed 6 assue(true) statements.
[2020-11-25 09:51:36,369 INFO  L202        PluginConnector]: Adding new model ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:51:36 BoogieIcfgContainer
[2020-11-25 09:51:36,369 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:51:35" (2/2) ...
[2020-11-25 09:51:36,369 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 09:51:36,369 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@53167275 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:51:36, skipping insertion in model container
[2020-11-25 09:51:36,369 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 09:51:36,370 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 09:51:36,370 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 09:51:36,371 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 09:51:36,371 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:51:35" (1/3) ...
[2020-11-25 09:51:36,372 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@12d0101c and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:51:36, skipping insertion in model container
[2020-11-25 09:51:36,372 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:51:35" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 09:51:36,409 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:51:36 NWAContainer
[2020-11-25 09:51:36,409 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 09:51:36,409 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 09:51:36,409 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 09:51:36,410 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 09:51:36,411 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:51:36" (3/4) ...
[2020-11-25 09:51:36,412 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@49c67664 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:51:36, skipping insertion in model container
[2020-11-25 09:51:36,412 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:51:36" (4/4) ...
[2020-11-25 09:51:36,415 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 09:51:36,421 INFO  L110   BuchiProductObserver]: Initial RCFG 3566 locations, 4642 edges
[2020-11-25 09:51:36,421 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 09:51:36,434 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 09:51:38,179 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 09:51:38,189 INFO  L110   BuchiProductObserver]: BuchiProgram size 8358 locations, 14611 edges
[2020-11-25 09:51:38,190 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:51:38 BoogieIcfgContainer
[2020-11-25 09:51:38,190 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 09:51:38,190 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 09:51:38,190 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 09:51:38,191 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 09:51:38,192 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:51:38" (1/1) ...
[2020-11-25 09:51:38,322 INFO  L313           BlockEncoder]: Initial Icfg 8358 locations, 14611 edges
[2020-11-25 09:51:38,322 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 09:51:38,322 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 09:51:38,322 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 09:51:38,323 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 09:51:38,339 INFO  L70    emoveInfeasibleEdges]: Removed 84 edges and 15 locations because of local infeasibility
[2020-11-25 09:51:38,355 INFO  L70        RemoveSinkStates]: Removed 14 edges and 9 locations by removing sink states
[2020-11-25 09:51:38,375 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 09:51:38,383 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 09:51:38,389 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 09:51:38,390 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 09:51:38,396 INFO  L313           BlockEncoder]: Encoded RCFG 8302 locations, 14466 edges
[2020-11-25 09:51:38,397 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:51:38 BasicIcfg
[2020-11-25 09:51:38,397 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 09:51:38,397 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 09:51:38,397 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 09:51:38,399 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 09:51:38,399 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:51:38,399 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:51:35" (1/6) ...
[2020-11-25 09:51:38,400 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@b0bd5d9 and model type ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:51:38, skipping insertion in model container
[2020-11-25 09:51:38,400 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:51:38,401 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:51:35" (2/6) ...
[2020-11-25 09:51:38,401 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@b0bd5d9 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:51:38, skipping insertion in model container
[2020-11-25 09:51:38,401 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:51:38,401 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:51:36" (3/6) ...
[2020-11-25 09:51:38,401 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@b0bd5d9 and model type ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:51:38, skipping insertion in model container
[2020-11-25 09:51:38,401 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:51:38,401 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:51:36" (4/6) ...
[2020-11-25 09:51:38,401 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@b0bd5d9 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:51:38, skipping insertion in model container
[2020-11-25 09:51:38,401 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:51:38,402 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:51:38" (5/6) ...
[2020-11-25 09:51:38,402 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@b0bd5d9 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 09:51:38, skipping insertion in model container
[2020-11-25 09:51:38,402 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:51:38,402 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:51:38" (6/6) ...
[2020-11-25 09:51:38,403 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ZAI_0x6a90445976b4a9ad09de0c1621048483d2f5589f_transfer-self.bpl_BEv2
[2020-11-25 09:51:38,430 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 09:51:38,430 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 09:51:38,430 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 09:51:38,430 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 09:51:38,430 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 09:51:38,430 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 09:51:38,430 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 09:51:38,431 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 09:51:38,431 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 09:51:38,487 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8302 states.
[2020-11-25 09:51:38,558 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:51:38,558 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:51:38,558 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:51:38,566 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:51:38,566 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:51:38,566 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 09:51:38,566 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8302 states.
[2020-11-25 09:51:38,603 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:51:38,603 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:51:38,603 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:51:38,604 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:51:38,605 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == ZAI;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND TRUE   revert
[L7678]  RET         call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;

Loop:
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND TRUE   choice == 32
[L7460]              gas := gas - 21000;
[L7461]  COND FALSE  !(gas >= 0)
[L7682]  RET         call CorralChoice_ZAI(this);

[2020-11-25 09:51:38,618 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:51:38,619 INFO  L82        PathProgramCache]: Analyzing trace with hash 877354074, now seen corresponding path program 1 times
[2020-11-25 09:51:38,623 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:51:38,640 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:51:38,667 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:51:38,668 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:51:38,669 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 09:51:39,090 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:51:39,099 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 09:51:39,099 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 09:51:39,101 INFO  L87              Difference]: Start difference. First operand 8302 states. Second operand 3 states.
[2020-11-25 09:51:39,450 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:51:39,451 INFO  L93              Difference]: Finished difference Result 8500 states and 14392 transitions.
[2020-11-25 09:51:39,451 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 09:51:39,452 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8500 states and 14392 transitions.
[2020-11-25 09:51:39,502 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 09:51:39,565 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8500 states to 8500 states and 14392 transitions.
[2020-11-25 09:51:39,566 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 13
[2020-11-25 09:51:39,569 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 398
[2020-11-25 09:51:39,569 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8500 states and 14392 transitions.
[2020-11-25 09:51:39,595 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:51:39,595 INFO  L728         BuchiCegarLoop]: Abstraction has 8500 states and 14392 transitions.
[2020-11-25 09:51:39,616 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8500 states and 14392 transitions.
[2020-11-25 09:51:39,738 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8500 to 7552.
[2020-11-25 09:51:39,739 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7552 states.
[2020-11-25 09:51:39,755 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7552 states to 7552 states and 12709 transitions.
[2020-11-25 09:51:39,756 INFO  L751         BuchiCegarLoop]: Abstraction has 7552 states and 12709 transitions.
[2020-11-25 09:51:39,756 INFO  L631         BuchiCegarLoop]: Abstraction has 7552 states and 12709 transitions.
[2020-11-25 09:51:39,756 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 09:51:39,756 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7552 states and 12709 transitions.
[2020-11-25 09:51:39,769 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:51:39,769 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:51:39,769 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:51:39,770 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:51:39,770 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                success_transfer_TokenERC200 := false;
[L2]                call_transfer_TokenERC200 := false;
[L2]     CALL       call main();
[L7672]             assume null == 0;
[L7673]  CALL       call this := FreshRefGenerator__success();
[L4050]             havoc newRef;
[L4051]             assume Alloc[newRef] == false;
[L4052]             Alloc[newRef] := true;
[L4053]             assume newRef != null;
[L7673]  RET        call this := FreshRefGenerator__success();
[L7674]             assume now >= 0;
[L7675]             assume DType[this] == ZAI;
[L7676]             assume msgvalue_MSG == 0;
[L7677]             gas := gas - 53000;
[L7678]  CALL       call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL       call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL       call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]             assume msgsender_MSG != null;
[L4172]             Balance[this] := 0;
[L4186]  RET        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND TRUE  revert
[L4740]  RET        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND TRUE  revert
[L7678]  RET        call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]             assume !revert && gas >= 0;

Loop:
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND TRUE   choice == 32
[L7460]              gas := gas - 21000;
[L7461]  COND FALSE  !(gas >= 0)
[L7682]  RET         call CorralChoice_ZAI(this);

[2020-11-25 09:51:39,773 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:51:39,774 INFO  L82        PathProgramCache]: Analyzing trace with hash 197295704, now seen corresponding path program 1 times
[2020-11-25 09:51:39,774 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:51:39,779 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:51:39,789 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:51:39,789 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:51:39,789 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [2] imperfect sequences [] total 2
[2020-11-25 09:51:39,790 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:51:39,791 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 09:51:39,791 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 09:51:39,791 INFO  L87              Difference]: Start difference. First operand 7552 states and 12709 transitions. cyclomatic complexity: 5163 Second operand 3 states.
[2020-11-25 09:51:39,953 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:51:39,954 INFO  L93              Difference]: Finished difference Result 8500 states and 14128 transitions.
[2020-11-25 09:51:39,955 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 09:51:39,955 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8500 states and 14128 transitions.
[2020-11-25 09:51:40,003 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 09:51:40,073 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8500 states to 8188 states and 13616 transitions.
[2020-11-25 09:51:40,073 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 374
[2020-11-25 09:51:40,075 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 374
[2020-11-25 09:51:40,075 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8188 states and 13616 transitions.
[2020-11-25 09:51:40,092 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:51:40,092 INFO  L728         BuchiCegarLoop]: Abstraction has 8188 states and 13616 transitions.
[2020-11-25 09:51:40,104 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8188 states and 13616 transitions.
[2020-11-25 09:51:40,186 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8188 to 7292.
[2020-11-25 09:51:40,186 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7292 states.
[2020-11-25 09:51:40,200 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7292 states to 7292 states and 12006 transitions.
[2020-11-25 09:51:40,200 INFO  L751         BuchiCegarLoop]: Abstraction has 7292 states and 12006 transitions.
[2020-11-25 09:51:40,200 INFO  L631         BuchiCegarLoop]: Abstraction has 7292 states and 12006 transitions.
[2020-11-25 09:51:40,200 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 09:51:40,200 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7292 states and 12006 transitions.
[2020-11-25 09:51:40,210 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:51:40,210 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:51:40,210 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:51:40,211 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:51:40,211 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == ZAI;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND FALSE  !(revert)
[L4744]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4744]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4745]  COND FALSE  !(revert)
[L4748]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4400]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4400]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  COND FALSE  !(revert)
[L4404]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4404]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4358]              assume msgsender_MSG != null;
[L4359]              Balance[this] := 0;
[L4360]              symbol_TokenERC20[this] := 84765109;
[L4361]              name_TokenERC20[this] := 84765109;
[L4362]              decimals_TokenERC20[this] := 0;
[L4363]              _totalSupply_TokenERC20[this] := 0;
[L4364]              balances_TokenERC20[this] := zeroRefintArr();
[L4365]              sum_balances0[this] := 0;
[L4366]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4367]              sum_allowed1[this] := 0;
[L4369]              symbol_TokenERC20[this] := 421243739;
[L4370]              name_TokenERC20[this] := 1342373917;
[L4371]              decimals_TokenERC20[this] := 0;
[L4372]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4373]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4375]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4376]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4377]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4408]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4748]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4749]  COND FALSE  !(revert)
[L4752]  CALL        call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]              assume msgsender_MSG != null;
[L4703]              Balance[this] := 0;
[L4704]              aSBlock_ZAI[this] := 0;
[L4705]              aEBlock_ZAI[this] := 0;
[L4706]              aCap_ZAI[this] := 0;
[L4707]              aTot_ZAI[this] := 0;
[L4708]              aAmt_ZAI[this] := 0;
[L4709]              sSBlock_ZAI[this] := 0;
[L4710]              sEBlock_ZAI[this] := 0;
[L4711]              sCap_ZAI[this] := 0;
[L4712]              sTot_ZAI[this] := 0;
[L4713]              sChunk_ZAI[this] := 0;
[L4714]              sPrice_ZAI[this] := 0;
[L4752]  RET         call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4753]  COND FALSE  !(revert)
[L7678]  RET         call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;

Loop:
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND TRUE   choice == 32
[L7460]              gas := gas - 21000;
[L7461]  COND FALSE  !(gas >= 0)
[L7682]  RET         call CorralChoice_ZAI(this);

[2020-11-25 09:51:40,215 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:51:40,215 INFO  L82        PathProgramCache]: Analyzing trace with hash 1219111229, now seen corresponding path program 1 times
[2020-11-25 09:51:40,216 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:51:40,224 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:51:40,241 INFO  L134       CoverageAnalysis]: Checked inductivity of 13 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 13 trivial. 0 not checked.
[2020-11-25 09:51:40,241 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:51:40,241 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 09:51:40,242 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:51:40,242 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 09:51:40,242 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 09:51:40,242 INFO  L87              Difference]: Start difference. First operand 7292 states and 12006 transitions. cyclomatic complexity: 4720 Second operand 4 states.
[2020-11-25 09:51:40,831 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:51:40,832 INFO  L93              Difference]: Finished difference Result 7184 states and 8268 transitions.
[2020-11-25 09:51:40,832 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 09:51:40,832 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7184 states and 8268 transitions.
[2020-11-25 09:51:40,845 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:51:40,862 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7184 states to 7184 states and 8268 transitions.
[2020-11-25 09:51:40,862 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 244
[2020-11-25 09:51:40,862 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 244
[2020-11-25 09:51:40,862 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7184 states and 8268 transitions.
[2020-11-25 09:51:40,868 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:51:40,868 INFO  L728         BuchiCegarLoop]: Abstraction has 7184 states and 8268 transitions.
[2020-11-25 09:51:40,874 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7184 states and 8268 transitions.
[2020-11-25 09:51:40,915 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7184 to 7184.
[2020-11-25 09:51:40,915 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7184 states.
[2020-11-25 09:51:40,922 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7184 states to 7184 states and 8268 transitions.
[2020-11-25 09:51:40,922 INFO  L751         BuchiCegarLoop]: Abstraction has 7184 states and 8268 transitions.
[2020-11-25 09:51:40,922 INFO  L631         BuchiCegarLoop]: Abstraction has 7184 states and 8268 transitions.
[2020-11-25 09:51:40,923 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 09:51:40,923 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7184 states and 8268 transitions.
[2020-11-25 09:51:40,929 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:51:40,929 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:51:40,930 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:51:40,931 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:51:40,932 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == ZAI;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND FALSE  !(revert)
[L4744]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4744]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4745]  COND FALSE  !(revert)
[L4748]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4400]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4400]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  COND FALSE  !(revert)
[L4404]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4404]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4358]              assume msgsender_MSG != null;
[L4359]              Balance[this] := 0;
[L4360]              symbol_TokenERC20[this] := 84765109;
[L4361]              name_TokenERC20[this] := 84765109;
[L4362]              decimals_TokenERC20[this] := 0;
[L4363]              _totalSupply_TokenERC20[this] := 0;
[L4364]              balances_TokenERC20[this] := zeroRefintArr();
[L4365]              sum_balances0[this] := 0;
[L4366]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4367]              sum_allowed1[this] := 0;
[L4369]              symbol_TokenERC20[this] := 421243739;
[L4370]              name_TokenERC20[this] := 1342373917;
[L4371]              decimals_TokenERC20[this] := 0;
[L4372]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4373]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4375]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4376]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4377]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4408]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4748]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4749]  COND FALSE  !(revert)
[L4752]  CALL        call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]              assume msgsender_MSG != null;
[L4703]              Balance[this] := 0;
[L4704]              aSBlock_ZAI[this] := 0;
[L4705]              aEBlock_ZAI[this] := 0;
[L4706]              aCap_ZAI[this] := 0;
[L4707]              aTot_ZAI[this] := 0;
[L4708]              aAmt_ZAI[this] := 0;
[L4709]              sSBlock_ZAI[this] := 0;
[L4710]              sEBlock_ZAI[this] := 0;
[L4711]              sCap_ZAI[this] := 0;
[L4712]              sTot_ZAI[this] := 0;
[L4713]              sChunk_ZAI[this] := 0;
[L4714]              sPrice_ZAI[this] := 0;
[L4752]  RET         call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4753]  COND FALSE  !(revert)
[L7678]  RET         call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND FALSE  !(revert)
[L4482]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4483]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4484]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4485]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4485]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4486]  COND FALSE  !(revert)
[L4489]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4490]              balances_TokenERC20[this][to_s381] := __var_6;
[L4491]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4492]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4493]              success_s381 := true;
[L1014]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1015]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((((((((success_s381 == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && aSBlock_ZAI[this] == old(aSBlock_ZAI[this])) && aEBlock_ZAI[this] == old(aEBlock_ZAI[this])) && aCap_ZAI[this] == old(aCap_ZAI[this])) && aTot_ZAI[this] == old(aTot_ZAI[this])) && aAmt_ZAI[this] == old(aAmt_ZAI[this])) && sSBlock_ZAI[this] == old(sSBlock_ZAI[this])) && sEBlock_ZAI[this] == old(sEBlock_ZAI[this])) && sCap_ZAI[this] == old(sCap_ZAI[this])) && sTot_ZAI[this] == old(sTot_ZAI[this])) && sChunk_ZAI[this] == old(sChunk_ZAI[this])) && sPrice_ZAI[this] == old(sPrice_ZAI[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_ZAI(this);

Loop:
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND FALSE  !(revert)
[L4482]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4483]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4484]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4485]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4485]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4486]  COND FALSE  !(revert)
[L4489]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4490]              balances_TokenERC20[this][to_s381] := __var_6;
[L4491]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4492]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4493]              success_s381 := true;
[L1014]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1015]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((((((((success_s381 == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && aSBlock_ZAI[this] == old(aSBlock_ZAI[this])) && aEBlock_ZAI[this] == old(aEBlock_ZAI[this])) && aCap_ZAI[this] == old(aCap_ZAI[this])) && aTot_ZAI[this] == old(aTot_ZAI[this])) && aAmt_ZAI[this] == old(aAmt_ZAI[this])) && sSBlock_ZAI[this] == old(sSBlock_ZAI[this])) && sEBlock_ZAI[this] == old(sEBlock_ZAI[this])) && sCap_ZAI[this] == old(sCap_ZAI[this])) && sTot_ZAI[this] == old(sTot_ZAI[this])) && sChunk_ZAI[this] == old(sChunk_ZAI[this])) && sPrice_ZAI[this] == old(sPrice_ZAI[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_ZAI(this);

[2020-11-25 09:51:40,935 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:51:40,936 INFO  L82        PathProgramCache]: Analyzing trace with hash 1741238759, now seen corresponding path program 1 times
[2020-11-25 09:51:40,936 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:51:40,995 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:51:41,528 INFO  L134       CoverageAnalysis]: Checked inductivity of 23 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 23 trivial. 0 not checked.
[2020-11-25 09:51:41,528 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:51:41,528 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [20] imperfect sequences [] total 20
[2020-11-25 09:51:41,529 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:51:41,529 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 21 interpolants.
[2020-11-25 09:51:41,530 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=50, Invalid=370, Unknown=0, NotChecked=0, Total=420
[2020-11-25 09:51:41,530 INFO  L87              Difference]: Start difference. First operand 7184 states and 8268 transitions. cyclomatic complexity: 1090 Second operand 21 states.
[2020-11-25 09:51:51,217 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:51:51,218 INFO  L93              Difference]: Finished difference Result 7395 states and 8501 transitions.
[2020-11-25 09:51:51,218 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 09:51:51,218 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7395 states and 8501 transitions.
[2020-11-25 09:51:51,228 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:51:51,247 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7395 states to 7395 states and 8501 transitions.
[2020-11-25 09:51:51,247 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 281
[2020-11-25 09:51:51,248 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 281
[2020-11-25 09:51:51,248 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7395 states and 8501 transitions.
[2020-11-25 09:51:51,252 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:51:51,252 INFO  L728         BuchiCegarLoop]: Abstraction has 7395 states and 8501 transitions.
[2020-11-25 09:51:51,258 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7395 states and 8501 transitions.
[2020-11-25 09:51:51,300 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7395 to 7329.
[2020-11-25 09:51:51,300 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7329 states.
[2020-11-25 09:51:51,307 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7329 states to 7329 states and 8429 transitions.
[2020-11-25 09:51:51,307 INFO  L751         BuchiCegarLoop]: Abstraction has 7329 states and 8429 transitions.
[2020-11-25 09:51:51,307 INFO  L631         BuchiCegarLoop]: Abstraction has 7329 states and 8429 transitions.
[2020-11-25 09:51:51,307 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 09:51:51,307 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7329 states and 8429 transitions.
[2020-11-25 09:51:51,313 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:51:51,314 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:51:51,314 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:51:51,315 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:51:51,316 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == ZAI;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND FALSE  !(revert)
[L4744]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4744]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4745]  COND FALSE  !(revert)
[L4748]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4400]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4400]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  COND FALSE  !(revert)
[L4404]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4404]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4358]              assume msgsender_MSG != null;
[L4359]              Balance[this] := 0;
[L4360]              symbol_TokenERC20[this] := 84765109;
[L4361]              name_TokenERC20[this] := 84765109;
[L4362]              decimals_TokenERC20[this] := 0;
[L4363]              _totalSupply_TokenERC20[this] := 0;
[L4364]              balances_TokenERC20[this] := zeroRefintArr();
[L4365]              sum_balances0[this] := 0;
[L4366]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4367]              sum_allowed1[this] := 0;
[L4369]              symbol_TokenERC20[this] := 421243739;
[L4370]              name_TokenERC20[this] := 1342373917;
[L4371]              decimals_TokenERC20[this] := 0;
[L4372]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4373]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4375]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4376]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4377]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4408]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4748]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4749]  COND FALSE  !(revert)
[L4752]  CALL        call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]              assume msgsender_MSG != null;
[L4703]              Balance[this] := 0;
[L4704]              aSBlock_ZAI[this] := 0;
[L4705]              aEBlock_ZAI[this] := 0;
[L4706]              aCap_ZAI[this] := 0;
[L4707]              aTot_ZAI[this] := 0;
[L4708]              aAmt_ZAI[this] := 0;
[L4709]              sSBlock_ZAI[this] := 0;
[L4710]              sEBlock_ZAI[this] := 0;
[L4711]              sCap_ZAI[this] := 0;
[L4712]              sTot_ZAI[this] := 0;
[L4713]              sChunk_ZAI[this] := 0;
[L4714]              sPrice_ZAI[this] := 0;
[L4752]  RET         call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4753]  COND FALSE  !(revert)
[L7678]  RET         call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND TRUE   __exception
[L981]               __tmp__Balance := Balance;
[L982]               __tmp__DType := DType;
[L983]               __tmp__Alloc := Alloc;
[L984]               __tmp__balance_ADDR := balance_ADDR;
[L985]               __tmp__M_Ref_int := M_Ref_int;
[L986]               __tmp__sum_balances0 := sum_balances0;
[L987]               __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L988]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L989]               __tmp__sum_allowed1 := sum_allowed1;
[L990]               __tmp__Length := Length;
[L991]               __tmp__now := now;
[L992]               __tmp__owner_Owned := owner_Owned;
[L993]               __tmp__newOwner_Owned := newOwner_Owned;
[L994]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L995]               __tmp__name_TokenERC20 := name_TokenERC20;
[L996]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L997]               __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L998]               __tmp__balances_TokenERC20 := balances_TokenERC20;
[L999]               __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1000]              __tmp__aSBlock_ZAI := aSBlock_ZAI;
[L1001]              __tmp__aEBlock_ZAI := aEBlock_ZAI;
[L1002]              __tmp__aCap_ZAI := aCap_ZAI;
[L1003]              __tmp__aTot_ZAI := aTot_ZAI;
[L1004]              __tmp__aAmt_ZAI := aAmt_ZAI;
[L1005]              __tmp__sSBlock_ZAI := sSBlock_ZAI;
[L1006]              __tmp__sEBlock_ZAI := sEBlock_ZAI;
[L1007]              __tmp__sCap_ZAI := sCap_ZAI;
[L1008]              __tmp__sTot_ZAI := sTot_ZAI;
[L1009]              __tmp__sChunk_ZAI := sChunk_ZAI;
[L1010]              __tmp__sPrice_ZAI := sPrice_ZAI;
[L1011]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4456]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4108]  COND TRUE   !(b_s45 <= a_s45)
[L4109]              revert := true;
[L4456]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4457]  COND TRUE   revert
[L1011]  RET         call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1012]              assume revert || gas < 0;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_ZAI(this);

Loop:
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND TRUE   __exception
[L981]               __tmp__Balance := Balance;
[L982]               __tmp__DType := DType;
[L983]               __tmp__Alloc := Alloc;
[L984]               __tmp__balance_ADDR := balance_ADDR;
[L985]               __tmp__M_Ref_int := M_Ref_int;
[L986]               __tmp__sum_balances0 := sum_balances0;
[L987]               __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L988]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L989]               __tmp__sum_allowed1 := sum_allowed1;
[L990]               __tmp__Length := Length;
[L991]               __tmp__now := now;
[L992]               __tmp__owner_Owned := owner_Owned;
[L993]               __tmp__newOwner_Owned := newOwner_Owned;
[L994]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L995]               __tmp__name_TokenERC20 := name_TokenERC20;
[L996]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L997]               __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L998]               __tmp__balances_TokenERC20 := balances_TokenERC20;
[L999]               __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1000]              __tmp__aSBlock_ZAI := aSBlock_ZAI;
[L1001]              __tmp__aEBlock_ZAI := aEBlock_ZAI;
[L1002]              __tmp__aCap_ZAI := aCap_ZAI;
[L1003]              __tmp__aTot_ZAI := aTot_ZAI;
[L1004]              __tmp__aAmt_ZAI := aAmt_ZAI;
[L1005]              __tmp__sSBlock_ZAI := sSBlock_ZAI;
[L1006]              __tmp__sEBlock_ZAI := sEBlock_ZAI;
[L1007]              __tmp__sCap_ZAI := sCap_ZAI;
[L1008]              __tmp__sTot_ZAI := sTot_ZAI;
[L1009]              __tmp__sChunk_ZAI := sChunk_ZAI;
[L1010]              __tmp__sPrice_ZAI := sPrice_ZAI;
[L1011]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4456]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4108]  COND TRUE   !(b_s45 <= a_s45)
[L4109]              revert := true;
[L4456]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4457]  COND TRUE   revert
[L1011]  RET         call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1012]              assume revert || gas < 0;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_ZAI(this);

[2020-11-25 09:51:51,321 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:51:51,321 INFO  L82        PathProgramCache]: Analyzing trace with hash 368501250, now seen corresponding path program 1 times
[2020-11-25 09:51:51,322 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:51:51,334 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:51:51,382 INFO  L134       CoverageAnalysis]: Checked inductivity of 23 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 23 trivial. 0 not checked.
[2020-11-25 09:51:51,382 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:51:51,382 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 09:51:51,382 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:51:51,382 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 09:51:51,383 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 09:51:51,383 INFO  L87              Difference]: Start difference. First operand 7329 states and 8429 transitions. cyclomatic complexity: 1108 Second operand 7 states.
[2020-11-25 09:51:52,892 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:51:52,892 INFO  L93              Difference]: Finished difference Result 7758 states and 8910 transitions.
[2020-11-25 09:51:52,892 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 09:51:52,892 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7758 states and 8910 transitions.
[2020-11-25 09:51:52,907 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 09:51:52,924 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7758 states to 7758 states and 8910 transitions.
[2020-11-25 09:51:52,925 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 371
[2020-11-25 09:51:52,925 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 371
[2020-11-25 09:51:52,925 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7758 states and 8910 transitions.
[2020-11-25 09:51:52,930 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:51:52,930 INFO  L728         BuchiCegarLoop]: Abstraction has 7758 states and 8910 transitions.
[2020-11-25 09:51:52,936 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7758 states and 8910 transitions.
[2020-11-25 09:51:53,013 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7758 to 7470.
[2020-11-25 09:51:53,013 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7470 states.
[2020-11-25 09:51:53,020 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7470 states to 7470 states and 8578 transitions.
[2020-11-25 09:51:53,020 INFO  L751         BuchiCegarLoop]: Abstraction has 7470 states and 8578 transitions.
[2020-11-25 09:51:53,020 INFO  L631         BuchiCegarLoop]: Abstraction has 7470 states and 8578 transitions.
[2020-11-25 09:51:53,020 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 09:51:53,020 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7470 states and 8578 transitions.
[2020-11-25 09:51:53,026 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:51:53,026 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:51:53,026 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:51:53,027 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:51:53,027 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == ZAI;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND FALSE  !(revert)
[L4744]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4744]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4745]  COND FALSE  !(revert)
[L4748]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4400]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4400]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  COND FALSE  !(revert)
[L4404]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4404]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4358]              assume msgsender_MSG != null;
[L4359]              Balance[this] := 0;
[L4360]              symbol_TokenERC20[this] := 84765109;
[L4361]              name_TokenERC20[this] := 84765109;
[L4362]              decimals_TokenERC20[this] := 0;
[L4363]              _totalSupply_TokenERC20[this] := 0;
[L4364]              balances_TokenERC20[this] := zeroRefintArr();
[L4365]              sum_balances0[this] := 0;
[L4366]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4367]              sum_allowed1[this] := 0;
[L4369]              symbol_TokenERC20[this] := 421243739;
[L4370]              name_TokenERC20[this] := 1342373917;
[L4371]              decimals_TokenERC20[this] := 0;
[L4372]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4373]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4375]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4376]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4377]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4408]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4748]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4749]  COND FALSE  !(revert)
[L4752]  CALL        call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]              assume msgsender_MSG != null;
[L4703]              Balance[this] := 0;
[L4704]              aSBlock_ZAI[this] := 0;
[L4705]              aEBlock_ZAI[this] := 0;
[L4706]              aCap_ZAI[this] := 0;
[L4707]              aTot_ZAI[this] := 0;
[L4708]              aAmt_ZAI[this] := 0;
[L4709]              sSBlock_ZAI[this] := 0;
[L4710]              sEBlock_ZAI[this] := 0;
[L4711]              sCap_ZAI[this] := 0;
[L4712]              sTot_ZAI[this] := 0;
[L4713]              sChunk_ZAI[this] := 0;
[L4714]              sPrice_ZAI[this] := 0;
[L4752]  RET         call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4753]  COND FALSE  !(revert)
[L7678]  RET         call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND TRUE   __exception
[L981]               __tmp__Balance := Balance;
[L982]               __tmp__DType := DType;
[L983]               __tmp__Alloc := Alloc;
[L984]               __tmp__balance_ADDR := balance_ADDR;
[L985]               __tmp__M_Ref_int := M_Ref_int;
[L986]               __tmp__sum_balances0 := sum_balances0;
[L987]               __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L988]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L989]               __tmp__sum_allowed1 := sum_allowed1;
[L990]               __tmp__Length := Length;
[L991]               __tmp__now := now;
[L992]               __tmp__owner_Owned := owner_Owned;
[L993]               __tmp__newOwner_Owned := newOwner_Owned;
[L994]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L995]               __tmp__name_TokenERC20 := name_TokenERC20;
[L996]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L997]               __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L998]               __tmp__balances_TokenERC20 := balances_TokenERC20;
[L999]               __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1000]              __tmp__aSBlock_ZAI := aSBlock_ZAI;
[L1001]              __tmp__aEBlock_ZAI := aEBlock_ZAI;
[L1002]              __tmp__aCap_ZAI := aCap_ZAI;
[L1003]              __tmp__aTot_ZAI := aTot_ZAI;
[L1004]              __tmp__aAmt_ZAI := aAmt_ZAI;
[L1005]              __tmp__sSBlock_ZAI := sSBlock_ZAI;
[L1006]              __tmp__sEBlock_ZAI := sEBlock_ZAI;
[L1007]              __tmp__sCap_ZAI := sCap_ZAI;
[L1008]              __tmp__sTot_ZAI := sTot_ZAI;
[L1009]              __tmp__sChunk_ZAI := sChunk_ZAI;
[L1010]              __tmp__sPrice_ZAI := sPrice_ZAI;
[L1011]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4456]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4108]  COND FALSE  !(!(b_s45 <= a_s45))
[L4112]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4456]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4457]  COND FALSE  !(revert)
[L4460]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][msgsender_MSG];
[L4461]              __tmp__balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4462]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][msgsender_MSG];
[L4463]  CALL        call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s381], tokens_s381);
[L4090]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4091]  COND TRUE   !(c_s23 >= a_s23)
[L4092]              revert := true;
[L4463]  RET         call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s381], tokens_s381);
[L4464]  COND TRUE   revert
[L1011]  RET         call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1012]              assume revert || gas < 0;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_ZAI(this);

Loop:
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND TRUE   choice == 32
[L7460]              gas := gas - 21000;
[L7461]  COND FALSE  !(gas >= 0)
[L7682]  RET         call CorralChoice_ZAI(this);

[2020-11-25 09:51:53,049 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:51:53,049 INFO  L82        PathProgramCache]: Analyzing trace with hash -1922987360, now seen corresponding path program 1 times
[2020-11-25 09:51:53,049 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:51:53,060 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:51:53,126 INFO  L134       CoverageAnalysis]: Checked inductivity of 23 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 23 trivial. 0 not checked.
[2020-11-25 09:51:53,126 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:51:53,126 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 09:51:53,127 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:51:53,127 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 09:51:53,127 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=108, Unknown=0, NotChecked=0, Total=132
[2020-11-25 09:51:53,127 INFO  L87              Difference]: Start difference. First operand 7470 states and 8578 transitions. cyclomatic complexity: 1116 Second operand 12 states.
[2020-11-25 09:51:56,113 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:51:56,113 INFO  L93              Difference]: Finished difference Result 7758 states and 8908 transitions.
[2020-11-25 09:51:56,113 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 09:51:56,113 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7758 states and 8908 transitions.
[2020-11-25 09:51:56,125 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 09:51:56,139 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7758 states to 7758 states and 8908 transitions.
[2020-11-25 09:51:56,140 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 371
[2020-11-25 09:51:56,140 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 371
[2020-11-25 09:51:56,140 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7758 states and 8908 transitions.
[2020-11-25 09:51:56,145 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:51:56,145 INFO  L728         BuchiCegarLoop]: Abstraction has 7758 states and 8908 transitions.
[2020-11-25 09:51:56,150 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7758 states and 8908 transitions.
[2020-11-25 09:51:56,186 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7758 to 7466.
[2020-11-25 09:51:56,186 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7466 states.
[2020-11-25 09:51:56,193 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7466 states to 7466 states and 8568 transitions.
[2020-11-25 09:51:56,193 INFO  L751         BuchiCegarLoop]: Abstraction has 7466 states and 8568 transitions.
[2020-11-25 09:51:56,193 INFO  L631         BuchiCegarLoop]: Abstraction has 7466 states and 8568 transitions.
[2020-11-25 09:51:56,193 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 09:51:56,193 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7466 states and 8568 transitions.
[2020-11-25 09:51:56,199 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:51:56,200 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:51:56,200 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:51:56,201 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:51:56,201 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == ZAI;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND FALSE  !(revert)
[L4744]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4744]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4745]  COND FALSE  !(revert)
[L4748]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4400]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4400]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  COND FALSE  !(revert)
[L4404]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4404]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4358]              assume msgsender_MSG != null;
[L4359]              Balance[this] := 0;
[L4360]              symbol_TokenERC20[this] := 84765109;
[L4361]              name_TokenERC20[this] := 84765109;
[L4362]              decimals_TokenERC20[this] := 0;
[L4363]              _totalSupply_TokenERC20[this] := 0;
[L4364]              balances_TokenERC20[this] := zeroRefintArr();
[L4365]              sum_balances0[this] := 0;
[L4366]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4367]              sum_allowed1[this] := 0;
[L4369]              symbol_TokenERC20[this] := 421243739;
[L4370]              name_TokenERC20[this] := 1342373917;
[L4371]              decimals_TokenERC20[this] := 0;
[L4372]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4373]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4375]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4376]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4377]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4408]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4748]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4749]  COND FALSE  !(revert)
[L4752]  CALL        call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]              assume msgsender_MSG != null;
[L4703]              Balance[this] := 0;
[L4704]              aSBlock_ZAI[this] := 0;
[L4705]              aEBlock_ZAI[this] := 0;
[L4706]              aCap_ZAI[this] := 0;
[L4707]              aTot_ZAI[this] := 0;
[L4708]              aAmt_ZAI[this] := 0;
[L4709]              sSBlock_ZAI[this] := 0;
[L4710]              sEBlock_ZAI[this] := 0;
[L4711]              sCap_ZAI[this] := 0;
[L4712]              sTot_ZAI[this] := 0;
[L4713]              sChunk_ZAI[this] := 0;
[L4714]              sPrice_ZAI[this] := 0;
[L4752]  RET         call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4753]  COND FALSE  !(revert)
[L7678]  RET         call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND TRUE   __exception
[L981]               __tmp__Balance := Balance;
[L982]               __tmp__DType := DType;
[L983]               __tmp__Alloc := Alloc;
[L984]               __tmp__balance_ADDR := balance_ADDR;
[L985]               __tmp__M_Ref_int := M_Ref_int;
[L986]               __tmp__sum_balances0 := sum_balances0;
[L987]               __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L988]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L989]               __tmp__sum_allowed1 := sum_allowed1;
[L990]               __tmp__Length := Length;
[L991]               __tmp__now := now;
[L992]               __tmp__owner_Owned := owner_Owned;
[L993]               __tmp__newOwner_Owned := newOwner_Owned;
[L994]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L995]               __tmp__name_TokenERC20 := name_TokenERC20;
[L996]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L997]               __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L998]               __tmp__balances_TokenERC20 := balances_TokenERC20;
[L999]               __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1000]              __tmp__aSBlock_ZAI := aSBlock_ZAI;
[L1001]              __tmp__aEBlock_ZAI := aEBlock_ZAI;
[L1002]              __tmp__aCap_ZAI := aCap_ZAI;
[L1003]              __tmp__aTot_ZAI := aTot_ZAI;
[L1004]              __tmp__aAmt_ZAI := aAmt_ZAI;
[L1005]              __tmp__sSBlock_ZAI := sSBlock_ZAI;
[L1006]              __tmp__sEBlock_ZAI := sEBlock_ZAI;
[L1007]              __tmp__sCap_ZAI := sCap_ZAI;
[L1008]              __tmp__sTot_ZAI := sTot_ZAI;
[L1009]              __tmp__sChunk_ZAI := sChunk_ZAI;
[L1010]              __tmp__sPrice_ZAI := sPrice_ZAI;
[L1011]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4456]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4108]  COND FALSE  !(!(b_s45 <= a_s45))
[L4112]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4456]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4457]  COND FALSE  !(revert)
[L4460]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][msgsender_MSG];
[L4461]              __tmp__balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4462]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][msgsender_MSG];
[L4463]  CALL        call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s381], tokens_s381);
[L4090]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4091]  COND FALSE  !(!(c_s23 >= a_s23))
[L4463]  RET         call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s381], tokens_s381);
[L4464]  COND FALSE  !(revert)
[L4467]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][to_s381];
[L4468]              __tmp__balances_TokenERC20[this][to_s381] := __var_6;
[L4469]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][to_s381];
[L4470]              success_s381 := true;
[L1011]  RET         call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1012]              assume revert || gas < 0;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_ZAI(this);

Loop:
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND TRUE   __exception
[L981]               __tmp__Balance := Balance;
[L982]               __tmp__DType := DType;
[L983]               __tmp__Alloc := Alloc;
[L984]               __tmp__balance_ADDR := balance_ADDR;
[L985]               __tmp__M_Ref_int := M_Ref_int;
[L986]               __tmp__sum_balances0 := sum_balances0;
[L987]               __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L988]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L989]               __tmp__sum_allowed1 := sum_allowed1;
[L990]               __tmp__Length := Length;
[L991]               __tmp__now := now;
[L992]               __tmp__owner_Owned := owner_Owned;
[L993]               __tmp__newOwner_Owned := newOwner_Owned;
[L994]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L995]               __tmp__name_TokenERC20 := name_TokenERC20;
[L996]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L997]               __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L998]               __tmp__balances_TokenERC20 := balances_TokenERC20;
[L999]               __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1000]              __tmp__aSBlock_ZAI := aSBlock_ZAI;
[L1001]              __tmp__aEBlock_ZAI := aEBlock_ZAI;
[L1002]              __tmp__aCap_ZAI := aCap_ZAI;
[L1003]              __tmp__aTot_ZAI := aTot_ZAI;
[L1004]              __tmp__aAmt_ZAI := aAmt_ZAI;
[L1005]              __tmp__sSBlock_ZAI := sSBlock_ZAI;
[L1006]              __tmp__sEBlock_ZAI := sEBlock_ZAI;
[L1007]              __tmp__sCap_ZAI := sCap_ZAI;
[L1008]              __tmp__sTot_ZAI := sTot_ZAI;
[L1009]              __tmp__sChunk_ZAI := sChunk_ZAI;
[L1010]              __tmp__sPrice_ZAI := sPrice_ZAI;
[L1011]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4456]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4108]  COND FALSE  !(!(b_s45 <= a_s45))
[L4112]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4456]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4457]  COND FALSE  !(revert)
[L4460]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][msgsender_MSG];
[L4461]              __tmp__balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4462]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][msgsender_MSG];
[L4463]  CALL        call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s381], tokens_s381);
[L4090]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4091]  COND FALSE  !(!(c_s23 >= a_s23))
[L4463]  RET         call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s381], tokens_s381);
[L4464]  COND FALSE  !(revert)
[L4467]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][to_s381];
[L4468]              __tmp__balances_TokenERC20[this][to_s381] := __var_6;
[L4469]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][to_s381];
[L4470]              success_s381 := true;
[L1011]  RET         call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1012]              assume revert || gas < 0;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_ZAI(this);

[2020-11-25 09:51:56,205 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:51:56,205 INFO  L82        PathProgramCache]: Analyzing trace with hash -133310935, now seen corresponding path program 1 times
[2020-11-25 09:51:56,205 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:51:56,214 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:51:56,244 INFO  L134       CoverageAnalysis]: Checked inductivity of 23 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 23 trivial. 0 not checked.
[2020-11-25 09:51:56,244 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:51:56,245 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 09:51:56,245 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:51:56,245 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 09:51:56,245 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 09:51:56,245 INFO  L87              Difference]: Start difference. First operand 7466 states and 8568 transitions. cyclomatic complexity: 1110 Second operand 5 states.
[2020-11-25 09:51:57,418 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:51:57,418 INFO  L93              Difference]: Finished difference Result 8793 states and 10127 transitions.
[2020-11-25 09:51:57,418 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 09:51:57,418 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8793 states and 10127 transitions.
[2020-11-25 09:51:57,436 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 09:51:57,452 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8793 states to 7161 states and 8332 transitions.
[2020-11-25 09:51:57,452 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 294
[2020-11-25 09:51:57,453 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 294
[2020-11-25 09:51:57,453 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7161 states and 8332 transitions.
[2020-11-25 09:51:57,457 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:51:57,457 INFO  L728         BuchiCegarLoop]: Abstraction has 7161 states and 8332 transitions.
[2020-11-25 09:51:57,462 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7161 states and 8332 transitions.
[2020-11-25 09:51:57,500 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7161 to 5779.
[2020-11-25 09:51:57,500 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5779 states.
[2020-11-25 09:51:57,505 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5779 states to 5779 states and 6645 transitions.
[2020-11-25 09:51:57,505 INFO  L751         BuchiCegarLoop]: Abstraction has 5779 states and 6645 transitions.
[2020-11-25 09:51:57,505 INFO  L631         BuchiCegarLoop]: Abstraction has 5779 states and 6645 transitions.
[2020-11-25 09:51:57,505 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 09:51:57,505 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5779 states and 6645 transitions.
[2020-11-25 09:51:57,510 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:51:57,510 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:51:57,510 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:51:57,512 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:51:57,512 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == ZAI;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND FALSE  !(revert)
[L4744]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4744]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4745]  COND FALSE  !(revert)
[L4748]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4400]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4400]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  COND FALSE  !(revert)
[L4404]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4404]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4358]              assume msgsender_MSG != null;
[L4359]              Balance[this] := 0;
[L4360]              symbol_TokenERC20[this] := 84765109;
[L4361]              name_TokenERC20[this] := 84765109;
[L4362]              decimals_TokenERC20[this] := 0;
[L4363]              _totalSupply_TokenERC20[this] := 0;
[L4364]              balances_TokenERC20[this] := zeroRefintArr();
[L4365]              sum_balances0[this] := 0;
[L4366]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4367]              sum_allowed1[this] := 0;
[L4369]              symbol_TokenERC20[this] := 421243739;
[L4370]              name_TokenERC20[this] := 1342373917;
[L4371]              decimals_TokenERC20[this] := 0;
[L4372]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4373]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4375]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4376]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4377]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4408]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4748]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4749]  COND FALSE  !(revert)
[L4752]  CALL        call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]              assume msgsender_MSG != null;
[L4703]              Balance[this] := 0;
[L4704]              aSBlock_ZAI[this] := 0;
[L4705]              aEBlock_ZAI[this] := 0;
[L4706]              aCap_ZAI[this] := 0;
[L4707]              aTot_ZAI[this] := 0;
[L4708]              aAmt_ZAI[this] := 0;
[L4709]              sSBlock_ZAI[this] := 0;
[L4710]              sEBlock_ZAI[this] := 0;
[L4711]              sCap_ZAI[this] := 0;
[L4712]              sTot_ZAI[this] := 0;
[L4713]              sChunk_ZAI[this] := 0;
[L4714]              sPrice_ZAI[this] := 0;
[L4752]  RET         call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4753]  COND FALSE  !(revert)
[L7678]  RET         call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND FALSE  !(revert)
[L4482]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4483]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4484]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4485]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4485]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4486]  COND FALSE  !(revert)
[L4489]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4490]              balances_TokenERC20[this][to_s381] := __var_6;
[L4491]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4492]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4493]              success_s381 := true;
[L1014]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1015]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((((((((success_s381 == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && aSBlock_ZAI[this] == old(aSBlock_ZAI[this])) && aEBlock_ZAI[this] == old(aEBlock_ZAI[this])) && aCap_ZAI[this] == old(aCap_ZAI[this])) && aTot_ZAI[this] == old(aTot_ZAI[this])) && aAmt_ZAI[this] == old(aAmt_ZAI[this])) && sSBlock_ZAI[this] == old(sSBlock_ZAI[this])) && sEBlock_ZAI[this] == old(sEBlock_ZAI[this])) && sCap_ZAI[this] == old(sCap_ZAI[this])) && sTot_ZAI[this] == old(sTot_ZAI[this])) && sChunk_ZAI[this] == old(sChunk_ZAI[this])) && sPrice_ZAI[this] == old(sPrice_ZAI[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_ZAI(this);
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND FALSE  !(revert)
[L4482]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4483]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4484]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4485]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4485]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4486]  COND FALSE  !(revert)
[L4489]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4490]              balances_TokenERC20[this][to_s381] := __var_6;
[L4491]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4492]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4493]              success_s381 := true;
[L1014]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1015]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((((((((success_s381 == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && aSBlock_ZAI[this] == old(aSBlock_ZAI[this])) && aEBlock_ZAI[this] == old(aEBlock_ZAI[this])) && aCap_ZAI[this] == old(aCap_ZAI[this])) && aTot_ZAI[this] == old(aTot_ZAI[this])) && aAmt_ZAI[this] == old(aAmt_ZAI[this])) && sSBlock_ZAI[this] == old(sSBlock_ZAI[this])) && sEBlock_ZAI[this] == old(sEBlock_ZAI[this])) && sCap_ZAI[this] == old(sCap_ZAI[this])) && sTot_ZAI[this] == old(sTot_ZAI[this])) && sChunk_ZAI[this] == old(sChunk_ZAI[this])) && sPrice_ZAI[this] == old(sPrice_ZAI[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_ZAI(this);

Loop:
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND TRUE   choice == 32
[L7460]              gas := gas - 21000;
[L7461]  COND FALSE  !(gas >= 0)
[L7682]  RET         call CorralChoice_ZAI(this);

[2020-11-25 09:51:57,515 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:51:57,515 INFO  L82        PathProgramCache]: Analyzing trace with hash -1055137268, now seen corresponding path program 1 times
[2020-11-25 09:51:57,516 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:51:57,568 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:51:58,031 WARN  L188               SmtUtils]: Spent 104.00 ms on a formula simplification. DAG size of input: 58 DAG size of output: 32
[2020-11-25 09:51:58,242 INFO  L134       CoverageAnalysis]: Checked inductivity of 116 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 113 trivial. 0 not checked.
[2020-11-25 09:51:58,242 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:51:58,243 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 09:51:58,243 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:51:58,243 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 09:51:58,243 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=99, Invalid=893, Unknown=0, NotChecked=0, Total=992
[2020-11-25 09:51:58,244 INFO  L87              Difference]: Start difference. First operand 5779 states and 6645 transitions. cyclomatic complexity: 873 Second operand 32 states.
[2020-11-25 09:52:09,078 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:52:09,078 INFO  L93              Difference]: Finished difference Result 6179 states and 7169 transitions.
[2020-11-25 09:52:09,078 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 33 states. 
[2020-11-25 09:52:09,078 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6179 states and 7169 transitions.
[2020-11-25 09:52:09,088 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:52:09,100 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6179 states to 6179 states and 7169 transitions.
[2020-11-25 09:52:09,101 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 284
[2020-11-25 09:52:09,101 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 284
[2020-11-25 09:52:09,101 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6179 states and 7169 transitions.
[2020-11-25 09:52:09,104 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:52:09,104 INFO  L728         BuchiCegarLoop]: Abstraction has 6179 states and 7169 transitions.
[2020-11-25 09:52:09,109 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6179 states and 7169 transitions.
[2020-11-25 09:52:09,133 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6179 to 6107.
[2020-11-25 09:52:09,133 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6107 states.
[2020-11-25 09:52:09,139 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6107 states to 6107 states and 7085 transitions.
[2020-11-25 09:52:09,139 INFO  L751         BuchiCegarLoop]: Abstraction has 6107 states and 7085 transitions.
[2020-11-25 09:52:09,139 INFO  L631         BuchiCegarLoop]: Abstraction has 6107 states and 7085 transitions.
[2020-11-25 09:52:09,139 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 09:52:09,139 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6107 states and 7085 transitions.
[2020-11-25 09:52:09,144 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:52:09,144 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:52:09,144 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:52:09,146 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:52:09,146 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == ZAI;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND FALSE  !(revert)
[L4744]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4744]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4745]  COND FALSE  !(revert)
[L4748]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4400]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4400]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  COND FALSE  !(revert)
[L4404]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4404]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4358]              assume msgsender_MSG != null;
[L4359]              Balance[this] := 0;
[L4360]              symbol_TokenERC20[this] := 84765109;
[L4361]              name_TokenERC20[this] := 84765109;
[L4362]              decimals_TokenERC20[this] := 0;
[L4363]              _totalSupply_TokenERC20[this] := 0;
[L4364]              balances_TokenERC20[this] := zeroRefintArr();
[L4365]              sum_balances0[this] := 0;
[L4366]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4367]              sum_allowed1[this] := 0;
[L4369]              symbol_TokenERC20[this] := 421243739;
[L4370]              name_TokenERC20[this] := 1342373917;
[L4371]              decimals_TokenERC20[this] := 0;
[L4372]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4373]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4375]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4376]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4377]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4408]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4748]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4749]  COND FALSE  !(revert)
[L4752]  CALL        call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]              assume msgsender_MSG != null;
[L4703]              Balance[this] := 0;
[L4704]              aSBlock_ZAI[this] := 0;
[L4705]              aEBlock_ZAI[this] := 0;
[L4706]              aCap_ZAI[this] := 0;
[L4707]              aTot_ZAI[this] := 0;
[L4708]              aAmt_ZAI[this] := 0;
[L4709]              sSBlock_ZAI[this] := 0;
[L4710]              sEBlock_ZAI[this] := 0;
[L4711]              sCap_ZAI[this] := 0;
[L4712]              sTot_ZAI[this] := 0;
[L4713]              sChunk_ZAI[this] := 0;
[L4714]              sPrice_ZAI[this] := 0;
[L4752]  RET         call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4753]  COND FALSE  !(revert)
[L7678]  RET         call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND FALSE  !(choice == 29)
[L7484]  COND FALSE  !(choice == 28)
[L7491]  COND FALSE  !(choice == 27)
[L7498]  COND FALSE  !(choice == 26)
[L7504]  COND FALSE  !(choice == 25)
[L7510]  COND FALSE  !(choice == 24)
[L7516]  COND FALSE  !(choice == 23)
[L7522]  COND FALSE  !(choice == 22)
[L7528]  COND FALSE  !(choice == 21)
[L7534]  COND FALSE  !(choice == 20)
[L7540]  COND FALSE  !(choice == 19)
[L7547]  COND FALSE  !(choice == 18)
[L7553]  COND FALSE  !(choice == 17)
[L7559]  COND FALSE  !(choice == 16)
[L7565]  COND FALSE  !(choice == 15)
[L7571]  COND FALSE  !(choice == 14)
[L7577]  COND FALSE  !(choice == 13)
[L7583]  COND FALSE  !(choice == 12)
[L7589]  COND FALSE  !(choice == 11)
[L7595]  COND FALSE  !(choice == 10)
[L7601]  COND FALSE  !(choice == 9)
[L7607]  COND FALSE  !(choice == 8)
[L7613]  COND FALSE  !(choice == 7)
[L7619]  COND FALSE  !(choice == 6)
[L7625]  COND FALSE  !(choice == 5)
[L7631]  COND FALSE  !(choice == 4)
[L7637]  COND FALSE  !(choice == 3)
[L7647]  COND FALSE  !(choice == 2)
[L7658]  COND TRUE   choice == 1
[L7659]              gas := gas - 21000;
[L7660]  COND TRUE   gas >= 0
[L7661]              assume msgvalue_MSG == 0;
[L7662]  CALL        call clearETH_ZAI(this, msgsender_MSG, msgvalue_MSG);
[L2212]              havoc __exception;
[L2213]              revert := false;
[L2214]  COND FALSE  !(__exception)
[L2248]  CALL        call clearETH_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L5185]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6828]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L5185]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  COND FALSE  !(revert)
[L5189]              _owner_s986 := msgsender_MSG;
[L5190]              __var_31 := gas;
[L5191]  COND FALSE  !(gas > 2300)
[L5194]              __var_31 := __var_31 - gas;
[L5195]              __var_32 := this;
[L5196]  CALL        call __var_33 := send__success(this, _owner_s986, Balance[this]);
[L6769]              havoc __exception;
[L6770]  COND FALSE  !(__exception)
[L6808]  COND TRUE   Balance[from] >= amount
[L6809]  CALL        call FallbackDispatch__success(from, to, amount);
[L5382]  COND FALSE  !(DType[to] == ZAI)
[L5387]  COND FALSE  !(DType[to] == TokenERC20)
[L5392]  COND FALSE  !(DType[to] == Owned)
[L5394]  COND FALSE  !(DType[to] == ApproveAndCallFallBack)
[L5396]  COND FALSE  !(DType[to] == ERC20Interface)
[L5399]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L6117]              assume Balance[from] >= amount;
[L6118]              Balance[from] := Balance[from] - amount;
[L6119]              Balance[to] := Balance[to] + amount;
[L6121]  COND FALSE  !(choice == 0)
[L6125]  COND FALSE  !(gas < 21000)
[L6128]  COND TRUE   DType[from] == ZAI
[L6129]  COND FALSE  !(choice == 32)
[L6138]  COND FALSE  !(choice == 31)
[L6147]  COND FALSE  !(choice == 30)
[L6156]  COND TRUE   choice == 29
[L6157]              gas := gas - 21000;
[L6158]  COND TRUE   gas >= 0
[L6159]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6160]              assume msgvalue_MSG == 0;
[L6161]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(from, to, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND FALSE  !(revert)
[L4482]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4483]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4484]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4485]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4485]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4486]  COND FALSE  !(revert)
[L4489]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4490]              balances_TokenERC20[this][to_s381] := __var_6;
[L4491]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4492]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4493]              success_s381 := true;
[L6161]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(from, to, msgvalue_MSG, to_s381, tokens_s381);
[L6162]  COND FALSE  !(revert)
[L5399]  RET         call Fallback_UnknownType__success(from, to, amount);
[L5400]  COND FALSE  !(revert)
[L6809]  RET         call FallbackDispatch__success(from, to, amount);
[L6810]              success := true;
[L6814]              assume !revert && gas >= 0;
[L5196]  RET         call __var_33 := send__success(this, _owner_s986, Balance[this]);
[L5197]  COND FALSE  !(!__var_33)
[L5201]              gas := __var_31 + gas;
[L2248]  RET         call clearETH_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]              assume !revert && gas >= 0;
[L7662]  RET         call clearETH_ZAI(this, msgsender_MSG, msgvalue_MSG);
[L7682]  RET         call CorralChoice_ZAI(this);
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND FALSE  !(revert)
[L4482]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4483]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4484]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4485]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4485]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4486]  COND FALSE  !(revert)
[L4489]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4490]              balances_TokenERC20[this][to_s381] := __var_6;
[L4491]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4492]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4493]              success_s381 := true;
[L1014]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1015]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((((((((success_s381 == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && aSBlock_ZAI[this] == old(aSBlock_ZAI[this])) && aEBlock_ZAI[this] == old(aEBlock_ZAI[this])) && aCap_ZAI[this] == old(aCap_ZAI[this])) && aTot_ZAI[this] == old(aTot_ZAI[this])) && aAmt_ZAI[this] == old(aAmt_ZAI[this])) && sSBlock_ZAI[this] == old(sSBlock_ZAI[this])) && sEBlock_ZAI[this] == old(sEBlock_ZAI[this])) && sCap_ZAI[this] == old(sCap_ZAI[this])) && sTot_ZAI[this] == old(sTot_ZAI[this])) && sChunk_ZAI[this] == old(sChunk_ZAI[this])) && sPrice_ZAI[this] == old(sPrice_ZAI[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_ZAI(this);

Loop:
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND FALSE  !(choice == 29)
[L7484]  COND FALSE  !(choice == 28)
[L7491]  COND FALSE  !(choice == 27)
[L7498]  COND FALSE  !(choice == 26)
[L7504]  COND FALSE  !(choice == 25)
[L7510]  COND FALSE  !(choice == 24)
[L7516]  COND FALSE  !(choice == 23)
[L7522]  COND FALSE  !(choice == 22)
[L7528]  COND FALSE  !(choice == 21)
[L7534]  COND FALSE  !(choice == 20)
[L7540]  COND FALSE  !(choice == 19)
[L7547]  COND FALSE  !(choice == 18)
[L7553]  COND FALSE  !(choice == 17)
[L7559]  COND FALSE  !(choice == 16)
[L7565]  COND FALSE  !(choice == 15)
[L7571]  COND FALSE  !(choice == 14)
[L7577]  COND FALSE  !(choice == 13)
[L7583]  COND FALSE  !(choice == 12)
[L7589]  COND FALSE  !(choice == 11)
[L7595]  COND FALSE  !(choice == 10)
[L7601]  COND FALSE  !(choice == 9)
[L7607]  COND FALSE  !(choice == 8)
[L7613]  COND TRUE   choice == 7
[L7614]              gas := gas - 21000;
[L7615]  COND TRUE   gas >= 0
[L7616]              assume msgvalue_MSG == 0;
[L7617]  CALL        call success_s687 := getAirdrop~address_ZAI(this, msgsender_MSG, msgvalue_MSG, _refer_s687);
[L1722]              havoc __exception;
[L1723]              revert := false;
[L1724]  COND FALSE  !(__exception)
[L1758]  CALL        call success_s687 := getAirdrop~address_ZAI__success(this, msgsender_MSG, msgvalue_MSG, _refer_s687);
[L4835]  COND FALSE  !(!(aSBlock_ZAI[this] <= now && now <= aEBlock_ZAI[this]))
[L4839]  COND FALSE  !(!(aTot_ZAI[this] < aCap_ZAI[this] || aCap_ZAI[this] == 0))
[L4843]              aTot_ZAI[this] := (aTot_ZAI[this] + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4844]  COND TRUE   DType[this] == ZAI
[L4845]  CALL        call __var_13 := balanceOf~address_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _refer_s687);
[L4448]              balance_s338 := balances_TokenERC20[this][tokenOwner_s338];
[L4845]  RET         call __var_13 := balanceOf~address_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _refer_s687);
[L4846]  COND FALSE  !(revert)
[L4852]  COND FALSE  !((msgsender_MSG != _refer_s687 && __var_13 != 0) && _refer_s687 != 0)
[L4871]              __var_18 := this;
[L4872]              __var_20 := this;
[L4873]  CALL        call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][this], aAmt_ZAI[this]);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4873]  RET         call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][this], aAmt_ZAI[this]);
[L4874]  COND FALSE  !(revert)
[L4877]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][this];
[L4878]              balances_TokenERC20[this][this] := __var_19;
[L4879]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][this];
[L4880]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], aAmt_ZAI[this]);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4880]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], aAmt_ZAI[this]);
[L4881]  COND FALSE  !(revert)
[L4884]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4885]              balances_TokenERC20[this][msgsender_MSG] := __var_21;
[L4886]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4887]              assert { :EventEmitted "Transfer_ZAI" } true;
[L4888]              success_s687 := true;
[L1758]  RET         call success_s687 := getAirdrop~address_ZAI__success(this, msgsender_MSG, msgvalue_MSG, _refer_s687);
[L1759]              assume !revert && gas >= 0;
[L7617]  RET         call success_s687 := getAirdrop~address_ZAI(this, msgsender_MSG, msgvalue_MSG, _refer_s687);
[L7682]  RET         call CorralChoice_ZAI(this);

[2020-11-25 09:52:09,151 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:52:09,151 INFO  L82        PathProgramCache]: Analyzing trace with hash 605621378, now seen corresponding path program 1 times
[2020-11-25 09:52:09,151 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:52:09,172 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:52:09,252 INFO  L134       CoverageAnalysis]: Checked inductivity of 107 backedges. 1 proven. 15 refuted. 0 times theorem prover too weak. 91 trivial. 0 not checked.
[2020-11-25 09:52:09,253 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:52:09,253 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 09:52:09,253 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:52:09,253 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 09:52:09,253 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=14, Invalid=28, Unknown=0, NotChecked=0, Total=42
[2020-11-25 09:52:09,253 INFO  L87              Difference]: Start difference. First operand 6107 states and 7085 transitions. cyclomatic complexity: 988 Second operand 7 states.
[2020-11-25 09:52:10,543 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:52:10,543 INFO  L93              Difference]: Finished difference Result 8282 states and 9313 transitions.
[2020-11-25 09:52:10,543 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 09:52:10,544 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8282 states and 9313 transitions.
[2020-11-25 09:52:10,557 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 12
[2020-11-25 09:52:10,571 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8282 states to 8150 states and 9181 transitions.
[2020-11-25 09:52:10,571 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 293
[2020-11-25 09:52:10,572 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 864
[2020-11-25 09:52:10,572 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8150 states and 9181 transitions.
[2020-11-25 09:52:10,576 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:52:10,577 INFO  L728         BuchiCegarLoop]: Abstraction has 8150 states and 9181 transitions.
[2020-11-25 09:52:10,581 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8150 states and 9181 transitions.
[2020-11-25 09:52:10,615 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8150 to 7557.
[2020-11-25 09:52:10,615 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7557 states.
[2020-11-25 09:52:10,622 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7557 states to 7557 states and 8497 transitions.
[2020-11-25 09:52:10,622 INFO  L751         BuchiCegarLoop]: Abstraction has 7557 states and 8497 transitions.
[2020-11-25 09:52:10,622 INFO  L631         BuchiCegarLoop]: Abstraction has 7557 states and 8497 transitions.
[2020-11-25 09:52:10,622 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 09:52:10,622 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7557 states and 8497 transitions.
[2020-11-25 09:52:10,629 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:52:10,629 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:52:10,629 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:52:10,631 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:52:10,631 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == ZAI;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND FALSE  !(revert)
[L4744]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4744]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4745]  COND FALSE  !(revert)
[L4748]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4400]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4400]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  COND FALSE  !(revert)
[L4404]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4404]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4358]              assume msgsender_MSG != null;
[L4359]              Balance[this] := 0;
[L4360]              symbol_TokenERC20[this] := 84765109;
[L4361]              name_TokenERC20[this] := 84765109;
[L4362]              decimals_TokenERC20[this] := 0;
[L4363]              _totalSupply_TokenERC20[this] := 0;
[L4364]              balances_TokenERC20[this] := zeroRefintArr();
[L4365]              sum_balances0[this] := 0;
[L4366]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4367]              sum_allowed1[this] := 0;
[L4369]              symbol_TokenERC20[this] := 421243739;
[L4370]              name_TokenERC20[this] := 1342373917;
[L4371]              decimals_TokenERC20[this] := 0;
[L4372]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4373]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4375]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4376]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4377]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4408]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4748]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4749]  COND FALSE  !(revert)
[L4752]  CALL        call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]              assume msgsender_MSG != null;
[L4703]              Balance[this] := 0;
[L4704]              aSBlock_ZAI[this] := 0;
[L4705]              aEBlock_ZAI[this] := 0;
[L4706]              aCap_ZAI[this] := 0;
[L4707]              aTot_ZAI[this] := 0;
[L4708]              aAmt_ZAI[this] := 0;
[L4709]              sSBlock_ZAI[this] := 0;
[L4710]              sEBlock_ZAI[this] := 0;
[L4711]              sCap_ZAI[this] := 0;
[L4712]              sTot_ZAI[this] := 0;
[L4713]              sChunk_ZAI[this] := 0;
[L4714]              sPrice_ZAI[this] := 0;
[L4752]  RET         call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4753]  COND FALSE  !(revert)
[L7678]  RET         call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND FALSE  !(choice == 29)
[L7484]  COND FALSE  !(choice == 28)
[L7491]  COND FALSE  !(choice == 27)
[L7498]  COND FALSE  !(choice == 26)
[L7504]  COND FALSE  !(choice == 25)
[L7510]  COND FALSE  !(choice == 24)
[L7516]  COND FALSE  !(choice == 23)
[L7522]  COND FALSE  !(choice == 22)
[L7528]  COND FALSE  !(choice == 21)
[L7534]  COND FALSE  !(choice == 20)
[L7540]  COND FALSE  !(choice == 19)
[L7547]  COND FALSE  !(choice == 18)
[L7553]  COND FALSE  !(choice == 17)
[L7559]  COND FALSE  !(choice == 16)
[L7565]  COND FALSE  !(choice == 15)
[L7571]  COND FALSE  !(choice == 14)
[L7577]  COND FALSE  !(choice == 13)
[L7583]  COND FALSE  !(choice == 12)
[L7589]  COND FALSE  !(choice == 11)
[L7595]  COND FALSE  !(choice == 10)
[L7601]  COND FALSE  !(choice == 9)
[L7607]  COND FALSE  !(choice == 8)
[L7613]  COND FALSE  !(choice == 7)
[L7619]  COND FALSE  !(choice == 6)
[L7625]  COND FALSE  !(choice == 5)
[L7631]  COND FALSE  !(choice == 4)
[L7637]  COND FALSE  !(choice == 3)
[L7647]  COND FALSE  !(choice == 2)
[L7658]  COND TRUE   choice == 1
[L7659]              gas := gas - 21000;
[L7660]  COND TRUE   gas >= 0
[L7661]              assume msgvalue_MSG == 0;
[L7662]  CALL        call clearETH_ZAI(this, msgsender_MSG, msgvalue_MSG);
[L2212]              havoc __exception;
[L2213]              revert := false;
[L2214]  COND FALSE  !(__exception)
[L2248]  CALL        call clearETH_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L5185]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6828]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L5185]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  COND FALSE  !(revert)
[L5189]              _owner_s986 := msgsender_MSG;
[L5190]              __var_31 := gas;
[L5191]  COND TRUE   gas > 2300
[L5192]              gas := 2300;
[L5194]              __var_31 := __var_31 - gas;
[L5195]              __var_32 := this;
[L5196]  CALL        call __var_33 := send__success(this, _owner_s986, Balance[this]);
[L6769]              havoc __exception;
[L6770]  COND FALSE  !(__exception)
[L6808]  COND TRUE   Balance[from] >= amount
[L6809]  CALL        call FallbackDispatch__success(from, to, amount);
[L5382]  COND FALSE  !(DType[to] == ZAI)
[L5387]  COND FALSE  !(DType[to] == TokenERC20)
[L5392]  COND FALSE  !(DType[to] == Owned)
[L5394]  COND FALSE  !(DType[to] == ApproveAndCallFallBack)
[L5396]  COND FALSE  !(DType[to] == ERC20Interface)
[L5399]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L6117]              assume Balance[from] >= amount;
[L6118]              Balance[from] := Balance[from] - amount;
[L6119]              Balance[to] := Balance[to] + amount;
[L6121]  COND FALSE  !(choice == 0)
[L6125]  COND FALSE  !(gas < 21000)
[L6128]  COND TRUE   DType[from] == ZAI
[L6129]  COND FALSE  !(choice == 32)
[L6138]  COND FALSE  !(choice == 31)
[L6147]  COND FALSE  !(choice == 30)
[L6156]  COND TRUE   choice == 29
[L6157]              gas := gas - 21000;
[L6158]  COND TRUE   gas >= 0
[L6159]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6160]              assume msgvalue_MSG == 0;
[L6161]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(from, to, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND FALSE  !(revert)
[L4482]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4483]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4484]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4485]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4485]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4486]  COND FALSE  !(revert)
[L4489]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4490]              balances_TokenERC20[this][to_s381] := __var_6;
[L4491]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4492]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4493]              success_s381 := true;
[L6161]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(from, to, msgvalue_MSG, to_s381, tokens_s381);
[L6162]  COND FALSE  !(revert)
[L5399]  RET         call Fallback_UnknownType__success(from, to, amount);
[L5400]  COND FALSE  !(revert)
[L6809]  RET         call FallbackDispatch__success(from, to, amount);
[L6810]              success := true;
[L6814]              assume !revert && gas >= 0;
[L5196]  RET         call __var_33 := send__success(this, _owner_s986, Balance[this]);
[L5197]  COND FALSE  !(!__var_33)
[L5201]              gas := __var_31 + gas;
[L2248]  RET         call clearETH_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]              assume !revert && gas >= 0;
[L7662]  RET         call clearETH_ZAI(this, msgsender_MSG, msgvalue_MSG);
[L7682]  RET         call CorralChoice_ZAI(this);
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND FALSE  !(revert)
[L4482]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4483]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4484]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4485]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4485]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4486]  COND FALSE  !(revert)
[L4489]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4490]              balances_TokenERC20[this][to_s381] := __var_6;
[L4491]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4492]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4493]              success_s381 := true;
[L1014]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1015]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((((((((success_s381 == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && aSBlock_ZAI[this] == old(aSBlock_ZAI[this])) && aEBlock_ZAI[this] == old(aEBlock_ZAI[this])) && aCap_ZAI[this] == old(aCap_ZAI[this])) && aTot_ZAI[this] == old(aTot_ZAI[this])) && aAmt_ZAI[this] == old(aAmt_ZAI[this])) && sSBlock_ZAI[this] == old(sSBlock_ZAI[this])) && sEBlock_ZAI[this] == old(sEBlock_ZAI[this])) && sCap_ZAI[this] == old(sCap_ZAI[this])) && sTot_ZAI[this] == old(sTot_ZAI[this])) && sChunk_ZAI[this] == old(sChunk_ZAI[this])) && sPrice_ZAI[this] == old(sPrice_ZAI[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_ZAI(this);

Loop:
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND TRUE   choice == 31
[L7466]              gas := gas - 21000;
[L7467]  COND TRUE   gas >= 0
[L7468]              assume msgvalue_MSG == 0;
[L7469]  CALL        call balance_s338 := balanceOf~address_TokenERC20(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L900]               havoc __exception;
[L901]               revert := false;
[L902]   COND FALSE  !(__exception)
[L936]   CALL        call balance_s338 := balanceOf~address_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L4448]              balance_s338 := balances_TokenERC20[this][tokenOwner_s338];
[L936]   RET         call balance_s338 := balanceOf~address_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L937]               assume !revert && gas >= 0;
[L7469]  RET         call balance_s338 := balanceOf~address_TokenERC20(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L7682]  RET         call CorralChoice_ZAI(this);

[2020-11-25 09:52:10,635 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:52:10,635 INFO  L82        PathProgramCache]: Analyzing trace with hash 646604392, now seen corresponding path program 1 times
[2020-11-25 09:52:10,635 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:52:10,651 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:52:10,724 INFO  L134       CoverageAnalysis]: Checked inductivity of 107 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 106 trivial. 0 not checked.
[2020-11-25 09:52:10,724 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:52:10,724 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 09:52:10,725 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:52:10,725 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 09:52:10,725 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=19, Unknown=0, NotChecked=0, Total=30
[2020-11-25 09:52:10,725 INFO  L87              Difference]: Start difference. First operand 7557 states and 8497 transitions. cyclomatic complexity: 950 Second operand 6 states.
[2020-11-25 09:52:11,320 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:52:11,320 INFO  L93              Difference]: Finished difference Result 4075 states and 4420 transitions.
[2020-11-25 09:52:11,320 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 09:52:11,321 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4075 states and 4420 transitions.
[2020-11-25 09:52:11,328 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 09:52:11,336 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4075 states to 4075 states and 4420 transitions.
[2020-11-25 09:52:11,336 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 853
[2020-11-25 09:52:11,336 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1323
[2020-11-25 09:52:11,337 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4075 states and 4420 transitions.
[2020-11-25 09:52:11,339 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:52:11,339 INFO  L728         BuchiCegarLoop]: Abstraction has 4075 states and 4420 transitions.
[2020-11-25 09:52:11,342 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4075 states and 4420 transitions.
[2020-11-25 09:52:11,355 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4075 to 3829.
[2020-11-25 09:52:11,355 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3829 states.
[2020-11-25 09:52:11,359 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3829 states to 3829 states and 4142 transitions.
[2020-11-25 09:52:11,359 INFO  L751         BuchiCegarLoop]: Abstraction has 3829 states and 4142 transitions.
[2020-11-25 09:52:11,359 INFO  L631         BuchiCegarLoop]: Abstraction has 3829 states and 4142 transitions.
[2020-11-25 09:52:11,359 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 09:52:11,359 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3829 states and 4142 transitions.
[2020-11-25 09:52:11,363 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:52:11,363 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:52:11,363 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:52:11,364 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:52:11,364 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == ZAI;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND FALSE  !(revert)
[L4744]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4744]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4745]  COND FALSE  !(revert)
[L4748]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4400]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4400]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  COND FALSE  !(revert)
[L4404]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4404]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4358]              assume msgsender_MSG != null;
[L4359]              Balance[this] := 0;
[L4360]              symbol_TokenERC20[this] := 84765109;
[L4361]              name_TokenERC20[this] := 84765109;
[L4362]              decimals_TokenERC20[this] := 0;
[L4363]              _totalSupply_TokenERC20[this] := 0;
[L4364]              balances_TokenERC20[this] := zeroRefintArr();
[L4365]              sum_balances0[this] := 0;
[L4366]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4367]              sum_allowed1[this] := 0;
[L4369]              symbol_TokenERC20[this] := 421243739;
[L4370]              name_TokenERC20[this] := 1342373917;
[L4371]              decimals_TokenERC20[this] := 0;
[L4372]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4373]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4375]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4376]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4377]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4408]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4748]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4749]  COND FALSE  !(revert)
[L4752]  CALL        call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]              assume msgsender_MSG != null;
[L4703]              Balance[this] := 0;
[L4704]              aSBlock_ZAI[this] := 0;
[L4705]              aEBlock_ZAI[this] := 0;
[L4706]              aCap_ZAI[this] := 0;
[L4707]              aTot_ZAI[this] := 0;
[L4708]              aAmt_ZAI[this] := 0;
[L4709]              sSBlock_ZAI[this] := 0;
[L4710]              sEBlock_ZAI[this] := 0;
[L4711]              sCap_ZAI[this] := 0;
[L4712]              sTot_ZAI[this] := 0;
[L4713]              sChunk_ZAI[this] := 0;
[L4714]              sPrice_ZAI[this] := 0;
[L4752]  RET         call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4753]  COND FALSE  !(revert)
[L7678]  RET         call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND FALSE  !(choice == 29)
[L7484]  COND FALSE  !(choice == 28)
[L7491]  COND FALSE  !(choice == 27)
[L7498]  COND FALSE  !(choice == 26)
[L7504]  COND FALSE  !(choice == 25)
[L7510]  COND FALSE  !(choice == 24)
[L7516]  COND FALSE  !(choice == 23)
[L7522]  COND FALSE  !(choice == 22)
[L7528]  COND FALSE  !(choice == 21)
[L7534]  COND FALSE  !(choice == 20)
[L7540]  COND FALSE  !(choice == 19)
[L7547]  COND FALSE  !(choice == 18)
[L7553]  COND FALSE  !(choice == 17)
[L7559]  COND FALSE  !(choice == 16)
[L7565]  COND FALSE  !(choice == 15)
[L7571]  COND FALSE  !(choice == 14)
[L7577]  COND FALSE  !(choice == 13)
[L7583]  COND FALSE  !(choice == 12)
[L7589]  COND FALSE  !(choice == 11)
[L7595]  COND FALSE  !(choice == 10)
[L7601]  COND FALSE  !(choice == 9)
[L7607]  COND FALSE  !(choice == 8)
[L7613]  COND TRUE   choice == 7
[L7614]              gas := gas - 21000;
[L7615]  COND TRUE   gas >= 0
[L7616]              assume msgvalue_MSG == 0;
[L7617]  CALL        call success_s687 := getAirdrop~address_ZAI(this, msgsender_MSG, msgvalue_MSG, _refer_s687);
[L1722]              havoc __exception;
[L1723]              revert := false;
[L1724]  COND FALSE  !(__exception)
[L1758]  CALL        call success_s687 := getAirdrop~address_ZAI__success(this, msgsender_MSG, msgvalue_MSG, _refer_s687);
[L4835]  COND FALSE  !(!(aSBlock_ZAI[this] <= now && now <= aEBlock_ZAI[this]))
[L4839]  COND FALSE  !(!(aTot_ZAI[this] < aCap_ZAI[this] || aCap_ZAI[this] == 0))
[L4843]              aTot_ZAI[this] := (aTot_ZAI[this] + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4844]  COND TRUE   DType[this] == ZAI
[L4845]  CALL        call __var_13 := balanceOf~address_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _refer_s687);
[L4448]              balance_s338 := balances_TokenERC20[this][tokenOwner_s338];
[L4845]  RET         call __var_13 := balanceOf~address_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _refer_s687);
[L4846]  COND FALSE  !(revert)
[L4852]  COND FALSE  !((msgsender_MSG != _refer_s687 && __var_13 != 0) && _refer_s687 != 0)
[L4871]              __var_18 := this;
[L4872]              __var_20 := this;
[L4873]  CALL        call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][this], aAmt_ZAI[this]);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4873]  RET         call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][this], aAmt_ZAI[this]);
[L4874]  COND FALSE  !(revert)
[L4877]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][this];
[L4878]              balances_TokenERC20[this][this] := __var_19;
[L4879]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][this];
[L4880]  CALL        call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], aAmt_ZAI[this]);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4880]  RET         call __var_21 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], aAmt_ZAI[this]);
[L4881]  COND FALSE  !(revert)
[L4884]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4885]              balances_TokenERC20[this][msgsender_MSG] := __var_21;
[L4886]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4887]              assert { :EventEmitted "Transfer_ZAI" } true;
[L4888]              success_s687 := true;
[L1758]  RET         call success_s687 := getAirdrop~address_ZAI__success(this, msgsender_MSG, msgvalue_MSG, _refer_s687);
[L1759]              assume !revert && gas >= 0;
[L7617]  RET         call success_s687 := getAirdrop~address_ZAI(this, msgsender_MSG, msgvalue_MSG, _refer_s687);
[L7682]  RET         call CorralChoice_ZAI(this);
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND FALSE  !(revert)
[L4482]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4483]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4484]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4485]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4485]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4486]  COND FALSE  !(revert)
[L4489]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4490]              balances_TokenERC20[this][to_s381] := __var_6;
[L4491]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4492]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4493]              success_s381 := true;
[L1014]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1015]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((((((((success_s381 == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && aSBlock_ZAI[this] == old(aSBlock_ZAI[this])) && aEBlock_ZAI[this] == old(aEBlock_ZAI[this])) && aCap_ZAI[this] == old(aCap_ZAI[this])) && aTot_ZAI[this] == old(aTot_ZAI[this])) && aAmt_ZAI[this] == old(aAmt_ZAI[this])) && sSBlock_ZAI[this] == old(sSBlock_ZAI[this])) && sEBlock_ZAI[this] == old(sEBlock_ZAI[this])) && sCap_ZAI[this] == old(sCap_ZAI[this])) && sTot_ZAI[this] == old(sTot_ZAI[this])) && sChunk_ZAI[this] == old(sChunk_ZAI[this])) && sPrice_ZAI[this] == old(sPrice_ZAI[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_ZAI(this);

Loop:
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND TRUE   choice == 31
[L7466]              gas := gas - 21000;
[L7467]  COND TRUE   gas >= 0
[L7468]              assume msgvalue_MSG == 0;
[L7469]  CALL        call balance_s338 := balanceOf~address_TokenERC20(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L900]               havoc __exception;
[L901]               revert := false;
[L902]   COND FALSE  !(__exception)
[L936]   CALL        call balance_s338 := balanceOf~address_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L4448]              balance_s338 := balances_TokenERC20[this][tokenOwner_s338];
[L936]   RET         call balance_s338 := balanceOf~address_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L937]               assume !revert && gas >= 0;
[L7469]  RET         call balance_s338 := balanceOf~address_TokenERC20(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L7682]  RET         call CorralChoice_ZAI(this);

[2020-11-25 09:52:11,367 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:52:11,367 INFO  L82        PathProgramCache]: Analyzing trace with hash -293338892, now seen corresponding path program 1 times
[2020-11-25 09:52:11,368 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:52:11,380 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:52:11,483 INFO  L134       CoverageAnalysis]: Checked inductivity of 107 backedges. 1 proven. 83 refuted. 0 times theorem prover too weak. 23 trivial. 0 not checked.
[2020-11-25 09:52:11,483 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:52:11,483 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-11-25 09:52:11,483 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:52:11,483 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 09:52:11,483 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=22, Invalid=110, Unknown=0, NotChecked=0, Total=132
[2020-11-25 09:52:11,483 INFO  L87              Difference]: Start difference. First operand 3829 states and 4142 transitions. cyclomatic complexity: 319 Second operand 12 states.
[2020-11-25 09:52:13,022 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:52:13,022 INFO  L93              Difference]: Finished difference Result 4068 states and 4416 transitions.
[2020-11-25 09:52:13,022 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 09:52:13,022 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4068 states and 4416 transitions.
[2020-11-25 09:52:13,029 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:52:13,037 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4068 states to 4068 states and 4416 transitions.
[2020-11-25 09:52:13,037 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1315
[2020-11-25 09:52:13,038 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1315
[2020-11-25 09:52:13,038 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4068 states and 4416 transitions.
[2020-11-25 09:52:13,040 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:52:13,040 INFO  L728         BuchiCegarLoop]: Abstraction has 4068 states and 4416 transitions.
[2020-11-25 09:52:13,043 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4068 states and 4416 transitions.
[2020-11-25 09:52:13,056 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4068 to 3858.
[2020-11-25 09:52:13,057 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3858 states.
[2020-11-25 09:52:13,060 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3858 states to 3858 states and 4206 transitions.
[2020-11-25 09:52:13,060 INFO  L751         BuchiCegarLoop]: Abstraction has 3858 states and 4206 transitions.
[2020-11-25 09:52:13,060 INFO  L631         BuchiCegarLoop]: Abstraction has 3858 states and 4206 transitions.
[2020-11-25 09:52:13,060 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 09:52:13,060 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3858 states and 4206 transitions.
[2020-11-25 09:52:13,064 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:52:13,064 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:52:13,064 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:52:13,065 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:52:13,065 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == ZAI;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND FALSE  !(revert)
[L4744]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4744]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4745]  COND FALSE  !(revert)
[L4748]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4400]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4400]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  COND FALSE  !(revert)
[L4404]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4404]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4358]              assume msgsender_MSG != null;
[L4359]              Balance[this] := 0;
[L4360]              symbol_TokenERC20[this] := 84765109;
[L4361]              name_TokenERC20[this] := 84765109;
[L4362]              decimals_TokenERC20[this] := 0;
[L4363]              _totalSupply_TokenERC20[this] := 0;
[L4364]              balances_TokenERC20[this] := zeroRefintArr();
[L4365]              sum_balances0[this] := 0;
[L4366]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4367]              sum_allowed1[this] := 0;
[L4369]              symbol_TokenERC20[this] := 421243739;
[L4370]              name_TokenERC20[this] := 1342373917;
[L4371]              decimals_TokenERC20[this] := 0;
[L4372]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4373]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4375]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4376]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4377]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4408]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4748]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4749]  COND FALSE  !(revert)
[L4752]  CALL        call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]              assume msgsender_MSG != null;
[L4703]              Balance[this] := 0;
[L4704]              aSBlock_ZAI[this] := 0;
[L4705]              aEBlock_ZAI[this] := 0;
[L4706]              aCap_ZAI[this] := 0;
[L4707]              aTot_ZAI[this] := 0;
[L4708]              aAmt_ZAI[this] := 0;
[L4709]              sSBlock_ZAI[this] := 0;
[L4710]              sEBlock_ZAI[this] := 0;
[L4711]              sCap_ZAI[this] := 0;
[L4712]              sTot_ZAI[this] := 0;
[L4713]              sChunk_ZAI[this] := 0;
[L4714]              sPrice_ZAI[this] := 0;
[L4752]  RET         call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4753]  COND FALSE  !(revert)
[L7678]  RET         call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND FALSE  !(choice == 29)
[L7484]  COND FALSE  !(choice == 28)
[L7491]  COND TRUE   choice == 27
[L7492]              gas := gas - 21000;
[L7493]  COND TRUE   gas >= 0
[L7494]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7495]              assume msgvalue_MSG == 0;
[L7496]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1136]              havoc __exception;
[L1137]              revert := false;
[L1138]  COND FALSE  !(__exception)
[L1172]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4551]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4551]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4552]  COND FALSE  !(revert)
[L4555]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4556]              balances_TokenERC20[this][from_s468] := __var_7;
[L4557]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4558]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4558]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4559]  COND FALSE  !(revert)
[L4562]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4563]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4564]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4565]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4565]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4566]  COND FALSE  !(revert)
[L4569]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4570]              balances_TokenERC20[this][to_s468] := __var_9;
[L4571]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4572]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4573]              success_s468 := true;
[L1172]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1173]              assume !revert && gas >= 0;
[L7496]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7682]  RET         call CorralChoice_ZAI(this);
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND FALSE  !(revert)
[L4482]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4483]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4484]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4485]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4485]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4486]  COND FALSE  !(revert)
[L4489]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4490]              balances_TokenERC20[this][to_s381] := __var_6;
[L4491]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4492]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4493]              success_s381 := true;
[L1014]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1015]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((((((((success_s381 == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && aSBlock_ZAI[this] == old(aSBlock_ZAI[this])) && aEBlock_ZAI[this] == old(aEBlock_ZAI[this])) && aCap_ZAI[this] == old(aCap_ZAI[this])) && aTot_ZAI[this] == old(aTot_ZAI[this])) && aAmt_ZAI[this] == old(aAmt_ZAI[this])) && sSBlock_ZAI[this] == old(sSBlock_ZAI[this])) && sEBlock_ZAI[this] == old(sEBlock_ZAI[this])) && sCap_ZAI[this] == old(sCap_ZAI[this])) && sTot_ZAI[this] == old(sTot_ZAI[this])) && sChunk_ZAI[this] == old(sChunk_ZAI[this])) && sPrice_ZAI[this] == old(sPrice_ZAI[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_ZAI(this);

Loop:
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND TRUE   choice == 31
[L7466]              gas := gas - 21000;
[L7467]  COND TRUE   gas >= 0
[L7468]              assume msgvalue_MSG == 0;
[L7469]  CALL        call balance_s338 := balanceOf~address_TokenERC20(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L900]               havoc __exception;
[L901]               revert := false;
[L902]   COND FALSE  !(__exception)
[L936]   CALL        call balance_s338 := balanceOf~address_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L4448]              balance_s338 := balances_TokenERC20[this][tokenOwner_s338];
[L936]   RET         call balance_s338 := balanceOf~address_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L937]               assume !revert && gas >= 0;
[L7469]  RET         call balance_s338 := balanceOf~address_TokenERC20(this, msgsender_MSG, msgvalue_MSG, tokenOwner_s338);
[L7682]  RET         call CorralChoice_ZAI(this);

[2020-11-25 09:52:13,068 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:52:13,068 INFO  L82        PathProgramCache]: Analyzing trace with hash 1295056880, now seen corresponding path program 1 times
[2020-11-25 09:52:13,069 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:52:13,152 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:52:14,183 WARN  L188               SmtUtils]: Spent 128.00 ms on a formula simplification. DAG size of input: 90 DAG size of output: 67
[2020-11-25 09:52:14,431 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:52:15,517 WARN  L188               SmtUtils]: Spent 745.00 ms on a formula simplification. DAG size of input: 356 DAG size of output: 45
[2020-11-25 09:52:16,681 WARN  L188               SmtUtils]: Spent 645.00 ms on a formula simplification. DAG size of input: 369 DAG size of output: 40
[2020-11-25 09:52:17,503 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:52:17,513 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:52:17,513 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:52:18,652 INFO  L134       CoverageAnalysis]: Checked inductivity of 111 backedges. 0 proven. 87 refuted. 0 times theorem prover too weak. 24 trivial. 0 not checked.
[2020-11-25 09:52:18,652 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:52:18,653 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [44] total 44
[2020-11-25 09:52:18,653 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:52:18,653 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 45 interpolants.
[2020-11-25 09:52:18,654 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=146, Invalid=1834, Unknown=0, NotChecked=0, Total=1980
[2020-11-25 09:52:18,654 INFO  L87              Difference]: Start difference. First operand 3858 states and 4206 transitions. cyclomatic complexity: 360 Second operand 45 states.
[2020-11-25 09:52:40,490 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:52:40,490 INFO  L93              Difference]: Finished difference Result 4546 states and 5210 transitions.
[2020-11-25 09:52:40,491 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 48 states. 
[2020-11-25 09:52:40,491 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4546 states and 5210 transitions.
[2020-11-25 09:52:40,500 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 09:52:40,509 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4546 states to 4546 states and 5210 transitions.
[2020-11-25 09:52:40,509 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1685
[2020-11-25 09:52:40,510 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1685
[2020-11-25 09:52:40,510 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4546 states and 5210 transitions.
[2020-11-25 09:52:40,513 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:52:40,514 INFO  L728         BuchiCegarLoop]: Abstraction has 4546 states and 5210 transitions.
[2020-11-25 09:52:40,516 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4546 states and 5210 transitions.
[2020-11-25 09:52:40,543 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4546 to 4491.
[2020-11-25 09:52:40,543 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4491 states.
[2020-11-25 09:52:40,553 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4491 states to 4491 states and 5121 transitions.
[2020-11-25 09:52:40,553 INFO  L751         BuchiCegarLoop]: Abstraction has 4491 states and 5121 transitions.
[2020-11-25 09:52:40,553 INFO  L631         BuchiCegarLoop]: Abstraction has 4491 states and 5121 transitions.
[2020-11-25 09:52:40,553 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 09:52:40,553 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4491 states and 5121 transitions.
[2020-11-25 09:52:40,560 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 09:52:40,560 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:52:40,560 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:52:40,562 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:52:40,562 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == ZAI;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND FALSE  !(revert)
[L4744]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4744]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4745]  COND FALSE  !(revert)
[L4748]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4400]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4400]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  COND FALSE  !(revert)
[L4404]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4404]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4358]              assume msgsender_MSG != null;
[L4359]              Balance[this] := 0;
[L4360]              symbol_TokenERC20[this] := 84765109;
[L4361]              name_TokenERC20[this] := 84765109;
[L4362]              decimals_TokenERC20[this] := 0;
[L4363]              _totalSupply_TokenERC20[this] := 0;
[L4364]              balances_TokenERC20[this] := zeroRefintArr();
[L4365]              sum_balances0[this] := 0;
[L4366]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4367]              sum_allowed1[this] := 0;
[L4369]              symbol_TokenERC20[this] := 421243739;
[L4370]              name_TokenERC20[this] := 1342373917;
[L4371]              decimals_TokenERC20[this] := 0;
[L4372]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4373]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4375]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4376]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4377]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4408]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4748]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4749]  COND FALSE  !(revert)
[L4752]  CALL        call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]              assume msgsender_MSG != null;
[L4703]              Balance[this] := 0;
[L4704]              aSBlock_ZAI[this] := 0;
[L4705]              aEBlock_ZAI[this] := 0;
[L4706]              aCap_ZAI[this] := 0;
[L4707]              aTot_ZAI[this] := 0;
[L4708]              aAmt_ZAI[this] := 0;
[L4709]              sSBlock_ZAI[this] := 0;
[L4710]              sEBlock_ZAI[this] := 0;
[L4711]              sCap_ZAI[this] := 0;
[L4712]              sTot_ZAI[this] := 0;
[L4713]              sChunk_ZAI[this] := 0;
[L4714]              sPrice_ZAI[this] := 0;
[L4752]  RET         call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4753]  COND FALSE  !(revert)
[L7678]  RET         call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND FALSE  !(choice == 29)
[L7484]  COND FALSE  !(choice == 28)
[L7491]  COND FALSE  !(choice == 27)
[L7498]  COND FALSE  !(choice == 26)
[L7504]  COND FALSE  !(choice == 25)
[L7510]  COND FALSE  !(choice == 24)
[L7516]  COND FALSE  !(choice == 23)
[L7522]  COND FALSE  !(choice == 22)
[L7528]  COND FALSE  !(choice == 21)
[L7534]  COND FALSE  !(choice == 20)
[L7540]  COND FALSE  !(choice == 19)
[L7547]  COND FALSE  !(choice == 18)
[L7553]  COND FALSE  !(choice == 17)
[L7559]  COND FALSE  !(choice == 16)
[L7565]  COND FALSE  !(choice == 15)
[L7571]  COND FALSE  !(choice == 14)
[L7577]  COND FALSE  !(choice == 13)
[L7583]  COND FALSE  !(choice == 12)
[L7589]  COND FALSE  !(choice == 11)
[L7595]  COND FALSE  !(choice == 10)
[L7601]  COND FALSE  !(choice == 9)
[L7607]  COND FALSE  !(choice == 8)
[L7613]  COND FALSE  !(choice == 7)
[L7619]  COND TRUE   choice == 6
[L7620]              gas := gas - 21000;
[L7621]  COND TRUE   gas >= 0
[L7622]              assume msgvalue_MSG >= 0;
[L7623]  CALL        call success_s847 := tokenSale~address_ZAI(this, msgsender_MSG, msgvalue_MSG, _refer_s847);
[L1802]              havoc __exception;
[L1803]              revert := false;
[L1804]  COND FALSE  !(__exception)
[L1838]  CALL        call success_s847 := tokenSale~address_ZAI__success(this, msgsender_MSG, msgvalue_MSG, _refer_s847);
[L4989]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4990]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4991]              Balance[this] := Balance[this] + msgvalue_MSG;
[L4993]  COND FALSE  !(!(sSBlock_ZAI[this] <= now && now <= sEBlock_ZAI[this]))
[L4997]  COND FALSE  !(!(sTot_ZAI[this] < sCap_ZAI[this] || sCap_ZAI[this] == 0))
[L5001]              _eth_s847 := msgvalue_MSG;
[L5002]              havoc _tkns_s847;
[L5003]  COND FALSE  !(sChunk_ZAI[this] != 0)
[L5007]              _tkns_s847 := nonlinearDiv(_eth_s847, sPrice_ZAI[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5009]              sTot_ZAI[this] := (sTot_ZAI[this] + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5010]  COND TRUE   DType[this] == ZAI
[L5011]  CALL        call __var_22 := balanceOf~address_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _refer_s847);
[L4448]              balance_s338 := balances_TokenERC20[this][tokenOwner_s338];
[L5011]  RET         call __var_22 := balanceOf~address_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _refer_s847);
[L5012]  COND FALSE  !(revert)
[L5018]  COND FALSE  !((msgsender_MSG != _refer_s847 && __var_22 != 0) && _refer_s847 != 0)
[L5037]              __var_27 := this;
[L5038]              __var_29 := this;
[L5039]  CALL        call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][this], _tkns_s847);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5039]  RET         call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][this], _tkns_s847);
[L5040]  COND FALSE  !(revert)
[L5043]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][this];
[L5044]              balances_TokenERC20[this][this] := __var_28;
[L5045]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][this];
[L5046]  CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], _tkns_s847);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L5046]  RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], _tkns_s847);
[L5047]  COND FALSE  !(revert)
[L5050]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L5051]              balances_TokenERC20[this][msgsender_MSG] := __var_30;
[L5052]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L5053]              assert { :EventEmitted "Transfer_ZAI" } true;
[L5054]              success_s847 := true;
[L1838]  RET         call success_s847 := tokenSale~address_ZAI__success(this, msgsender_MSG, msgvalue_MSG, _refer_s847);
[L1839]              assume !revert && gas >= 0;
[L7623]  RET         call success_s847 := tokenSale~address_ZAI(this, msgsender_MSG, msgvalue_MSG, _refer_s847);
[L7682]  RET         call CorralChoice_ZAI(this);
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND FALSE  !(revert)
[L4482]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4483]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4484]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4485]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4485]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4486]  COND FALSE  !(revert)
[L4489]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4490]              balances_TokenERC20[this][to_s381] := __var_6;
[L4491]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4492]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4493]              success_s381 := true;
[L1014]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1015]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((((((((success_s381 == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && aSBlock_ZAI[this] == old(aSBlock_ZAI[this])) && aEBlock_ZAI[this] == old(aEBlock_ZAI[this])) && aCap_ZAI[this] == old(aCap_ZAI[this])) && aTot_ZAI[this] == old(aTot_ZAI[this])) && aAmt_ZAI[this] == old(aAmt_ZAI[this])) && sSBlock_ZAI[this] == old(sSBlock_ZAI[this])) && sEBlock_ZAI[this] == old(sEBlock_ZAI[this])) && sCap_ZAI[this] == old(sCap_ZAI[this])) && sTot_ZAI[this] == old(sTot_ZAI[this])) && sChunk_ZAI[this] == old(sChunk_ZAI[this])) && sPrice_ZAI[this] == old(sPrice_ZAI[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_ZAI(this);

Loop:
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND FALSE  !(choice == 29)
[L7484]  COND FALSE  !(choice == 28)
[L7491]  COND FALSE  !(choice == 27)
[L7498]  COND FALSE  !(choice == 26)
[L7504]  COND FALSE  !(choice == 25)
[L7510]  COND FALSE  !(choice == 24)
[L7516]  COND FALSE  !(choice == 23)
[L7522]  COND FALSE  !(choice == 22)
[L7528]  COND FALSE  !(choice == 21)
[L7534]  COND FALSE  !(choice == 20)
[L7540]  COND FALSE  !(choice == 19)
[L7547]  COND FALSE  !(choice == 18)
[L7553]  COND FALSE  !(choice == 17)
[L7559]  COND FALSE  !(choice == 16)
[L7565]  COND FALSE  !(choice == 15)
[L7571]  COND FALSE  !(choice == 14)
[L7577]  COND FALSE  !(choice == 13)
[L7583]  COND FALSE  !(choice == 12)
[L7589]  COND FALSE  !(choice == 11)
[L7595]  COND FALSE  !(choice == 10)
[L7601]  COND FALSE  !(choice == 9)
[L7607]  COND FALSE  !(choice == 8)
[L7613]  COND FALSE  !(choice == 7)
[L7619]  COND TRUE   choice == 6
[L7620]              gas := gas - 21000;
[L7621]  COND TRUE   gas >= 0
[L7622]              assume msgvalue_MSG >= 0;
[L7623]  CALL        call success_s847 := tokenSale~address_ZAI(this, msgsender_MSG, msgvalue_MSG, _refer_s847);
[L1802]              havoc __exception;
[L1803]              revert := false;
[L1804]  COND FALSE  !(__exception)
[L1838]  CALL        call success_s847 := tokenSale~address_ZAI__success(this, msgsender_MSG, msgvalue_MSG, _refer_s847);
[L4989]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4990]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4991]              Balance[this] := Balance[this] + msgvalue_MSG;
[L4993]  COND FALSE  !(!(sSBlock_ZAI[this] <= now && now <= sEBlock_ZAI[this]))
[L4997]  COND FALSE  !(!(sTot_ZAI[this] < sCap_ZAI[this] || sCap_ZAI[this] == 0))
[L5001]              _eth_s847 := msgvalue_MSG;
[L5002]              havoc _tkns_s847;
[L5003]  COND FALSE  !(sChunk_ZAI[this] != 0)
[L5007]              _tkns_s847 := nonlinearDiv(_eth_s847, sPrice_ZAI[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5009]              sTot_ZAI[this] := (sTot_ZAI[this] + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5010]  COND TRUE   DType[this] == ZAI
[L5011]  CALL        call __var_22 := balanceOf~address_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _refer_s847);
[L4448]              balance_s338 := balances_TokenERC20[this][tokenOwner_s338];
[L5011]  RET         call __var_22 := balanceOf~address_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _refer_s847);
[L5012]  COND FALSE  !(revert)
[L5018]  COND FALSE  !((msgsender_MSG != _refer_s847 && __var_22 != 0) && _refer_s847 != 0)
[L5037]              __var_27 := this;
[L5038]              __var_29 := this;
[L5039]  CALL        call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][this], _tkns_s847);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5039]  RET         call __var_28 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][this], _tkns_s847);
[L5040]  COND FALSE  !(revert)
[L5043]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][this];
[L5044]              balances_TokenERC20[this][this] := __var_28;
[L5045]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][this];
[L5046]  CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], _tkns_s847);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L5046]  RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], _tkns_s847);
[L5047]  COND FALSE  !(revert)
[L5050]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L5051]              balances_TokenERC20[this][msgsender_MSG] := __var_30;
[L5052]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L5053]              assert { :EventEmitted "Transfer_ZAI" } true;
[L5054]              success_s847 := true;
[L1838]  RET         call success_s847 := tokenSale~address_ZAI__success(this, msgsender_MSG, msgvalue_MSG, _refer_s847);
[L1839]              assume !revert && gas >= 0;
[L7623]  RET         call success_s847 := tokenSale~address_ZAI(this, msgsender_MSG, msgvalue_MSG, _refer_s847);
[L7682]  RET         call CorralChoice_ZAI(this);

[2020-11-25 09:52:40,568 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:52:40,568 INFO  L82        PathProgramCache]: Analyzing trace with hash -369987007, now seen corresponding path program 1 times
[2020-11-25 09:52:40,568 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:52:40,587 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:52:40,782 INFO  L134       CoverageAnalysis]: Checked inductivity of 107 backedges. 1 proven. 83 refuted. 0 times theorem prover too weak. 23 trivial. 0 not checked.
[2020-11-25 09:52:40,782 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:52:40,783 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-11-25 09:52:40,783 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:52:40,783 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 09:52:40,783 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=22, Invalid=110, Unknown=0, NotChecked=0, Total=132
[2020-11-25 09:52:40,783 INFO  L87              Difference]: Start difference. First operand 4491 states and 5121 transitions. cyclomatic complexity: 658 Second operand 12 states.
[2020-11-25 09:52:42,147 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:52:42,147 INFO  L93              Difference]: Finished difference Result 4916 states and 5784 transitions.
[2020-11-25 09:52:42,147 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 09:52:42,148 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4916 states and 5784 transitions.
[2020-11-25 09:52:42,160 INFO  L131   ngComponentsAnalysis]: Automaton has 16 accepting balls. 32
[2020-11-25 09:52:42,174 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4916 states to 4916 states and 5784 transitions.
[2020-11-25 09:52:42,174 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1690
[2020-11-25 09:52:42,175 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1690
[2020-11-25 09:52:42,175 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4916 states and 5784 transitions.
[2020-11-25 09:52:42,179 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:52:42,179 INFO  L728         BuchiCegarLoop]: Abstraction has 4916 states and 5784 transitions.
[2020-11-25 09:52:42,182 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4916 states and 5784 transitions.
[2020-11-25 09:52:42,204 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4916 to 4566.
[2020-11-25 09:52:42,204 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4566 states.
[2020-11-25 09:52:42,211 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4566 states to 4566 states and 5434 transitions.
[2020-11-25 09:52:42,211 INFO  L751         BuchiCegarLoop]: Abstraction has 4566 states and 5434 transitions.
[2020-11-25 09:52:42,211 INFO  L631         BuchiCegarLoop]: Abstraction has 4566 states and 5434 transitions.
[2020-11-25 09:52:42,211 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 09:52:42,211 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4566 states and 5434 transitions.
[2020-11-25 09:52:42,216 INFO  L131   ngComponentsAnalysis]: Automaton has 16 accepting balls. 32
[2020-11-25 09:52:42,216 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:52:42,216 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:52:42,217 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:52:42,217 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L7672]              assume null == 0;
[L7673]  CALL        call this := FreshRefGenerator__success();
[L4050]              havoc newRef;
[L4051]              assume Alloc[newRef] == false;
[L4052]              Alloc[newRef] := true;
[L4053]              assume newRef != null;
[L7673]  RET         call this := FreshRefGenerator__success();
[L7674]              assume now >= 0;
[L7675]              assume DType[this] == ZAI;
[L7676]              assume msgvalue_MSG == 0;
[L7677]              gas := gas - 53000;
[L7678]  CALL        call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4740]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  COND FALSE  !(revert)
[L4744]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4744]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4745]  COND FALSE  !(revert)
[L4748]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4400]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4171]              assume msgsender_MSG != null;
[L4172]              Balance[this] := 0;
[L4186]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  COND FALSE  !(revert)
[L4400]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  COND FALSE  !(revert)
[L4404]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4256]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4238]              assume msgsender_MSG != null;
[L4239]              Balance[this] := 0;
[L4240]              owner_Owned[this] := null;
[L4241]              newOwner_Owned[this] := null;
[L4243]              owner_Owned[this] := msgsender_MSG;
[L4256]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  COND FALSE  !(revert)
[L4404]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4405]  COND FALSE  !(revert)
[L4408]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4358]              assume msgsender_MSG != null;
[L4359]              Balance[this] := 0;
[L4360]              symbol_TokenERC20[this] := 84765109;
[L4361]              name_TokenERC20[this] := 84765109;
[L4362]              decimals_TokenERC20[this] := 0;
[L4363]              _totalSupply_TokenERC20[this] := 0;
[L4364]              balances_TokenERC20[this] := zeroRefintArr();
[L4365]              sum_balances0[this] := 0;
[L4366]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4367]              sum_allowed1[this] := 0;
[L4369]              symbol_TokenERC20[this] := 421243739;
[L4370]              name_TokenERC20[this] := 1342373917;
[L4371]              decimals_TokenERC20[this] := 0;
[L4372]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4373]              _totalSupply_TokenERC20[this] := nonlinearMul(3486784401 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4375]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4376]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4377]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4408]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4409]  COND FALSE  !(revert)
[L4748]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4749]  COND FALSE  !(revert)
[L4752]  CALL        call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]              assume msgsender_MSG != null;
[L4703]              Balance[this] := 0;
[L4704]              aSBlock_ZAI[this] := 0;
[L4705]              aEBlock_ZAI[this] := 0;
[L4706]              aCap_ZAI[this] := 0;
[L4707]              aTot_ZAI[this] := 0;
[L4708]              aAmt_ZAI[this] := 0;
[L4709]              sSBlock_ZAI[this] := 0;
[L4710]              sEBlock_ZAI[this] := 0;
[L4711]              sCap_ZAI[this] := 0;
[L4712]              sTot_ZAI[this] := 0;
[L4713]              sChunk_ZAI[this] := 0;
[L4714]              sPrice_ZAI[this] := 0;
[L4752]  RET         call ZAI_ZAI_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4753]  COND FALSE  !(revert)
[L7678]  RET         call ZAI_ZAI__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]              assume !revert && gas >= 0;
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND FALSE  !(choice == 29)
[L7484]  COND TRUE   choice == 28
[L7485]              gas := gas - 21000;
[L7486]  COND TRUE   gas >= 0
[L7487]              assume tokens_s409 >= 0 && tokens_s409 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7488]              assume msgvalue_MSG == 0;
[L7489]  CALL        call success_s409 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L1056]              havoc __exception;
[L1057]              revert := false;
[L1058]  COND FALSE  !(__exception)
[L1092]  CALL        call success_s409 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L4508]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4509]              allowed_TokenERC20[this][msgsender_MSG][spender_s409] := tokens_s409;
[L4510]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_TokenERC20[this][msgsender_MSG][spender_s409];
[L4511]              assert { :EventEmitted "Approval_TokenERC20" } true;
[L4512]              success_s409 := true;
[L1092]  RET         call success_s409 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L1093]              assume !revert && gas >= 0;
[L7489]  RET         call success_s409 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, spender_s409, tokens_s409);
[L7682]  RET         call CorralChoice_ZAI(this);
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND FALSE  !(choice == 29)
[L7484]  COND FALSE  !(choice == 28)
[L7491]  COND TRUE   choice == 27
[L7492]              gas := gas - 21000;
[L7493]  COND TRUE   gas >= 0
[L7494]              assume tokens_s468 >= 0 && tokens_s468 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7495]              assume msgvalue_MSG == 0;
[L7496]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1136]              havoc __exception;
[L1137]              revert := false;
[L1138]  COND FALSE  !(__exception)
[L1172]  CALL        call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L4551]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4551]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][from_s468], tokens_s468);
[L4552]  COND FALSE  !(revert)
[L4555]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][from_s468];
[L4556]              balances_TokenERC20[this][from_s468] := __var_7;
[L4557]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][from_s468];
[L4558]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4558]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_TokenERC20[this][from_s468][msgsender_MSG], tokens_s468);
[L4559]  COND FALSE  !(revert)
[L4562]              sum_allowed1[from_s468] := sum_allowed1[from_s468] - allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4563]              allowed_TokenERC20[this][from_s468][msgsender_MSG] := __var_8;
[L4564]              sum_allowed1[from_s468] := sum_allowed1[from_s468] + allowed_TokenERC20[this][from_s468][msgsender_MSG];
[L4565]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4565]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s468], tokens_s468);
[L4566]  COND FALSE  !(revert)
[L4569]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s468];
[L4570]              balances_TokenERC20[this][to_s468] := __var_9;
[L4571]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s468];
[L4572]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4573]              success_s468 := true;
[L1172]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L1173]              assume !revert && gas >= 0;
[L7496]  RET         call success_s468 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, from_s468, to_s468, tokens_s468);
[L7682]  RET         call CorralChoice_ZAI(this);
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND FALSE  !(revert)
[L4482]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4483]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4484]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4485]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4485]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4486]  COND FALSE  !(revert)
[L4489]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4490]              balances_TokenERC20[this][to_s381] := __var_6;
[L4491]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4492]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4493]              success_s381 := true;
[L1014]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1015]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((((((((success_s381 == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && aSBlock_ZAI[this] == old(aSBlock_ZAI[this])) && aEBlock_ZAI[this] == old(aEBlock_ZAI[this])) && aCap_ZAI[this] == old(aCap_ZAI[this])) && aTot_ZAI[this] == old(aTot_ZAI[this])) && aAmt_ZAI[this] == old(aAmt_ZAI[this])) && sSBlock_ZAI[this] == old(sSBlock_ZAI[this])) && sEBlock_ZAI[this] == old(sEBlock_ZAI[this])) && sCap_ZAI[this] == old(sCap_ZAI[this])) && sTot_ZAI[this] == old(sTot_ZAI[this])) && sChunk_ZAI[this] == old(sChunk_ZAI[this])) && sPrice_ZAI[this] == old(sPrice_ZAI[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_ZAI(this);

Loop:
[L7682]  CALL        call CorralChoice_ZAI(this);
[L7381]              havoc msgsender_MSG;
[L7382]              havoc msgvalue_MSG;
[L7383]              havoc choice;
[L7384]              havoc __ret_0_totalSupply;
[L7385]              havoc tokenOwner_s338;
[L7386]              havoc balance_s338;
[L7387]              havoc tokenOwner_s484;
[L7388]              havoc spender_s484;
[L7389]              havoc remaining_s484;
[L7390]              havoc to_s381;
[L7391]              havoc tokens_s381;
[L7392]              havoc success_s381;
[L7393]              havoc spender_s409;
[L7394]              havoc tokens_s409;
[L7395]              havoc success_s409;
[L7396]              havoc from_s468;
[L7397]              havoc to_s468;
[L7398]              havoc tokens_s468;
[L7399]              havoc success_s468;
[L7400]              havoc __ret_0_owner;
[L7401]              havoc __ret_0_newOwner;
[L7402]              havoc _newOwner_s217;
[L7403]              havoc __ret_0_symbol;
[L7404]              havoc __ret_0_name;
[L7405]              havoc __ret_0_decimals;
[L7406]              havoc spender_s527;
[L7407]              havoc tokens_s527;
[L7408]              havoc data_s527;
[L7409]              havoc success_s527;
[L7410]              havoc __ret_0_aSBlock;
[L7411]              havoc __ret_0_aEBlock;
[L7412]              havoc __ret_0_aCap;
[L7413]              havoc __ret_0_aTot;
[L7414]              havoc __ret_0_aAmt;
[L7415]              havoc __ret_0_sSBlock;
[L7416]              havoc __ret_0_sEBlock;
[L7417]              havoc __ret_0_sCap;
[L7418]              havoc __ret_0_sTot;
[L7419]              havoc __ret_0_sChunk;
[L7420]              havoc __ret_0_sPrice;
[L7421]              havoc _refer_s687;
[L7422]              havoc success_s687;
[L7423]              havoc _refer_s847;
[L7424]              havoc success_s847;
[L7425]              havoc StartBlock_s868;
[L7426]              havoc EndBlock_s868;
[L7427]              havoc DropCap_s868;
[L7428]              havoc DropCount_s868;
[L7429]              havoc DropAmount_s868;
[L7430]              havoc StartBlock_s892;
[L7431]              havoc EndBlock_s892;
[L7432]              havoc SaleCap_s892;
[L7433]              havoc SaleCount_s892;
[L7434]              havoc ChunkSize_s892;
[L7435]              havoc SalePrice_s892;
[L7436]              havoc _aSBlock_s926;
[L7437]              havoc _aEBlock_s926;
[L7438]              havoc _aAmt_s926;
[L7439]              havoc _aCap_s926;
[L7440]              havoc _sSBlock_s966;
[L7441]              havoc _sEBlock_s966;
[L7442]              havoc _sChunk_s966;
[L7443]              havoc _sPrice_s966;
[L7444]              havoc _sCap_s966;
[L7445]              havoc tmpNow;
[L7446]              havoc gas;
[L7447]              assume gas > 4000000 && gas <= 8000000;
[L7448]              tmpNow := now;
[L7449]              havoc now;
[L7450]              assume now > tmpNow;
[L7451]              assume msgsender_MSG != null;
[L7452]              assume DType[msgsender_MSG] != SafeMath;
[L7453]              assume DType[msgsender_MSG] != ERC20Interface;
[L7454]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7455]              assume DType[msgsender_MSG] != Owned;
[L7456]              assume DType[msgsender_MSG] != TokenERC20;
[L7457]              assume DType[msgsender_MSG] != ZAI;
[L7458]              Alloc[msgsender_MSG] := true;
[L7459]  COND FALSE  !(choice == 32)
[L7465]  COND FALSE  !(choice == 31)
[L7471]  COND FALSE  !(choice == 30)
[L7477]  COND TRUE   choice == 29
[L7478]              gas := gas - 21000;
[L7479]  COND TRUE   gas >= 0
[L7480]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7481]              assume msgvalue_MSG == 0;
[L7482]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s381 && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L978]               havoc __exception;
[L979]               revert := false;
[L980]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4478]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4117]  COND FALSE  !(!(b_s45 <= a_s45))
[L4121]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4478]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4479]  COND FALSE  !(revert)
[L4482]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4483]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4484]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4485]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4099]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4100]  COND FALSE  !(!(c_s23 >= a_s23))
[L4485]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4486]  COND FALSE  !(revert)
[L4489]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4490]              balances_TokenERC20[this][to_s381] := __var_6;
[L4491]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4492]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4493]              success_s381 := true;
[L1014]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1015]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((((((((((((success_s381 == true && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && balances_TokenERC20[this] == old(balances_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && aSBlock_ZAI[this] == old(aSBlock_ZAI[this])) && aEBlock_ZAI[this] == old(aEBlock_ZAI[this])) && aCap_ZAI[this] == old(aCap_ZAI[this])) && aTot_ZAI[this] == old(aTot_ZAI[this])) && aAmt_ZAI[this] == old(aAmt_ZAI[this])) && sSBlock_ZAI[this] == old(sSBlock_ZAI[this])) && sEBlock_ZAI[this] == old(sEBlock_ZAI[this])) && sCap_ZAI[this] == old(sCap_ZAI[this])) && sTot_ZAI[this] == old(sTot_ZAI[this])) && sChunk_ZAI[this] == old(sChunk_ZAI[this])) && sPrice_ZAI[this] == old(sPrice_ZAI[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L7482]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7682]  RET         call CorralChoice_ZAI(this);

[2020-11-25 09:52:42,221 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:52:42,222 INFO  L82        PathProgramCache]: Analyzing trace with hash -2008107304, now seen corresponding path program 1 times
[2020-11-25 09:52:42,222 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:52:42,336 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:52:42,493 INFO  L134       CoverageAnalysis]: Checked inductivity of 283 backedges. 166 proven. 0 refuted. 0 times theorem prover too weak. 117 trivial. 0 not checked.
[2020-11-25 09:52:42,493 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:52:42,493 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 09:52:42,494 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:52:42,494 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 09:52:42,494 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=105, Unknown=0, NotChecked=0, Total=132
[2020-11-25 09:52:42,495 INFO  L87              Difference]: Start difference. First operand 4566 states and 5434 transitions. cyclomatic complexity: 924 Second operand 12 states.
[2020-11-25 09:52:43,969 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:52:43,969 INFO  L93              Difference]: Finished difference Result 1973 states and 2402 transitions.
[2020-11-25 09:52:43,970 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 09:52:43,970 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1973 states and 2402 transitions.
[2020-11-25 09:52:43,974 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:52:43,974 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1973 states to 0 states and 0 transitions.
[2020-11-25 09:52:43,974 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 09:52:43,974 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 09:52:43,974 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 09:52:43,974 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:52:43,975 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:52:43,975 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:52:43,975 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:52:43,975 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 09:52:43,975 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 09:52:43,975 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:52:43,975 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 09:52:43,978 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:52:43 BasicIcfg
[2020-11-25 09:52:43,978 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 09:52:43,978 INFO  L168              Benchmark]: Toolchain (without parser) took 68935.28 ms. Allocated memory was 1.0 GB in the beginning and 3.3 GB in the end (delta: 2.2 GB). Free memory was 929.8 MB in the beginning and 2.7 GB in the end (delta: -1.8 GB). Peak memory consumption was 426.9 MB. Max. memory is 15.3 GB.
[2020-11-25 09:52:43,979 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 09:52:43,979 INFO  L168              Benchmark]: Boogie Preprocessor took 137.16 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 09:52:43,979 INFO  L168              Benchmark]: UtopiaSpecLang took 91.45 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 09:52:43,979 INFO  L168              Benchmark]: Boogie Printer took 22.03 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:52:43,979 INFO  L168              Benchmark]: RCFGBuilder took 1073.76 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 63.4 MB). Free memory was 897.6 MB in the beginning and 999.1 MB in the end (delta: -101.4 MB). Peak memory consumption was 187.2 MB. Max. memory is 15.3 GB.
[2020-11-25 09:52:43,980 INFO  L168              Benchmark]: UtopiaLTL2Aut took 39.51 ms. Allocated memory is still 1.1 GB. Free memory was 999.1 MB in the beginning and 995.6 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:52:43,981 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1780.58 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 161.0 MB). Free memory was 995.6 MB in the beginning and 919.9 MB in the end (delta: 75.8 MB). Peak memory consumption was 513.2 MB. Max. memory is 15.3 GB.
[2020-11-25 09:52:43,981 INFO  L168              Benchmark]: BlockEncodingV2 took 206.71 ms. Allocated memory is still 1.3 GB. Free memory was 919.9 MB in the beginning and 818.7 MB in the end (delta: 101.2 MB). Peak memory consumption was 101.2 MB. Max. memory is 15.3 GB.
[2020-11-25 09:52:43,981 INFO  L168              Benchmark]: BuchiAutomizer took 65581.04 ms. Allocated memory was 1.3 GB in the beginning and 3.3 GB in the end (delta: 2.0 GB). Free memory was 818.7 MB in the beginning and 2.7 GB in the end (delta: -1.9 GB). Peak memory consumption was 91.3 MB. Max. memory is 15.3 GB.
[2020-11-25 09:52:43,983 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    8358 locations, 14611 edges
  - StatisticsResult: Encoded RCFG
    8302 locations, 14466 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 137.16 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 91.45 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 22.03 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1073.76 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 63.4 MB). Free memory was 897.6 MB in the beginning and 999.1 MB in the end (delta: -101.4 MB). Peak memory consumption was 187.2 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 39.51 ms. Allocated memory is still 1.1 GB. Free memory was 999.1 MB in the beginning and 995.6 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1780.58 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 161.0 MB). Free memory was 995.6 MB in the beginning and 919.9 MB in the end (delta: 75.8 MB). Peak memory consumption was 513.2 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 206.71 ms. Allocated memory is still 1.3 GB. Free memory was 919.9 MB in the beginning and 818.7 MB in the end (delta: 101.2 MB). Peak memory consumption was 101.2 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 65581.04 ms. Allocated memory was 1.3 GB in the beginning and 3.3 GB in the end (delta: 2.0 GB). Free memory was 818.7 MB in the beginning and 2.7 GB in the end (delta: -1.9 GB). Peak memory consumption was 91.3 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3566 locations, 4642 edges
  - StatisticsResult: BuchiProgram size
    8358 locations, 14611 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 14 terminating modules (14 trivial, 0 deterministic, 0 nondeterministic). 14 modules have a trivial ranking function, the largest among these consists of 45 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 65.5s and 15 iterations.  TraceHistogramMax:3. Analysis of lassos took 8.4s. Construction of modules took 45.1s. BÃ¼chi inclusion checks took 10.2s. Highest rank in rank-based complementation 0. Minimization of det autom 14. Minimization of nondet autom 0. Automata minimization 0.7s AutomataMinimizationTime, 13 MinimizatonAttempts, 5398 StatesRemovedByMinimization, 12 NontrivialMinimizations. Non-live state removal took 0.5s Buchi closure took 0.0s. Biggest automaton had 7557 states and ocurred in iteration 9.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 92568 SDtfs, 84398 SDslu, 273931 SDs, 0 SdLazy, 367579 SolverSat, 13380 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 45.1s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU14 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_TokenERC200) ==> ( <>(success_transfer_TokenERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
