This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 16:54:50,056 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 16:54:50,058 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 16:54:50,069 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 16:54:50,069 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 16:54:50,070 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 16:54:50,071 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 16:54:50,073 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 16:54:50,074 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 16:54:50,075 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 16:54:50,076 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 16:54:50,076 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 16:54:50,076 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 16:54:50,077 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 16:54:50,078 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 16:54:50,079 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 16:54:50,080 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 16:54:50,081 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 16:54:50,082 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 16:54:50,083 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 16:54:50,084 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 16:54:50,085 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 16:54:50,086 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 16:54:50,086 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 16:54:50,086 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 16:54:50,087 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 16:54:50,087 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 16:54:50,088 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 16:54:50,089 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 16:54:50,089 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 16:54:50,089 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 16:54:50,090 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 16:54:50,090 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 16:54:50,091 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 16:54:50,092 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 16:54:50,092 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 16:54:50,092 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 16:54:50,092 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 16:54:50,093 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 16:54:50,093 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 16:54:50,094 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 16:54:50,094 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 16:54:50,102 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 16:54:50,102 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 16:54:50,103 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 16:54:50,103 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 16:54:50,104 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 16:54:50,104 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 16:54:50,104 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 16:54:50,104 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 16:54:50,104 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 16:54:50,104 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 16:54:50,104 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 16:54:50,104 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 16:54:50,104 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 16:54:50,105 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 16:54:50,105 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 16:54:50,105 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 16:54:50,105 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 16:54:50,105 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 16:54:50,105 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 16:54:50,105 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 16:54:50,105 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 16:54:50,105 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 16:54:50,105 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 16:54:50,106 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 16:54:50,106 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 16:54:50,106 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 16:54:50,132 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 16:54:50,144 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 16:54:50,146 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 16:54:50,147 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 16:54:50,148 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 16:54:50,148 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transfer-normal.bpl
[2020-11-25 16:54:50,149 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transfer-normal.bpl'
[2020-11-25 16:54:50,237 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 16:54:50,238 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 16:54:50,239 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 16:54:50,239 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 16:54:50,239 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 16:54:50,256 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:54:50" (1/1) ...
[2020-11-25 16:54:50,258 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:54:50" (1/1) ...
[2020-11-25 16:54:50,294 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:54:50" (1/1) ...
[2020-11-25 16:54:50,294 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:54:50" (1/1) ...
[2020-11-25 16:54:50,319 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:54:50" (1/1) ...
[2020-11-25 16:54:50,330 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:54:50" (1/1) ...
[2020-11-25 16:54:50,339 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:54:50" (1/1) ...
[2020-11-25 16:54:50,349 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 16:54:50,350 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 16:54:50,350 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 16:54:50,352 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 16:54:50,356 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:54:50" (1/1) ...
[2020-11-25 16:54:50,375 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(GEEQToken.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_GEEQToken[this][msg.sender] && balances_GEEQToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_GEEQToken[this][to] >= 0 && balances_GEEQToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_GEEQToken[this][msg.sender] >= 0 &&  balances_GEEQToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(GEEQToken.transfer(to, value), return == true && balances_GEEQToken[this][msg.sender] == old(balances_GEEQToken[this][msg.sender]) - value && balances_GEEQToken[this][to] == old(balances_GEEQToken[this][to]) + value && _totalSupply_GEEQToken[this] == old(_totalSupply_GEEQToken[this]) && allowed_GEEQToken[this] == old(allowed_GEEQToken[this]) && balances_GEEQToken[this][p1] == old(balances_GEEQToken[this][p1]) && symbol_GEEQToken[this] == old(symbol_GEEQToken[this]) && name_GEEQToken[this] == old(name_GEEQToken[this]) && decimals_GEEQToken[this] == old(decimals_GEEQToken[this]) && _totalMinted_GEEQToken[this] == old(_totalMinted_GEEQToken[this]) && _maxMintable_GEEQToken[this] == old(_maxMintable_GEEQToken[this]) && pauseOn_GEEQToken[this] == old(pauseOn_GEEQToken[this]) && migrationOn_GEEQToken[this] == old(migrationOn_GEEQToken[this]) && geeqaddress_GEEQToken[this] == old(geeqaddress_GEEQToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 16:54:50,380 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(GEEQToken.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_GEEQToken[this][msg.sender] && balances_GEEQToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_GEEQToken[this][to] >= 0 && balances_GEEQToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_GEEQToken[this][msg.sender] >= 0 &&  balances_GEEQToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(GEEQToken.transfer(to, value), return == true && balances_GEEQToken[this][msg.sender] == old(balances_GEEQToken[this][msg.sender]) - value && balances_GEEQToken[this][to] == old(balances_GEEQToken[this][to]) + value && _totalSupply_GEEQToken[this] == old(_totalSupply_GEEQToken[this]) && allowed_GEEQToken[this] == old(allowed_GEEQToken[this]) && balances_GEEQToken[this][p1] == old(balances_GEEQToken[this][p1]) && symbol_GEEQToken[this] == old(symbol_GEEQToken[this]) && name_GEEQToken[this] == old(name_GEEQToken[this]) && decimals_GEEQToken[this] == old(decimals_GEEQToken[this]) && _totalMinted_GEEQToken[this] == old(_totalMinted_GEEQToken[this]) && _maxMintable_GEEQToken[this] == old(_maxMintable_GEEQToken[this]) && pauseOn_GEEQToken[this] == old(pauseOn_GEEQToken[this]) && migrationOn_GEEQToken[this] == old(migrationOn_GEEQToken[this]) && geeqaddress_GEEQToken[this] == old(geeqaddress_GEEQToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 16:54:50,388 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(GEEQToken.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_GEEQToken[this][msg.sender] && balances_GEEQToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_GEEQToken[this][to] >= 0 && balances_GEEQToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_GEEQToken[this][msg.sender] >= 0 &&  balances_GEEQToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(GEEQToken.transfer(to, value), return == true && balances_GEEQToken[this][msg.sender] == old(balances_GEEQToken[this][msg.sender]) - value && balances_GEEQToken[this][to] == old(balances_GEEQToken[this][to]) + value && _totalSupply_GEEQToken[this] == old(_totalSupply_GEEQToken[this]) && allowed_GEEQToken[this] == old(allowed_GEEQToken[this]) && balances_GEEQToken[this][p1] == old(balances_GEEQToken[this][p1]) && symbol_GEEQToken[this] == old(symbol_GEEQToken[this]) && name_GEEQToken[this] == old(name_GEEQToken[this]) && decimals_GEEQToken[this] == old(decimals_GEEQToken[this]) && _totalMinted_GEEQToken[this] == old(_totalMinted_GEEQToken[this]) && _maxMintable_GEEQToken[this] == old(_maxMintable_GEEQToken[this]) && pauseOn_GEEQToken[this] == old(pauseOn_GEEQToken[this]) && migrationOn_GEEQToken[this] == old(migrationOn_GEEQToken[this]) && geeqaddress_GEEQToken[this] == old(geeqaddress_GEEQToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 16:54:50,397 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( p1!=msg.sender && p1!=to_s647 ) && msg.sender!=to_s647 ) && tokens_s647<=balances_GEEQToken[this][msg.sender] ) && ( balances_GEEQToken[this][to_s647] + tokens_s647 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && tokens_s647>=0 ) && tokens_s647<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_GEEQToken[this][to_s647]>=0 ) && balances_GEEQToken[this][to_s647]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_GEEQToken[this][msg.sender]>=0 ) && balances_GEEQToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s647,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>],IdentifierExpression[to_s647,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s647,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],[IdentifierExpression[to_s647,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],IdentifierExpression[tokens_s647,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s647,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s647,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],[IdentifierExpression[to_s647,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],[IdentifierExpression[to_s647,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 16:54:50,401 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( success_s647==true && balances_GEEQToken[this][msg.sender]==( ( old(balances_GEEQToken[this][msg.sender]) ) - tokens_s647 ) ) && balances_GEEQToken[this][to_s647]==( ( old(balances_GEEQToken[this][to_s647]) ) + tokens_s647 ) ) && _totalSupply_GEEQToken[this]==( old(_totalSupply_GEEQToken[this]) ) ) && allowed_GEEQToken[this]==( old(allowed_GEEQToken[this]) ) ) && balances_GEEQToken[this][p1]==( old(balances_GEEQToken[this][p1]) ) ) && symbol_GEEQToken[this]==( old(symbol_GEEQToken[this]) ) ) && name_GEEQToken[this]==( old(name_GEEQToken[this]) ) ) && decimals_GEEQToken[this]==( old(decimals_GEEQToken[this]) ) ) && _totalMinted_GEEQToken[this]==( old(_totalMinted_GEEQToken[this]) ) ) && _maxMintable_GEEQToken[this]==( old(_maxMintable_GEEQToken[this]) ) ) && pauseOn_GEEQToken[this]==( old(pauseOn_GEEQToken[this]) ) ) && migrationOn_GEEQToken[this]==( old(migrationOn_GEEQToken[this]) ) ) && geeqaddress_GEEQToken[this]==( old(geeqaddress_GEEQToken[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s647,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_GEEQToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]]],IdentifierExpression[tokens_s647,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],[IdentifierExpression[to_s647,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],[IdentifierExpression[to_s647,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]]],IdentifierExpression[tokens_s647,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalMinted_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalMinted_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_maxMintable_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_maxMintable_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[pauseOn_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[pauseOn_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[migrationOn_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[migrationOn_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[geeqaddress_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[geeqaddress_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_GEEQToken>]]]]]]
[2020-11-25 16:54:50,406 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(GEEQToken.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_GEEQToken[this][msg.sender] && balances_GEEQToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_GEEQToken[this][to] >= 0 && balances_GEEQToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_GEEQToken[this][msg.sender] >= 0 &&  balances_GEEQToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(GEEQToken.transfer(to, value), return == true && balances_GEEQToken[this][msg.sender] == old(balances_GEEQToken[this][msg.sender]) - value && balances_GEEQToken[this][to] == old(balances_GEEQToken[this][to]) + value && _totalSupply_GEEQToken[this] == old(_totalSupply_GEEQToken[this]) && allowed_GEEQToken[this] == old(allowed_GEEQToken[this]) && balances_GEEQToken[this][p1] == old(balances_GEEQToken[this][p1]) && symbol_GEEQToken[this] == old(symbol_GEEQToken[this]) && name_GEEQToken[this] == old(name_GEEQToken[this]) && decimals_GEEQToken[this] == old(decimals_GEEQToken[this]) && _totalMinted_GEEQToken[this] == old(_totalMinted_GEEQToken[this]) && _maxMintable_GEEQToken[this] == old(_maxMintable_GEEQToken[this]) && pauseOn_GEEQToken[this] == old(pauseOn_GEEQToken[this]) && migrationOn_GEEQToken[this] == old(migrationOn_GEEQToken[this]) && geeqaddress_GEEQToken[this] == old(geeqaddress_GEEQToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 16:54:50,406 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_GEEQToken0) ==> ( <>AP(success_transfer_GEEQToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 16:54:50,417 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:54:50 PropertyContainer
[2020-11-25 16:54:50,417 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 16:54:50,417 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 16:54:50,417 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 16:54:50,417 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 16:54:50,418 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:54:50" (1/2) ...
[2020-11-25 16:54:50,419 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 16:54:50,419 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 16:54:50,435 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:54:50" (2/2) ...
[2020-11-25 16:54:50,435 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 16:54:50,435 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 16:54:50,435 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 16:54:50,436 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 16:54:50,436 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:54:50" (1/2) ...
[2020-11-25 16:54:50,494 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 16:54:50,494 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:54:50,494 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 16:54:50,494 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 16:54:50,494 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:54:50,494 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:54:50,495 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:54:50,495 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:54:50,495 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 16:54:50,495 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 16:54:50,495 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 16:54:50,495 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 16:54:50,495 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 16:54:50,495 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 16:54:50,495 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 16:54:50,496 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 16:54:50,496 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 16:54:50,496 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 16:54:50,496 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 16:54:50,496 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 16:54:50,496 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 16:54:50,496 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 16:54:50,496 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 16:54:50,496 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 16:54:50,497 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 16:54:50,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 16:54:50,497 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 16:54:50,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 16:54:50,497 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 16:54:50,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 16:54:50,497 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 16:54:50,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 16:54:50,497 INFO  L130     BoogieDeclarations]: Found specification of procedure GEEQToken_GEEQToken_NoBaseCtor__success
[2020-11-25 16:54:50,498 INFO  L130     BoogieDeclarations]: Found specification of procedure GEEQToken_GEEQToken
[2020-11-25 16:54:50,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure GEEQToken_GEEQToken
[2020-11-25 16:54:50,498 INFO  L130     BoogieDeclarations]: Found specification of procedure migrateGEEQ~bytes32_GEEQToken
[2020-11-25 16:54:50,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrateGEEQ~bytes32_GEEQToken
[2020-11-25 16:54:50,498 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_GEEQToken
[2020-11-25 16:54:50,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_GEEQToken
[2020-11-25 16:54:50,498 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseEnable_GEEQToken
[2020-11-25 16:54:50,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseEnable_GEEQToken
[2020-11-25 16:54:50,498 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseDisable_GEEQToken
[2020-11-25 16:54:50,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseDisable_GEEQToken
[2020-11-25 16:54:50,498 INFO  L130     BoogieDeclarations]: Found specification of procedure migrationEnable_GEEQToken
[2020-11-25 16:54:50,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrationEnable_GEEQToken
[2020-11-25 16:54:50,499 INFO  L130     BoogieDeclarations]: Found specification of procedure migrationDisable_GEEQToken
[2020-11-25 16:54:50,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrationDisable_GEEQToken
[2020-11-25 16:54:50,499 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_GEEQToken
[2020-11-25 16:54:50,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_GEEQToken
[2020-11-25 16:54:50,499 INFO  L130     BoogieDeclarations]: Found specification of procedure totalMinted_GEEQToken
[2020-11-25 16:54:50,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalMinted_GEEQToken
[2020-11-25 16:54:50,499 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_GEEQToken__success
[2020-11-25 16:54:50,499 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_GEEQToken
[2020-11-25 16:54:50,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_GEEQToken
[2020-11-25 16:54:50,500 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_GEEQToken
[2020-11-25 16:54:50,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_GEEQToken
[2020-11-25 16:54:50,500 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_GEEQToken
[2020-11-25 16:54:50,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_GEEQToken
[2020-11-25 16:54:50,500 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_GEEQToken
[2020-11-25 16:54:50,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_GEEQToken
[2020-11-25 16:54:50,500 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_GEEQToken
[2020-11-25 16:54:50,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_GEEQToken
[2020-11-25 16:54:50,500 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_GEEQToken
[2020-11-25 16:54:50,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_GEEQToken
[2020-11-25 16:54:50,501 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_GEEQToken
[2020-11-25 16:54:50,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_GEEQToken
[2020-11-25 16:54:50,501 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_GEEQToken__success
[2020-11-25 16:54:50,501 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_GEEQToken
[2020-11-25 16:54:50,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_GEEQToken
[2020-11-25 16:54:50,501 INFO  L130     BoogieDeclarations]: Found specification of procedure name_GEEQToken
[2020-11-25 16:54:50,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_GEEQToken
[2020-11-25 16:54:50,501 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_GEEQToken
[2020-11-25 16:54:50,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_GEEQToken
[2020-11-25 16:54:50,501 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseOn_GEEQToken
[2020-11-25 16:54:50,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseOn_GEEQToken
[2020-11-25 16:54:50,502 INFO  L130     BoogieDeclarations]: Found specification of procedure migrationOn_GEEQToken
[2020-11-25 16:54:50,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrationOn_GEEQToken
[2020-11-25 16:54:50,502 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_GEEQToken
[2020-11-25 16:54:50,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_GEEQToken
[2020-11-25 16:54:50,502 INFO  L130     BoogieDeclarations]: Found specification of procedure geeqaddress~address_GEEQToken
[2020-11-25 16:54:50,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure geeqaddress~address_GEEQToken
[2020-11-25 16:54:50,502 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 16:54:50,502 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 16:54:50,502 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 16:54:50,503 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 16:54:50,503 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 16:54:50,503 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 16:54:50,503 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 16:54:50,503 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 16:54:50,503 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 16:54:50,503 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 16:54:50,503 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 16:54:50,503 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 16:54:50,503 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_GEEQToken
[2020-11-25 16:54:50,504 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 16:54:50,504 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 16:54:50,504 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:54:50,504 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 16:54:50,504 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 16:54:50,504 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:54:50,504 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:54:50,504 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:54:50,504 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:54:50,504 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 16:54:50,505 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 16:54:50,505 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 16:54:50,505 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 16:54:50,505 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 16:54:50,505 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 16:54:50,505 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 16:54:50,505 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 16:54:50,505 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 16:54:50,505 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 16:54:50,506 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 16:54:50,506 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 16:54:50,506 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 16:54:50,506 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 16:54:50,506 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 16:54:50,506 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 16:54:50,506 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 16:54:50,506 INFO  L130     BoogieDeclarations]: Found specification of procedure GEEQToken_GEEQToken_NoBaseCtor__fail
[2020-11-25 16:54:50,506 INFO  L130     BoogieDeclarations]: Found specification of procedure GEEQToken_GEEQToken__success
[2020-11-25 16:54:50,506 INFO  L130     BoogieDeclarations]: Found specification of procedure GEEQToken_GEEQToken__fail
[2020-11-25 16:54:50,506 INFO  L130     BoogieDeclarations]: Found specification of procedure migrateGEEQ~bytes32_GEEQToken__success
[2020-11-25 16:54:50,507 INFO  L130     BoogieDeclarations]: Found specification of procedure migrateGEEQ~bytes32_GEEQToken__fail
[2020-11-25 16:54:50,507 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_GEEQToken__success
[2020-11-25 16:54:50,507 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_GEEQToken__fail
[2020-11-25 16:54:50,507 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseEnable_GEEQToken__success
[2020-11-25 16:54:50,507 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseEnable_GEEQToken__fail
[2020-11-25 16:54:50,507 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseDisable_GEEQToken__success
[2020-11-25 16:54:50,507 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseDisable_GEEQToken__fail
[2020-11-25 16:54:50,507 INFO  L130     BoogieDeclarations]: Found specification of procedure migrationEnable_GEEQToken__success
[2020-11-25 16:54:50,507 INFO  L130     BoogieDeclarations]: Found specification of procedure migrationEnable_GEEQToken__fail
[2020-11-25 16:54:50,508 INFO  L130     BoogieDeclarations]: Found specification of procedure migrationDisable_GEEQToken__success
[2020-11-25 16:54:50,508 INFO  L130     BoogieDeclarations]: Found specification of procedure migrationDisable_GEEQToken__fail
[2020-11-25 16:54:50,508 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_GEEQToken__success
[2020-11-25 16:54:50,508 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_GEEQToken__fail
[2020-11-25 16:54:50,508 INFO  L130     BoogieDeclarations]: Found specification of procedure totalMinted_GEEQToken__success
[2020-11-25 16:54:50,508 INFO  L130     BoogieDeclarations]: Found specification of procedure totalMinted_GEEQToken__fail
[2020-11-25 16:54:50,508 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_GEEQToken__fail
[2020-11-25 16:54:50,508 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_GEEQToken__success
[2020-11-25 16:54:50,508 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_GEEQToken__fail
[2020-11-25 16:54:50,508 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_GEEQToken__success
[2020-11-25 16:54:50,508 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_GEEQToken__fail
[2020-11-25 16:54:50,508 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_GEEQToken__success
[2020-11-25 16:54:50,509 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_GEEQToken__fail
[2020-11-25 16:54:50,509 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_GEEQToken__success
[2020-11-25 16:54:50,509 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_GEEQToken__fail
[2020-11-25 16:54:50,509 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_GEEQToken__success
[2020-11-25 16:54:50,509 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_GEEQToken__fail
[2020-11-25 16:54:50,509 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_GEEQToken__success
[2020-11-25 16:54:50,509 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_GEEQToken__fail
[2020-11-25 16:54:50,509 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_GEEQToken__success
[2020-11-25 16:54:50,509 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_GEEQToken__fail
[2020-11-25 16:54:50,509 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_GEEQToken__fail
[2020-11-25 16:54:50,509 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_GEEQToken__success
[2020-11-25 16:54:50,509 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_GEEQToken__fail
[2020-11-25 16:54:50,510 INFO  L130     BoogieDeclarations]: Found specification of procedure name_GEEQToken__success
[2020-11-25 16:54:50,510 INFO  L130     BoogieDeclarations]: Found specification of procedure name_GEEQToken__fail
[2020-11-25 16:54:50,510 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_GEEQToken__success
[2020-11-25 16:54:50,510 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_GEEQToken__fail
[2020-11-25 16:54:50,510 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseOn_GEEQToken__success
[2020-11-25 16:54:50,510 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseOn_GEEQToken__fail
[2020-11-25 16:54:50,510 INFO  L130     BoogieDeclarations]: Found specification of procedure migrationOn_GEEQToken__success
[2020-11-25 16:54:50,510 INFO  L130     BoogieDeclarations]: Found specification of procedure migrationOn_GEEQToken__fail
[2020-11-25 16:54:50,510 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_GEEQToken__success
[2020-11-25 16:54:50,510 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_GEEQToken__fail
[2020-11-25 16:54:50,510 INFO  L130     BoogieDeclarations]: Found specification of procedure geeqaddress~address_GEEQToken__success
[2020-11-25 16:54:50,510 INFO  L130     BoogieDeclarations]: Found specification of procedure geeqaddress~address_GEEQToken__fail
[2020-11-25 16:54:50,510 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 16:54:50,510 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 16:54:50,511 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 16:54:50,511 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 16:54:50,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 16:54:50,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 16:54:50,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:54:50,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:54:50,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 16:54:50,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 16:54:50,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:54:50,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:54:50,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:54:50,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:54:50,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:54:50,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:54:50,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:54:50,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:54:50,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 16:54:50,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 16:54:50,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 16:54:50,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 16:54:50,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 16:54:50,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 16:54:50,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 16:54:50,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 16:54:50,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 16:54:50,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 16:54:50,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 16:54:50,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 16:54:50,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 16:54:50,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 16:54:50,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 16:54:50,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 16:54:50,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 16:54:50,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 16:54:50,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 16:54:50,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 16:54:50,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure GEEQToken_GEEQToken_NoBaseCtor__fail
[2020-11-25 16:54:50,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure GEEQToken_GEEQToken_NoBaseCtor__success
[2020-11-25 16:54:50,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure GEEQToken_GEEQToken__fail
[2020-11-25 16:54:50,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure GEEQToken_GEEQToken__success
[2020-11-25 16:54:50,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrateGEEQ~bytes32_GEEQToken__fail
[2020-11-25 16:54:50,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrateGEEQ~bytes32_GEEQToken__success
[2020-11-25 16:54:50,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_GEEQToken__fail
[2020-11-25 16:54:50,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_GEEQToken__success
[2020-11-25 16:54:50,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseEnable_GEEQToken__fail
[2020-11-25 16:54:50,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseEnable_GEEQToken__success
[2020-11-25 16:54:50,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseDisable_GEEQToken__fail
[2020-11-25 16:54:50,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseDisable_GEEQToken__success
[2020-11-25 16:54:50,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrationEnable_GEEQToken__fail
[2020-11-25 16:54:50,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrationEnable_GEEQToken__success
[2020-11-25 16:54:50,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrationDisable_GEEQToken__fail
[2020-11-25 16:54:50,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrationDisable_GEEQToken__success
[2020-11-25 16:54:50,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_GEEQToken__fail
[2020-11-25 16:54:50,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_GEEQToken__success
[2020-11-25 16:54:50,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalMinted_GEEQToken__fail
[2020-11-25 16:54:50,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalMinted_GEEQToken__success
[2020-11-25 16:54:50,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_GEEQToken__fail
[2020-11-25 16:54:50,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_GEEQToken__success
[2020-11-25 16:54:50,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_GEEQToken__fail
[2020-11-25 16:54:50,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_GEEQToken__success
[2020-11-25 16:54:50,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_GEEQToken__fail
[2020-11-25 16:54:50,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_GEEQToken__success
[2020-11-25 16:54:50,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_GEEQToken__fail
[2020-11-25 16:54:50,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_GEEQToken__success
[2020-11-25 16:54:50,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_GEEQToken__fail
[2020-11-25 16:54:50,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_GEEQToken__success
[2020-11-25 16:54:50,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_GEEQToken__fail
[2020-11-25 16:54:50,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_GEEQToken__success
[2020-11-25 16:54:50,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_GEEQToken__fail
[2020-11-25 16:54:50,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_GEEQToken__success
[2020-11-25 16:54:50,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_GEEQToken__fail
[2020-11-25 16:54:50,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_GEEQToken__success
[2020-11-25 16:54:50,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_GEEQToken__fail
[2020-11-25 16:54:50,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_GEEQToken__success
[2020-11-25 16:54:50,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_GEEQToken__fail
[2020-11-25 16:54:50,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_GEEQToken__success
[2020-11-25 16:54:50,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_GEEQToken__fail
[2020-11-25 16:54:50,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_GEEQToken__success
[2020-11-25 16:54:50,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_GEEQToken__fail
[2020-11-25 16:54:50,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_GEEQToken__success
[2020-11-25 16:54:50,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseOn_GEEQToken__fail
[2020-11-25 16:54:50,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseOn_GEEQToken__success
[2020-11-25 16:54:50,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrationOn_GEEQToken__fail
[2020-11-25 16:54:50,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrationOn_GEEQToken__success
[2020-11-25 16:54:50,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_GEEQToken__fail
[2020-11-25 16:54:50,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_GEEQToken__success
[2020-11-25 16:54:50,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure geeqaddress~address_GEEQToken__fail
[2020-11-25 16:54:50,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure geeqaddress~address_GEEQToken__success
[2020-11-25 16:54:50,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 16:54:50,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 16:54:50,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 16:54:50,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 16:54:50,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 16:54:50,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 16:54:50,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 16:54:50,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 16:54:50,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 16:54:50,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 16:54:50,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 16:54:50,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 16:54:50,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 16:54:50,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 16:54:50,519 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 16:54:50,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 16:54:50,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_GEEQToken
[2020-11-25 16:54:50,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 16:54:50,520 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 16:54:50,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 16:54:50,843 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:54:50,844 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:54:50,844 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:54:50,971 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:54:51,165 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 16:54:51,165 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 16:54:51,166 INFO  L202        PluginConnector]: Adding new model GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:54:51 BoogieIcfgContainer
[2020-11-25 16:54:51,167 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:54:50" (2/2) ...
[2020-11-25 16:54:51,167 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 16:54:51,167 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@137c8ac9 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:54:51, skipping insertion in model container
[2020-11-25 16:54:51,167 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 16:54:51,167 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 16:54:51,167 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 16:54:51,168 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 16:54:51,168 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:54:50" (1/3) ...
[2020-11-25 16:54:51,169 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@7c941a54 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:54:51, skipping insertion in model container
[2020-11-25 16:54:51,169 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:54:50" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 16:54:51,201 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:54:51 NWAContainer
[2020-11-25 16:54:51,201 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 16:54:51,202 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 16:54:51,202 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 16:54:51,203 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 16:54:51,203 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:54:51" (3/4) ...
[2020-11-25 16:54:51,204 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@65e9d2c7 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:54:51, skipping insertion in model container
[2020-11-25 16:54:51,204 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:54:51" (4/4) ...
[2020-11-25 16:54:51,206 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 16:54:51,209 INFO  L110   BuchiProductObserver]: Initial RCFG 1989 locations, 2486 edges
[2020-11-25 16:54:51,209 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 16:54:51,218 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 16:54:52,487 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 16:54:52,493 INFO  L110   BuchiProductObserver]: BuchiProgram size 4720 locations, 8035 edges
[2020-11-25 16:54:52,493 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:54:52 BoogieIcfgContainer
[2020-11-25 16:54:52,493 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 16:54:52,493 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 16:54:52,493 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 16:54:52,495 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 16:54:52,495 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:54:52" (1/1) ...
[2020-11-25 16:54:52,596 INFO  L313           BlockEncoder]: Initial Icfg 4720 locations, 8035 edges
[2020-11-25 16:54:52,596 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 16:54:52,597 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 16:54:52,597 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 16:54:52,597 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 16:54:52,609 INFO  L70    emoveInfeasibleEdges]: Removed 75 edges and 13 locations because of local infeasibility
[2020-11-25 16:54:52,619 INFO  L70        RemoveSinkStates]: Removed 8 edges and 5 locations by removing sink states
[2020-11-25 16:54:52,632 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 16:54:52,638 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 16:54:52,643 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 16:54:52,643 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 16:54:52,649 INFO  L313           BlockEncoder]: Encoded RCFG 4670 locations, 7905 edges
[2020-11-25 16:54:52,650 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:54:52 BasicIcfg
[2020-11-25 16:54:52,650 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 16:54:52,650 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 16:54:52,650 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 16:54:52,652 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 16:54:52,652 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:54:52,653 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:54:50" (1/6) ...
[2020-11-25 16:54:52,654 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@e2420ad and model type GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:54:52, skipping insertion in model container
[2020-11-25 16:54:52,654 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:54:52,654 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:54:50" (2/6) ...
[2020-11-25 16:54:52,655 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@e2420ad and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:54:52, skipping insertion in model container
[2020-11-25 16:54:52,655 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:54:52,655 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:54:51" (3/6) ...
[2020-11-25 16:54:52,655 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@e2420ad and model type GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:54:52, skipping insertion in model container
[2020-11-25 16:54:52,655 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:54:52,655 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:54:51" (4/6) ...
[2020-11-25 16:54:52,655 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@e2420ad and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:54:52, skipping insertion in model container
[2020-11-25 16:54:52,655 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:54:52,655 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:54:52" (5/6) ...
[2020-11-25 16:54:52,655 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@e2420ad and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 04:54:52, skipping insertion in model container
[2020-11-25 16:54:52,656 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:54:52,656 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:54:52" (6/6) ...
[2020-11-25 16:54:52,657 INFO  L404   chiAutomizerObserver]: Analyzing ICFG GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transfer-normal.bpl_BEv2
[2020-11-25 16:54:52,684 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 16:54:52,684 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 16:54:52,684 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 16:54:52,685 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 16:54:52,685 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 16:54:52,685 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 16:54:52,685 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 16:54:52,685 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 16:54:52,685 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 16:54:52,723 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4670 states.
[2020-11-25 16:54:52,771 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:54:52,772 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:54:52,772 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:54:52,779 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:54:52,779 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:54:52,779 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 16:54:52,779 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4670 states.
[2020-11-25 16:54:52,801 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:54:52,801 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:54:52,801 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:54:52,803 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:54:52,803 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_GEEQToken0 := false;
[L3]                 call_transfer_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND TRUE   revert
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND TRUE   choice == 26
[L5181]              gas := gas - 21000;
[L5182]  COND FALSE  !(gas >= 0)
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:54:52,817 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:54:52,817 INFO  L82        PathProgramCache]: Analyzing trace with hash 1125919579, now seen corresponding path program 1 times
[2020-11-25 16:54:52,821 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:54:52,838 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:54:52,868 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:54:52,869 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:54:52,870 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:54:53,169 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:54:53,178 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:54:53,178 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:54:53,179 INFO  L87              Difference]: Start difference. First operand 4670 states. Second operand 4 states.
[2020-11-25 16:54:53,636 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:54:53,636 INFO  L93              Difference]: Finished difference Result 3642 states and 4007 transitions.
[2020-11-25 16:54:53,636 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:54:53,637 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3642 states and 4007 transitions.
[2020-11-25 16:54:53,654 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:54:53,676 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3642 states to 3642 states and 4007 transitions.
[2020-11-25 16:54:53,677 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 16:54:53,679 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1067
[2020-11-25 16:54:53,680 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3642 states and 4007 transitions.
[2020-11-25 16:54:53,688 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:54:53,688 INFO  L728         BuchiCegarLoop]: Abstraction has 3642 states and 4007 transitions.
[2020-11-25 16:54:53,707 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3642 states and 4007 transitions.
[2020-11-25 16:54:53,756 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3642 to 3642.
[2020-11-25 16:54:53,756 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3642 states.
[2020-11-25 16:54:53,763 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3642 states to 3642 states and 4007 transitions.
[2020-11-25 16:54:53,764 INFO  L751         BuchiCegarLoop]: Abstraction has 3642 states and 4007 transitions.
[2020-11-25 16:54:53,764 INFO  L631         BuchiCegarLoop]: Abstraction has 3642 states and 4007 transitions.
[2020-11-25 16:54:53,764 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 16:54:53,764 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3642 states and 4007 transitions.
[2020-11-25 16:54:53,772 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:54:53,773 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:54:53,773 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:54:53,774 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:54:53,774 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_GEEQToken0 := false;
[L3]                 call_transfer_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND TRUE   revert
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND TRUE   choice == 23
[L5199]              gas := gas - 21000;
[L5200]  COND TRUE   gas >= 0
[L5201]              assume tokens_s647 >= 0 && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5202]              assume msgvalue_MSG == 0;
[L5203]  CALL        call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s647) && msgsender_MSG != to_s647) && tokens_s647 <= balances_GEEQToken[this][msgsender_MSG]) && balances_GEEQToken[this][to_s647] + tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s647 >= 0) && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s647] >= 0) && balances_GEEQToken[this][to_s647] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][msgsender_MSG] >= 0) && balances_GEEQToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_GEEQToken0 := true;
[L3]                 call_transfer_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1427]              havoc __exception;
[L1428]              revert := false;
[L1429]  COND FALSE  !(__exception)
[L1458]  CALL        call success_s647 := transfer~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3516]  COND TRUE   pauseOn_GEEQToken[this]
[L3517]              assert { :EventEmitted "ErrorEvent_GEEQToken" } true;
[L3518]              revert := true;
[L1458]  RET         call success_s647 := transfer~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L1459]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((((success_s647 == true && balances_GEEQToken[this][msgsender_MSG] == old(balances_GEEQToken[this][msgsender_MSG]) - tokens_s647) && balances_GEEQToken[this][to_s647] == old(balances_GEEQToken[this][to_s647]) + tokens_s647) && _totalSupply_GEEQToken[this] == old(_totalSupply_GEEQToken[this])) && allowed_GEEQToken[this] == old(allowed_GEEQToken[this])) && balances_GEEQToken[this][p1] == old(balances_GEEQToken[this][p1])) && symbol_GEEQToken[this] == old(symbol_GEEQToken[this])) && name_GEEQToken[this] == old(name_GEEQToken[this])) && decimals_GEEQToken[this] == old(decimals_GEEQToken[this])) && _totalMinted_GEEQToken[this] == old(_totalMinted_GEEQToken[this])) && _maxMintable_GEEQToken[this] == old(_maxMintable_GEEQToken[this])) && pauseOn_GEEQToken[this] == old(pauseOn_GEEQToken[this])) && migrationOn_GEEQToken[this] == old(migrationOn_GEEQToken[this])) && geeqaddress_GEEQToken[this] == old(geeqaddress_GEEQToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L5203]  RET         call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND TRUE   choice == 23
[L5199]              gas := gas - 21000;
[L5200]  COND TRUE   gas >= 0
[L5201]              assume tokens_s647 >= 0 && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5202]              assume msgvalue_MSG == 0;
[L5203]  CALL        call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s647) && msgsender_MSG != to_s647) && tokens_s647 <= balances_GEEQToken[this][msgsender_MSG]) && balances_GEEQToken[this][to_s647] + tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s647 >= 0) && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s647] >= 0) && balances_GEEQToken[this][to_s647] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][msgsender_MSG] >= 0) && balances_GEEQToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_GEEQToken0 := true;
[L3]                 call_transfer_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1427]              havoc __exception;
[L1428]              revert := false;
[L1429]  COND FALSE  !(__exception)
[L1458]  CALL        call success_s647 := transfer~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3516]  COND TRUE   pauseOn_GEEQToken[this]
[L3517]              assert { :EventEmitted "ErrorEvent_GEEQToken" } true;
[L3518]              revert := true;
[L1458]  RET         call success_s647 := transfer~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L1459]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((((success_s647 == true && balances_GEEQToken[this][msgsender_MSG] == old(balances_GEEQToken[this][msgsender_MSG]) - tokens_s647) && balances_GEEQToken[this][to_s647] == old(balances_GEEQToken[this][to_s647]) + tokens_s647) && _totalSupply_GEEQToken[this] == old(_totalSupply_GEEQToken[this])) && allowed_GEEQToken[this] == old(allowed_GEEQToken[this])) && balances_GEEQToken[this][p1] == old(balances_GEEQToken[this][p1])) && symbol_GEEQToken[this] == old(symbol_GEEQToken[this])) && name_GEEQToken[this] == old(name_GEEQToken[this])) && decimals_GEEQToken[this] == old(decimals_GEEQToken[this])) && _totalMinted_GEEQToken[this] == old(_totalMinted_GEEQToken[this])) && _maxMintable_GEEQToken[this] == old(_maxMintable_GEEQToken[this])) && pauseOn_GEEQToken[this] == old(pauseOn_GEEQToken[this])) && migrationOn_GEEQToken[this] == old(migrationOn_GEEQToken[this])) && geeqaddress_GEEQToken[this] == old(geeqaddress_GEEQToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L5203]  RET         call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:54:53,778 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:54:53,778 INFO  L82        PathProgramCache]: Analyzing trace with hash -749269384, now seen corresponding path program 1 times
[2020-11-25 16:54:53,779 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:54:53,788 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:54:53,811 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:54:53,811 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:54:53,811 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:54:53,812 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:54:53,812 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:54:53,812 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:54:53,813 INFO  L87              Difference]: Start difference. First operand 3642 states and 4007 transitions. cyclomatic complexity: 367 Second operand 4 states.
[2020-11-25 16:54:54,677 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:54:54,678 INFO  L93              Difference]: Finished difference Result 5186 states and 5891 transitions.
[2020-11-25 16:54:54,678 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:54:54,678 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5186 states and 5891 transitions.
[2020-11-25 16:54:54,694 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 16:54:54,714 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5186 states to 4978 states and 5655 transitions.
[2020-11-25 16:54:54,715 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1418
[2020-11-25 16:54:54,716 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1447
[2020-11-25 16:54:54,716 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4978 states and 5655 transitions.
[2020-11-25 16:54:54,723 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:54:54,723 INFO  L728         BuchiCegarLoop]: Abstraction has 4978 states and 5655 transitions.
[2020-11-25 16:54:54,727 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4978 states and 5655 transitions.
[2020-11-25 16:54:54,761 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4978 to 3726.
[2020-11-25 16:54:54,761 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3726 states.
[2020-11-25 16:54:54,765 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3726 states to 3726 states and 4015 transitions.
[2020-11-25 16:54:54,766 INFO  L751         BuchiCegarLoop]: Abstraction has 3726 states and 4015 transitions.
[2020-11-25 16:54:54,766 INFO  L631         BuchiCegarLoop]: Abstraction has 3726 states and 4015 transitions.
[2020-11-25 16:54:54,766 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 16:54:54,766 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3726 states and 4015 transitions.
[2020-11-25 16:54:54,772 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:54:54,772 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:54:54,772 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:54:54,774 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:54:54,774 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_GEEQToken0 := false;
[L3]                 call_transfer_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND TRUE   choice == 23
[L5199]              gas := gas - 21000;
[L5200]  COND TRUE   gas >= 0
[L5201]              assume tokens_s647 >= 0 && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5202]              assume msgvalue_MSG == 0;
[L5203]  CALL        call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s647) && msgsender_MSG != to_s647) && tokens_s647 <= balances_GEEQToken[this][msgsender_MSG]) && balances_GEEQToken[this][to_s647] + tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s647 >= 0) && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s647] >= 0) && balances_GEEQToken[this][to_s647] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][msgsender_MSG] >= 0) && balances_GEEQToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_GEEQToken0 := true;
[L3]                 call_transfer_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1427]              havoc __exception;
[L1428]              revert := false;
[L1429]  COND TRUE   __exception
[L1430]              __tmp__Balance := Balance;
[L1431]              __tmp__DType := DType;
[L1432]              __tmp__Alloc := Alloc;
[L1433]              __tmp__balance_ADDR := balance_ADDR;
[L1434]              __tmp__M_Ref_int := M_Ref_int;
[L1435]              __tmp__sum_balances0 := sum_balances0;
[L1436]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1437]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1438]              __tmp__sum_allowed1 := sum_allowed1;
[L1439]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1440]              __tmp__Length := Length;
[L1441]              __tmp__now := now;
[L1442]              __tmp__owner_Owned := owner_Owned;
[L1443]              __tmp__newOwner_Owned := newOwner_Owned;
[L1444]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1445]              __tmp__name_GEEQToken := name_GEEQToken;
[L1446]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1447]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1448]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1449]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1450]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1451]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1452]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1453]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1454]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1455]  CALL        call success_s647 := transfer~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3489]  COND TRUE   __tmp__pauseOn_GEEQToken[this]
[L3490]              revert := true;
[L1455]  RET         call success_s647 := transfer~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L1456]              assume revert || gas < 0;
[L5203]  RET         call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND TRUE   choice == 23
[L5199]              gas := gas - 21000;
[L5200]  COND TRUE   gas >= 0
[L5201]              assume tokens_s647 >= 0 && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5202]              assume msgvalue_MSG == 0;
[L5203]  CALL        call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s647) && msgsender_MSG != to_s647) && tokens_s647 <= balances_GEEQToken[this][msgsender_MSG]) && balances_GEEQToken[this][to_s647] + tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s647 >= 0) && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s647] >= 0) && balances_GEEQToken[this][to_s647] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][msgsender_MSG] >= 0) && balances_GEEQToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_GEEQToken0 := true;
[L3]                 call_transfer_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1427]              havoc __exception;
[L1428]              revert := false;
[L1429]  COND TRUE   __exception
[L1430]              __tmp__Balance := Balance;
[L1431]              __tmp__DType := DType;
[L1432]              __tmp__Alloc := Alloc;
[L1433]              __tmp__balance_ADDR := balance_ADDR;
[L1434]              __tmp__M_Ref_int := M_Ref_int;
[L1435]              __tmp__sum_balances0 := sum_balances0;
[L1436]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1437]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1438]              __tmp__sum_allowed1 := sum_allowed1;
[L1439]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1440]              __tmp__Length := Length;
[L1441]              __tmp__now := now;
[L1442]              __tmp__owner_Owned := owner_Owned;
[L1443]              __tmp__newOwner_Owned := newOwner_Owned;
[L1444]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1445]              __tmp__name_GEEQToken := name_GEEQToken;
[L1446]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1447]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1448]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1449]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1450]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1451]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1452]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1453]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1454]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1455]  CALL        call success_s647 := transfer~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3489]  COND TRUE   __tmp__pauseOn_GEEQToken[this]
[L3490]              revert := true;
[L1455]  RET         call success_s647 := transfer~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L1456]              assume revert || gas < 0;
[L5203]  RET         call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:54:54,778 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:54:54,778 INFO  L82        PathProgramCache]: Analyzing trace with hash -1066871420, now seen corresponding path program 1 times
[2020-11-25 16:54:54,778 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:54:54,792 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:54:54,876 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:54:54,877 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:54:54,877 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 16:54:54,878 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:54:54,878 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 16:54:54,878 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=19, Invalid=91, Unknown=0, NotChecked=0, Total=110
[2020-11-25 16:54:54,878 INFO  L87              Difference]: Start difference. First operand 3726 states and 4015 transitions. cyclomatic complexity: 291 Second operand 11 states.
[2020-11-25 16:54:57,196 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:54:57,196 INFO  L93              Difference]: Finished difference Result 6332 states and 6939 transitions.
[2020-11-25 16:54:57,196 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 16:54:57,196 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6332 states and 6939 transitions.
[2020-11-25 16:54:57,208 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 16:54:57,223 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6332 states to 6332 states and 6939 transitions.
[2020-11-25 16:54:57,224 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1922
[2020-11-25 16:54:57,225 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1922
[2020-11-25 16:54:57,225 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6332 states and 6939 transitions.
[2020-11-25 16:54:57,230 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:54:57,230 INFO  L728         BuchiCegarLoop]: Abstraction has 6332 states and 6939 transitions.
[2020-11-25 16:54:57,233 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6332 states and 6939 transitions.
[2020-11-25 16:54:57,265 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6332 to 3768.
[2020-11-25 16:54:57,265 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3768 states.
[2020-11-25 16:54:57,268 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3768 states to 3768 states and 4066 transitions.
[2020-11-25 16:54:57,268 INFO  L751         BuchiCegarLoop]: Abstraction has 3768 states and 4066 transitions.
[2020-11-25 16:54:57,268 INFO  L631         BuchiCegarLoop]: Abstraction has 3768 states and 4066 transitions.
[2020-11-25 16:54:57,268 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 16:54:57,268 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3768 states and 4066 transitions.
[2020-11-25 16:54:57,272 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 16:54:57,272 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:54:57,272 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:54:57,274 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:54:57,274 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_GEEQToken0 := false;
[L3]                 call_transfer_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND TRUE   choice == 23
[L5199]              gas := gas - 21000;
[L5200]  COND TRUE   gas >= 0
[L5201]              assume tokens_s647 >= 0 && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5202]              assume msgvalue_MSG == 0;
[L5203]  CALL        call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s647) && msgsender_MSG != to_s647) && tokens_s647 <= balances_GEEQToken[this][msgsender_MSG]) && balances_GEEQToken[this][to_s647] + tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s647 >= 0) && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s647] >= 0) && balances_GEEQToken[this][to_s647] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][msgsender_MSG] >= 0) && balances_GEEQToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_GEEQToken0 := true;
[L3]                 call_transfer_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1427]              havoc __exception;
[L1428]              revert := false;
[L1429]  COND FALSE  !(__exception)
[L1458]  CALL        call success_s647 := transfer~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3516]  COND FALSE  !(pauseOn_GEEQToken[this])
[L3521]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][msgsender_MSG], tokens_s647);
[L2841]  COND FALSE  !(!(b_s51 <= a_s51))
[L2845]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2846]              c_s51 := c_s51;
[L3521]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][msgsender_MSG], tokens_s647);
[L3522]  COND FALSE  !(revert)
[L3525]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][msgsender_MSG];
[L3526]              balances_GEEQToken[this][msgsender_MSG] := __var_15;
[L3527]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][msgsender_MSG];
[L3528]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s647], tokens_s647);
[L2819]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2820]  COND FALSE  !(!(c_s26 >= a_s26))
[L2824]              c_s26 := c_s26;
[L3528]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s647], tokens_s647);
[L3529]  COND FALSE  !(revert)
[L3532]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][to_s647];
[L3533]              balances_GEEQToken[this][to_s647] := __var_16;
[L3534]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][to_s647];
[L3535]              assert { :EventEmitted "Transfer_GEEQToken" } true;
[L3536]              success_s647 := true;
[L1458]  RET         call success_s647 := transfer~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L1459]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((((success_s647 == true && balances_GEEQToken[this][msgsender_MSG] == old(balances_GEEQToken[this][msgsender_MSG]) - tokens_s647) && balances_GEEQToken[this][to_s647] == old(balances_GEEQToken[this][to_s647]) + tokens_s647) && _totalSupply_GEEQToken[this] == old(_totalSupply_GEEQToken[this])) && allowed_GEEQToken[this] == old(allowed_GEEQToken[this])) && balances_GEEQToken[this][p1] == old(balances_GEEQToken[this][p1])) && symbol_GEEQToken[this] == old(symbol_GEEQToken[this])) && name_GEEQToken[this] == old(name_GEEQToken[this])) && decimals_GEEQToken[this] == old(decimals_GEEQToken[this])) && _totalMinted_GEEQToken[this] == old(_totalMinted_GEEQToken[this])) && _maxMintable_GEEQToken[this] == old(_maxMintable_GEEQToken[this])) && pauseOn_GEEQToken[this] == old(pauseOn_GEEQToken[this])) && migrationOn_GEEQToken[this] == old(migrationOn_GEEQToken[this])) && geeqaddress_GEEQToken[this] == old(geeqaddress_GEEQToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L5203]  RET         call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND TRUE   choice == 23
[L5199]              gas := gas - 21000;
[L5200]  COND TRUE   gas >= 0
[L5201]              assume tokens_s647 >= 0 && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5202]              assume msgvalue_MSG == 0;
[L5203]  CALL        call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s647) && msgsender_MSG != to_s647) && tokens_s647 <= balances_GEEQToken[this][msgsender_MSG]) && balances_GEEQToken[this][to_s647] + tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s647 >= 0) && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s647] >= 0) && balances_GEEQToken[this][to_s647] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][msgsender_MSG] >= 0) && balances_GEEQToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_GEEQToken0 := true;
[L3]                 call_transfer_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1427]              havoc __exception;
[L1428]              revert := false;
[L1429]  COND FALSE  !(__exception)
[L1458]  CALL        call success_s647 := transfer~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3516]  COND FALSE  !(pauseOn_GEEQToken[this])
[L3521]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][msgsender_MSG], tokens_s647);
[L2841]  COND FALSE  !(!(b_s51 <= a_s51))
[L2845]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2846]              c_s51 := c_s51;
[L3521]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][msgsender_MSG], tokens_s647);
[L3522]  COND FALSE  !(revert)
[L3525]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][msgsender_MSG];
[L3526]              balances_GEEQToken[this][msgsender_MSG] := __var_15;
[L3527]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][msgsender_MSG];
[L3528]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s647], tokens_s647);
[L2819]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2820]  COND FALSE  !(!(c_s26 >= a_s26))
[L2824]              c_s26 := c_s26;
[L3528]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s647], tokens_s647);
[L3529]  COND FALSE  !(revert)
[L3532]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][to_s647];
[L3533]              balances_GEEQToken[this][to_s647] := __var_16;
[L3534]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][to_s647];
[L3535]              assert { :EventEmitted "Transfer_GEEQToken" } true;
[L3536]              success_s647 := true;
[L1458]  RET         call success_s647 := transfer~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L1459]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((((success_s647 == true && balances_GEEQToken[this][msgsender_MSG] == old(balances_GEEQToken[this][msgsender_MSG]) - tokens_s647) && balances_GEEQToken[this][to_s647] == old(balances_GEEQToken[this][to_s647]) + tokens_s647) && _totalSupply_GEEQToken[this] == old(_totalSupply_GEEQToken[this])) && allowed_GEEQToken[this] == old(allowed_GEEQToken[this])) && balances_GEEQToken[this][p1] == old(balances_GEEQToken[this][p1])) && symbol_GEEQToken[this] == old(symbol_GEEQToken[this])) && name_GEEQToken[this] == old(name_GEEQToken[this])) && decimals_GEEQToken[this] == old(decimals_GEEQToken[this])) && _totalMinted_GEEQToken[this] == old(_totalMinted_GEEQToken[this])) && _maxMintable_GEEQToken[this] == old(_maxMintable_GEEQToken[this])) && pauseOn_GEEQToken[this] == old(pauseOn_GEEQToken[this])) && migrationOn_GEEQToken[this] == old(migrationOn_GEEQToken[this])) && geeqaddress_GEEQToken[this] == old(geeqaddress_GEEQToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L5203]  RET         call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:54:57,277 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:54:57,277 INFO  L82        PathProgramCache]: Analyzing trace with hash 1191084677, now seen corresponding path program 1 times
[2020-11-25 16:54:57,278 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:54:57,307 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:54:57,628 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:54:57,628 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:54:57,628 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [20] imperfect sequences [] total 20
[2020-11-25 16:54:57,628 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:54:57,628 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 21 interpolants.
[2020-11-25 16:54:57,629 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=50, Invalid=370, Unknown=0, NotChecked=0, Total=420
[2020-11-25 16:54:57,629 INFO  L87              Difference]: Start difference. First operand 3768 states and 4066 transitions. cyclomatic complexity: 302 Second operand 21 states.
[2020-11-25 16:55:01,270 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:55:01,270 INFO  L93              Difference]: Finished difference Result 3941 states and 4300 transitions.
[2020-11-25 16:55:01,270 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 16:55:01,271 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3941 states and 4300 transitions.
[2020-11-25 16:55:01,278 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 16:55:01,288 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3941 states to 3941 states and 4300 transitions.
[2020-11-25 16:55:01,288 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1188
[2020-11-25 16:55:01,289 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1188
[2020-11-25 16:55:01,289 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3941 states and 4300 transitions.
[2020-11-25 16:55:01,292 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:55:01,292 INFO  L728         BuchiCegarLoop]: Abstraction has 3941 states and 4300 transitions.
[2020-11-25 16:55:01,295 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3941 states and 4300 transitions.
[2020-11-25 16:55:01,316 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3941 to 3894.
[2020-11-25 16:55:01,316 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3894 states.
[2020-11-25 16:55:01,320 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3894 states to 3894 states and 4224 transitions.
[2020-11-25 16:55:01,320 INFO  L751         BuchiCegarLoop]: Abstraction has 3894 states and 4224 transitions.
[2020-11-25 16:55:01,320 INFO  L631         BuchiCegarLoop]: Abstraction has 3894 states and 4224 transitions.
[2020-11-25 16:55:01,320 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 16:55:01,320 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3894 states and 4224 transitions.
[2020-11-25 16:55:01,324 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 16:55:01,324 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:55:01,324 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:55:01,325 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:55:01,325 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_GEEQToken0 := false;
[L3]                 call_transfer_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND TRUE   choice == 23
[L5199]              gas := gas - 21000;
[L5200]  COND TRUE   gas >= 0
[L5201]              assume tokens_s647 >= 0 && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5202]              assume msgvalue_MSG == 0;
[L5203]  CALL        call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s647) && msgsender_MSG != to_s647) && tokens_s647 <= balances_GEEQToken[this][msgsender_MSG]) && balances_GEEQToken[this][to_s647] + tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s647 >= 0) && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s647] >= 0) && balances_GEEQToken[this][to_s647] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][msgsender_MSG] >= 0) && balances_GEEQToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_GEEQToken0 := true;
[L3]                 call_transfer_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1427]              havoc __exception;
[L1428]              revert := false;
[L1429]  COND TRUE   __exception
[L1430]              __tmp__Balance := Balance;
[L1431]              __tmp__DType := DType;
[L1432]              __tmp__Alloc := Alloc;
[L1433]              __tmp__balance_ADDR := balance_ADDR;
[L1434]              __tmp__M_Ref_int := M_Ref_int;
[L1435]              __tmp__sum_balances0 := sum_balances0;
[L1436]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1437]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1438]              __tmp__sum_allowed1 := sum_allowed1;
[L1439]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1440]              __tmp__Length := Length;
[L1441]              __tmp__now := now;
[L1442]              __tmp__owner_Owned := owner_Owned;
[L1443]              __tmp__newOwner_Owned := newOwner_Owned;
[L1444]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1445]              __tmp__name_GEEQToken := name_GEEQToken;
[L1446]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1447]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1448]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1449]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1450]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1451]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1452]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1453]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1454]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1455]  CALL        call success_s647 := transfer~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3489]  COND FALSE  !(__tmp__pauseOn_GEEQToken[this])
[L3493]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][msgsender_MSG], tokens_s647);
[L2830]  COND TRUE   !(b_s51 <= a_s51)
[L2831]              revert := true;
[L3493]  RET         call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][msgsender_MSG], tokens_s647);
[L3494]  COND TRUE   revert
[L1455]  RET         call success_s647 := transfer~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L1456]              assume revert || gas < 0;
[L5203]  RET         call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND TRUE   choice == 23
[L5199]              gas := gas - 21000;
[L5200]  COND TRUE   gas >= 0
[L5201]              assume tokens_s647 >= 0 && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5202]              assume msgvalue_MSG == 0;
[L5203]  CALL        call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s647) && msgsender_MSG != to_s647) && tokens_s647 <= balances_GEEQToken[this][msgsender_MSG]) && balances_GEEQToken[this][to_s647] + tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s647 >= 0) && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s647] >= 0) && balances_GEEQToken[this][to_s647] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][msgsender_MSG] >= 0) && balances_GEEQToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_GEEQToken0 := true;
[L3]                 call_transfer_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1427]              havoc __exception;
[L1428]              revert := false;
[L1429]  COND TRUE   __exception
[L1430]              __tmp__Balance := Balance;
[L1431]              __tmp__DType := DType;
[L1432]              __tmp__Alloc := Alloc;
[L1433]              __tmp__balance_ADDR := balance_ADDR;
[L1434]              __tmp__M_Ref_int := M_Ref_int;
[L1435]              __tmp__sum_balances0 := sum_balances0;
[L1436]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1437]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1438]              __tmp__sum_allowed1 := sum_allowed1;
[L1439]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1440]              __tmp__Length := Length;
[L1441]              __tmp__now := now;
[L1442]              __tmp__owner_Owned := owner_Owned;
[L1443]              __tmp__newOwner_Owned := newOwner_Owned;
[L1444]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1445]              __tmp__name_GEEQToken := name_GEEQToken;
[L1446]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1447]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1448]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1449]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1450]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1451]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1452]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1453]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1454]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1455]  CALL        call success_s647 := transfer~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3489]  COND FALSE  !(__tmp__pauseOn_GEEQToken[this])
[L3493]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][msgsender_MSG], tokens_s647);
[L2830]  COND TRUE   !(b_s51 <= a_s51)
[L2831]              revert := true;
[L3493]  RET         call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][msgsender_MSG], tokens_s647);
[L3494]  COND TRUE   revert
[L1455]  RET         call success_s647 := transfer~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L1456]              assume revert || gas < 0;
[L5203]  RET         call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:55:01,328 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:55:01,328 INFO  L82        PathProgramCache]: Analyzing trace with hash -1396109701, now seen corresponding path program 1 times
[2020-11-25 16:55:01,329 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:55:01,336 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:55:01,371 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:55:01,371 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:55:01,371 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 16:55:01,371 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:55:01,371 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 16:55:01,371 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 16:55:01,371 INFO  L87              Difference]: Start difference. First operand 3894 states and 4224 transitions. cyclomatic complexity: 338 Second operand 7 states.
[2020-11-25 16:55:02,041 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:55:02,041 INFO  L93              Difference]: Finished difference Result 4104 states and 4484 transitions.
[2020-11-25 16:55:02,041 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 16:55:02,041 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4104 states and 4484 transitions.
[2020-11-25 16:55:02,048 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 16:55:02,057 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4104 states to 4104 states and 4484 transitions.
[2020-11-25 16:55:02,057 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1270
[2020-11-25 16:55:02,057 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1270
[2020-11-25 16:55:02,057 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4104 states and 4484 transitions.
[2020-11-25 16:55:02,060 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:55:02,060 INFO  L728         BuchiCegarLoop]: Abstraction has 4104 states and 4484 transitions.
[2020-11-25 16:55:02,063 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4104 states and 4484 transitions.
[2020-11-25 16:55:02,085 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4104 to 3989.
[2020-11-25 16:55:02,085 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3989 states.
[2020-11-25 16:55:02,089 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3989 states to 3989 states and 4327 transitions.
[2020-11-25 16:55:02,089 INFO  L751         BuchiCegarLoop]: Abstraction has 3989 states and 4327 transitions.
[2020-11-25 16:55:02,089 INFO  L631         BuchiCegarLoop]: Abstraction has 3989 states and 4327 transitions.
[2020-11-25 16:55:02,089 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 16:55:02,089 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3989 states and 4327 transitions.
[2020-11-25 16:55:02,093 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 16:55:02,093 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:55:02,093 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:55:02,094 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:55:02,094 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_GEEQToken0 := false;
[L3]                 call_transfer_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND TRUE   choice == 23
[L5199]              gas := gas - 21000;
[L5200]  COND TRUE   gas >= 0
[L5201]              assume tokens_s647 >= 0 && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5202]              assume msgvalue_MSG == 0;
[L5203]  CALL        call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s647) && msgsender_MSG != to_s647) && tokens_s647 <= balances_GEEQToken[this][msgsender_MSG]) && balances_GEEQToken[this][to_s647] + tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s647 >= 0) && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s647] >= 0) && balances_GEEQToken[this][to_s647] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][msgsender_MSG] >= 0) && balances_GEEQToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_GEEQToken0 := true;
[L3]                 call_transfer_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1427]              havoc __exception;
[L1428]              revert := false;
[L1429]  COND TRUE   __exception
[L1430]              __tmp__Balance := Balance;
[L1431]              __tmp__DType := DType;
[L1432]              __tmp__Alloc := Alloc;
[L1433]              __tmp__balance_ADDR := balance_ADDR;
[L1434]              __tmp__M_Ref_int := M_Ref_int;
[L1435]              __tmp__sum_balances0 := sum_balances0;
[L1436]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1437]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1438]              __tmp__sum_allowed1 := sum_allowed1;
[L1439]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1440]              __tmp__Length := Length;
[L1441]              __tmp__now := now;
[L1442]              __tmp__owner_Owned := owner_Owned;
[L1443]              __tmp__newOwner_Owned := newOwner_Owned;
[L1444]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1445]              __tmp__name_GEEQToken := name_GEEQToken;
[L1446]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1447]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1448]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1449]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1450]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1451]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1452]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1453]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1454]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1455]  CALL        call success_s647 := transfer~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3489]  COND FALSE  !(__tmp__pauseOn_GEEQToken[this])
[L3493]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][msgsender_MSG], tokens_s647);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3493]  RET         call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][msgsender_MSG], tokens_s647);
[L3494]  COND FALSE  !(revert)
[L3497]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_GEEQToken[this][msgsender_MSG];
[L3498]              __tmp__balances_GEEQToken[this][msgsender_MSG] := __var_15;
[L3499]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_GEEQToken[this][msgsender_MSG];
[L3500]  CALL        call __var_16 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s647], tokens_s647);
[L2808]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2809]  COND TRUE   !(c_s26 >= a_s26)
[L2810]              revert := true;
[L3500]  RET         call __var_16 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s647], tokens_s647);
[L3501]  COND TRUE   revert
[L1455]  RET         call success_s647 := transfer~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L1456]              assume revert || gas < 0;
[L5203]  RET         call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND TRUE   choice == 23
[L5199]              gas := gas - 21000;
[L5200]  COND TRUE   gas >= 0
[L5201]              assume tokens_s647 >= 0 && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5202]              assume msgvalue_MSG == 0;
[L5203]  CALL        call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s647) && msgsender_MSG != to_s647) && tokens_s647 <= balances_GEEQToken[this][msgsender_MSG]) && balances_GEEQToken[this][to_s647] + tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s647 >= 0) && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s647] >= 0) && balances_GEEQToken[this][to_s647] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][msgsender_MSG] >= 0) && balances_GEEQToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_GEEQToken0 := true;
[L3]                 call_transfer_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1427]              havoc __exception;
[L1428]              revert := false;
[L1429]  COND TRUE   __exception
[L1430]              __tmp__Balance := Balance;
[L1431]              __tmp__DType := DType;
[L1432]              __tmp__Alloc := Alloc;
[L1433]              __tmp__balance_ADDR := balance_ADDR;
[L1434]              __tmp__M_Ref_int := M_Ref_int;
[L1435]              __tmp__sum_balances0 := sum_balances0;
[L1436]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1437]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1438]              __tmp__sum_allowed1 := sum_allowed1;
[L1439]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1440]              __tmp__Length := Length;
[L1441]              __tmp__now := now;
[L1442]              __tmp__owner_Owned := owner_Owned;
[L1443]              __tmp__newOwner_Owned := newOwner_Owned;
[L1444]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1445]              __tmp__name_GEEQToken := name_GEEQToken;
[L1446]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1447]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1448]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1449]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1450]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1451]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1452]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1453]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1454]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1455]  CALL        call success_s647 := transfer~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3489]  COND FALSE  !(__tmp__pauseOn_GEEQToken[this])
[L3493]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][msgsender_MSG], tokens_s647);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3493]  RET         call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][msgsender_MSG], tokens_s647);
[L3494]  COND FALSE  !(revert)
[L3497]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_GEEQToken[this][msgsender_MSG];
[L3498]              __tmp__balances_GEEQToken[this][msgsender_MSG] := __var_15;
[L3499]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_GEEQToken[this][msgsender_MSG];
[L3500]  CALL        call __var_16 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s647], tokens_s647);
[L2808]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2809]  COND TRUE   !(c_s26 >= a_s26)
[L2810]              revert := true;
[L3500]  RET         call __var_16 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s647], tokens_s647);
[L3501]  COND TRUE   revert
[L1455]  RET         call success_s647 := transfer~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L1456]              assume revert || gas < 0;
[L5203]  RET         call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:55:02,097 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:55:02,097 INFO  L82        PathProgramCache]: Analyzing trace with hash -2113383807, now seen corresponding path program 1 times
[2020-11-25 16:55:02,098 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:55:02,105 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:55:02,159 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:55:02,159 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:55:02,159 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-25 16:55:02,159 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:55:02,160 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 16:55:02,160 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=209, Unknown=0, NotChecked=0, Total=240
[2020-11-25 16:55:02,160 INFO  L87              Difference]: Start difference. First operand 3989 states and 4327 transitions. cyclomatic complexity: 346 Second operand 16 states.
[2020-11-25 16:55:03,785 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:55:03,785 INFO  L93              Difference]: Finished difference Result 4122 states and 4531 transitions.
[2020-11-25 16:55:03,785 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 16:55:03,785 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4122 states and 4531 transitions.
[2020-11-25 16:55:03,793 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 14
[2020-11-25 16:55:03,802 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4122 states to 4122 states and 4531 transitions.
[2020-11-25 16:55:03,802 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1279
[2020-11-25 16:55:03,802 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1279
[2020-11-25 16:55:03,802 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4122 states and 4531 transitions.
[2020-11-25 16:55:03,805 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:55:03,805 INFO  L728         BuchiCegarLoop]: Abstraction has 4122 states and 4531 transitions.
[2020-11-25 16:55:03,808 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4122 states and 4531 transitions.
[2020-11-25 16:55:03,830 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4122 to 3993.
[2020-11-25 16:55:03,831 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3993 states.
[2020-11-25 16:55:03,834 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3993 states to 3993 states and 4331 transitions.
[2020-11-25 16:55:03,834 INFO  L751         BuchiCegarLoop]: Abstraction has 3993 states and 4331 transitions.
[2020-11-25 16:55:03,834 INFO  L631         BuchiCegarLoop]: Abstraction has 3993 states and 4331 transitions.
[2020-11-25 16:55:03,834 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 16:55:03,834 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3993 states and 4331 transitions.
[2020-11-25 16:55:03,838 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 16:55:03,839 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:55:03,839 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:55:03,840 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:55:03,840 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_GEEQToken0 := false;
[L3]                 call_transfer_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND TRUE   choice == 23
[L5199]              gas := gas - 21000;
[L5200]  COND TRUE   gas >= 0
[L5201]              assume tokens_s647 >= 0 && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5202]              assume msgvalue_MSG == 0;
[L5203]  CALL        call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s647) && msgsender_MSG != to_s647) && tokens_s647 <= balances_GEEQToken[this][msgsender_MSG]) && balances_GEEQToken[this][to_s647] + tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s647 >= 0) && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s647] >= 0) && balances_GEEQToken[this][to_s647] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][msgsender_MSG] >= 0) && balances_GEEQToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_GEEQToken0 := true;
[L3]                 call_transfer_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1427]              havoc __exception;
[L1428]              revert := false;
[L1429]  COND TRUE   __exception
[L1430]              __tmp__Balance := Balance;
[L1431]              __tmp__DType := DType;
[L1432]              __tmp__Alloc := Alloc;
[L1433]              __tmp__balance_ADDR := balance_ADDR;
[L1434]              __tmp__M_Ref_int := M_Ref_int;
[L1435]              __tmp__sum_balances0 := sum_balances0;
[L1436]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1437]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1438]              __tmp__sum_allowed1 := sum_allowed1;
[L1439]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1440]              __tmp__Length := Length;
[L1441]              __tmp__now := now;
[L1442]              __tmp__owner_Owned := owner_Owned;
[L1443]              __tmp__newOwner_Owned := newOwner_Owned;
[L1444]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1445]              __tmp__name_GEEQToken := name_GEEQToken;
[L1446]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1447]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1448]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1449]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1450]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1451]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1452]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1453]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1454]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1455]  CALL        call success_s647 := transfer~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3489]  COND FALSE  !(__tmp__pauseOn_GEEQToken[this])
[L3493]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][msgsender_MSG], tokens_s647);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3493]  RET         call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][msgsender_MSG], tokens_s647);
[L3494]  COND FALSE  !(revert)
[L3497]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_GEEQToken[this][msgsender_MSG];
[L3498]              __tmp__balances_GEEQToken[this][msgsender_MSG] := __var_15;
[L3499]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_GEEQToken[this][msgsender_MSG];
[L3500]  CALL        call __var_16 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s647], tokens_s647);
[L2808]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2809]  COND FALSE  !(!(c_s26 >= a_s26))
[L2813]              c_s26 := c_s26;
[L3500]  RET         call __var_16 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s647], tokens_s647);
[L3501]  COND FALSE  !(revert)
[L3504]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_GEEQToken[this][to_s647];
[L3505]              __tmp__balances_GEEQToken[this][to_s647] := __var_16;
[L3506]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_GEEQToken[this][to_s647];
[L3507]              success_s647 := true;
[L1455]  RET         call success_s647 := transfer~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L1456]              assume revert || gas < 0;
[L5203]  RET         call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND TRUE   choice == 23
[L5199]              gas := gas - 21000;
[L5200]  COND TRUE   gas >= 0
[L5201]              assume tokens_s647 >= 0 && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5202]              assume msgvalue_MSG == 0;
[L5203]  CALL        call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s647) && msgsender_MSG != to_s647) && tokens_s647 <= balances_GEEQToken[this][msgsender_MSG]) && balances_GEEQToken[this][to_s647] + tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s647 >= 0) && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s647] >= 0) && balances_GEEQToken[this][to_s647] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][msgsender_MSG] >= 0) && balances_GEEQToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_GEEQToken0 := true;
[L3]                 call_transfer_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1427]              havoc __exception;
[L1428]              revert := false;
[L1429]  COND TRUE   __exception
[L1430]              __tmp__Balance := Balance;
[L1431]              __tmp__DType := DType;
[L1432]              __tmp__Alloc := Alloc;
[L1433]              __tmp__balance_ADDR := balance_ADDR;
[L1434]              __tmp__M_Ref_int := M_Ref_int;
[L1435]              __tmp__sum_balances0 := sum_balances0;
[L1436]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1437]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1438]              __tmp__sum_allowed1 := sum_allowed1;
[L1439]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1440]              __tmp__Length := Length;
[L1441]              __tmp__now := now;
[L1442]              __tmp__owner_Owned := owner_Owned;
[L1443]              __tmp__newOwner_Owned := newOwner_Owned;
[L1444]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1445]              __tmp__name_GEEQToken := name_GEEQToken;
[L1446]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1447]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1448]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1449]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1450]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1451]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1452]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1453]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1454]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1455]  CALL        call success_s647 := transfer~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3489]  COND FALSE  !(__tmp__pauseOn_GEEQToken[this])
[L3493]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][msgsender_MSG], tokens_s647);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3493]  RET         call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][msgsender_MSG], tokens_s647);
[L3494]  COND FALSE  !(revert)
[L3497]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_GEEQToken[this][msgsender_MSG];
[L3498]              __tmp__balances_GEEQToken[this][msgsender_MSG] := __var_15;
[L3499]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_GEEQToken[this][msgsender_MSG];
[L3500]  CALL        call __var_16 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s647], tokens_s647);
[L2808]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2809]  COND FALSE  !(!(c_s26 >= a_s26))
[L2813]              c_s26 := c_s26;
[L3500]  RET         call __var_16 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s647], tokens_s647);
[L3501]  COND FALSE  !(revert)
[L3504]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_GEEQToken[this][to_s647];
[L3505]              __tmp__balances_GEEQToken[this][to_s647] := __var_16;
[L3506]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_GEEQToken[this][to_s647];
[L3507]              success_s647 := true;
[L1455]  RET         call success_s647 := transfer~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L1456]              assume revert || gas < 0;
[L5203]  RET         call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:55:03,843 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:55:03,843 INFO  L82        PathProgramCache]: Analyzing trace with hash 2109884156, now seen corresponding path program 1 times
[2020-11-25 16:55:03,843 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:55:03,851 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:55:03,872 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:55:03,872 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:55:03,872 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 16:55:03,873 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:55:03,873 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 16:55:03,873 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 16:55:03,873 INFO  L87              Difference]: Start difference. First operand 3993 states and 4331 transitions. cyclomatic complexity: 346 Second operand 5 states.
[2020-11-25 16:55:04,436 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:55:04,436 INFO  L93              Difference]: Finished difference Result 4824 states and 5466 transitions.
[2020-11-25 16:55:04,436 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 16:55:04,437 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4824 states and 5466 transitions.
[2020-11-25 16:55:04,448 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 24
[2020-11-25 16:55:04,460 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4824 states to 3566 states and 4203 transitions.
[2020-11-25 16:55:04,460 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 812
[2020-11-25 16:55:04,461 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 812
[2020-11-25 16:55:04,461 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3566 states and 4203 transitions.
[2020-11-25 16:55:04,463 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:55:04,463 INFO  L728         BuchiCegarLoop]: Abstraction has 3566 states and 4203 transitions.
[2020-11-25 16:55:04,465 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3566 states and 4203 transitions.
[2020-11-25 16:55:04,486 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3566 to 2750.
[2020-11-25 16:55:04,486 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2750 states.
[2020-11-25 16:55:04,489 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2750 states to 2750 states and 3018 transitions.
[2020-11-25 16:55:04,489 INFO  L751         BuchiCegarLoop]: Abstraction has 2750 states and 3018 transitions.
[2020-11-25 16:55:04,489 INFO  L631         BuchiCegarLoop]: Abstraction has 2750 states and 3018 transitions.
[2020-11-25 16:55:04,489 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 16:55:04,489 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2750 states and 3018 transitions.
[2020-11-25 16:55:04,492 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 16:55:04,492 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:55:04,492 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:55:04,493 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:55:04,493 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_GEEQToken0 := false;
[L3]                 call_transfer_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND FALSE  !(choice == 21)
[L5219]  COND FALSE  !(choice == 20)
[L5225]  COND FALSE  !(choice == 19)
[L5231]  COND FALSE  !(choice == 18)
[L5237]  COND FALSE  !(choice == 17)
[L5243]  COND FALSE  !(choice == 16)
[L5249]  COND FALSE  !(choice == 15)
[L5255]  COND FALSE  !(choice == 14)
[L5261]  COND FALSE  !(choice == 13)
[L5267]  COND FALSE  !(choice == 12)
[L5273]  COND FALSE  !(choice == 11)
[L5279]  COND FALSE  !(choice == 10)
[L5285]  COND FALSE  !(choice == 9)
[L5291]  COND FALSE  !(choice == 8)
[L5298]  COND TRUE   choice == 7
[L5299]              gas := gas - 21000;
[L5300]  COND TRUE   gas >= 0
[L5301]              assume msgvalue_MSG == 0;
[L5302]  CALL        call pauseEnable_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L885]               havoc __exception;
[L886]               revert := false;
[L887]   COND FALSE  !(__exception)
[L916]   CALL        call pauseEnable_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4783]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L3242]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]              pauseOn_GEEQToken[this] := true;
[L916]   RET         call pauseEnable_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L917]               assume !revert && gas >= 0;
[L5302]  RET         call pauseEnable_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5360]  RET         call CorralChoice_GEEQToken(this);
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND TRUE   choice == 23
[L5199]              gas := gas - 21000;
[L5200]  COND TRUE   gas >= 0
[L5201]              assume tokens_s647 >= 0 && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5202]              assume msgvalue_MSG == 0;
[L5203]  CALL        call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s647) && msgsender_MSG != to_s647) && tokens_s647 <= balances_GEEQToken[this][msgsender_MSG]) && balances_GEEQToken[this][to_s647] + tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s647 >= 0) && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s647] >= 0) && balances_GEEQToken[this][to_s647] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][msgsender_MSG] >= 0) && balances_GEEQToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_GEEQToken0 := true;
[L3]                 call_transfer_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1427]              havoc __exception;
[L1428]              revert := false;
[L1429]  COND TRUE   __exception
[L1430]              __tmp__Balance := Balance;
[L1431]              __tmp__DType := DType;
[L1432]              __tmp__Alloc := Alloc;
[L1433]              __tmp__balance_ADDR := balance_ADDR;
[L1434]              __tmp__M_Ref_int := M_Ref_int;
[L1435]              __tmp__sum_balances0 := sum_balances0;
[L1436]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1437]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1438]              __tmp__sum_allowed1 := sum_allowed1;
[L1439]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1440]              __tmp__Length := Length;
[L1441]              __tmp__now := now;
[L1442]              __tmp__owner_Owned := owner_Owned;
[L1443]              __tmp__newOwner_Owned := newOwner_Owned;
[L1444]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1445]              __tmp__name_GEEQToken := name_GEEQToken;
[L1446]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1447]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1448]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1449]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1450]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1451]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1452]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1453]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1454]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1455]  CALL        call success_s647 := transfer~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3489]  COND TRUE   __tmp__pauseOn_GEEQToken[this]
[L3490]              revert := true;
[L1455]  RET         call success_s647 := transfer~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L1456]              assume revert || gas < 0;
[L5203]  RET         call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND FALSE  !(choice == 21)
[L5219]  COND FALSE  !(choice == 20)
[L5225]  COND FALSE  !(choice == 19)
[L5231]  COND FALSE  !(choice == 18)
[L5237]  COND FALSE  !(choice == 17)
[L5243]  COND FALSE  !(choice == 16)
[L5249]  COND FALSE  !(choice == 15)
[L5255]  COND FALSE  !(choice == 14)
[L5261]  COND FALSE  !(choice == 13)
[L5267]  COND FALSE  !(choice == 12)
[L5273]  COND FALSE  !(choice == 11)
[L5279]  COND FALSE  !(choice == 10)
[L5285]  COND FALSE  !(choice == 9)
[L5291]  COND FALSE  !(choice == 8)
[L5298]  COND TRUE   choice == 7
[L5299]              gas := gas - 21000;
[L5300]  COND TRUE   gas >= 0
[L5301]              assume msgvalue_MSG == 0;
[L5302]  CALL        call pauseEnable_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L885]               havoc __exception;
[L886]               revert := false;
[L887]   COND FALSE  !(__exception)
[L916]   CALL        call pauseEnable_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4783]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L3242]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]              pauseOn_GEEQToken[this] := true;
[L916]   RET         call pauseEnable_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L917]               assume !revert && gas >= 0;
[L5302]  RET         call pauseEnable_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:55:04,496 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:55:04,496 INFO  L82        PathProgramCache]: Analyzing trace with hash 155957990, now seen corresponding path program 1 times
[2020-11-25 16:55:04,497 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:55:04,507 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:55:04,520 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:55:04,590 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:55:04,590 INFO  L82        PathProgramCache]: Analyzing trace with hash -1968539690, now seen corresponding path program 1 times
[2020-11-25 16:55:04,590 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:55:04,594 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:55:04,597 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:55:04,605 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:55:04,605 INFO  L82        PathProgramCache]: Analyzing trace with hash -311612783, now seen corresponding path program 1 times
[2020-11-25 16:55:04,606 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:55:04,621 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:55:04,637 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2017 to 4027
[2020-11-25 16:55:04,851 WARN  L188               SmtUtils]: Spent 100.00 ms on a formula simplification that was a NOOP. DAG size: 157
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2473 to 4943
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 673 to 1327
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.003s / 0.006s total
Resizing node table from 8053 to 16103
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3137 to 6271
[2020-11-25 16:55:05,205 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 16:55:05,919 WARN  L188               SmtUtils]: Spent 102.00 ms on a formula simplification that was a NOOP. DAG size: 316
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-25 16:55:06,250 WARN  L188               SmtUtils]: Spent 108.00 ms on a formula simplification that was a NOOP. DAG size: 223
[2020-11-25 16:55:06,607 WARN  L188               SmtUtils]: Spent 354.00 ms on a formula simplification. DAG size of input: 276 DAG size of output: 264
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 6037 to 12073
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-25 16:55:06,776 WARN  L188               SmtUtils]: Spent 147.00 ms on a formula simplification. DAG size of input: 157 DAG size of output: 153
[2020-11-25 16:55:06,953 WARN  L188               SmtUtils]: Spent 175.00 ms on a formula simplification that was a NOOP. DAG size: 356
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-11-25 16:55:07,091 WARN  L188               SmtUtils]: Spent 133.00 ms on a formula simplification that was a NOOP. DAG size: 287
[2020-11-25 16:55:08,503 WARN  L188               SmtUtils]: Spent 1.41 s on a formula simplification. DAG size of input: 719 DAG size of output: 708
Garbage collection #1: 307 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 307 to 613
Garbage collection #2: 613 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 613 to 1223
Garbage collection #3: 1223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1223 to 2441
Garbage collection #4: 2441 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2441 to 4877
Garbage collection #5: 4877 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 4877 to 9749
Garbage collection #6: 9749 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 9749 to 19489
Garbage collection #7: 19489 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 19489 to 38977
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-11-25 16:55:08,658 WARN  L188               SmtUtils]: Spent 130.00 ms on a formula simplification. DAG size of input: 218 DAG size of output: 215
[2020-11-25 16:55:08,807 WARN  L188               SmtUtils]: Spent 130.00 ms on a formula simplification that was a NOOP. DAG size: 342
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-25 16:55:09,151 WARN  L188               SmtUtils]: Spent 280.00 ms on a formula simplification. DAG size of input: 344 DAG size of output: 343
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
[2020-11-25 16:55:09,328 WARN  L188               SmtUtils]: Spent 171.00 ms on a formula simplification that was a NOOP. DAG size: 339
[2020-11-25 16:55:09,340 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:55:09,357 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:55:09,365 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:55:09 BasicIcfg
[2020-11-25 16:55:09,365 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 16:55:09,365 INFO  L168              Benchmark]: Toolchain (without parser) took 19127.77 ms. Allocated memory was 1.0 GB in the beginning and 2.2 GB in the end (delta: 1.1 GB). Free memory was 935.2 MB in the beginning and 1.9 GB in the end (delta: -977.9 MB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
[2020-11-25 16:55:09,366 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 16:55:09,366 INFO  L168              Benchmark]: Boogie Preprocessor took 110.66 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 16:55:09,366 INFO  L168              Benchmark]: UtopiaSpecLang took 67.32 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 913.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 16:55:09,366 INFO  L168              Benchmark]: Boogie Printer took 17.92 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:55:09,366 INFO  L168              Benchmark]: RCFGBuilder took 731.56 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 774.0 MB in the end (delta: 134.3 MB). Peak memory consumption was 134.3 MB. Max. memory is 15.3 GB.
[2020-11-25 16:55:09,367 INFO  L168              Benchmark]: UtopiaLTL2Aut took 34.48 ms. Allocated memory is still 1.0 GB. Free memory was 774.0 MB in the beginning and 770.4 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 16:55:09,367 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1291.46 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 195.6 MB). Free memory was 770.4 MB in the beginning and 843.7 MB in the end (delta: -73.3 MB). Peak memory consumption was 157.9 MB. Max. memory is 15.3 GB.
[2020-11-25 16:55:09,367 INFO  L168              Benchmark]: BlockEncodingV2 took 156.60 ms. Allocated memory is still 1.2 GB. Free memory was 843.7 MB in the beginning and 777.6 MB in the end (delta: 66.1 MB). Peak memory consumption was 66.1 MB. Max. memory is 15.3 GB.
[2020-11-25 16:55:09,368 INFO  L168              Benchmark]: BuchiAutomizer took 16714.67 ms. Allocated memory was 1.2 GB in the beginning and 2.2 GB in the end (delta: 935.9 MB). Free memory was 777.6 MB in the beginning and 1.9 GB in the end (delta: -1.1 GB). Peak memory consumption was 835.8 MB. Max. memory is 15.3 GB.
[2020-11-25 16:55:09,371 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4720 locations, 8035 edges
  - StatisticsResult: Encoded RCFG
    4670 locations, 7905 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 110.66 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 67.32 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 913.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 17.92 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 731.56 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 774.0 MB in the end (delta: 134.3 MB). Peak memory consumption was 134.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 34.48 ms. Allocated memory is still 1.0 GB. Free memory was 774.0 MB in the beginning and 770.4 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1291.46 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 195.6 MB). Free memory was 770.4 MB in the beginning and 843.7 MB in the end (delta: -73.3 MB). Peak memory consumption was 157.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 156.60 ms. Allocated memory is still 1.2 GB. Free memory was 843.7 MB in the beginning and 777.6 MB in the end (delta: 66.1 MB). Peak memory consumption was 66.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 16714.67 ms. Allocated memory was 1.2 GB in the beginning and 2.2 GB in the end (delta: 935.9 MB). Free memory was 777.6 MB in the beginning and 1.9 GB in the end (delta: -1.1 GB). Peak memory consumption was 835.8 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1989 locations, 2486 edges
  - StatisticsResult: BuchiProgram size
    4720 locations, 8035 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.7 modules have a trivial ranking function, the largest among these consists of 21 locations. The remainder module has 2750 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 16.6s and 8 iterations.  TraceHistogramMax:2. Analysis of lassos took 5.8s. Construction of modules took 7.7s. BÃ¼chi inclusion checks took 2.3s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 7 MinimizatonAttempts, 4923 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 3993 states and ocurred in iteration 6.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 30276 SDtfs, 35456 SDslu, 60760 SDs, 0 SdLazy, 121572 SolverSat, 6281 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 7.7s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(1164884506) = (new GEEQToken)({from : 1164884509});
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
GEEQToken(1164884506).pauseEnable.gas(3979002)({from : 1164884509});
[L885]               havoc __exception;
[L886]               revert := false;
[L887]   COND FALSE  !(__exception)
[L916]   CALL        call pauseEnable_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4783]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L3242]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]              pauseOn_GEEQToken[this] := true;
[L916]   RET         call pauseEnable_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L917]               assume !revert && gas >= 0;
[L5302]  RET         call pauseEnable_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
GEEQToken(1164884506).transfer~address~uint256.gas(3979003)({from : 1164884505, to : 1164884499, tokens : 0});
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume (((((((((p1 != msgsender_MSG && p1 != to_s647) && msgsender_MSG != to_s647) && tokens_s647 <= balances_GEEQToken[this][msgsender_MSG]) && balances_GEEQToken[this][to_s647] + tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s647 >= 0) && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s647] >= 0) && balances_GEEQToken[this][to_s647] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][msgsender_MSG] >= 0) && balances_GEEQToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                call_transfer_GEEQToken0 := true;
[L3]                call_transfer_GEEQToken0 := false;
[L3]                revert := revert_hold;
[L1427]             havoc __exception;
[L1428]             revert := false;
[L1429]  COND TRUE  __exception
[L1430]             __tmp__Balance := Balance;
[L1431]             __tmp__DType := DType;
[L1432]             __tmp__Alloc := Alloc;
[L1433]             __tmp__balance_ADDR := balance_ADDR;
[L1434]             __tmp__M_Ref_int := M_Ref_int;
[L1435]             __tmp__sum_balances0 := sum_balances0;
[L1436]             __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1437]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1438]             __tmp__sum_allowed1 := sum_allowed1;
[L1439]             __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1440]             __tmp__Length := Length;
[L1441]             __tmp__now := now;
[L1442]             __tmp__owner_Owned := owner_Owned;
[L1443]             __tmp__newOwner_Owned := newOwner_Owned;
[L1444]             __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1445]             __tmp__name_GEEQToken := name_GEEQToken;
[L1446]             __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1447]             __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1448]             __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1449]             __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1450]             __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1451]             __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1452]             __tmp__balances_GEEQToken := balances_GEEQToken;
[L1453]             __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1454]             __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1455]  CALL       call success_s647 := transfer~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3489]  COND TRUE  __tmp__pauseOn_GEEQToken[this]
[L3490]             revert := true;
[L1455]  RET        call success_s647 := transfer~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L1456]             assume revert || gas < 0;
[L5203]  RET        call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);

Loop:
GEEQToken(1164884506).pauseEnable.gas(3979001)({from : 1164884509});
[L885]               havoc __exception;
[L886]               revert := false;
[L887]   COND FALSE  !(__exception)
[L916]   CALL        call pauseEnable_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4783]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L3242]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]              pauseOn_GEEQToken[this] := true;
[L916]   RET         call pauseEnable_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L917]               assume !revert && gas >= 0;
[L5302]  RET         call pauseEnable_GEEQToken(this, msgsender_MSG, msgvalue_MSG);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
