This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 11:53:30,085 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 11:53:30,086 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 11:53:30,095 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 11:53:30,095 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 11:53:30,096 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 11:53:30,097 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 11:53:30,098 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 11:53:30,100 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 11:53:30,100 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 11:53:30,101 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 11:53:30,101 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 11:53:30,102 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 11:53:30,102 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 11:53:30,103 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 11:53:30,104 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 11:53:30,104 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 11:53:30,105 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 11:53:30,106 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 11:53:30,107 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 11:53:30,107 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 11:53:30,108 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 11:53:30,109 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 11:53:30,109 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 11:53:30,109 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 11:53:30,109 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 11:53:30,110 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 11:53:30,110 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 11:53:30,110 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 11:53:30,110 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 11:53:30,111 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 11:53:30,111 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 11:53:30,111 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 11:53:30,112 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 11:53:30,112 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 11:53:30,112 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 11:53:30,113 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 11:53:30,113 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 11:53:30,113 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 11:53:30,113 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 11:53:30,114 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 11:53:30,114 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 11:53:30,120 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 11:53:30,120 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 11:53:30,120 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 11:53:30,120 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 11:53:30,121 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 11:53:30,121 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 11:53:30,121 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 11:53:30,121 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 11:53:30,121 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 11:53:30,121 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 11:53:30,121 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 11:53:30,121 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 11:53:30,121 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 11:53:30,121 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 11:53:30,121 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 11:53:30,121 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 11:53:30,121 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 11:53:30,122 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 11:53:30,122 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 11:53:30,122 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 11:53:30,122 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 11:53:30,122 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 11:53:30,122 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 11:53:30,122 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 11:53:30,122 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 11:53:30,122 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 11:53:30,139 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 11:53:30,153 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 11:53:30,155 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 11:53:30,156 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 11:53:30,157 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 11:53:30,157 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self-fail.bpl
[2020-11-25 11:53:30,157 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self-fail.bpl'
[2020-11-25 11:53:30,251 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 11:53:30,253 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 11:53:30,253 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 11:53:30,253 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 11:53:30,253 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 11:53:30,270 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:53:30" (1/1) ...
[2020-11-25 11:53:30,271 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:53:30" (1/1) ...
[2020-11-25 11:53:30,303 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:53:30" (1/1) ...
[2020-11-25 11:53:30,304 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:53:30" (1/1) ...
[2020-11-25 11:53:30,325 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:53:30" (1/1) ...
[2020-11-25 11:53:30,338 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:53:30" (1/1) ...
[2020-11-25 11:53:30,347 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:53:30" (1/1) ...
[2020-11-25 11:53:30,359 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 11:53:30,359 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 11:53:30,359 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 11:53:30,361 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 11:53:30,365 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:53:30" (1/1) ...
[2020-11-25 11:53:30,382 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transfer(to, value), msg.sender == to && value > _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-25 11:53:30,387 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transfer(to, value), msg.sender == to && value > _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-25 11:53:30,394 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transfer(to, value), msg.sender == to && value > _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-25 11:53:30,400 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==recipient_s255 && amount_s255>_balances_ERC20[this][msg.sender] ) && amount_s255>=0 ) && amount_s255<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s255]>=0 ) && _balances_ERC20[this][recipient_s255]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IdentifierExpression[recipient_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],BinaryExpression[COMPGT,IdentifierExpression[amount_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 11:53:30,406 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transfer(to, value), msg.sender == to && value > _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-25 11:53:30,407 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC200) ==> ( <>AP(fail_transfer_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 11:53:30,418 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:53:30 PropertyContainer
[2020-11-25 11:53:30,418 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 11:53:30,418 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 11:53:30,418 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 11:53:30,418 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 11:53:30,419 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:53:30" (1/2) ...
[2020-11-25 11:53:30,419 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 11:53:30,419 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 11:53:30,437 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:53:30" (2/2) ...
[2020-11-25 11:53:30,437 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 11:53:30,437 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 11:53:30,437 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 11:53:30,437 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 11:53:30,438 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:53:30" (1/2) ...
[2020-11-25 11:53:30,490 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 11:53:30,490 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 11:53:30,490 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 11:53:30,490 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 11:53:30,490 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 11:53:30,490 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 11:53:30,491 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 11:53:30,491 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 11:53:30,491 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 11:53:30,491 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 11:53:30,491 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 11:53:30,491 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 11:53:30,491 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 11:53:30,491 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 11:53:30,491 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 11:53:30,492 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 11:53:30,492 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 11:53:30,492 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 11:53:30,492 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 11:53:30,492 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 11:53:30,493 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 11:53:30,493 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 11:53:30,493 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 11:53:30,493 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 11:53:30,493 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 11:53:30,493 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 11:53:30,493 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 11:53:30,493 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 11:53:30,493 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 11:53:30,493 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 11:53:30,494 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 11:53:30,494 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 11:53:30,494 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 11:53:30,494 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 11:53:30,494 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 11:53:30,494 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 11:53:30,494 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 11:53:30,494 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 11:53:30,494 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 11:53:30,494 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 11:53:30,495 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 11:53:30,495 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 11:53:30,495 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 11:53:30,495 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 11:53:30,495 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 11:53:30,495 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 11:53:30,495 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 11:53:30,495 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 11:53:30,495 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 11:53:30,495 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 11:53:30,496 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 11:53:30,496 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 11:53:30,496 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 11:53:30,496 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 11:53:30,496 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 11:53:30,496 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 11:53:30,496 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 11:53:30,496 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 11:53:30,496 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 11:53:30,496 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 11:53:30,496 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 11:53:30,497 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 11:53:30,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 11:53:30,497 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 11:53:30,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 11:53:30,497 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 11:53:30,497 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 11:53:30,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 11:53:30,497 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-25 11:53:30,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-25 11:53:30,497 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 11:53:30,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 11:53:30,498 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken_NoBaseCtor__success
[2020-11-25 11:53:30,498 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken
[2020-11-25 11:53:30,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken
[2020-11-25 11:53:30,498 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CabGoldToken
[2020-11-25 11:53:30,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CabGoldToken
[2020-11-25 11:53:30,498 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CabGoldToken
[2020-11-25 11:53:30,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CabGoldToken
[2020-11-25 11:53:30,498 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CabGoldToken
[2020-11-25 11:53:30,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CabGoldToken
[2020-11-25 11:53:30,499 INFO  L130     BoogieDeclarations]: Found specification of procedure active_CabGoldToken
[2020-11-25 11:53:30,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure active_CabGoldToken
[2020-11-25 11:53:30,499 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 11:53:30,499 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 11:53:30,499 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 11:53:30,499 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 11:53:30,499 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 11:53:30,499 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 11:53:30,499 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 11:53:30,499 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 11:53:30,500 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 11:53:30,500 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 11:53:30,500 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 11:53:30,500 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 11:53:30,500 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 11:53:30,500 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 11:53:30,500 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 11:53:30,500 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 11:53:30,500 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-25 11:53:30,500 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-25 11:53:30,500 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_CabGoldToken
[2020-11-25 11:53:30,501 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 11:53:30,501 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 11:53:30,501 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 11:53:30,501 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 11:53:30,501 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 11:53:30,501 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 11:53:30,501 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 11:53:30,501 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 11:53:30,501 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 11:53:30,501 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 11:53:30,502 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 11:53:30,502 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 11:53:30,502 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 11:53:30,502 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 11:53:30,502 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 11:53:30,502 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 11:53:30,502 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 11:53:30,502 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 11:53:30,502 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 11:53:30,502 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 11:53:30,502 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 11:53:30,503 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 11:53:30,503 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 11:53:30,503 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 11:53:30,503 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 11:53:30,503 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 11:53:30,503 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 11:53:30,503 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 11:53:30,503 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 11:53:30,503 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:53:30,503 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:53:30,504 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:53:30,504 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:53:30,504 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 11:53:30,504 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 11:53:30,504 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 11:53:30,504 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 11:53:30,504 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 11:53:30,504 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 11:53:30,504 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 11:53:30,504 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 11:53:30,505 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 11:53:30,505 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 11:53:30,505 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 11:53:30,505 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 11:53:30,505 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 11:53:30,505 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 11:53:30,505 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 11:53:30,505 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 11:53:30,505 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 11:53:30,505 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 11:53:30,506 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 11:53:30,506 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 11:53:30,506 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 11:53:30,506 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 11:53:30,506 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 11:53:30,506 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 11:53:30,506 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 11:53:30,506 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 11:53:30,506 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 11:53:30,506 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 11:53:30,506 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 11:53:30,506 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 11:53:30,506 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 11:53:30,506 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 11:53:30,507 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 11:53:30,507 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 11:53:30,507 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken_NoBaseCtor__fail
[2020-11-25 11:53:30,507 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken__success
[2020-11-25 11:53:30,507 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken__fail
[2020-11-25 11:53:30,507 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CabGoldToken__success
[2020-11-25 11:53:30,507 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CabGoldToken__fail
[2020-11-25 11:53:30,507 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CabGoldToken__success
[2020-11-25 11:53:30,507 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CabGoldToken__fail
[2020-11-25 11:53:30,507 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CabGoldToken__success
[2020-11-25 11:53:30,507 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CabGoldToken__fail
[2020-11-25 11:53:30,507 INFO  L130     BoogieDeclarations]: Found specification of procedure active_CabGoldToken__success
[2020-11-25 11:53:30,507 INFO  L130     BoogieDeclarations]: Found specification of procedure active_CabGoldToken__fail
[2020-11-25 11:53:30,507 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 11:53:30,507 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 11:53:30,508 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 11:53:30,508 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 11:53:30,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 11:53:30,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 11:53:30,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 11:53:30,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 11:53:30,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 11:53:30,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 11:53:30,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 11:53:30,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 11:53:30,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 11:53:30,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 11:53:30,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 11:53:30,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 11:53:30,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 11:53:30,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 11:53:30,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 11:53:30,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 11:53:30,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 11:53:30,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 11:53:30,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 11:53:30,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 11:53:30,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 11:53:30,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 11:53:30,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 11:53:30,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 11:53:30,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 11:53:30,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 11:53:30,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 11:53:30,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 11:53:30,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 11:53:30,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 11:53:30,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 11:53:30,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 11:53:30,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 11:53:30,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 11:53:30,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 11:53:30,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 11:53:30,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 11:53:30,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 11:53:30,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:53:30,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:53:30,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:53:30,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:53:30,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 11:53:30,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 11:53:30,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 11:53:30,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 11:53:30,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 11:53:30,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 11:53:30,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 11:53:30,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 11:53:30,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 11:53:30,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 11:53:30,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 11:53:30,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 11:53:30,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 11:53:30,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 11:53:30,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 11:53:30,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 11:53:30,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 11:53:30,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 11:53:30,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 11:53:30,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 11:53:30,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 11:53:30,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 11:53:30,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 11:53:30,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 11:53:30,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 11:53:30,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 11:53:30,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 11:53:30,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 11:53:30,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 11:53:30,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 11:53:30,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 11:53:30,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 11:53:30,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 11:53:30,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 11:53:30,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 11:53:30,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 11:53:30,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 11:53:30,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 11:53:30,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 11:53:30,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 11:53:30,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 11:53:30,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 11:53:30,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 11:53:30,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 11:53:30,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 11:53:30,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 11:53:30,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 11:53:30,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 11:53:30,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken_NoBaseCtor__fail
[2020-11-25 11:53:30,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken_NoBaseCtor__success
[2020-11-25 11:53:30,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken__fail
[2020-11-25 11:53:30,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken__success
[2020-11-25 11:53:30,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CabGoldToken__fail
[2020-11-25 11:53:30,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CabGoldToken__success
[2020-11-25 11:53:30,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CabGoldToken__fail
[2020-11-25 11:53:30,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CabGoldToken__success
[2020-11-25 11:53:30,515 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CabGoldToken__fail
[2020-11-25 11:53:30,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CabGoldToken__success
[2020-11-25 11:53:30,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure active_CabGoldToken__fail
[2020-11-25 11:53:30,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure active_CabGoldToken__success
[2020-11-25 11:53:30,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 11:53:30,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 11:53:30,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 11:53:30,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 11:53:30,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 11:53:30,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 11:53:30,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 11:53:30,516 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 11:53:30,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 11:53:30,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 11:53:30,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 11:53:30,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 11:53:30,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 11:53:30,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 11:53:30,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 11:53:30,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 11:53:30,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 11:53:30,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 11:53:30,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 11:53:30,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 11:53:30,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-25 11:53:30,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-25 11:53:30,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_CabGoldToken
[2020-11-25 11:53:30,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 11:53:30,518 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 11:53:30,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 11:53:30,817 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:53:30,817 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:53:31,408 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 11:53:31,408 INFO  L286             CfgBuilder]: Removed 8 assue(true) statements.
[2020-11-25 11:53:31,411 INFO  L202        PluginConnector]: Adding new model CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:53:31 BoogieIcfgContainer
[2020-11-25 11:53:31,411 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:53:30" (2/2) ...
[2020-11-25 11:53:31,412 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 11:53:31,412 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@70c683d3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:53:31, skipping insertion in model container
[2020-11-25 11:53:31,412 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 11:53:31,413 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 11:53:31,413 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 11:53:31,415 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 11:53:31,416 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:53:30" (1/3) ...
[2020-11-25 11:53:31,416 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@9502d6f and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:53:31, skipping insertion in model container
[2020-11-25 11:53:31,416 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:53:30" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 11:53:31,456 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:53:31 NWAContainer
[2020-11-25 11:53:31,456 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 11:53:31,456 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 11:53:31,457 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 11:53:31,457 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 11:53:31,458 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:53:31" (3/4) ...
[2020-11-25 11:53:31,459 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@ee35963 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:53:31, skipping insertion in model container
[2020-11-25 11:53:31,459 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:53:31" (4/4) ...
[2020-11-25 11:53:31,462 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 11:53:31,467 INFO  L110   BuchiProductObserver]: Initial RCFG 2283 locations, 3356 edges
[2020-11-25 11:53:31,467 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 11:53:31,479 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 11:53:33,199 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 11:53:33,206 INFO  L110   BuchiProductObserver]: BuchiProgram size 5924 locations, 11060 edges
[2020-11-25 11:53:33,207 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:53:33 BoogieIcfgContainer
[2020-11-25 11:53:33,207 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 11:53:33,207 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 11:53:33,207 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 11:53:33,208 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 11:53:33,209 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:53:33" (1/1) ...
[2020-11-25 11:53:33,317 INFO  L313           BlockEncoder]: Initial Icfg 5924 locations, 11060 edges
[2020-11-25 11:53:33,317 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 11:53:33,318 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 11:53:33,318 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 11:53:33,318 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 11:53:33,331 INFO  L70    emoveInfeasibleEdges]: Removed 165 edges and 20 locations because of local infeasibility
[2020-11-25 11:53:33,343 INFO  L70        RemoveSinkStates]: Removed 190 edges and 110 locations by removing sink states
[2020-11-25 11:53:33,361 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 11:53:33,366 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 11:53:33,370 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 11:53:33,370 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 11:53:33,373 INFO  L313           BlockEncoder]: Encoded RCFG 5766 locations, 10664 edges
[2020-11-25 11:53:33,374 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 11:53:33 BasicIcfg
[2020-11-25 11:53:33,374 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 11:53:33,374 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 11:53:33,374 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 11:53:33,376 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 11:53:33,376 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:53:33,376 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:53:30" (1/6) ...
[2020-11-25 11:53:33,378 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6a8b548c and model type CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:53:33, skipping insertion in model container
[2020-11-25 11:53:33,378 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:53:33,378 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:53:30" (2/6) ...
[2020-11-25 11:53:33,379 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6a8b548c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:53:33, skipping insertion in model container
[2020-11-25 11:53:33,379 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:53:33,379 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:53:31" (3/6) ...
[2020-11-25 11:53:33,379 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6a8b548c and model type CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 11:53:33, skipping insertion in model container
[2020-11-25 11:53:33,379 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:53:33,379 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:53:31" (4/6) ...
[2020-11-25 11:53:33,379 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6a8b548c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:53:33, skipping insertion in model container
[2020-11-25 11:53:33,379 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:53:33,379 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:53:33" (5/6) ...
[2020-11-25 11:53:33,380 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6a8b548c and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 11:53:33, skipping insertion in model container
[2020-11-25 11:53:33,380 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:53:33,380 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 11:53:33" (6/6) ...
[2020-11-25 11:53:33,381 INFO  L404   chiAutomizerObserver]: Analyzing ICFG CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-self-fail.bpl_BEv2
[2020-11-25 11:53:33,415 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 11:53:33,415 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 11:53:33,415 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 11:53:33,415 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 11:53:33,415 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 11:53:33,415 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 11:53:33,415 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 11:53:33,415 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 11:53:33,415 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 11:53:33,461 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5766 states.
[2020-11-25 11:53:33,514 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:53:33,515 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:53:33,515 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:53:33,522 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:53:33,522 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:53:33,522 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 11:53:33,523 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5766 states.
[2020-11-25 11:53:33,547 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:53:33,547 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:53:33,547 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:53:33,548 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:53:33,549 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND TRUE   revert
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND TRUE   choice == 18
[L6338]              gas := gas - 21000;
[L6339]  COND FALSE  !(gas >= 0)
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:53:33,562 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:53:33,563 INFO  L82        PathProgramCache]: Analyzing trace with hash 1433458007, now seen corresponding path program 1 times
[2020-11-25 11:53:33,567 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:53:33,587 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:53:33,632 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:53:33,634 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:53:33,634 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 11:53:33,974 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:53:33,983 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 11:53:33,984 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 11:53:33,985 INFO  L87              Difference]: Start difference. First operand 5766 states. Second operand 4 states.
[2020-11-25 11:53:34,622 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:53:34,622 INFO  L93              Difference]: Finished difference Result 3426 states and 4170 transitions.
[2020-11-25 11:53:34,623 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 11:53:34,624 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3426 states and 4170 transitions.
[2020-11-25 11:53:34,647 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:53:34,673 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3426 states to 3426 states and 4170 transitions.
[2020-11-25 11:53:34,674 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 11:53:34,677 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 843
[2020-11-25 11:53:34,677 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3426 states and 4170 transitions.
[2020-11-25 11:53:34,689 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:53:34,689 INFO  L728         BuchiCegarLoop]: Abstraction has 3426 states and 4170 transitions.
[2020-11-25 11:53:34,705 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3426 states and 4170 transitions.
[2020-11-25 11:53:34,761 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3426 to 3426.
[2020-11-25 11:53:34,762 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3426 states.
[2020-11-25 11:53:34,769 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3426 states to 3426 states and 4170 transitions.
[2020-11-25 11:53:34,770 INFO  L751         BuchiCegarLoop]: Abstraction has 3426 states and 4170 transitions.
[2020-11-25 11:53:34,771 INFO  L631         BuchiCegarLoop]: Abstraction has 3426 states and 4170 transitions.
[2020-11-25 11:53:34,771 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 11:53:34,771 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3426 states and 4170 transitions.
[2020-11-25 11:53:34,780 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:53:34,780 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:53:34,780 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:53:34,782 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:53:34,782 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND TRUE   revert
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 > _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND TRUE   DType[this] == CabGoldToken
[L2860]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND TRUE   !(sender_s435 != null)
[L3246]              revert := true;
[L2860]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2861]  COND TRUE   revert
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 > _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND TRUE   DType[this] == CabGoldToken
[L2860]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND TRUE   !(sender_s435 != null)
[L3246]              revert := true;
[L2860]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2861]  COND TRUE   revert
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:53:34,785 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:53:34,786 INFO  L82        PathProgramCache]: Analyzing trace with hash 396211040, now seen corresponding path program 1 times
[2020-11-25 11:53:34,786 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:53:34,797 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:53:34,817 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:53:34,817 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:53:34,817 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 11:53:34,818 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:53:34,818 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 11:53:34,818 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 11:53:34,819 INFO  L87              Difference]: Start difference. First operand 3426 states and 4170 transitions. cyclomatic complexity: 746 Second operand 3 states.
[2020-11-25 11:53:34,932 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:53:34,932 INFO  L93              Difference]: Finished difference Result 4704 states and 5763 transitions.
[2020-11-25 11:53:34,932 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 11:53:34,933 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4704 states and 5763 transitions.
[2020-11-25 11:53:34,949 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:53:34,969 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4704 states to 4704 states and 5763 transitions.
[2020-11-25 11:53:34,970 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1209
[2020-11-25 11:53:34,971 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1209
[2020-11-25 11:53:34,971 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4704 states and 5763 transitions.
[2020-11-25 11:53:34,978 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:53:34,978 INFO  L728         BuchiCegarLoop]: Abstraction has 4704 states and 5763 transitions.
[2020-11-25 11:53:34,983 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4704 states and 5763 transitions.
[2020-11-25 11:53:35,033 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4704 to 4231.
[2020-11-25 11:53:35,034 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4231 states.
[2020-11-25 11:53:35,039 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4231 states to 4231 states and 5194 transitions.
[2020-11-25 11:53:35,040 INFO  L751         BuchiCegarLoop]: Abstraction has 4231 states and 5194 transitions.
[2020-11-25 11:53:35,040 INFO  L631         BuchiCegarLoop]: Abstraction has 4231 states and 5194 transitions.
[2020-11-25 11:53:35,040 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 11:53:35,040 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4231 states and 5194 transitions.
[2020-11-25 11:53:35,048 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:53:35,048 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:53:35,048 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:53:35,050 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:53:35,050 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND TRUE   revert
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND TRUE   revert
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 > _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND FALSE  !(DType[this] == CabGoldToken)
[L2864]  COND TRUE   DType[this] == ERC20Burnable
[L2865]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND TRUE   !(sender_s435 != null)
[L3246]              revert := true;
[L2865]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2866]  COND TRUE   revert
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 > _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND FALSE  !(DType[this] == CabGoldToken)
[L2864]  COND TRUE   DType[this] == ERC20Burnable
[L2865]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND TRUE   !(sender_s435 != null)
[L3246]              revert := true;
[L2865]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2866]  COND TRUE   revert
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:53:35,052 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:53:35,052 INFO  L82        PathProgramCache]: Analyzing trace with hash -1705879943, now seen corresponding path program 1 times
[2020-11-25 11:53:35,053 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:53:35,058 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:53:35,071 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:53:35,071 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:53:35,071 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 11:53:35,072 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:53:35,072 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 11:53:35,072 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 11:53:35,072 INFO  L87              Difference]: Start difference. First operand 4231 states and 5194 transitions. cyclomatic complexity: 965 Second operand 3 states.
[2020-11-25 11:53:35,152 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:53:35,152 INFO  L93              Difference]: Finished difference Result 4707 states and 5495 transitions.
[2020-11-25 11:53:35,152 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 11:53:35,152 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4707 states and 5495 transitions.
[2020-11-25 11:53:35,163 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:53:35,177 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4707 states to 4259 states and 4939 transitions.
[2020-11-25 11:53:35,177 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1058
[2020-11-25 11:53:35,178 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1101
[2020-11-25 11:53:35,178 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4259 states and 4939 transitions.
[2020-11-25 11:53:35,182 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:53:35,182 INFO  L728         BuchiCegarLoop]: Abstraction has 4259 states and 4939 transitions.
[2020-11-25 11:53:35,186 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4259 states and 4939 transitions.
[2020-11-25 11:53:35,226 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4259 to 3867.
[2020-11-25 11:53:35,226 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3867 states.
[2020-11-25 11:53:35,231 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3867 states to 3867 states and 4451 transitions.
[2020-11-25 11:53:35,231 INFO  L751         BuchiCegarLoop]: Abstraction has 3867 states and 4451 transitions.
[2020-11-25 11:53:35,232 INFO  L631         BuchiCegarLoop]: Abstraction has 3867 states and 4451 transitions.
[2020-11-25 11:53:35,232 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 11:53:35,232 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3867 states and 4451 transitions.
[2020-11-25 11:53:35,238 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:53:35,239 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:53:35,239 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:53:35,242 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:53:35,242 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND FALSE  !(DType[this] == CabGoldToken)
[L3681]  COND FALSE  !(DType[this] == ERC20Mintable)
[L3686]  COND TRUE   DType[this] == MinterRole
[L3687]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3687]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3688]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND FALSE  !(DType[this] == CabGoldToken)
[L3681]  COND FALSE  !(DType[this] == ERC20Mintable)
[L3686]  COND TRUE   DType[this] == MinterRole
[L3687]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3687]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3688]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 > _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND FALSE  !(DType[this] == CabGoldToken)
[L2864]  COND TRUE   DType[this] == ERC20Burnable
[L2865]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2865]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2866]  COND FALSE  !(revert)
[L2882]              __ret_0_ := true;
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 > _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND FALSE  !(DType[this] == CabGoldToken)
[L2864]  COND TRUE   DType[this] == ERC20Burnable
[L2865]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2865]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2866]  COND FALSE  !(revert)
[L2882]              __ret_0_ := true;
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:53:35,247 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:53:35,247 INFO  L82        PathProgramCache]: Analyzing trace with hash -912618948, now seen corresponding path program 1 times
[2020-11-25 11:53:35,248 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:53:35,259 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:53:35,367 INFO  L134       CoverageAnalysis]: Checked inductivity of 267 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 258 trivial. 0 not checked.
[2020-11-25 11:53:35,368 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 11:53:35,368 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-11-25 11:53:35,368 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:53:35,368 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 11:53:35,368 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 11:53:35,369 INFO  L87              Difference]: Start difference. First operand 3867 states and 4451 transitions. cyclomatic complexity: 586 Second operand 6 states.
[2020-11-25 11:53:35,465 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:53:35,465 INFO  L93              Difference]: Finished difference Result 3886 states and 4473 transitions.
[2020-11-25 11:53:35,465 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 11:53:35,465 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3886 states and 4473 transitions.
[2020-11-25 11:53:35,474 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:53:35,487 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3886 states to 3873 states and 4457 transitions.
[2020-11-25 11:53:35,488 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1054
[2020-11-25 11:53:35,488 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1054
[2020-11-25 11:53:35,488 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3873 states and 4457 transitions.
[2020-11-25 11:53:35,492 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:53:35,492 INFO  L728         BuchiCegarLoop]: Abstraction has 3873 states and 4457 transitions.
[2020-11-25 11:53:35,495 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3873 states and 4457 transitions.
[2020-11-25 11:53:35,523 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3873 to 3873.
[2020-11-25 11:53:35,524 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3873 states.
[2020-11-25 11:53:35,529 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3873 states to 3873 states and 4457 transitions.
[2020-11-25 11:53:35,529 INFO  L751         BuchiCegarLoop]: Abstraction has 3873 states and 4457 transitions.
[2020-11-25 11:53:35,529 INFO  L631         BuchiCegarLoop]: Abstraction has 3873 states and 4457 transitions.
[2020-11-25 11:53:35,529 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 11:53:35,529 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3873 states and 4457 transitions.
[2020-11-25 11:53:35,533 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:53:35,534 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:53:35,534 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:53:35,536 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:53:35,536 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 > _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND FALSE  !(DType[this] == CabGoldToken)
[L2864]  COND TRUE   DType[this] == ERC20Burnable
[L2865]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2865]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2866]  COND FALSE  !(revert)
[L2882]              __ret_0_ := true;
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 > _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND FALSE  !(DType[this] == CabGoldToken)
[L2864]  COND TRUE   DType[this] == ERC20Burnable
[L2865]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2865]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2866]  COND FALSE  !(revert)
[L2882]              __ret_0_ := true;
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:53:35,540 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:53:35,540 INFO  L82        PathProgramCache]: Analyzing trace with hash 1244137212, now seen corresponding path program 1 times
[2020-11-25 11:53:35,541 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:53:35,554 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:53:35,621 INFO  L134       CoverageAnalysis]: Checked inductivity of 265 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 265 trivial. 0 not checked.
[2020-11-25 11:53:35,621 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:53:35,621 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 11:53:35,621 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:53:35,621 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 11:53:35,621 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 11:53:35,622 INFO  L87              Difference]: Start difference. First operand 3873 states and 4457 transitions. cyclomatic complexity: 586 Second operand 6 states.
[2020-11-25 11:53:35,724 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:53:35,724 INFO  L93              Difference]: Finished difference Result 3893 states and 4476 transitions.
[2020-11-25 11:53:35,724 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 11:53:35,724 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3893 states and 4476 transitions.
[2020-11-25 11:53:35,736 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:53:35,757 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3893 states to 3843 states and 4415 transitions.
[2020-11-25 11:53:35,757 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1048
[2020-11-25 11:53:35,758 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1048
[2020-11-25 11:53:35,758 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3843 states and 4415 transitions.
[2020-11-25 11:53:35,763 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:53:35,763 INFO  L728         BuchiCegarLoop]: Abstraction has 3843 states and 4415 transitions.
[2020-11-25 11:53:35,768 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3843 states and 4415 transitions.
[2020-11-25 11:53:35,805 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3843 to 3843.
[2020-11-25 11:53:35,806 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3843 states.
[2020-11-25 11:53:35,812 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3843 states to 3843 states and 4415 transitions.
[2020-11-25 11:53:35,812 INFO  L751         BuchiCegarLoop]: Abstraction has 3843 states and 4415 transitions.
[2020-11-25 11:53:35,812 INFO  L631         BuchiCegarLoop]: Abstraction has 3843 states and 4415 transitions.
[2020-11-25 11:53:35,812 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 11:53:35,812 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3843 states and 4415 transitions.
[2020-11-25 11:53:35,821 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:53:35,821 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:53:35,821 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:53:35,825 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:53:35,825 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND FALSE  !(DType[this] == CabGoldToken)
[L3681]  COND TRUE   DType[this] == ERC20Mintable
[L3682]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3682]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3683]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND FALSE  !(DType[this] == CabGoldToken)
[L3681]  COND TRUE   DType[this] == ERC20Mintable
[L3682]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3682]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3683]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 > _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND TRUE   DType[this] == CabGoldToken
[L2860]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2860]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2861]  COND FALSE  !(revert)
[L2882]              __ret_0_ := true;
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 > _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND TRUE   DType[this] == CabGoldToken
[L2860]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2860]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2861]  COND FALSE  !(revert)
[L2882]              __ret_0_ := true;
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:53:35,831 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:53:35,831 INFO  L82        PathProgramCache]: Analyzing trace with hash 1781084205, now seen corresponding path program 1 times
[2020-11-25 11:53:35,832 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:53:35,853 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:53:35,944 INFO  L134       CoverageAnalysis]: Checked inductivity of 266 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 257 trivial. 0 not checked.
[2020-11-25 11:53:35,944 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 11:53:35,944 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-11-25 11:53:35,945 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:53:35,945 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 11:53:35,945 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 11:53:35,945 INFO  L87              Difference]: Start difference. First operand 3843 states and 4415 transitions. cyclomatic complexity: 574 Second operand 6 states.
[2020-11-25 11:53:36,042 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:53:36,042 INFO  L93              Difference]: Finished difference Result 3862 states and 4437 transitions.
[2020-11-25 11:53:36,042 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 11:53:36,042 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3862 states and 4437 transitions.
[2020-11-25 11:53:36,053 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:53:36,065 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3862 states to 3849 states and 4421 transitions.
[2020-11-25 11:53:36,065 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1048
[2020-11-25 11:53:36,066 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1048
[2020-11-25 11:53:36,066 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3849 states and 4421 transitions.
[2020-11-25 11:53:36,070 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:53:36,070 INFO  L728         BuchiCegarLoop]: Abstraction has 3849 states and 4421 transitions.
[2020-11-25 11:53:36,074 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3849 states and 4421 transitions.
[2020-11-25 11:53:36,104 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3849 to 3843.
[2020-11-25 11:53:36,104 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3843 states.
[2020-11-25 11:53:36,109 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3843 states to 3843 states and 4415 transitions.
[2020-11-25 11:53:36,110 INFO  L751         BuchiCegarLoop]: Abstraction has 3843 states and 4415 transitions.
[2020-11-25 11:53:36,110 INFO  L631         BuchiCegarLoop]: Abstraction has 3843 states and 4415 transitions.
[2020-11-25 11:53:36,110 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 11:53:36,110 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3843 states and 4415 transitions.
[2020-11-25 11:53:36,116 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:53:36,116 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:53:36,116 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:53:36,118 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:53:36,118 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND FALSE  !(DType[this] == CabGoldToken)
[L3681]  COND TRUE   DType[this] == ERC20Mintable
[L3682]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3682]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3683]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 > _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND TRUE   DType[this] == CabGoldToken
[L2860]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2860]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2861]  COND FALSE  !(revert)
[L2882]              __ret_0_ := true;
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 > _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND TRUE   DType[this] == CabGoldToken
[L2860]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2860]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2861]  COND FALSE  !(revert)
[L2882]              __ret_0_ := true;
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:53:36,123 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:53:36,123 INFO  L82        PathProgramCache]: Analyzing trace with hash -1947181411, now seen corresponding path program 1 times
[2020-11-25 11:53:36,124 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:53:36,137 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:53:36,199 INFO  L134       CoverageAnalysis]: Checked inductivity of 261 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 255 trivial. 0 not checked.
[2020-11-25 11:53:36,199 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:53:36,200 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 11:53:36,200 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:53:36,200 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 11:53:36,200 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 11:53:36,200 INFO  L87              Difference]: Start difference. First operand 3843 states and 4415 transitions. cyclomatic complexity: 574 Second operand 7 states.
[2020-11-25 11:53:36,273 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:53:36,273 INFO  L93              Difference]: Finished difference Result 3866 states and 4440 transitions.
[2020-11-25 11:53:36,273 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 11:53:36,273 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3866 states and 4440 transitions.
[2020-11-25 11:53:36,280 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:53:36,288 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3866 states to 3839 states and 4409 transitions.
[2020-11-25 11:53:36,289 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1048
[2020-11-25 11:53:36,289 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1048
[2020-11-25 11:53:36,289 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3839 states and 4409 transitions.
[2020-11-25 11:53:36,291 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:53:36,291 INFO  L728         BuchiCegarLoop]: Abstraction has 3839 states and 4409 transitions.
[2020-11-25 11:53:36,294 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3839 states and 4409 transitions.
[2020-11-25 11:53:36,323 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3839 to 3839.
[2020-11-25 11:53:36,324 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3839 states.
[2020-11-25 11:53:36,328 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3839 states to 3839 states and 4409 transitions.
[2020-11-25 11:53:36,328 INFO  L751         BuchiCegarLoop]: Abstraction has 3839 states and 4409 transitions.
[2020-11-25 11:53:36,328 INFO  L631         BuchiCegarLoop]: Abstraction has 3839 states and 4409 transitions.
[2020-11-25 11:53:36,328 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 11:53:36,328 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3839 states and 4409 transitions.
[2020-11-25 11:53:36,336 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:53:36,336 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:53:36,336 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:53:36,338 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:53:36,338 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND FALSE  !(DType[this] == CabGoldToken)
[L3681]  COND FALSE  !(DType[this] == ERC20Mintable)
[L3686]  COND TRUE   DType[this] == MinterRole
[L3687]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3687]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3688]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 > _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND TRUE   DType[this] == CabGoldToken
[L2860]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2860]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2861]  COND FALSE  !(revert)
[L2882]              __ret_0_ := true;
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 > _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND TRUE   DType[this] == CabGoldToken
[L2860]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2860]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2861]  COND FALSE  !(revert)
[L2882]              __ret_0_ := true;
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:53:36,343 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:53:36,343 INFO  L82        PathProgramCache]: Analyzing trace with hash 941923859, now seen corresponding path program 1 times
[2020-11-25 11:53:36,343 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:53:36,352 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:53:36,417 INFO  L134       CoverageAnalysis]: Checked inductivity of 261 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 255 trivial. 0 not checked.
[2020-11-25 11:53:36,417 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:53:36,417 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 11:53:36,417 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:53:36,417 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 11:53:36,417 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 11:53:36,418 INFO  L87              Difference]: Start difference. First operand 3839 states and 4409 transitions. cyclomatic complexity: 572 Second operand 7 states.
[2020-11-25 11:53:36,515 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:53:36,516 INFO  L93              Difference]: Finished difference Result 3856 states and 4428 transitions.
[2020-11-25 11:53:36,516 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 11:53:36,516 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3856 states and 4428 transitions.
[2020-11-25 11:53:36,525 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:53:36,537 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3856 states to 3827 states and 4395 transitions.
[2020-11-25 11:53:36,537 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1048
[2020-11-25 11:53:36,538 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1048
[2020-11-25 11:53:36,538 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3827 states and 4395 transitions.
[2020-11-25 11:53:36,541 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:53:36,541 INFO  L728         BuchiCegarLoop]: Abstraction has 3827 states and 4395 transitions.
[2020-11-25 11:53:36,545 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3827 states and 4395 transitions.
[2020-11-25 11:53:36,569 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3827 to 3827.
[2020-11-25 11:53:36,569 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3827 states.
[2020-11-25 11:53:36,574 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3827 states to 3827 states and 4395 transitions.
[2020-11-25 11:53:36,574 INFO  L751         BuchiCegarLoop]: Abstraction has 3827 states and 4395 transitions.
[2020-11-25 11:53:36,574 INFO  L631         BuchiCegarLoop]: Abstraction has 3827 states and 4395 transitions.
[2020-11-25 11:53:36,574 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 11:53:36,574 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3827 states and 4395 transitions.
[2020-11-25 11:53:36,580 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:53:36,580 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:53:36,580 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:53:36,582 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:53:36,582 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 > _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND TRUE   DType[this] == CabGoldToken
[L2860]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2860]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2861]  COND FALSE  !(revert)
[L2882]              __ret_0_ := true;
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND TRUE   choice == 16
[L6350]              gas := gas - 21000;
[L6351]  COND TRUE   gas >= 0
[L6352]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6353]              assume msgvalue_MSG == 0;
[L6354]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s255 && amount_s255 > _balances_ERC20[this][msgsender_MSG]) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L417]               havoc __exception;
[L418]               revert := false;
[L419]   COND FALSE  !(__exception)
[L445]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2859]  COND TRUE   DType[this] == CabGoldToken
[L2860]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3244]              __var_4 := null;
[L3245]  COND FALSE  !(!(sender_s435 != null))
[L3249]              __var_5 := null;
[L3250]  COND FALSE  !(!(recipient_s435 != null))
[L3254]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L2637]  COND FALSE  !(!(b_s51 <= a_s51))
[L2641]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2642]              __ret_0_ := c_s51;
[L3254]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s435], amount_s435);
[L3255]  COND FALSE  !(revert)
[L3258]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s435];
[L3259]              _balances_ERC20[this][sender_s435] := __var_6;
[L3260]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s435];
[L3261]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L2613]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2614]  COND FALSE  !(!(c_s26 >= a_s26))
[L2618]              __ret_0_ := c_s26;
[L3261]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s435], amount_s435);
[L3262]  COND FALSE  !(revert)
[L3265]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s435];
[L3266]              _balances_ERC20[this][recipient_s435] := __var_7;
[L3267]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s435];
[L3268]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2860]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2861]  COND FALSE  !(revert)
[L2882]              __ret_0_ := true;
[L445]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L446]               assume !revert && gas >= 0;
[L6354]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:53:36,587 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:53:36,587 INFO  L82        PathProgramCache]: Analyzing trace with hash 424130881, now seen corresponding path program 1 times
[2020-11-25 11:53:36,588 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:53:36,608 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:53:36,714 INFO  L134       CoverageAnalysis]: Checked inductivity of 265 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 265 trivial. 0 not checked.
[2020-11-25 11:53:36,714 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:53:36,714 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 11:53:36,714 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:53:36,715 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 11:53:36,715 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=41, Unknown=0, NotChecked=0, Total=56
[2020-11-25 11:53:36,715 INFO  L87              Difference]: Start difference. First operand 3827 states and 4395 transitions. cyclomatic complexity: 570 Second operand 8 states.
[2020-11-25 11:53:37,538 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:53:37,538 INFO  L93              Difference]: Finished difference Result 2097 states and 2387 transitions.
[2020-11-25 11:53:37,538 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 11:53:37,538 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2097 states and 2387 transitions.
[2020-11-25 11:53:37,541 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 11:53:37,542 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2097 states to 0 states and 0 transitions.
[2020-11-25 11:53:37,542 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 11:53:37,542 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 11:53:37,542 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 11:53:37,542 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:53:37,542 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:53:37,542 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:53:37,542 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:53:37,542 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 11:53:37,542 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 11:53:37,542 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 11:53:37,542 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 11:53:37,545 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 11:53:37 BasicIcfg
[2020-11-25 11:53:37,545 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 11:53:37,546 INFO  L168              Benchmark]: Toolchain (without parser) took 7293.82 ms. Allocated memory was 1.0 GB in the beginning and 1.8 GB in the end (delta: 804.3 MB). Free memory was 935.2 MB in the beginning and 1.6 GB in the end (delta: -671.8 MB). Peak memory consumption was 132.5 MB. Max. memory is 15.3 GB.
[2020-11-25 11:53:37,547 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 11:53:37,547 INFO  L168              Benchmark]: Boogie Preprocessor took 105.84 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 11:53:37,547 INFO  L168              Benchmark]: UtopiaSpecLang took 58.56 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 913.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 11:53:37,547 INFO  L168              Benchmark]: Boogie Printer took 18.90 ms. Allocated memory is still 1.0 GB. Free memory is still 913.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 11:53:37,547 INFO  L168              Benchmark]: RCFGBuilder took 975.31 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 60.8 MB). Free memory was 913.7 MB in the beginning and 1.0 GB in the end (delta: -94.9 MB). Peak memory consumption was 200.5 MB. Max. memory is 15.3 GB.
[2020-11-25 11:53:37,548 INFO  L168              Benchmark]: UtopiaLTL2Aut took 43.54 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 995.7 MB in the end (delta: 13.0 MB). Peak memory consumption was 13.0 MB. Max. memory is 15.3 GB.
[2020-11-25 11:53:37,548 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1750.32 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 163.6 MB). Free memory was 995.7 MB in the beginning and 954.4 MB in the end (delta: 41.3 MB). Peak memory consumption was 495.3 MB. Max. memory is 15.3 GB.
[2020-11-25 11:53:37,549 INFO  L168              Benchmark]: BlockEncodingV2 took 167.04 ms. Allocated memory is still 1.3 GB. Free memory was 954.4 MB in the beginning and 862.8 MB in the end (delta: 91.6 MB). Peak memory consumption was 91.6 MB. Max. memory is 15.3 GB.
[2020-11-25 11:53:37,549 INFO  L168              Benchmark]: BuchiAutomizer took 4171.01 ms. Allocated memory was 1.3 GB in the beginning and 1.8 GB in the end (delta: 579.9 MB). Free memory was 862.8 MB in the beginning and 1.6 GB in the end (delta: -744.1 MB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 11:53:37,551 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5924 locations, 11060 edges
  - StatisticsResult: Encoded RCFG
    5766 locations, 10664 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 105.84 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 58.56 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 913.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 18.90 ms. Allocated memory is still 1.0 GB. Free memory is still 913.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 975.31 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 60.8 MB). Free memory was 913.7 MB in the beginning and 1.0 GB in the end (delta: -94.9 MB). Peak memory consumption was 200.5 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 43.54 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 995.7 MB in the end (delta: 13.0 MB). Peak memory consumption was 13.0 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1750.32 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 163.6 MB). Free memory was 995.7 MB in the beginning and 954.4 MB in the end (delta: 41.3 MB). Peak memory consumption was 495.3 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 167.04 ms. Allocated memory is still 1.3 GB. Free memory was 954.4 MB in the beginning and 862.8 MB in the end (delta: 91.6 MB). Peak memory consumption was 91.6 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 4171.01 ms. Allocated memory was 1.3 GB in the beginning and 1.8 GB in the end (delta: 579.9 MB). Free memory was 862.8 MB in the beginning and 1.6 GB in the end (delta: -744.1 MB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2283 locations, 3356 edges
  - StatisticsResult: BuchiProgram size
    5924 locations, 11060 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 9 terminating modules (9 trivial, 0 deterministic, 0 nondeterministic). 9 modules have a trivial ranking function, the largest among these consists of 8 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 4.1s and 10 iterations.  TraceHistogramMax:6. Analysis of lassos took 1.1s. Construction of modules took 1.3s. BÃ¼chi inclusion checks took 0.8s. Highest rank in rank-based complementation 0. Minimization of det autom 9. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 8 MinimizatonAttempts, 871 StatesRemovedByMinimization, 3 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 4231 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 35243 SDtfs, 10875 SDslu, 93055 SDs, 0 SdLazy, 13384 SolverSat, 2755 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 1.3s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU9 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_ERC200) ==> ( <>(fail_transfer_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
