This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 16:34:48,055 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 16:34:48,056 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 16:34:48,068 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 16:34:48,068 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 16:34:48,069 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 16:34:48,070 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 16:34:48,072 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 16:34:48,073 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 16:34:48,074 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 16:34:48,074 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 16:34:48,075 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 16:34:48,075 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 16:34:48,076 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 16:34:48,077 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 16:34:48,078 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 16:34:48,078 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 16:34:48,080 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 16:34:48,081 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 16:34:48,082 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 16:34:48,083 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 16:34:48,084 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 16:34:48,085 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 16:34:48,086 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 16:34:48,086 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 16:34:48,086 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 16:34:48,087 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 16:34:48,087 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 16:34:48,087 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 16:34:48,088 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 16:34:48,088 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 16:34:48,089 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 16:34:48,089 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 16:34:48,090 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 16:34:48,091 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 16:34:48,091 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 16:34:48,091 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 16:34:48,091 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 16:34:48,092 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 16:34:48,092 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 16:34:48,093 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 16:34:48,093 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 16:34:48,101 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 16:34:48,101 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 16:34:48,102 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 16:34:48,102 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 16:34:48,102 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 16:34:48,102 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 16:34:48,103 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 16:34:48,103 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 16:34:48,103 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 16:34:48,103 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 16:34:48,103 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 16:34:48,103 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 16:34:48,103 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 16:34:48,103 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 16:34:48,103 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 16:34:48,104 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 16:34:48,104 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 16:34:48,104 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 16:34:48,104 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 16:34:48,104 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 16:34:48,104 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 16:34:48,104 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 16:34:48,104 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 16:34:48,104 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 16:34:48,104 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 16:34:48,105 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 16:34:48,127 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 16:34:48,140 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 16:34:48,143 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 16:34:48,144 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 16:34:48,144 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 16:34:48,145 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transfer-self.bpl
[2020-11-25 16:34:48,145 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transfer-self.bpl'
[2020-11-25 16:34:48,227 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 16:34:48,228 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 16:34:48,228 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 16:34:48,229 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 16:34:48,229 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 16:34:48,245 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:34:48" (1/1) ...
[2020-11-25 16:34:48,247 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:34:48" (1/1) ...
[2020-11-25 16:34:48,279 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:34:48" (1/1) ...
[2020-11-25 16:34:48,280 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:34:48" (1/1) ...
[2020-11-25 16:34:48,301 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:34:48" (1/1) ...
[2020-11-25 16:34:48,310 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:34:48" (1/1) ...
[2020-11-25 16:34:48,318 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:34:48" (1/1) ...
[2020-11-25 16:34:48,327 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 16:34:48,328 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 16:34:48,328 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 16:34:48,330 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 16:34:48,334 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:34:48" (1/1) ...
[2020-11-25 16:34:48,354 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _name_FnxToken[this] == old(_name_FnxToken[this]) && _symbol_FnxToken[this] == old(_symbol_FnxToken[this]) && _decimals_FnxToken[this] == old(_decimals_FnxToken[this]) && MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] == old(MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 16:34:48,359 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _name_FnxToken[this] == old(_name_FnxToken[this]) && _symbol_FnxToken[this] == old(_symbol_FnxToken[this]) && _decimals_FnxToken[this] == old(_decimals_FnxToken[this]) && MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] == old(MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 16:34:48,367 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _name_FnxToken[this] == old(_name_FnxToken[this]) && _symbol_FnxToken[this] == old(_symbol_FnxToken[this]) && _decimals_FnxToken[this] == old(_decimals_FnxToken[this]) && MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] == old(MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 16:34:48,374 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s325 && value_s325<=_balances_ERC20[this][msg.sender] ) && value_s325>=0 ) && value_s325<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s325]>=0 ) && _balances_ERC20[this][to_s325]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IdentifierExpression[to_s325,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s325,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s325,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s325,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[to_s325,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[to_s325,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 16:34:48,377 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( __ret_0_==true && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowed_ERC20[this]==( old(_allowed_ERC20[this]) ) ) && _name_FnxToken[this]==( old(_name_FnxToken[this]) ) ) && _symbol_FnxToken[this]==( old(_symbol_FnxToken[this]) ) ) && _decimals_FnxToken[this]==( old(_decimals_FnxToken[this]) ) ) && MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this]==( old(MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_FnxToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_FnxToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_FnxToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_FnxToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_FnxToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_FnxToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[MAX_TOTAL_TOKEN_AMOUNT_FnxToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[MAX_TOTAL_TOKEN_AMOUNT_FnxToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]]
[2020-11-25 16:34:48,383 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _name_FnxToken[this] == old(_name_FnxToken[this]) && _symbol_FnxToken[this] == old(_symbol_FnxToken[this]) && _decimals_FnxToken[this] == old(_decimals_FnxToken[this]) && MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] == old(MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 16:34:48,383 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC200) ==> ( <>AP(success_transfer_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 16:34:48,393 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:34:48 PropertyContainer
[2020-11-25 16:34:48,393 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 16:34:48,393 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 16:34:48,394 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 16:34:48,394 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 16:34:48,395 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:34:48" (1/2) ...
[2020-11-25 16:34:48,395 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 16:34:48,395 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 16:34:48,409 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:34:48" (2/2) ...
[2020-11-25 16:34:48,409 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 16:34:48,410 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 16:34:48,410 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 16:34:48,410 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 16:34:48,411 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:34:48" (1/2) ...
[2020-11-25 16:34:48,463 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 16:34:48,463 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 16:34:48,463 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 16:34:48,463 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 16:34:48,463 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 16:34:48,463 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 16:34:48,464 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 16:34:48,464 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 16:34:48,464 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 16:34:48,464 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 16:34:48,464 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:34:48,464 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 16:34:48,464 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 16:34:48,464 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:34:48,464 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:34:48,464 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 16:34:48,465 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:34:48,465 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:34:48,465 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 16:34:48,465 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 16:34:48,465 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 16:34:48,465 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 16:34:48,465 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 16:34:48,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 16:34:48,465 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 16:34:48,465 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 16:34:48,465 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 16:34:48,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 16:34:48,466 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 16:34:48,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 16:34:48,466 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 16:34:48,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 16:34:48,466 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 16:34:48,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 16:34:48,466 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 16:34:48,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 16:34:48,466 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 16:34:48,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 16:34:48,466 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 16:34:48,466 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 16:34:48,467 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 16:34:48,467 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 16:34:48,467 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 16:34:48,467 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 16:34:48,467 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 16:34:48,467 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 16:34:48,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 16:34:48,467 INFO  L130     BoogieDeclarations]: Found specification of procedure changeOwner~address_Owned
[2020-11-25 16:34:48,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure changeOwner~address_Owned
[2020-11-25 16:34:48,467 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 16:34:48,467 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 16:34:48,468 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 16:34:48,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 16:34:48,468 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 16:34:48,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 16:34:48,468 INFO  L130     BoogieDeclarations]: Found specification of procedure FnxToken_FnxToken_NoBaseCtor__success
[2020-11-25 16:34:48,468 INFO  L130     BoogieDeclarations]: Found specification of procedure FnxToken_FnxToken
[2020-11-25 16:34:48,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure FnxToken_FnxToken
[2020-11-25 16:34:48,468 INFO  L130     BoogieDeclarations]: Found specification of procedure name_FnxToken
[2020-11-25 16:34:48,468 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_FnxToken
[2020-11-25 16:34:48,468 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_FnxToken
[2020-11-25 16:34:48,469 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_FnxToken
[2020-11-25 16:34:48,469 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_FnxToken
[2020-11-25 16:34:48,469 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_FnxToken
[2020-11-25 16:34:48,469 INFO  L130     BoogieDeclarations]: Found specification of procedure changeTokenName~string~string_FnxToken
[2020-11-25 16:34:48,469 INFO  L138     BoogieDeclarations]: Found implementation of procedure changeTokenName~string~string_FnxToken
[2020-11-25 16:34:48,469 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_FnxToken
[2020-11-25 16:34:48,469 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_FnxToken
[2020-11-25 16:34:48,469 INFO  L130     BoogieDeclarations]: Found specification of procedure MAX_TOTAL_TOKEN_AMOUNT_FnxToken
[2020-11-25 16:34:48,469 INFO  L138     BoogieDeclarations]: Found implementation of procedure MAX_TOTAL_TOKEN_AMOUNT_FnxToken
[2020-11-25 16:34:48,469 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 16:34:48,470 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 16:34:48,470 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 16:34:48,470 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 16:34:48,470 INFO  L130     BoogieDeclarations]: Found specification of procedure maxWanTokenAmountNotReached_pre__success
[2020-11-25 16:34:48,470 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 16:34:48,470 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 16:34:48,470 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 16:34:48,470 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 16:34:48,470 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 16:34:48,471 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 16:34:48,471 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 16:34:48,471 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 16:34:48,471 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FnxToken
[2020-11-25 16:34:48,471 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 16:34:48,471 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 16:34:48,471 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 16:34:48,471 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 16:34:48,471 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 16:34:48,471 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:34:48,472 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 16:34:48,472 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 16:34:48,472 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:34:48,472 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:34:48,472 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 16:34:48,472 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:34:48,472 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:34:48,472 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 16:34:48,472 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 16:34:48,472 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 16:34:48,473 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 16:34:48,473 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 16:34:48,473 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 16:34:48,473 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 16:34:48,473 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 16:34:48,473 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 16:34:48,473 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 16:34:48,473 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 16:34:48,473 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 16:34:48,474 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 16:34:48,474 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 16:34:48,474 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 16:34:48,474 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 16:34:48,474 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 16:34:48,474 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 16:34:48,474 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 16:34:48,474 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 16:34:48,474 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 16:34:48,474 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 16:34:48,475 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 16:34:48,475 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 16:34:48,475 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 16:34:48,475 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 16:34:48,475 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 16:34:48,475 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 16:34:48,475 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 16:34:48,475 INFO  L130     BoogieDeclarations]: Found specification of procedure changeOwner~address_Owned__success
[2020-11-25 16:34:48,475 INFO  L130     BoogieDeclarations]: Found specification of procedure changeOwner~address_Owned__fail
[2020-11-25 16:34:48,475 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 16:34:48,476 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 16:34:48,476 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 16:34:48,476 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 16:34:48,476 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 16:34:48,476 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 16:34:48,476 INFO  L130     BoogieDeclarations]: Found specification of procedure FnxToken_FnxToken_NoBaseCtor__fail
[2020-11-25 16:34:48,476 INFO  L130     BoogieDeclarations]: Found specification of procedure FnxToken_FnxToken__success
[2020-11-25 16:34:48,476 INFO  L130     BoogieDeclarations]: Found specification of procedure FnxToken_FnxToken__fail
[2020-11-25 16:34:48,476 INFO  L130     BoogieDeclarations]: Found specification of procedure name_FnxToken__success
[2020-11-25 16:34:48,476 INFO  L130     BoogieDeclarations]: Found specification of procedure name_FnxToken__fail
[2020-11-25 16:34:48,477 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_FnxToken__success
[2020-11-25 16:34:48,477 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_FnxToken__fail
[2020-11-25 16:34:48,477 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_FnxToken__success
[2020-11-25 16:34:48,477 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_FnxToken__fail
[2020-11-25 16:34:48,477 INFO  L130     BoogieDeclarations]: Found specification of procedure changeTokenName~string~string_FnxToken__success
[2020-11-25 16:34:48,477 INFO  L130     BoogieDeclarations]: Found specification of procedure changeTokenName~string~string_FnxToken__fail
[2020-11-25 16:34:48,477 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_FnxToken__success
[2020-11-25 16:34:48,477 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_FnxToken__fail
[2020-11-25 16:34:48,477 INFO  L130     BoogieDeclarations]: Found specification of procedure MAX_TOTAL_TOKEN_AMOUNT_FnxToken__success
[2020-11-25 16:34:48,478 INFO  L130     BoogieDeclarations]: Found specification of procedure MAX_TOTAL_TOKEN_AMOUNT_FnxToken__fail
[2020-11-25 16:34:48,478 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 16:34:48,478 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 16:34:48,478 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 16:34:48,478 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 16:34:48,478 INFO  L130     BoogieDeclarations]: Found specification of procedure maxWanTokenAmountNotReached_pre__fail
[2020-11-25 16:34:48,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 16:34:48,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 16:34:48,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 16:34:48,478 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 16:34:48,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 16:34:48,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 16:34:48,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:34:48,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:34:48,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 16:34:48,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 16:34:48,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:34:48,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:34:48,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:34:48,479 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:34:48,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 16:34:48,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 16:34:48,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:34:48,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:34:48,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:34:48,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:34:48,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 16:34:48,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 16:34:48,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 16:34:48,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 16:34:48,480 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 16:34:48,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 16:34:48,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 16:34:48,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 16:34:48,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 16:34:48,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 16:34:48,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 16:34:48,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 16:34:48,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 16:34:48,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 16:34:48,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 16:34:48,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 16:34:48,481 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 16:34:48,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 16:34:48,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 16:34:48,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 16:34:48,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 16:34:48,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 16:34:48,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 16:34:48,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 16:34:48,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 16:34:48,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 16:34:48,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 16:34:48,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 16:34:48,482 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 16:34:48,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 16:34:48,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 16:34:48,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 16:34:48,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 16:34:48,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 16:34:48,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 16:34:48,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 16:34:48,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 16:34:48,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 16:34:48,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure changeOwner~address_Owned__fail
[2020-11-25 16:34:48,483 INFO  L138     BoogieDeclarations]: Found implementation of procedure changeOwner~address_Owned__success
[2020-11-25 16:34:48,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 16:34:48,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 16:34:48,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 16:34:48,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 16:34:48,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 16:34:48,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 16:34:48,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure FnxToken_FnxToken_NoBaseCtor__fail
[2020-11-25 16:34:48,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure FnxToken_FnxToken_NoBaseCtor__success
[2020-11-25 16:34:48,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure FnxToken_FnxToken__fail
[2020-11-25 16:34:48,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure FnxToken_FnxToken__success
[2020-11-25 16:34:48,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_FnxToken__fail
[2020-11-25 16:34:48,484 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_FnxToken__success
[2020-11-25 16:34:48,485 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_FnxToken__fail
[2020-11-25 16:34:48,485 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_FnxToken__success
[2020-11-25 16:34:48,485 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_FnxToken__fail
[2020-11-25 16:34:48,485 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_FnxToken__success
[2020-11-25 16:34:48,485 INFO  L138     BoogieDeclarations]: Found implementation of procedure changeTokenName~string~string_FnxToken__fail
[2020-11-25 16:34:48,485 INFO  L138     BoogieDeclarations]: Found implementation of procedure changeTokenName~string~string_FnxToken__success
[2020-11-25 16:34:48,485 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_FnxToken__fail
[2020-11-25 16:34:48,485 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_FnxToken__success
[2020-11-25 16:34:48,485 INFO  L138     BoogieDeclarations]: Found implementation of procedure MAX_TOTAL_TOKEN_AMOUNT_FnxToken__fail
[2020-11-25 16:34:48,485 INFO  L138     BoogieDeclarations]: Found implementation of procedure MAX_TOTAL_TOKEN_AMOUNT_FnxToken__success
[2020-11-25 16:34:48,485 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 16:34:48,485 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 16:34:48,486 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 16:34:48,486 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 16:34:48,486 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 16:34:48,486 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 16:34:48,486 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 16:34:48,486 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 16:34:48,486 INFO  L138     BoogieDeclarations]: Found implementation of procedure maxWanTokenAmountNotReached_pre__fail
[2020-11-25 16:34:48,486 INFO  L138     BoogieDeclarations]: Found implementation of procedure maxWanTokenAmountNotReached_pre__success
[2020-11-25 16:34:48,486 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 16:34:48,486 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 16:34:48,486 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 16:34:48,486 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 16:34:48,486 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 16:34:48,486 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 16:34:48,486 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 16:34:48,486 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 16:34:48,487 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FnxToken
[2020-11-25 16:34:48,487 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 16:34:48,487 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 16:34:48,487 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 16:34:48,678 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:34:48,678 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:34:48,678 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:34:49,105 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 16:34:49,105 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 16:34:49,107 INFO  L202        PluginConnector]: Adding new model FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:34:49 BoogieIcfgContainer
[2020-11-25 16:34:49,107 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:34:48" (2/2) ...
[2020-11-25 16:34:49,107 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 16:34:49,108 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@4f43095f and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:34:49, skipping insertion in model container
[2020-11-25 16:34:49,108 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 16:34:49,108 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 16:34:49,108 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 16:34:49,109 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 16:34:49,109 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:34:48" (1/3) ...
[2020-11-25 16:34:49,110 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@6873b82c and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:34:49, skipping insertion in model container
[2020-11-25 16:34:49,110 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:34:48" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 16:34:49,146 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:34:49 NWAContainer
[2020-11-25 16:34:49,146 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 16:34:49,147 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 16:34:49,147 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 16:34:49,147 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 16:34:49,148 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:34:49" (3/4) ...
[2020-11-25 16:34:49,149 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@5790adcf and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:34:49, skipping insertion in model container
[2020-11-25 16:34:49,149 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:34:49" (4/4) ...
[2020-11-25 16:34:49,152 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 16:34:49,156 INFO  L110   BuchiProductObserver]: Initial RCFG 1560 locations, 2060 edges
[2020-11-25 16:34:49,156 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 16:34:49,166 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 16:34:50,396 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 16:34:50,401 INFO  L110   BuchiProductObserver]: BuchiProgram size 3838 locations, 6753 edges
[2020-11-25 16:34:50,402 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:34:50 BoogieIcfgContainer
[2020-11-25 16:34:50,402 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 16:34:50,402 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 16:34:50,402 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 16:34:50,403 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 16:34:50,404 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:34:50" (1/1) ...
[2020-11-25 16:34:50,473 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_2 := div~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s186, b_s186, -1820858731);
[2020-11-25 16:34:50,473 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][account_s680][msgsender_MSG], value_s680);
[2020-11-25 16:34:50,474 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_3 := mod~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s229, b_s229, -1950754390);
[2020-11-25 16:34:50,475 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_3 := mod~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s229, b_s229, -1950754390);
[2020-11-25 16:34:50,476 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_2 := div~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s186, b_s186, -1820858731);
[2020-11-25 16:34:50,477 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_19 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][account_s680][msgsender_MSG], value_s680);
[2020-11-25 16:34:50,487 INFO  L313           BlockEncoder]: Initial Icfg 3838 locations, 6753 edges
[2020-11-25 16:34:50,487 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 16:34:50,487 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 16:34:50,488 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 16:34:50,488 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 16:34:50,499 INFO  L70    emoveInfeasibleEdges]: Removed 90 edges and 13 locations because of local infeasibility
[2020-11-25 16:34:50,509 INFO  L70        RemoveSinkStates]: Removed 32 edges and 21 locations by removing sink states
[2020-11-25 16:34:50,519 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 16:34:50,523 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 16:34:50,526 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 16:34:50,527 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 16:34:50,531 INFO  L313           BlockEncoder]: Encoded RCFG 3778 locations, 6593 edges
[2020-11-25 16:34:50,531 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:34:50 BasicIcfg
[2020-11-25 16:34:50,531 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 16:34:50,532 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 16:34:50,532 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 16:34:50,533 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 16:34:50,534 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:34:50,534 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:34:48" (1/6) ...
[2020-11-25 16:34:50,535 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@62d64196 and model type FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:34:50, skipping insertion in model container
[2020-11-25 16:34:50,536 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:34:50,536 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:34:48" (2/6) ...
[2020-11-25 16:34:50,536 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@62d64196 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:34:50, skipping insertion in model container
[2020-11-25 16:34:50,536 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:34:50,536 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:34:49" (3/6) ...
[2020-11-25 16:34:50,536 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@62d64196 and model type FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:34:50, skipping insertion in model container
[2020-11-25 16:34:50,536 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:34:50,536 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:34:49" (4/6) ...
[2020-11-25 16:34:50,536 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@62d64196 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:34:50, skipping insertion in model container
[2020-11-25 16:34:50,536 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:34:50,536 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:34:50" (5/6) ...
[2020-11-25 16:34:50,537 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@62d64196 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 04:34:50, skipping insertion in model container
[2020-11-25 16:34:50,537 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:34:50,537 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:34:50" (6/6) ...
[2020-11-25 16:34:50,538 INFO  L404   chiAutomizerObserver]: Analyzing ICFG FnxToken_0xef9cd7882c067686691b6ff49e650b43afbbcc6b_transfer-self.bpl_BEv2
[2020-11-25 16:34:50,569 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 16:34:50,570 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 16:34:50,570 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 16:34:50,570 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 16:34:50,570 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 16:34:50,570 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 16:34:50,570 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 16:34:50,570 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 16:34:50,570 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 16:34:50,601 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3778 states.
[2020-11-25 16:34:50,654 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:34:50,654 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:34:50,654 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:34:50,661 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:34:50,661 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:34:50,661 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 16:34:50,661 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3778 states.
[2020-11-25 16:34:50,681 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:34:50,681 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:34:50,681 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:34:50,682 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:34:50,682 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4426]              assume null == 0;
[L4427]  CALL        call this := FreshRefGenerator__success();
[L2000]              havoc newRef;
[L2001]              assume Alloc[newRef] == false;
[L2002]              Alloc[newRef] := true;
[L2003]              assume newRef != null;
[L4427]  RET         call this := FreshRefGenerator__success();
[L4428]              assume now >= 0;
[L4429]              assume DType[this] == FnxToken;
[L4430]              assume msgvalue_MSG == 0;
[L4431]              gas := gas - 53000;
[L4432]  CALL        call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2894]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2768]              assume msgsender_MSG != null;
[L2769]              Balance[this] := 0;
[L2770]              owner_Owned[this] := null;
[L2771]              newOwner_Owned[this] := null;
[L2773]              owner_Owned[this] := msgsender_MSG;
[L2786]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2787]  COND FALSE  !(revert)
[L2894]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2895]  COND TRUE   revert
[L4432]  RET         call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]              assume !revert && gas >= 0;

Loop:
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND FALSE  !(gas >= 0)
[L4436]  RET         call CorralChoice_FnxToken(this);

[2020-11-25 16:34:50,694 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:34:50,694 INFO  L82        PathProgramCache]: Analyzing trace with hash -1589030619, now seen corresponding path program 1 times
[2020-11-25 16:34:50,698 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:34:50,717 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:34:50,759 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:34:50,761 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:34:50,762 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:34:50,938 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:34:50,946 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:34:50,946 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:34:50,947 INFO  L87              Difference]: Start difference. First operand 3778 states. Second operand 4 states.
[2020-11-25 16:34:51,254 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:34:51,254 INFO  L93              Difference]: Finished difference Result 2483 states and 2776 transitions.
[2020-11-25 16:34:51,254 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:34:51,255 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2483 states and 2776 transitions.
[2020-11-25 16:34:51,267 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:34:51,283 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2483 states to 2481 states and 2772 transitions.
[2020-11-25 16:34:51,284 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 16:34:51,286 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 673
[2020-11-25 16:34:51,286 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2481 states and 2772 transitions.
[2020-11-25 16:34:51,293 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:34:51,293 INFO  L728         BuchiCegarLoop]: Abstraction has 2481 states and 2772 transitions.
[2020-11-25 16:34:51,309 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2481 states and 2772 transitions.
[2020-11-25 16:34:51,348 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2481 to 2481.
[2020-11-25 16:34:51,349 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2481 states.
[2020-11-25 16:34:51,352 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2481 states to 2481 states and 2772 transitions.
[2020-11-25 16:34:51,353 INFO  L751         BuchiCegarLoop]: Abstraction has 2481 states and 2772 transitions.
[2020-11-25 16:34:51,354 INFO  L631         BuchiCegarLoop]: Abstraction has 2481 states and 2772 transitions.
[2020-11-25 16:34:51,354 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 16:34:51,354 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2481 states and 2772 transitions.
[2020-11-25 16:34:51,360 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:34:51,360 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:34:51,360 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:34:51,362 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:34:51,362 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4426]              assume null == 0;
[L4427]  CALL        call this := FreshRefGenerator__success();
[L2000]              havoc newRef;
[L2001]              assume Alloc[newRef] == false;
[L2002]              Alloc[newRef] := true;
[L2003]              assume newRef != null;
[L4427]  RET         call this := FreshRefGenerator__success();
[L4428]              assume now >= 0;
[L4429]              assume DType[this] == FnxToken;
[L4430]              assume msgvalue_MSG == 0;
[L4431]              gas := gas - 53000;
[L4432]  CALL        call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2894]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2768]              assume msgsender_MSG != null;
[L2769]              Balance[this] := 0;
[L2770]              owner_Owned[this] := null;
[L2771]              newOwner_Owned[this] := null;
[L2773]              owner_Owned[this] := msgsender_MSG;
[L2786]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2787]  COND FALSE  !(revert)
[L2894]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2895]  COND TRUE   revert
[L4432]  RET         call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]              assume !revert && gas >= 0;
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND TRUE   gas >= 0
[L4307]              assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]              assume msgvalue_MSG == 0;
[L4309]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L474]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2367]  COND TRUE   DType[this] == FnxToken
[L2368]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2583]              __var_10 := null;
[L2584]  COND TRUE   !(to_s554 != null)
[L2585]              revert := true;
[L2368]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2369]  COND TRUE   revert
[L474]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L475]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_FnxToken[this] == old(_name_FnxToken[this])) && _symbol_FnxToken[this] == old(_symbol_FnxToken[this])) && _decimals_FnxToken[this] == old(_decimals_FnxToken[this])) && MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] == old(MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4309]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET         call CorralChoice_FnxToken(this);

Loop:
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND TRUE   gas >= 0
[L4307]              assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]              assume msgvalue_MSG == 0;
[L4309]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L474]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2367]  COND TRUE   DType[this] == FnxToken
[L2368]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2583]              __var_10 := null;
[L2584]  COND TRUE   !(to_s554 != null)
[L2585]              revert := true;
[L2368]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2369]  COND TRUE   revert
[L474]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L475]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_FnxToken[this] == old(_name_FnxToken[this])) && _symbol_FnxToken[this] == old(_symbol_FnxToken[this])) && _decimals_FnxToken[this] == old(_decimals_FnxToken[this])) && MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] == old(MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4309]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET         call CorralChoice_FnxToken(this);

[2020-11-25 16:34:51,366 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:34:51,366 INFO  L82        PathProgramCache]: Analyzing trace with hash 1653760507, now seen corresponding path program 1 times
[2020-11-25 16:34:51,367 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:34:51,377 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:34:51,397 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:34:51,397 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:34:51,397 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 16:34:51,398 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:34:51,398 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 16:34:51,398 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 16:34:51,399 INFO  L87              Difference]: Start difference. First operand 2481 states and 2772 transitions. cyclomatic complexity: 293 Second operand 3 states.
[2020-11-25 16:34:51,455 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:34:51,455 INFO  L93              Difference]: Finished difference Result 3273 states and 3732 transitions.
[2020-11-25 16:34:51,455 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 16:34:51,456 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3273 states and 3732 transitions.
[2020-11-25 16:34:51,468 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:34:51,481 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3273 states to 3273 states and 3732 transitions.
[2020-11-25 16:34:51,481 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 896
[2020-11-25 16:34:51,482 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 896
[2020-11-25 16:34:51,482 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3273 states and 3732 transitions.
[2020-11-25 16:34:51,487 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:34:51,487 INFO  L728         BuchiCegarLoop]: Abstraction has 3273 states and 3732 transitions.
[2020-11-25 16:34:51,490 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3273 states and 3732 transitions.
[2020-11-25 16:34:51,517 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3273 to 2685.
[2020-11-25 16:34:51,517 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2685 states.
[2020-11-25 16:34:51,521 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2685 states to 2685 states and 3010 transitions.
[2020-11-25 16:34:51,521 INFO  L751         BuchiCegarLoop]: Abstraction has 2685 states and 3010 transitions.
[2020-11-25 16:34:51,521 INFO  L631         BuchiCegarLoop]: Abstraction has 2685 states and 3010 transitions.
[2020-11-25 16:34:51,521 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 16:34:51,521 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2685 states and 3010 transitions.
[2020-11-25 16:34:51,526 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:34:51,526 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:34:51,526 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:34:51,527 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:34:51,528 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4426]              assume null == 0;
[L4427]  CALL        call this := FreshRefGenerator__success();
[L2000]              havoc newRef;
[L2001]              assume Alloc[newRef] == false;
[L2002]              Alloc[newRef] := true;
[L2003]              assume newRef != null;
[L4427]  RET         call this := FreshRefGenerator__success();
[L4428]              assume now >= 0;
[L4429]              assume DType[this] == FnxToken;
[L4430]              assume msgvalue_MSG == 0;
[L4431]              gas := gas - 53000;
[L4432]  CALL        call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2894]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2768]              assume msgsender_MSG != null;
[L2769]              Balance[this] := 0;
[L2770]              owner_Owned[this] := null;
[L2771]              newOwner_Owned[this] := null;
[L2773]              owner_Owned[this] := msgsender_MSG;
[L2786]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2787]  COND TRUE   revert
[L2894]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2895]  COND TRUE   revert
[L4432]  RET         call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]              assume !revert && gas >= 0;
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND TRUE   gas >= 0
[L4307]              assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]              assume msgvalue_MSG == 0;
[L4309]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L474]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2367]  COND TRUE   DType[this] == FnxToken
[L2368]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2583]              __var_10 := null;
[L2584]  COND TRUE   !(to_s554 != null)
[L2585]              revert := true;
[L2368]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2369]  COND TRUE   revert
[L474]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L475]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_FnxToken[this] == old(_name_FnxToken[this])) && _symbol_FnxToken[this] == old(_symbol_FnxToken[this])) && _decimals_FnxToken[this] == old(_decimals_FnxToken[this])) && MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] == old(MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4309]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET         call CorralChoice_FnxToken(this);

Loop:
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND TRUE   gas >= 0
[L4307]              assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]              assume msgvalue_MSG == 0;
[L4309]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L474]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2367]  COND TRUE   DType[this] == FnxToken
[L2368]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2583]              __var_10 := null;
[L2584]  COND TRUE   !(to_s554 != null)
[L2585]              revert := true;
[L2368]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2369]  COND TRUE   revert
[L474]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L475]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_FnxToken[this] == old(_name_FnxToken[this])) && _symbol_FnxToken[this] == old(_symbol_FnxToken[this])) && _decimals_FnxToken[this] == old(_decimals_FnxToken[this])) && MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] == old(MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4309]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET         call CorralChoice_FnxToken(this);

[2020-11-25 16:34:51,531 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:34:51,531 INFO  L82        PathProgramCache]: Analyzing trace with hash -1334064391, now seen corresponding path program 1 times
[2020-11-25 16:34:51,531 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:34:51,537 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:34:51,553 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:34:51,553 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:34:51,553 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 16:34:51,553 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:34:51,553 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 16:34:51,553 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 16:34:51,554 INFO  L87              Difference]: Start difference. First operand 2685 states and 3010 transitions. cyclomatic complexity: 327 Second operand 3 states.
[2020-11-25 16:34:51,594 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:34:51,595 INFO  L93              Difference]: Finished difference Result 3273 states and 3642 transitions.
[2020-11-25 16:34:51,595 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 16:34:51,595 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3273 states and 3642 transitions.
[2020-11-25 16:34:51,604 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:34:51,614 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3273 states to 3085 states and 3432 transitions.
[2020-11-25 16:34:51,614 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 833
[2020-11-25 16:34:51,615 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 860
[2020-11-25 16:34:51,615 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3085 states and 3432 transitions.
[2020-11-25 16:34:51,618 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:34:51,618 INFO  L728         BuchiCegarLoop]: Abstraction has 3085 states and 3432 transitions.
[2020-11-25 16:34:51,621 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3085 states and 3432 transitions.
[2020-11-25 16:34:51,640 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3085 to 2565.
[2020-11-25 16:34:51,640 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2565 states.
[2020-11-25 16:34:51,643 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2565 states to 2565 states and 2778 transitions.
[2020-11-25 16:34:51,643 INFO  L751         BuchiCegarLoop]: Abstraction has 2565 states and 2778 transitions.
[2020-11-25 16:34:51,643 INFO  L631         BuchiCegarLoop]: Abstraction has 2565 states and 2778 transitions.
[2020-11-25 16:34:51,643 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 16:34:51,643 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2565 states and 2778 transitions.
[2020-11-25 16:34:51,647 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:34:51,647 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:34:51,647 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:34:51,649 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:34:51,649 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4426]              assume null == 0;
[L4427]  CALL        call this := FreshRefGenerator__success();
[L2000]              havoc newRef;
[L2001]              assume Alloc[newRef] == false;
[L2002]              Alloc[newRef] := true;
[L2003]              assume newRef != null;
[L4427]  RET         call this := FreshRefGenerator__success();
[L4428]              assume now >= 0;
[L4429]              assume DType[this] == FnxToken;
[L4430]              assume msgvalue_MSG == 0;
[L4431]              gas := gas - 53000;
[L4432]  CALL        call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2894]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2768]              assume msgsender_MSG != null;
[L2769]              Balance[this] := 0;
[L2770]              owner_Owned[this] := null;
[L2771]              newOwner_Owned[this] := null;
[L2773]              owner_Owned[this] := msgsender_MSG;
[L2786]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2787]  COND FALSE  !(revert)
[L2894]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2895]  COND FALSE  !(revert)
[L2898]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2898]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  COND FALSE  !(revert)
[L2902]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2300]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2300]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]  COND FALSE  !(revert)
[L2304]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]              assume msgsender_MSG != null;
[L2277]              Balance[this] := 0;
[L2278]              _balances_ERC20[this] := zeroRefintArr();
[L2279]              sum__balances0[this] := 0;
[L2280]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2281]              sum__allowed1[this] := 0;
[L2282]              _totalSupply_ERC20[this] := 0;
[L2304]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2305]  COND FALSE  !(revert)
[L2902]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2903]  COND FALSE  !(revert)
[L2906]  CALL        call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2863]              assume msgsender_MSG != null;
[L2864]              Balance[this] := 0;
[L2865]              _name_FnxToken[this] := 699458114;
[L2866]              _symbol_FnxToken[this] := -216537299;
[L2867]              _decimals_FnxToken[this] := 18;
[L2868]              MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] := 500000000;
[L2906]  RET         call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]  COND FALSE  !(revert)
[L4432]  RET         call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]              assume !revert && gas >= 0;
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND TRUE   gas >= 0
[L4307]              assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]              assume msgvalue_MSG == 0;
[L4309]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND TRUE   __exception
[L451]               __tmp__Balance := Balance;
[L452]               __tmp__DType := DType;
[L453]               __tmp__Alloc := Alloc;
[L454]               __tmp__balance_ADDR := balance_ADDR;
[L455]               __tmp__M_Ref_int := M_Ref_int;
[L456]               __tmp__sum__balances0 := sum__balances0;
[L457]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L458]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L459]               __tmp__sum__allowed1 := sum__allowed1;
[L460]               __tmp__Length := Length;
[L461]               __tmp__now := now;
[L462]               __tmp___balances_ERC20 := _balances_ERC20;
[L463]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L464]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L465]               __tmp__owner_Owned := owner_Owned;
[L466]               __tmp__newOwner_Owned := newOwner_Owned;
[L467]               __tmp___name_FnxToken := _name_FnxToken;
[L468]               __tmp___symbol_FnxToken := _symbol_FnxToken;
[L469]               __tmp___decimals_FnxToken := _decimals_FnxToken;
[L470]               __tmp__MAX_TOTAL_TOKEN_AMOUNT_FnxToken := MAX_TOTAL_TOKEN_AMOUNT_FnxToken;
[L471]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2348]  COND TRUE   __tmp__DType[this] == FnxToken
[L2349]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2557]              __var_10 := null;
[L2558]  COND TRUE   !(to_s554 != null)
[L2559]              revert := true;
[L2349]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2350]  COND TRUE   revert
[L471]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L472]               assume revert || gas < 0;
[L4309]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET         call CorralChoice_FnxToken(this);

Loop:
[L4436]  CALL       call CorralChoice_FnxToken(this);
[L4255]             havoc msgsender_MSG;
[L4256]             havoc msgvalue_MSG;
[L4257]             havoc choice;
[L4258]             havoc to_s325;
[L4259]             havoc value_s325;
[L4260]             havoc __ret_0_transfer;
[L4261]             havoc spender_s361;
[L4262]             havoc value_s361;
[L4263]             havoc __ret_0_approve;
[L4264]             havoc from_s410;
[L4265]             havoc to_s410;
[L4266]             havoc value_s410;
[L4267]             havoc __ret_0_transferFrom;
[L4268]             havoc __ret_0_totalSupply;
[L4269]             havoc owner_s290;
[L4270]             havoc __ret_0_balanceOf;
[L4271]             havoc owner_s306;
[L4272]             havoc spender_s306;
[L4273]             havoc __ret_0_allowance;
[L4274]             havoc spender_s459;
[L4275]             havoc addedValue_s459;
[L4276]             havoc __ret_0_increaseAllowance;
[L4277]             havoc spender_s508;
[L4278]             havoc subtractedValue_s508;
[L4279]             havoc __ret_0_decreaseAllowance;
[L4280]             havoc __ret_0_owner;
[L4281]             havoc __ret_0_newOwner;
[L4282]             havoc _newOwner_s717;
[L4283]             havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]             havoc __ret_0_name;
[L4285]             havoc __ret_0_symbol;
[L4286]             havoc __ret_0_decimals;
[L4287]             havoc newName_s809;
[L4288]             havoc newSymbol_s809;
[L4289]             havoc account_s827;
[L4290]             havoc amount_s827;
[L4291]             havoc tmpNow;
[L4292]             havoc gas;
[L4293]             assume gas > 4000000 && gas <= 8000000;
[L4294]             tmpNow := now;
[L4295]             havoc now;
[L4296]             assume now > tmpNow;
[L4297]             assume msgsender_MSG != null;
[L4298]             assume DType[msgsender_MSG] != IERC20;
[L4299]             assume DType[msgsender_MSG] != SafeMath;
[L4300]             assume DType[msgsender_MSG] != ERC20;
[L4301]             assume DType[msgsender_MSG] != Owned;
[L4302]             assume DType[msgsender_MSG] != FnxToken;
[L4303]             Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE  choice == 18
[L4305]             gas := gas - 21000;
[L4306]  COND TRUE  gas >= 0
[L4307]             assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]             assume msgvalue_MSG == 0;
[L4309]  CALL       call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume ((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_transfer_ERC200 := true;
[L2]                call_transfer_ERC200 := false;
[L2]                revert := revert_hold;
[L448]              havoc __exception;
[L449]              revert := false;
[L450]   COND TRUE  __exception
[L451]              __tmp__Balance := Balance;
[L452]              __tmp__DType := DType;
[L453]              __tmp__Alloc := Alloc;
[L454]              __tmp__balance_ADDR := balance_ADDR;
[L455]              __tmp__M_Ref_int := M_Ref_int;
[L456]              __tmp__sum__balances0 := sum__balances0;
[L457]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L458]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L459]              __tmp__sum__allowed1 := sum__allowed1;
[L460]              __tmp__Length := Length;
[L461]              __tmp__now := now;
[L462]              __tmp___balances_ERC20 := _balances_ERC20;
[L463]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L464]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L465]              __tmp__owner_Owned := owner_Owned;
[L466]              __tmp__newOwner_Owned := newOwner_Owned;
[L467]              __tmp___name_FnxToken := _name_FnxToken;
[L468]              __tmp___symbol_FnxToken := _symbol_FnxToken;
[L469]              __tmp___decimals_FnxToken := _decimals_FnxToken;
[L470]              __tmp__MAX_TOTAL_TOKEN_AMOUNT_FnxToken := MAX_TOTAL_TOKEN_AMOUNT_FnxToken;
[L471]   CALL       call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2348]  COND TRUE  __tmp__DType[this] == FnxToken
[L2349]  CALL       call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2557]             __var_10 := null;
[L2558]  COND TRUE  !(to_s554 != null)
[L2559]             revert := true;
[L2349]  RET        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2350]  COND TRUE  revert
[L471]   RET        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L472]              assume revert || gas < 0;
[L4309]  RET        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET        call CorralChoice_FnxToken(this);

[2020-11-25 16:34:51,652 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:34:51,652 INFO  L82        PathProgramCache]: Analyzing trace with hash 1416883820, now seen corresponding path program 1 times
[2020-11-25 16:34:51,652 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:34:51,660 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:34:51,702 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 16:34:51,702 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:34:51,703 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 16:34:51,704 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:34:51,704 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 16:34:51,704 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 16:34:51,704 INFO  L87              Difference]: Start difference. First operand 2565 states and 2778 transitions. cyclomatic complexity: 215 Second operand 7 states.
[2020-11-25 16:34:51,808 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:34:51,808 INFO  L93              Difference]: Finished difference Result 2663 states and 2889 transitions.
[2020-11-25 16:34:51,808 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 16:34:51,808 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2663 states and 2889 transitions.
[2020-11-25 16:34:51,820 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:34:51,832 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2663 states to 2655 states and 2881 transitions.
[2020-11-25 16:34:51,832 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 740
[2020-11-25 16:34:51,833 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 740
[2020-11-25 16:34:51,833 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2655 states and 2881 transitions.
[2020-11-25 16:34:51,836 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:34:51,836 INFO  L728         BuchiCegarLoop]: Abstraction has 2655 states and 2881 transitions.
[2020-11-25 16:34:51,839 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2655 states and 2881 transitions.
[2020-11-25 16:34:51,871 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2655 to 2642.
[2020-11-25 16:34:51,871 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2642 states.
[2020-11-25 16:34:51,875 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2642 states to 2642 states and 2866 transitions.
[2020-11-25 16:34:51,876 INFO  L751         BuchiCegarLoop]: Abstraction has 2642 states and 2866 transitions.
[2020-11-25 16:34:51,876 INFO  L631         BuchiCegarLoop]: Abstraction has 2642 states and 2866 transitions.
[2020-11-25 16:34:51,876 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 16:34:51,876 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2642 states and 2866 transitions.
[2020-11-25 16:34:51,882 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:34:51,882 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:34:51,882 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:34:51,885 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:34:51,885 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4426]              assume null == 0;
[L4427]  CALL        call this := FreshRefGenerator__success();
[L2000]              havoc newRef;
[L2001]              assume Alloc[newRef] == false;
[L2002]              Alloc[newRef] := true;
[L2003]              assume newRef != null;
[L4427]  RET         call this := FreshRefGenerator__success();
[L4428]              assume now >= 0;
[L4429]              assume DType[this] == FnxToken;
[L4430]              assume msgvalue_MSG == 0;
[L4431]              gas := gas - 53000;
[L4432]  CALL        call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2894]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2768]              assume msgsender_MSG != null;
[L2769]              Balance[this] := 0;
[L2770]              owner_Owned[this] := null;
[L2771]              newOwner_Owned[this] := null;
[L2773]              owner_Owned[this] := msgsender_MSG;
[L2786]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2787]  COND FALSE  !(revert)
[L2894]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2895]  COND FALSE  !(revert)
[L2898]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2898]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  COND FALSE  !(revert)
[L2902]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2300]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2300]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]  COND FALSE  !(revert)
[L2304]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]              assume msgsender_MSG != null;
[L2277]              Balance[this] := 0;
[L2278]              _balances_ERC20[this] := zeroRefintArr();
[L2279]              sum__balances0[this] := 0;
[L2280]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2281]              sum__allowed1[this] := 0;
[L2282]              _totalSupply_ERC20[this] := 0;
[L2304]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2305]  COND FALSE  !(revert)
[L2902]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2903]  COND FALSE  !(revert)
[L2906]  CALL        call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2863]              assume msgsender_MSG != null;
[L2864]              Balance[this] := 0;
[L2865]              _name_FnxToken[this] := 699458114;
[L2866]              _symbol_FnxToken[this] := -216537299;
[L2867]              _decimals_FnxToken[this] := 18;
[L2868]              MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] := 500000000;
[L2906]  RET         call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]  COND FALSE  !(revert)
[L4432]  RET         call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]              assume !revert && gas >= 0;
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND TRUE   gas >= 0
[L4307]              assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]              assume msgvalue_MSG == 0;
[L4309]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND TRUE   __exception
[L451]               __tmp__Balance := Balance;
[L452]               __tmp__DType := DType;
[L453]               __tmp__Alloc := Alloc;
[L454]               __tmp__balance_ADDR := balance_ADDR;
[L455]               __tmp__M_Ref_int := M_Ref_int;
[L456]               __tmp__sum__balances0 := sum__balances0;
[L457]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L458]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L459]               __tmp__sum__allowed1 := sum__allowed1;
[L460]               __tmp__Length := Length;
[L461]               __tmp__now := now;
[L462]               __tmp___balances_ERC20 := _balances_ERC20;
[L463]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L464]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L465]               __tmp__owner_Owned := owner_Owned;
[L466]               __tmp__newOwner_Owned := newOwner_Owned;
[L467]               __tmp___name_FnxToken := _name_FnxToken;
[L468]               __tmp___symbol_FnxToken := _symbol_FnxToken;
[L469]               __tmp___decimals_FnxToken := _decimals_FnxToken;
[L470]               __tmp__MAX_TOTAL_TOKEN_AMOUNT_FnxToken := MAX_TOTAL_TOKEN_AMOUNT_FnxToken;
[L471]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2348]  COND TRUE   __tmp__DType[this] == FnxToken
[L2349]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2557]              __var_10 := null;
[L2558]  COND FALSE  !(!(to_s554 != null))
[L2562]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s554], value_s554);
[L2097]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2119]  COND TRUE   !(b_s136 <= a_s136)
[L2120]              revert := true;
[L2097]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2098]  COND TRUE   revert
[L2562]  RET         call __var_11 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s554], value_s554);
[L2563]  COND TRUE   revert
[L2349]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2350]  COND TRUE   revert
[L471]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L472]               assume revert || gas < 0;
[L4309]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET         call CorralChoice_FnxToken(this);

Loop:
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND TRUE   gas >= 0
[L4307]              assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]              assume msgvalue_MSG == 0;
[L4309]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND TRUE   __exception
[L451]               __tmp__Balance := Balance;
[L452]               __tmp__DType := DType;
[L453]               __tmp__Alloc := Alloc;
[L454]               __tmp__balance_ADDR := balance_ADDR;
[L455]               __tmp__M_Ref_int := M_Ref_int;
[L456]               __tmp__sum__balances0 := sum__balances0;
[L457]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L458]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L459]               __tmp__sum__allowed1 := sum__allowed1;
[L460]               __tmp__Length := Length;
[L461]               __tmp__now := now;
[L462]               __tmp___balances_ERC20 := _balances_ERC20;
[L463]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L464]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L465]               __tmp__owner_Owned := owner_Owned;
[L466]               __tmp__newOwner_Owned := newOwner_Owned;
[L467]               __tmp___name_FnxToken := _name_FnxToken;
[L468]               __tmp___symbol_FnxToken := _symbol_FnxToken;
[L469]               __tmp___decimals_FnxToken := _decimals_FnxToken;
[L470]               __tmp__MAX_TOTAL_TOKEN_AMOUNT_FnxToken := MAX_TOTAL_TOKEN_AMOUNT_FnxToken;
[L471]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2348]  COND TRUE   __tmp__DType[this] == FnxToken
[L2349]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2557]              __var_10 := null;
[L2558]  COND FALSE  !(!(to_s554 != null))
[L2562]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s554], value_s554);
[L2097]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2119]  COND TRUE   !(b_s136 <= a_s136)
[L2120]              revert := true;
[L2097]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2098]  COND TRUE   revert
[L2562]  RET         call __var_11 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s554], value_s554);
[L2563]  COND TRUE   revert
[L2349]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2350]  COND TRUE   revert
[L471]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L472]               assume revert || gas < 0;
[L4309]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET         call CorralChoice_FnxToken(this);

[2020-11-25 16:34:51,889 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:34:51,889 INFO  L82        PathProgramCache]: Analyzing trace with hash 1714033207, now seen corresponding path program 1 times
[2020-11-25 16:34:51,890 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:34:51,905 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:34:52,074 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 16:34:52,075 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:34:52,075 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-25 16:34:52,075 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:34:52,075 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 16:34:52,076 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=210, Unknown=0, NotChecked=0, Total=240
[2020-11-25 16:34:52,076 INFO  L87              Difference]: Start difference. First operand 2642 states and 2866 transitions. cyclomatic complexity: 226 Second operand 16 states.
[2020-11-25 16:34:53,800 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:34:53,800 INFO  L93              Difference]: Finished difference Result 2821 states and 3082 transitions.
[2020-11-25 16:34:53,801 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 16:34:53,801 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2821 states and 3082 transitions.
[2020-11-25 16:34:53,808 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 16:34:53,817 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2821 states to 2821 states and 3082 transitions.
[2020-11-25 16:34:53,817 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 827
[2020-11-25 16:34:53,817 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 827
[2020-11-25 16:34:53,817 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2821 states and 3082 transitions.
[2020-11-25 16:34:53,820 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:34:53,820 INFO  L728         BuchiCegarLoop]: Abstraction has 2821 states and 3082 transitions.
[2020-11-25 16:34:53,822 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2821 states and 3082 transitions.
[2020-11-25 16:34:53,840 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2821 to 2747.
[2020-11-25 16:34:53,840 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2747 states.
[2020-11-25 16:34:53,844 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2747 states to 2747 states and 2990 transitions.
[2020-11-25 16:34:53,844 INFO  L751         BuchiCegarLoop]: Abstraction has 2747 states and 2990 transitions.
[2020-11-25 16:34:53,844 INFO  L631         BuchiCegarLoop]: Abstraction has 2747 states and 2990 transitions.
[2020-11-25 16:34:53,844 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 16:34:53,844 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2747 states and 2990 transitions.
[2020-11-25 16:34:53,848 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 16:34:53,848 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:34:53,848 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:34:53,849 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:34:53,849 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4426]              assume null == 0;
[L4427]  CALL        call this := FreshRefGenerator__success();
[L2000]              havoc newRef;
[L2001]              assume Alloc[newRef] == false;
[L2002]              Alloc[newRef] := true;
[L2003]              assume newRef != null;
[L4427]  RET         call this := FreshRefGenerator__success();
[L4428]              assume now >= 0;
[L4429]              assume DType[this] == FnxToken;
[L4430]              assume msgvalue_MSG == 0;
[L4431]              gas := gas - 53000;
[L4432]  CALL        call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2894]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2768]              assume msgsender_MSG != null;
[L2769]              Balance[this] := 0;
[L2770]              owner_Owned[this] := null;
[L2771]              newOwner_Owned[this] := null;
[L2773]              owner_Owned[this] := msgsender_MSG;
[L2786]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2787]  COND FALSE  !(revert)
[L2894]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2895]  COND FALSE  !(revert)
[L2898]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2898]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  COND FALSE  !(revert)
[L2902]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2300]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2300]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]  COND FALSE  !(revert)
[L2304]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]              assume msgsender_MSG != null;
[L2277]              Balance[this] := 0;
[L2278]              _balances_ERC20[this] := zeroRefintArr();
[L2279]              sum__balances0[this] := 0;
[L2280]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2281]              sum__allowed1[this] := 0;
[L2282]              _totalSupply_ERC20[this] := 0;
[L2304]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2305]  COND FALSE  !(revert)
[L2902]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2903]  COND FALSE  !(revert)
[L2906]  CALL        call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2863]              assume msgsender_MSG != null;
[L2864]              Balance[this] := 0;
[L2865]              _name_FnxToken[this] := 699458114;
[L2866]              _symbol_FnxToken[this] := -216537299;
[L2867]              _decimals_FnxToken[this] := 18;
[L2868]              MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] := 500000000;
[L2906]  RET         call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]  COND FALSE  !(revert)
[L4432]  RET         call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]              assume !revert && gas >= 0;
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND TRUE   gas >= 0
[L4307]              assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]              assume msgvalue_MSG == 0;
[L4309]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L474]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2367]  COND TRUE   DType[this] == FnxToken
[L2368]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2583]              __var_10 := null;
[L2584]  COND FALSE  !(!(to_s554 != null))
[L2588]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2588]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2589]  COND FALSE  !(revert)
[L2592]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s554];
[L2593]              _balances_ERC20[this][from_s554] := __var_11;
[L2594]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s554];
[L2595]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2085]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2086]  COND FALSE  !(!(c_s93 >= a_s93))
[L2090]              __ret_0_ := c_s93;
[L2595]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2596]  COND FALSE  !(revert)
[L2599]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s554];
[L2600]              _balances_ERC20[this][to_s554] := __var_12;
[L2601]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s554];
[L2602]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2368]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2369]  COND FALSE  !(revert)
[L2380]              __ret_0_ := true;
[L474]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L475]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_FnxToken[this] == old(_name_FnxToken[this])) && _symbol_FnxToken[this] == old(_symbol_FnxToken[this])) && _decimals_FnxToken[this] == old(_decimals_FnxToken[this])) && MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] == old(MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4309]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET         call CorralChoice_FnxToken(this);

Loop:
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND TRUE   gas >= 0
[L4307]              assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]              assume msgvalue_MSG == 0;
[L4309]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND TRUE   __exception
[L451]               __tmp__Balance := Balance;
[L452]               __tmp__DType := DType;
[L453]               __tmp__Alloc := Alloc;
[L454]               __tmp__balance_ADDR := balance_ADDR;
[L455]               __tmp__M_Ref_int := M_Ref_int;
[L456]               __tmp__sum__balances0 := sum__balances0;
[L457]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L458]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L459]               __tmp__sum__allowed1 := sum__allowed1;
[L460]               __tmp__Length := Length;
[L461]               __tmp__now := now;
[L462]               __tmp___balances_ERC20 := _balances_ERC20;
[L463]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L464]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L465]               __tmp__owner_Owned := owner_Owned;
[L466]               __tmp__newOwner_Owned := newOwner_Owned;
[L467]               __tmp___name_FnxToken := _name_FnxToken;
[L468]               __tmp___symbol_FnxToken := _symbol_FnxToken;
[L469]               __tmp___decimals_FnxToken := _decimals_FnxToken;
[L470]               __tmp__MAX_TOTAL_TOKEN_AMOUNT_FnxToken := MAX_TOTAL_TOKEN_AMOUNT_FnxToken;
[L471]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2348]  COND TRUE   __tmp__DType[this] == FnxToken
[L2349]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2557]              __var_10 := null;
[L2558]  COND FALSE  !(!(to_s554 != null))
[L2562]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s554], value_s554);
[L2097]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2119]  COND FALSE  !(!(b_s136 <= a_s136))
[L2123]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2124]              __ret_0_ := c_s136;
[L2097]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2098]  COND FALSE  !(revert)
[L2101]              __ret_0_ := __var_1;
[L2562]  RET         call __var_11 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s554], value_s554);
[L2563]  COND FALSE  !(revert)
[L2566]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][from_s554];
[L2567]              __tmp___balances_ERC20[this][from_s554] := __var_11;
[L2568]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][from_s554];
[L2569]  CALL        call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s554], value_s554);
[L2073]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2074]  COND TRUE   !(c_s93 >= a_s93)
[L2075]              revert := true;
[L2569]  RET         call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s554], value_s554);
[L2570]  COND TRUE   revert
[L2349]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2350]  COND TRUE   revert
[L471]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L472]               assume revert || gas < 0;
[L4309]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET         call CorralChoice_FnxToken(this);

[2020-11-25 16:34:53,852 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:34:53,852 INFO  L82        PathProgramCache]: Analyzing trace with hash 1281031072, now seen corresponding path program 1 times
[2020-11-25 16:34:53,853 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:34:53,873 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:34:54,303 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 16:34:54,303 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:34:54,303 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [24] imperfect sequences [] total 24
[2020-11-25 16:34:54,303 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:34:54,303 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-25 16:34:54,304 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=57, Invalid=543, Unknown=0, NotChecked=0, Total=600
[2020-11-25 16:34:54,304 INFO  L87              Difference]: Start difference. First operand 2747 states and 2990 transitions. cyclomatic complexity: 247 Second operand 25 states.
[2020-11-25 16:34:58,129 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:34:58,129 INFO  L93              Difference]: Finished difference Result 2769 states and 3013 transitions.
[2020-11-25 16:34:58,129 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 16:34:58,129 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2769 states and 3013 transitions.
[2020-11-25 16:34:58,134 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 16:34:58,139 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2769 states to 2769 states and 3013 transitions.
[2020-11-25 16:34:58,139 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 820
[2020-11-25 16:34:58,140 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 820
[2020-11-25 16:34:58,140 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2769 states and 3013 transitions.
[2020-11-25 16:34:58,141 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:34:58,141 INFO  L728         BuchiCegarLoop]: Abstraction has 2769 states and 3013 transitions.
[2020-11-25 16:34:58,143 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2769 states and 3013 transitions.
[2020-11-25 16:34:58,159 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2769 to 2752.
[2020-11-25 16:34:58,159 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2752 states.
[2020-11-25 16:34:58,161 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2752 states to 2752 states and 2994 transitions.
[2020-11-25 16:34:58,162 INFO  L751         BuchiCegarLoop]: Abstraction has 2752 states and 2994 transitions.
[2020-11-25 16:34:58,162 INFO  L631         BuchiCegarLoop]: Abstraction has 2752 states and 2994 transitions.
[2020-11-25 16:34:58,162 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 16:34:58,162 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2752 states and 2994 transitions.
[2020-11-25 16:34:58,165 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 16:34:58,166 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:34:58,166 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:34:58,167 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:34:58,167 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4426]              assume null == 0;
[L4427]  CALL        call this := FreshRefGenerator__success();
[L2000]              havoc newRef;
[L2001]              assume Alloc[newRef] == false;
[L2002]              Alloc[newRef] := true;
[L2003]              assume newRef != null;
[L4427]  RET         call this := FreshRefGenerator__success();
[L4428]              assume now >= 0;
[L4429]              assume DType[this] == FnxToken;
[L4430]              assume msgvalue_MSG == 0;
[L4431]              gas := gas - 53000;
[L4432]  CALL        call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2894]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2768]              assume msgsender_MSG != null;
[L2769]              Balance[this] := 0;
[L2770]              owner_Owned[this] := null;
[L2771]              newOwner_Owned[this] := null;
[L2773]              owner_Owned[this] := msgsender_MSG;
[L2786]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2787]  COND FALSE  !(revert)
[L2894]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2895]  COND FALSE  !(revert)
[L2898]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2898]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  COND FALSE  !(revert)
[L2902]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2300]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2300]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]  COND FALSE  !(revert)
[L2304]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]              assume msgsender_MSG != null;
[L2277]              Balance[this] := 0;
[L2278]              _balances_ERC20[this] := zeroRefintArr();
[L2279]              sum__balances0[this] := 0;
[L2280]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2281]              sum__allowed1[this] := 0;
[L2282]              _totalSupply_ERC20[this] := 0;
[L2304]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2305]  COND FALSE  !(revert)
[L2902]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2903]  COND FALSE  !(revert)
[L2906]  CALL        call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2863]              assume msgsender_MSG != null;
[L2864]              Balance[this] := 0;
[L2865]              _name_FnxToken[this] := 699458114;
[L2866]              _symbol_FnxToken[this] := -216537299;
[L2867]              _decimals_FnxToken[this] := 18;
[L2868]              MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] := 500000000;
[L2906]  RET         call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]  COND FALSE  !(revert)
[L4432]  RET         call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]              assume !revert && gas >= 0;
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND TRUE   gas >= 0
[L4307]              assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]              assume msgvalue_MSG == 0;
[L4309]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND TRUE   __exception
[L451]               __tmp__Balance := Balance;
[L452]               __tmp__DType := DType;
[L453]               __tmp__Alloc := Alloc;
[L454]               __tmp__balance_ADDR := balance_ADDR;
[L455]               __tmp__M_Ref_int := M_Ref_int;
[L456]               __tmp__sum__balances0 := sum__balances0;
[L457]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L458]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L459]               __tmp__sum__allowed1 := sum__allowed1;
[L460]               __tmp__Length := Length;
[L461]               __tmp__now := now;
[L462]               __tmp___balances_ERC20 := _balances_ERC20;
[L463]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L464]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L465]               __tmp__owner_Owned := owner_Owned;
[L466]               __tmp__newOwner_Owned := newOwner_Owned;
[L467]               __tmp___name_FnxToken := _name_FnxToken;
[L468]               __tmp___symbol_FnxToken := _symbol_FnxToken;
[L469]               __tmp___decimals_FnxToken := _decimals_FnxToken;
[L470]               __tmp__MAX_TOTAL_TOKEN_AMOUNT_FnxToken := MAX_TOTAL_TOKEN_AMOUNT_FnxToken;
[L471]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2348]  COND TRUE   __tmp__DType[this] == FnxToken
[L2349]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2557]              __var_10 := null;
[L2558]  COND FALSE  !(!(to_s554 != null))
[L2562]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s554], value_s554);
[L2097]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2119]  COND FALSE  !(!(b_s136 <= a_s136))
[L2123]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2124]              __ret_0_ := c_s136;
[L2097]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2098]  COND FALSE  !(revert)
[L2101]              __ret_0_ := __var_1;
[L2562]  RET         call __var_11 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s554], value_s554);
[L2563]  COND FALSE  !(revert)
[L2566]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][from_s554];
[L2567]              __tmp___balances_ERC20[this][from_s554] := __var_11;
[L2568]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][from_s554];
[L2569]  CALL        call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s554], value_s554);
[L2073]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2074]  COND TRUE   !(c_s93 >= a_s93)
[L2075]              revert := true;
[L2569]  RET         call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s554], value_s554);
[L2570]  COND TRUE   revert
[L2349]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2350]  COND TRUE   revert
[L471]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L472]               assume revert || gas < 0;
[L4309]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET         call CorralChoice_FnxToken(this);

Loop:
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND TRUE   gas >= 0
[L4307]              assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]              assume msgvalue_MSG == 0;
[L4309]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND TRUE   __exception
[L451]               __tmp__Balance := Balance;
[L452]               __tmp__DType := DType;
[L453]               __tmp__Alloc := Alloc;
[L454]               __tmp__balance_ADDR := balance_ADDR;
[L455]               __tmp__M_Ref_int := M_Ref_int;
[L456]               __tmp__sum__balances0 := sum__balances0;
[L457]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L458]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L459]               __tmp__sum__allowed1 := sum__allowed1;
[L460]               __tmp__Length := Length;
[L461]               __tmp__now := now;
[L462]               __tmp___balances_ERC20 := _balances_ERC20;
[L463]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L464]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L465]               __tmp__owner_Owned := owner_Owned;
[L466]               __tmp__newOwner_Owned := newOwner_Owned;
[L467]               __tmp___name_FnxToken := _name_FnxToken;
[L468]               __tmp___symbol_FnxToken := _symbol_FnxToken;
[L469]               __tmp___decimals_FnxToken := _decimals_FnxToken;
[L470]               __tmp__MAX_TOTAL_TOKEN_AMOUNT_FnxToken := MAX_TOTAL_TOKEN_AMOUNT_FnxToken;
[L471]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2348]  COND TRUE   __tmp__DType[this] == FnxToken
[L2349]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2557]              __var_10 := null;
[L2558]  COND FALSE  !(!(to_s554 != null))
[L2562]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s554], value_s554);
[L2097]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2119]  COND FALSE  !(!(b_s136 <= a_s136))
[L2123]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2124]              __ret_0_ := c_s136;
[L2097]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2098]  COND FALSE  !(revert)
[L2101]              __ret_0_ := __var_1;
[L2562]  RET         call __var_11 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s554], value_s554);
[L2563]  COND FALSE  !(revert)
[L2566]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][from_s554];
[L2567]              __tmp___balances_ERC20[this][from_s554] := __var_11;
[L2568]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][from_s554];
[L2569]  CALL        call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s554], value_s554);
[L2073]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2074]  COND TRUE   !(c_s93 >= a_s93)
[L2075]              revert := true;
[L2569]  RET         call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s554], value_s554);
[L2570]  COND TRUE   revert
[L2349]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2350]  COND TRUE   revert
[L471]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L472]               assume revert || gas < 0;
[L4309]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET         call CorralChoice_FnxToken(this);

[2020-11-25 16:34:58,170 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:34:58,170 INFO  L82        PathProgramCache]: Analyzing trace with hash 389687087, now seen corresponding path program 1 times
[2020-11-25 16:34:58,171 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:34:58,181 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:34:58,258 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 16:34:58,258 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:34:58,258 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [21] imperfect sequences [] total 21
[2020-11-25 16:34:58,259 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:34:58,259 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-25 16:34:58,259 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=43, Invalid=419, Unknown=0, NotChecked=0, Total=462
[2020-11-25 16:34:58,259 INFO  L87              Difference]: Start difference. First operand 2752 states and 2994 transitions. cyclomatic complexity: 246 Second operand 22 states.
[2020-11-25 16:35:00,188 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:35:00,188 INFO  L93              Difference]: Finished difference Result 2793 states and 3043 transitions.
[2020-11-25 16:35:00,189 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 22 states. 
[2020-11-25 16:35:00,189 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2793 states and 3043 transitions.
[2020-11-25 16:35:00,193 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 16:35:00,198 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2793 states to 2793 states and 3043 transitions.
[2020-11-25 16:35:00,198 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 831
[2020-11-25 16:35:00,199 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 831
[2020-11-25 16:35:00,199 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2793 states and 3043 transitions.
[2020-11-25 16:35:00,201 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:35:00,201 INFO  L728         BuchiCegarLoop]: Abstraction has 2793 states and 3043 transitions.
[2020-11-25 16:35:00,203 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2793 states and 3043 transitions.
[2020-11-25 16:35:00,216 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2793 to 2695.
[2020-11-25 16:35:00,216 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2695 states.
[2020-11-25 16:35:00,219 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2695 states to 2695 states and 2931 transitions.
[2020-11-25 16:35:00,219 INFO  L751         BuchiCegarLoop]: Abstraction has 2695 states and 2931 transitions.
[2020-11-25 16:35:00,219 INFO  L631         BuchiCegarLoop]: Abstraction has 2695 states and 2931 transitions.
[2020-11-25 16:35:00,219 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 16:35:00,219 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2695 states and 2931 transitions.
[2020-11-25 16:35:00,221 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 16:35:00,221 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:35:00,222 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:35:00,223 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:35:00,223 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4426]              assume null == 0;
[L4427]  CALL        call this := FreshRefGenerator__success();
[L2000]              havoc newRef;
[L2001]              assume Alloc[newRef] == false;
[L2002]              Alloc[newRef] := true;
[L2003]              assume newRef != null;
[L4427]  RET         call this := FreshRefGenerator__success();
[L4428]              assume now >= 0;
[L4429]              assume DType[this] == FnxToken;
[L4430]              assume msgvalue_MSG == 0;
[L4431]              gas := gas - 53000;
[L4432]  CALL        call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2894]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2768]              assume msgsender_MSG != null;
[L2769]              Balance[this] := 0;
[L2770]              owner_Owned[this] := null;
[L2771]              newOwner_Owned[this] := null;
[L2773]              owner_Owned[this] := msgsender_MSG;
[L2786]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2787]  COND FALSE  !(revert)
[L2894]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2895]  COND FALSE  !(revert)
[L2898]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2898]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  COND FALSE  !(revert)
[L2902]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2300]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2300]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]  COND FALSE  !(revert)
[L2304]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]              assume msgsender_MSG != null;
[L2277]              Balance[this] := 0;
[L2278]              _balances_ERC20[this] := zeroRefintArr();
[L2279]              sum__balances0[this] := 0;
[L2280]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2281]              sum__allowed1[this] := 0;
[L2282]              _totalSupply_ERC20[this] := 0;
[L2304]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2305]  COND FALSE  !(revert)
[L2902]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2903]  COND FALSE  !(revert)
[L2906]  CALL        call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2863]              assume msgsender_MSG != null;
[L2864]              Balance[this] := 0;
[L2865]              _name_FnxToken[this] := 699458114;
[L2866]              _symbol_FnxToken[this] := -216537299;
[L2867]              _decimals_FnxToken[this] := 18;
[L2868]              MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] := 500000000;
[L2906]  RET         call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]  COND FALSE  !(revert)
[L4432]  RET         call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]              assume !revert && gas >= 0;
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND TRUE   gas >= 0
[L4307]              assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]              assume msgvalue_MSG == 0;
[L4309]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND TRUE   __exception
[L451]               __tmp__Balance := Balance;
[L452]               __tmp__DType := DType;
[L453]               __tmp__Alloc := Alloc;
[L454]               __tmp__balance_ADDR := balance_ADDR;
[L455]               __tmp__M_Ref_int := M_Ref_int;
[L456]               __tmp__sum__balances0 := sum__balances0;
[L457]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L458]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L459]               __tmp__sum__allowed1 := sum__allowed1;
[L460]               __tmp__Length := Length;
[L461]               __tmp__now := now;
[L462]               __tmp___balances_ERC20 := _balances_ERC20;
[L463]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L464]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L465]               __tmp__owner_Owned := owner_Owned;
[L466]               __tmp__newOwner_Owned := newOwner_Owned;
[L467]               __tmp___name_FnxToken := _name_FnxToken;
[L468]               __tmp___symbol_FnxToken := _symbol_FnxToken;
[L469]               __tmp___decimals_FnxToken := _decimals_FnxToken;
[L470]               __tmp__MAX_TOTAL_TOKEN_AMOUNT_FnxToken := MAX_TOTAL_TOKEN_AMOUNT_FnxToken;
[L471]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2348]  COND TRUE   __tmp__DType[this] == FnxToken
[L2349]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2557]              __var_10 := null;
[L2558]  COND FALSE  !(!(to_s554 != null))
[L2562]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s554], value_s554);
[L2097]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2119]  COND FALSE  !(!(b_s136 <= a_s136))
[L2123]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2124]              __ret_0_ := c_s136;
[L2097]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2098]  COND FALSE  !(revert)
[L2101]              __ret_0_ := __var_1;
[L2562]  RET         call __var_11 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s554], value_s554);
[L2563]  COND FALSE  !(revert)
[L2566]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][from_s554];
[L2567]              __tmp___balances_ERC20[this][from_s554] := __var_11;
[L2568]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][from_s554];
[L2569]  CALL        call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s554], value_s554);
[L2073]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2074]  COND FALSE  !(!(c_s93 >= a_s93))
[L2078]              __ret_0_ := c_s93;
[L2569]  RET         call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s554], value_s554);
[L2570]  COND FALSE  !(revert)
[L2573]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][to_s554];
[L2574]              __tmp___balances_ERC20[this][to_s554] := __var_12;
[L2575]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][to_s554];
[L2349]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2350]  COND FALSE  !(revert)
[L2361]              __ret_0_ := true;
[L471]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L472]               assume revert || gas < 0;
[L4309]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET         call CorralChoice_FnxToken(this);

Loop:
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND TRUE   gas >= 0
[L4307]              assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]              assume msgvalue_MSG == 0;
[L4309]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND TRUE   __exception
[L451]               __tmp__Balance := Balance;
[L452]               __tmp__DType := DType;
[L453]               __tmp__Alloc := Alloc;
[L454]               __tmp__balance_ADDR := balance_ADDR;
[L455]               __tmp__M_Ref_int := M_Ref_int;
[L456]               __tmp__sum__balances0 := sum__balances0;
[L457]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L458]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L459]               __tmp__sum__allowed1 := sum__allowed1;
[L460]               __tmp__Length := Length;
[L461]               __tmp__now := now;
[L462]               __tmp___balances_ERC20 := _balances_ERC20;
[L463]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L464]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L465]               __tmp__owner_Owned := owner_Owned;
[L466]               __tmp__newOwner_Owned := newOwner_Owned;
[L467]               __tmp___name_FnxToken := _name_FnxToken;
[L468]               __tmp___symbol_FnxToken := _symbol_FnxToken;
[L469]               __tmp___decimals_FnxToken := _decimals_FnxToken;
[L470]               __tmp__MAX_TOTAL_TOKEN_AMOUNT_FnxToken := MAX_TOTAL_TOKEN_AMOUNT_FnxToken;
[L471]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2348]  COND TRUE   __tmp__DType[this] == FnxToken
[L2349]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2557]              __var_10 := null;
[L2558]  COND FALSE  !(!(to_s554 != null))
[L2562]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s554], value_s554);
[L2097]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2119]  COND FALSE  !(!(b_s136 <= a_s136))
[L2123]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2124]              __ret_0_ := c_s136;
[L2097]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2098]  COND FALSE  !(revert)
[L2101]              __ret_0_ := __var_1;
[L2562]  RET         call __var_11 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s554], value_s554);
[L2563]  COND FALSE  !(revert)
[L2566]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][from_s554];
[L2567]              __tmp___balances_ERC20[this][from_s554] := __var_11;
[L2568]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][from_s554];
[L2569]  CALL        call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s554], value_s554);
[L2073]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2074]  COND FALSE  !(!(c_s93 >= a_s93))
[L2078]              __ret_0_ := c_s93;
[L2569]  RET         call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s554], value_s554);
[L2570]  COND FALSE  !(revert)
[L2573]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][to_s554];
[L2574]              __tmp___balances_ERC20[this][to_s554] := __var_12;
[L2575]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][to_s554];
[L2349]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2350]  COND FALSE  !(revert)
[L2361]              __ret_0_ := true;
[L471]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L472]               assume revert || gas < 0;
[L4309]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET         call CorralChoice_FnxToken(this);

[2020-11-25 16:35:00,226 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:35:00,226 INFO  L82        PathProgramCache]: Analyzing trace with hash -353265146, now seen corresponding path program 1 times
[2020-11-25 16:35:00,226 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:35:00,233 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:35:00,268 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 16:35:00,268 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:35:00,268 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 16:35:00,269 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:35:00,269 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 16:35:00,269 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-11-25 16:35:00,269 INFO  L87              Difference]: Start difference. First operand 2695 states and 2931 transitions. cyclomatic complexity: 240 Second operand 6 states.
[2020-11-25 16:35:00,705 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:35:00,706 INFO  L93              Difference]: Finished difference Result 3375 states and 3757 transitions.
[2020-11-25 16:35:00,706 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 16:35:00,706 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3375 states and 3757 transitions.
[2020-11-25 16:35:00,713 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 16:35:00,720 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3375 states to 2675 states and 3048 transitions.
[2020-11-25 16:35:00,720 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 571
[2020-11-25 16:35:00,720 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 571
[2020-11-25 16:35:00,720 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2675 states and 3048 transitions.
[2020-11-25 16:35:00,723 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:35:00,723 INFO  L728         BuchiCegarLoop]: Abstraction has 2675 states and 3048 transitions.
[2020-11-25 16:35:00,724 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2675 states and 3048 transitions.
[2020-11-25 16:35:00,736 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2675 to 2038.
[2020-11-25 16:35:00,736 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2038 states.
[2020-11-25 16:35:00,738 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2038 states to 2038 states and 2222 transitions.
[2020-11-25 16:35:00,738 INFO  L751         BuchiCegarLoop]: Abstraction has 2038 states and 2222 transitions.
[2020-11-25 16:35:00,738 INFO  L631         BuchiCegarLoop]: Abstraction has 2038 states and 2222 transitions.
[2020-11-25 16:35:00,738 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 16:35:00,738 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2038 states and 2222 transitions.
[2020-11-25 16:35:00,740 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:35:00,740 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:35:00,740 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:35:00,741 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:35:00,741 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4426]              assume null == 0;
[L4427]  CALL        call this := FreshRefGenerator__success();
[L2000]              havoc newRef;
[L2001]              assume Alloc[newRef] == false;
[L2002]              Alloc[newRef] := true;
[L2003]              assume newRef != null;
[L4427]  RET         call this := FreshRefGenerator__success();
[L4428]              assume now >= 0;
[L4429]              assume DType[this] == FnxToken;
[L4430]              assume msgvalue_MSG == 0;
[L4431]              gas := gas - 53000;
[L4432]  CALL        call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2894]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2768]              assume msgsender_MSG != null;
[L2769]              Balance[this] := 0;
[L2770]              owner_Owned[this] := null;
[L2771]              newOwner_Owned[this] := null;
[L2773]              owner_Owned[this] := msgsender_MSG;
[L2786]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2787]  COND FALSE  !(revert)
[L2894]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2895]  COND FALSE  !(revert)
[L2898]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2898]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  COND FALSE  !(revert)
[L2902]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2300]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2300]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]  COND FALSE  !(revert)
[L2304]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]              assume msgsender_MSG != null;
[L2277]              Balance[this] := 0;
[L2278]              _balances_ERC20[this] := zeroRefintArr();
[L2279]              sum__balances0[this] := 0;
[L2280]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2281]              sum__allowed1[this] := 0;
[L2282]              _totalSupply_ERC20[this] := 0;
[L2304]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2305]  COND FALSE  !(revert)
[L2902]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2903]  COND FALSE  !(revert)
[L2906]  CALL        call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2863]              assume msgsender_MSG != null;
[L2864]              Balance[this] := 0;
[L2865]              _name_FnxToken[this] := 699458114;
[L2866]              _symbol_FnxToken[this] := -216537299;
[L2867]              _decimals_FnxToken[this] := 18;
[L2868]              MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] := 500000000;
[L2906]  RET         call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]  COND FALSE  !(revert)
[L4432]  RET         call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]              assume !revert && gas >= 0;
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND TRUE   gas >= 0
[L4307]              assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]              assume msgvalue_MSG == 0;
[L4309]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L474]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2367]  COND TRUE   DType[this] == FnxToken
[L2368]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2583]              __var_10 := null;
[L2584]  COND FALSE  !(!(to_s554 != null))
[L2588]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2588]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2589]  COND FALSE  !(revert)
[L2592]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s554];
[L2593]              _balances_ERC20[this][from_s554] := __var_11;
[L2594]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s554];
[L2595]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2085]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2086]  COND FALSE  !(!(c_s93 >= a_s93))
[L2090]              __ret_0_ := c_s93;
[L2595]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2596]  COND FALSE  !(revert)
[L2599]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s554];
[L2600]              _balances_ERC20[this][to_s554] := __var_12;
[L2601]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s554];
[L2602]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2368]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2369]  COND FALSE  !(revert)
[L2380]              __ret_0_ := true;
[L474]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L475]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_FnxToken[this] == old(_name_FnxToken[this])) && _symbol_FnxToken[this] == old(_symbol_FnxToken[this])) && _decimals_FnxToken[this] == old(_decimals_FnxToken[this])) && MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] == old(MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4309]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET         call CorralChoice_FnxToken(this);
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND TRUE   gas >= 0
[L4307]              assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]              assume msgvalue_MSG == 0;
[L4309]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND TRUE   __exception
[L451]               __tmp__Balance := Balance;
[L452]               __tmp__DType := DType;
[L453]               __tmp__Alloc := Alloc;
[L454]               __tmp__balance_ADDR := balance_ADDR;
[L455]               __tmp__M_Ref_int := M_Ref_int;
[L456]               __tmp__sum__balances0 := sum__balances0;
[L457]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L458]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L459]               __tmp__sum__allowed1 := sum__allowed1;
[L460]               __tmp__Length := Length;
[L461]               __tmp__now := now;
[L462]               __tmp___balances_ERC20 := _balances_ERC20;
[L463]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L464]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L465]               __tmp__owner_Owned := owner_Owned;
[L466]               __tmp__newOwner_Owned := newOwner_Owned;
[L467]               __tmp___name_FnxToken := _name_FnxToken;
[L468]               __tmp___symbol_FnxToken := _symbol_FnxToken;
[L469]               __tmp___decimals_FnxToken := _decimals_FnxToken;
[L470]               __tmp__MAX_TOTAL_TOKEN_AMOUNT_FnxToken := MAX_TOTAL_TOKEN_AMOUNT_FnxToken;
[L471]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2348]  COND TRUE   __tmp__DType[this] == FnxToken
[L2349]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2557]              __var_10 := null;
[L2558]  COND FALSE  !(!(to_s554 != null))
[L2562]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s554], value_s554);
[L2097]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2119]  COND TRUE   !(b_s136 <= a_s136)
[L2120]              revert := true;
[L2097]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2098]  COND TRUE   revert
[L2562]  RET         call __var_11 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s554], value_s554);
[L2563]  COND TRUE   revert
[L2349]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2350]  COND TRUE   revert
[L471]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L472]               assume revert || gas < 0;
[L4309]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET         call CorralChoice_FnxToken(this);

Loop:
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND FALSE  !(gas >= 0)
[L4436]  RET         call CorralChoice_FnxToken(this);

[2020-11-25 16:35:00,743 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:35:00,744 INFO  L82        PathProgramCache]: Analyzing trace with hash -962111705, now seen corresponding path program 1 times
[2020-11-25 16:35:00,744 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:35:00,754 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:35:00,825 INFO  L134       CoverageAnalysis]: Checked inductivity of 71 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 71 trivial. 0 not checked.
[2020-11-25 16:35:00,825 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:35:00,825 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 16:35:00,825 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:35:00,825 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 16:35:00,825 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 16:35:00,826 INFO  L87              Difference]: Start difference. First operand 2038 states and 2222 transitions. cyclomatic complexity: 187 Second operand 9 states.
[2020-11-25 16:35:01,257 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:35:01,257 INFO  L93              Difference]: Finished difference Result 2125 states and 2332 transitions.
[2020-11-25 16:35:01,258 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 16:35:01,258 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2125 states and 2332 transitions.
[2020-11-25 16:35:01,262 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 16:35:01,266 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2125 states to 2125 states and 2332 transitions.
[2020-11-25 16:35:01,266 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 495
[2020-11-25 16:35:01,267 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 495
[2020-11-25 16:35:01,267 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2125 states and 2332 transitions.
[2020-11-25 16:35:01,268 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:35:01,268 INFO  L728         BuchiCegarLoop]: Abstraction has 2125 states and 2332 transitions.
[2020-11-25 16:35:01,270 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2125 states and 2332 transitions.
[2020-11-25 16:35:01,279 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2125 to 2038.
[2020-11-25 16:35:01,280 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2038 states.
[2020-11-25 16:35:01,281 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2038 states to 2038 states and 2222 transitions.
[2020-11-25 16:35:01,281 INFO  L751         BuchiCegarLoop]: Abstraction has 2038 states and 2222 transitions.
[2020-11-25 16:35:01,281 INFO  L631         BuchiCegarLoop]: Abstraction has 2038 states and 2222 transitions.
[2020-11-25 16:35:01,281 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 16:35:01,281 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2038 states and 2222 transitions.
[2020-11-25 16:35:01,283 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:35:01,283 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:35:01,283 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:35:01,284 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:35:01,284 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4426]              assume null == 0;
[L4427]  CALL        call this := FreshRefGenerator__success();
[L2000]              havoc newRef;
[L2001]              assume Alloc[newRef] == false;
[L2002]              Alloc[newRef] := true;
[L2003]              assume newRef != null;
[L4427]  RET         call this := FreshRefGenerator__success();
[L4428]              assume now >= 0;
[L4429]              assume DType[this] == FnxToken;
[L4430]              assume msgvalue_MSG == 0;
[L4431]              gas := gas - 53000;
[L4432]  CALL        call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2894]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2768]              assume msgsender_MSG != null;
[L2769]              Balance[this] := 0;
[L2770]              owner_Owned[this] := null;
[L2771]              newOwner_Owned[this] := null;
[L2773]              owner_Owned[this] := msgsender_MSG;
[L2786]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2787]  COND FALSE  !(revert)
[L2894]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2895]  COND FALSE  !(revert)
[L2898]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2898]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  COND FALSE  !(revert)
[L2902]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2300]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2300]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]  COND FALSE  !(revert)
[L2304]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]              assume msgsender_MSG != null;
[L2277]              Balance[this] := 0;
[L2278]              _balances_ERC20[this] := zeroRefintArr();
[L2279]              sum__balances0[this] := 0;
[L2280]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2281]              sum__allowed1[this] := 0;
[L2282]              _totalSupply_ERC20[this] := 0;
[L2304]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2305]  COND FALSE  !(revert)
[L2902]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2903]  COND FALSE  !(revert)
[L2906]  CALL        call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2863]              assume msgsender_MSG != null;
[L2864]              Balance[this] := 0;
[L2865]              _name_FnxToken[this] := 699458114;
[L2866]              _symbol_FnxToken[this] := -216537299;
[L2867]              _decimals_FnxToken[this] := 18;
[L2868]              MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] := 500000000;
[L2906]  RET         call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]  COND FALSE  !(revert)
[L4432]  RET         call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]              assume !revert && gas >= 0;
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND TRUE   gas >= 0
[L4307]              assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]              assume msgvalue_MSG == 0;
[L4309]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L474]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2367]  COND TRUE   DType[this] == FnxToken
[L2368]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2583]              __var_10 := null;
[L2584]  COND FALSE  !(!(to_s554 != null))
[L2588]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2588]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2589]  COND FALSE  !(revert)
[L2592]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s554];
[L2593]              _balances_ERC20[this][from_s554] := __var_11;
[L2594]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s554];
[L2595]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2085]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2086]  COND FALSE  !(!(c_s93 >= a_s93))
[L2090]              __ret_0_ := c_s93;
[L2595]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2596]  COND FALSE  !(revert)
[L2599]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s554];
[L2600]              _balances_ERC20[this][to_s554] := __var_12;
[L2601]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s554];
[L2602]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2368]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2369]  COND FALSE  !(revert)
[L2380]              __ret_0_ := true;
[L474]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L475]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_FnxToken[this] == old(_name_FnxToken[this])) && _symbol_FnxToken[this] == old(_symbol_FnxToken[this])) && _decimals_FnxToken[this] == old(_decimals_FnxToken[this])) && MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] == old(MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4309]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET         call CorralChoice_FnxToken(this);
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND TRUE   gas >= 0
[L4307]              assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]              assume msgvalue_MSG == 0;
[L4309]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L474]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2367]  COND TRUE   DType[this] == FnxToken
[L2368]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2583]              __var_10 := null;
[L2584]  COND FALSE  !(!(to_s554 != null))
[L2588]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2588]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2589]  COND FALSE  !(revert)
[L2592]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s554];
[L2593]              _balances_ERC20[this][from_s554] := __var_11;
[L2594]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s554];
[L2595]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2085]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2086]  COND FALSE  !(!(c_s93 >= a_s93))
[L2090]              __ret_0_ := c_s93;
[L2595]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2596]  COND FALSE  !(revert)
[L2599]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s554];
[L2600]              _balances_ERC20[this][to_s554] := __var_12;
[L2601]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s554];
[L2602]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2368]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2369]  COND FALSE  !(revert)
[L2380]              __ret_0_ := true;
[L474]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L475]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_FnxToken[this] == old(_name_FnxToken[this])) && _symbol_FnxToken[this] == old(_symbol_FnxToken[this])) && _decimals_FnxToken[this] == old(_decimals_FnxToken[this])) && MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] == old(MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4309]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET         call CorralChoice_FnxToken(this);

Loop:
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND FALSE  !(gas >= 0)
[L4436]  RET         call CorralChoice_FnxToken(this);

[2020-11-25 16:35:01,287 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:35:01,287 INFO  L82        PathProgramCache]: Analyzing trace with hash -569093968, now seen corresponding path program 1 times
[2020-11-25 16:35:01,288 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:35:01,303 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:35:01,689 INFO  L134       CoverageAnalysis]: Checked inductivity of 71 backedges. 1 proven. 2 refuted. 0 times theorem prover too weak. 68 trivial. 0 not checked.
[2020-11-25 16:35:01,689 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 16:35:01,689 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-11-25 16:35:01,689 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:35:01,689 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 16:35:01,690 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=66, Invalid=584, Unknown=0, NotChecked=0, Total=650
[2020-11-25 16:35:01,690 INFO  L87              Difference]: Start difference. First operand 2038 states and 2222 transitions. cyclomatic complexity: 187 Second operand 26 states.
[2020-11-25 16:35:04,324 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:35:04,324 INFO  L93              Difference]: Finished difference Result 2071 states and 2258 transitions.
[2020-11-25 16:35:04,325 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-11-25 16:35:04,325 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2071 states and 2258 transitions.
[2020-11-25 16:35:04,328 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:35:04,332 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2071 states to 2071 states and 2258 transitions.
[2020-11-25 16:35:04,332 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 468
[2020-11-25 16:35:04,333 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 468
[2020-11-25 16:35:04,333 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2071 states and 2258 transitions.
[2020-11-25 16:35:04,334 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:35:04,334 INFO  L728         BuchiCegarLoop]: Abstraction has 2071 states and 2258 transitions.
[2020-11-25 16:35:04,336 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2071 states and 2258 transitions.
[2020-11-25 16:35:04,363 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2071 to 2032.
[2020-11-25 16:35:04,363 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2032 states.
[2020-11-25 16:35:04,365 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2032 states to 2032 states and 2214 transitions.
[2020-11-25 16:35:04,365 INFO  L751         BuchiCegarLoop]: Abstraction has 2032 states and 2214 transitions.
[2020-11-25 16:35:04,365 INFO  L631         BuchiCegarLoop]: Abstraction has 2032 states and 2214 transitions.
[2020-11-25 16:35:04,365 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 16:35:04,365 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2032 states and 2214 transitions.
[2020-11-25 16:35:04,367 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:35:04,367 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:35:04,367 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:35:04,368 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:35:04,368 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4426]              assume null == 0;
[L4427]  CALL        call this := FreshRefGenerator__success();
[L2000]              havoc newRef;
[L2001]              assume Alloc[newRef] == false;
[L2002]              Alloc[newRef] := true;
[L2003]              assume newRef != null;
[L4427]  RET         call this := FreshRefGenerator__success();
[L4428]              assume now >= 0;
[L4429]              assume DType[this] == FnxToken;
[L4430]              assume msgvalue_MSG == 0;
[L4431]              gas := gas - 53000;
[L4432]  CALL        call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2894]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2768]              assume msgsender_MSG != null;
[L2769]              Balance[this] := 0;
[L2770]              owner_Owned[this] := null;
[L2771]              newOwner_Owned[this] := null;
[L2773]              owner_Owned[this] := msgsender_MSG;
[L2786]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2787]  COND FALSE  !(revert)
[L2894]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2895]  COND FALSE  !(revert)
[L2898]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2898]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  COND FALSE  !(revert)
[L2902]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2300]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2300]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]  COND FALSE  !(revert)
[L2304]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]              assume msgsender_MSG != null;
[L2277]              Balance[this] := 0;
[L2278]              _balances_ERC20[this] := zeroRefintArr();
[L2279]              sum__balances0[this] := 0;
[L2280]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2281]              sum__allowed1[this] := 0;
[L2282]              _totalSupply_ERC20[this] := 0;
[L2304]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2305]  COND FALSE  !(revert)
[L2902]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2903]  COND FALSE  !(revert)
[L2906]  CALL        call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2863]              assume msgsender_MSG != null;
[L2864]              Balance[this] := 0;
[L2865]              _name_FnxToken[this] := 699458114;
[L2866]              _symbol_FnxToken[this] := -216537299;
[L2867]              _decimals_FnxToken[this] := 18;
[L2868]              MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] := 500000000;
[L2906]  RET         call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]  COND FALSE  !(revert)
[L4432]  RET         call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]              assume !revert && gas >= 0;
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND TRUE   gas >= 0
[L4307]              assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]              assume msgvalue_MSG == 0;
[L4309]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L474]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2367]  COND TRUE   DType[this] == FnxToken
[L2368]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2583]              __var_10 := null;
[L2584]  COND FALSE  !(!(to_s554 != null))
[L2588]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2588]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2589]  COND FALSE  !(revert)
[L2592]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s554];
[L2593]              _balances_ERC20[this][from_s554] := __var_11;
[L2594]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s554];
[L2595]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2085]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2086]  COND FALSE  !(!(c_s93 >= a_s93))
[L2090]              __ret_0_ := c_s93;
[L2595]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2596]  COND FALSE  !(revert)
[L2599]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s554];
[L2600]              _balances_ERC20[this][to_s554] := __var_12;
[L2601]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s554];
[L2602]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2368]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2369]  COND FALSE  !(revert)
[L2380]              __ret_0_ := true;
[L474]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L475]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_FnxToken[this] == old(_name_FnxToken[this])) && _symbol_FnxToken[this] == old(_symbol_FnxToken[this])) && _decimals_FnxToken[this] == old(_decimals_FnxToken[this])) && MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] == old(MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]);
[L2]                 success_transfer_ERC200 := true;
[L2]                 success_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L4309]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET         call CorralChoice_FnxToken(this);
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND TRUE   gas >= 0
[L4307]              assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]              assume msgvalue_MSG == 0;
[L4309]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L474]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2367]  COND TRUE   DType[this] == FnxToken
[L2368]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2583]              __var_10 := null;
[L2584]  COND FALSE  !(!(to_s554 != null))
[L2588]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2588]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2589]  COND FALSE  !(revert)
[L2592]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s554];
[L2593]              _balances_ERC20[this][from_s554] := __var_11;
[L2594]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s554];
[L2595]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2085]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2086]  COND FALSE  !(!(c_s93 >= a_s93))
[L2090]              __ret_0_ := c_s93;
[L2595]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2596]  COND FALSE  !(revert)
[L2599]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s554];
[L2600]              _balances_ERC20[this][to_s554] := __var_12;
[L2601]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s554];
[L2602]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2368]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2369]  COND FALSE  !(revert)
[L2380]              __ret_0_ := true;
[L474]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L475]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_FnxToken[this] == old(_name_FnxToken[this])) && _symbol_FnxToken[this] == old(_symbol_FnxToken[this])) && _decimals_FnxToken[this] == old(_decimals_FnxToken[this])) && MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] == old(MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4309]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET         call CorralChoice_FnxToken(this);

Loop:
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND FALSE  !(gas >= 0)
[L4436]  RET         call CorralChoice_FnxToken(this);

[2020-11-25 16:35:04,387 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:35:04,387 INFO  L82        PathProgramCache]: Analyzing trace with hash -596861447, now seen corresponding path program 1 times
[2020-11-25 16:35:04,388 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:35:04,404 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:35:04,648 INFO  L134       CoverageAnalysis]: Checked inductivity of 71 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 67 trivial. 0 not checked.
[2020-11-25 16:35:04,648 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:35:04,648 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [27] imperfect sequences [] total 27
[2020-11-25 16:35:04,649 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:35:04,649 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-11-25 16:35:04,649 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=68, Invalid=688, Unknown=0, NotChecked=0, Total=756
[2020-11-25 16:35:04,649 INFO  L87              Difference]: Start difference. First operand 2032 states and 2214 transitions. cyclomatic complexity: 185 Second operand 28 states.
[2020-11-25 16:35:06,743 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:35:06,743 INFO  L93              Difference]: Finished difference Result 2071 states and 2267 transitions.
[2020-11-25 16:35:06,743 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 16:35:06,743 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2071 states and 2267 transitions.
[2020-11-25 16:35:06,746 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 16:35:06,751 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2071 states to 2071 states and 2267 transitions.
[2020-11-25 16:35:06,751 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 466
[2020-11-25 16:35:06,751 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 466
[2020-11-25 16:35:06,751 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2071 states and 2267 transitions.
[2020-11-25 16:35:06,752 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:35:06,752 INFO  L728         BuchiCegarLoop]: Abstraction has 2071 states and 2267 transitions.
[2020-11-25 16:35:06,754 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2071 states and 2267 transitions.
[2020-11-25 16:35:06,764 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2071 to 2071.
[2020-11-25 16:35:06,764 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2071 states.
[2020-11-25 16:35:06,766 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2071 states to 2071 states and 2267 transitions.
[2020-11-25 16:35:06,766 INFO  L751         BuchiCegarLoop]: Abstraction has 2071 states and 2267 transitions.
[2020-11-25 16:35:06,766 INFO  L631         BuchiCegarLoop]: Abstraction has 2071 states and 2267 transitions.
[2020-11-25 16:35:06,766 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 16:35:06,766 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2071 states and 2267 transitions.
[2020-11-25 16:35:06,768 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 16:35:06,768 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:35:06,768 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:35:06,769 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:35:06,769 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4426]              assume null == 0;
[L4427]  CALL        call this := FreshRefGenerator__success();
[L2000]              havoc newRef;
[L2001]              assume Alloc[newRef] == false;
[L2002]              Alloc[newRef] := true;
[L2003]              assume newRef != null;
[L4427]  RET         call this := FreshRefGenerator__success();
[L4428]              assume now >= 0;
[L4429]              assume DType[this] == FnxToken;
[L4430]              assume msgvalue_MSG == 0;
[L4431]              gas := gas - 53000;
[L4432]  CALL        call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2894]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2768]              assume msgsender_MSG != null;
[L2769]              Balance[this] := 0;
[L2770]              owner_Owned[this] := null;
[L2771]              newOwner_Owned[this] := null;
[L2773]              owner_Owned[this] := msgsender_MSG;
[L2786]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2787]  COND FALSE  !(revert)
[L2894]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2895]  COND FALSE  !(revert)
[L2898]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2898]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  COND FALSE  !(revert)
[L2902]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2300]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2300]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]  COND FALSE  !(revert)
[L2304]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]              assume msgsender_MSG != null;
[L2277]              Balance[this] := 0;
[L2278]              _balances_ERC20[this] := zeroRefintArr();
[L2279]              sum__balances0[this] := 0;
[L2280]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2281]              sum__allowed1[this] := 0;
[L2282]              _totalSupply_ERC20[this] := 0;
[L2304]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2305]  COND FALSE  !(revert)
[L2902]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2903]  COND FALSE  !(revert)
[L2906]  CALL        call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2863]              assume msgsender_MSG != null;
[L2864]              Balance[this] := 0;
[L2865]              _name_FnxToken[this] := 699458114;
[L2866]              _symbol_FnxToken[this] := -216537299;
[L2867]              _decimals_FnxToken[this] := 18;
[L2868]              MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] := 500000000;
[L2906]  RET         call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]  COND FALSE  !(revert)
[L4432]  RET         call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]              assume !revert && gas >= 0;
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND TRUE   gas >= 0
[L4307]              assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]              assume msgvalue_MSG == 0;
[L4309]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L474]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2367]  COND TRUE   DType[this] == FnxToken
[L2368]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2583]              __var_10 := null;
[L2584]  COND FALSE  !(!(to_s554 != null))
[L2588]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2588]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2589]  COND FALSE  !(revert)
[L2592]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s554];
[L2593]              _balances_ERC20[this][from_s554] := __var_11;
[L2594]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s554];
[L2595]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2085]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2086]  COND FALSE  !(!(c_s93 >= a_s93))
[L2090]              __ret_0_ := c_s93;
[L2595]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2596]  COND FALSE  !(revert)
[L2599]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s554];
[L2600]              _balances_ERC20[this][to_s554] := __var_12;
[L2601]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s554];
[L2602]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2368]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2369]  COND FALSE  !(revert)
[L2380]              __ret_0_ := true;
[L474]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L475]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_FnxToken[this] == old(_name_FnxToken[this])) && _symbol_FnxToken[this] == old(_symbol_FnxToken[this])) && _decimals_FnxToken[this] == old(_decimals_FnxToken[this])) && MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] == old(MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]);
[L2]                 success_transfer_ERC200 := true;
[L2]                 success_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L4309]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET         call CorralChoice_FnxToken(this);
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND TRUE   gas >= 0
[L4307]              assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]              assume msgvalue_MSG == 0;
[L4309]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND TRUE   __exception
[L451]               __tmp__Balance := Balance;
[L452]               __tmp__DType := DType;
[L453]               __tmp__Alloc := Alloc;
[L454]               __tmp__balance_ADDR := balance_ADDR;
[L455]               __tmp__M_Ref_int := M_Ref_int;
[L456]               __tmp__sum__balances0 := sum__balances0;
[L457]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L458]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L459]               __tmp__sum__allowed1 := sum__allowed1;
[L460]               __tmp__Length := Length;
[L461]               __tmp__now := now;
[L462]               __tmp___balances_ERC20 := _balances_ERC20;
[L463]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L464]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L465]               __tmp__owner_Owned := owner_Owned;
[L466]               __tmp__newOwner_Owned := newOwner_Owned;
[L467]               __tmp___name_FnxToken := _name_FnxToken;
[L468]               __tmp___symbol_FnxToken := _symbol_FnxToken;
[L469]               __tmp___decimals_FnxToken := _decimals_FnxToken;
[L470]               __tmp__MAX_TOTAL_TOKEN_AMOUNT_FnxToken := MAX_TOTAL_TOKEN_AMOUNT_FnxToken;
[L471]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2348]  COND TRUE   __tmp__DType[this] == FnxToken
[L2349]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2557]              __var_10 := null;
[L2558]  COND FALSE  !(!(to_s554 != null))
[L2562]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s554], value_s554);
[L2097]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2119]  COND FALSE  !(!(b_s136 <= a_s136))
[L2123]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2124]              __ret_0_ := c_s136;
[L2097]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2098]  COND FALSE  !(revert)
[L2101]              __ret_0_ := __var_1;
[L2562]  RET         call __var_11 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s554], value_s554);
[L2563]  COND FALSE  !(revert)
[L2566]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][from_s554];
[L2567]              __tmp___balances_ERC20[this][from_s554] := __var_11;
[L2568]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][from_s554];
[L2569]  CALL        call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s554], value_s554);
[L2073]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2074]  COND TRUE   !(c_s93 >= a_s93)
[L2075]              revert := true;
[L2569]  RET         call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s554], value_s554);
[L2570]  COND TRUE   revert
[L2349]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2350]  COND TRUE   revert
[L471]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L472]               assume revert || gas < 0;
[L4309]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET         call CorralChoice_FnxToken(this);

Loop:
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND TRUE   gas >= 0
[L4307]              assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]              assume msgvalue_MSG == 0;
[L4309]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND TRUE   __exception
[L451]               __tmp__Balance := Balance;
[L452]               __tmp__DType := DType;
[L453]               __tmp__Alloc := Alloc;
[L454]               __tmp__balance_ADDR := balance_ADDR;
[L455]               __tmp__M_Ref_int := M_Ref_int;
[L456]               __tmp__sum__balances0 := sum__balances0;
[L457]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L458]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L459]               __tmp__sum__allowed1 := sum__allowed1;
[L460]               __tmp__Length := Length;
[L461]               __tmp__now := now;
[L462]               __tmp___balances_ERC20 := _balances_ERC20;
[L463]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L464]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L465]               __tmp__owner_Owned := owner_Owned;
[L466]               __tmp__newOwner_Owned := newOwner_Owned;
[L467]               __tmp___name_FnxToken := _name_FnxToken;
[L468]               __tmp___symbol_FnxToken := _symbol_FnxToken;
[L469]               __tmp___decimals_FnxToken := _decimals_FnxToken;
[L470]               __tmp__MAX_TOTAL_TOKEN_AMOUNT_FnxToken := MAX_TOTAL_TOKEN_AMOUNT_FnxToken;
[L471]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2348]  COND TRUE   __tmp__DType[this] == FnxToken
[L2349]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2557]              __var_10 := null;
[L2558]  COND FALSE  !(!(to_s554 != null))
[L2562]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s554], value_s554);
[L2097]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2119]  COND FALSE  !(!(b_s136 <= a_s136))
[L2123]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2124]              __ret_0_ := c_s136;
[L2097]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2098]  COND FALSE  !(revert)
[L2101]              __ret_0_ := __var_1;
[L2562]  RET         call __var_11 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s554], value_s554);
[L2563]  COND FALSE  !(revert)
[L2566]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][from_s554];
[L2567]              __tmp___balances_ERC20[this][from_s554] := __var_11;
[L2568]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][from_s554];
[L2569]  CALL        call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s554], value_s554);
[L2073]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2074]  COND TRUE   !(c_s93 >= a_s93)
[L2075]              revert := true;
[L2569]  RET         call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s554], value_s554);
[L2570]  COND TRUE   revert
[L2349]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2350]  COND TRUE   revert
[L471]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L472]               assume revert || gas < 0;
[L4309]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET         call CorralChoice_FnxToken(this);

[2020-11-25 16:35:06,772 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:35:06,772 INFO  L82        PathProgramCache]: Analyzing trace with hash -1609128107, now seen corresponding path program 1 times
[2020-11-25 16:35:06,773 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:35:06,782 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:35:06,902 INFO  L134       CoverageAnalysis]: Checked inductivity of 72 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 67 trivial. 0 not checked.
[2020-11-25 16:35:06,902 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:35:06,902 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [24] imperfect sequences [] total 24
[2020-11-25 16:35:06,902 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:35:06,902 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-25 16:35:06,903 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=55, Invalid=545, Unknown=0, NotChecked=0, Total=600
[2020-11-25 16:35:06,903 INFO  L87              Difference]: Start difference. First operand 2071 states and 2267 transitions. cyclomatic complexity: 201 Second operand 25 states.
[2020-11-25 16:35:08,897 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:35:08,898 INFO  L93              Difference]: Finished difference Result 2123 states and 2339 transitions.
[2020-11-25 16:35:08,898 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 16:35:08,898 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2123 states and 2339 transitions.
[2020-11-25 16:35:08,902 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 16:35:08,907 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2123 states to 2123 states and 2339 transitions.
[2020-11-25 16:35:08,907 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 489
[2020-11-25 16:35:08,907 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 489
[2020-11-25 16:35:08,907 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2123 states and 2339 transitions.
[2020-11-25 16:35:08,908 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:35:08,908 INFO  L728         BuchiCegarLoop]: Abstraction has 2123 states and 2339 transitions.
[2020-11-25 16:35:08,910 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2123 states and 2339 transitions.
[2020-11-25 16:35:08,920 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2123 to 2048.
[2020-11-25 16:35:08,921 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2048 states.
[2020-11-25 16:35:08,923 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2048 states to 2048 states and 2237 transitions.
[2020-11-25 16:35:08,923 INFO  L751         BuchiCegarLoop]: Abstraction has 2048 states and 2237 transitions.
[2020-11-25 16:35:08,923 INFO  L631         BuchiCegarLoop]: Abstraction has 2048 states and 2237 transitions.
[2020-11-25 16:35:08,923 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 16:35:08,924 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2048 states and 2237 transitions.
[2020-11-25 16:35:08,926 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:35:08,927 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:35:08,927 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:35:08,928 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:35:08,928 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4426]              assume null == 0;
[L4427]  CALL        call this := FreshRefGenerator__success();
[L2000]              havoc newRef;
[L2001]              assume Alloc[newRef] == false;
[L2002]              Alloc[newRef] := true;
[L2003]              assume newRef != null;
[L4427]  RET         call this := FreshRefGenerator__success();
[L4428]              assume now >= 0;
[L4429]              assume DType[this] == FnxToken;
[L4430]              assume msgvalue_MSG == 0;
[L4431]              gas := gas - 53000;
[L4432]  CALL        call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2894]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2768]              assume msgsender_MSG != null;
[L2769]              Balance[this] := 0;
[L2770]              owner_Owned[this] := null;
[L2771]              newOwner_Owned[this] := null;
[L2773]              owner_Owned[this] := msgsender_MSG;
[L2786]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2787]  COND FALSE  !(revert)
[L2894]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2895]  COND FALSE  !(revert)
[L2898]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2898]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  COND FALSE  !(revert)
[L2902]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2300]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2300]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]  COND FALSE  !(revert)
[L2304]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]              assume msgsender_MSG != null;
[L2277]              Balance[this] := 0;
[L2278]              _balances_ERC20[this] := zeroRefintArr();
[L2279]              sum__balances0[this] := 0;
[L2280]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2281]              sum__allowed1[this] := 0;
[L2282]              _totalSupply_ERC20[this] := 0;
[L2304]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2305]  COND FALSE  !(revert)
[L2902]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2903]  COND FALSE  !(revert)
[L2906]  CALL        call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2863]              assume msgsender_MSG != null;
[L2864]              Balance[this] := 0;
[L2865]              _name_FnxToken[this] := 699458114;
[L2866]              _symbol_FnxToken[this] := -216537299;
[L2867]              _decimals_FnxToken[this] := 18;
[L2868]              MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] := 500000000;
[L2906]  RET         call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]  COND FALSE  !(revert)
[L4432]  RET         call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]              assume !revert && gas >= 0;
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND FALSE  !(choice == 18)
[L4311]  COND FALSE  !(choice == 17)
[L4318]  COND TRUE   choice == 16
[L4319]              gas := gas - 21000;
[L4320]  COND TRUE   gas >= 0
[L4321]              assume value_s410 >= 0 && value_s410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4322]              assume msgvalue_MSG == 0;
[L4323]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2445]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s410][msgsender_MSG], value_s410);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2445]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s410][msgsender_MSG], value_s410);
[L2446]  COND FALSE  !(revert)
[L2449]              sum__allowed1[from_s410] := sum__allowed1[from_s410] - _allowed_ERC20[this][from_s410][msgsender_MSG];
[L2450]              _allowed_ERC20[this][from_s410][msgsender_MSG] := __var_5;
[L2451]              sum__allowed1[from_s410] := sum__allowed1[from_s410] + _allowed_ERC20[this][from_s410][msgsender_MSG];
[L2452]  COND FALSE  !(DType[this] == FnxToken)
[L2457]  COND TRUE   DType[this] == ERC20
[L2458]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2583]              __var_10 := null;
[L2584]  COND FALSE  !(!(to_s554 != null))
[L2588]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2588]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2589]  COND FALSE  !(revert)
[L2592]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s554];
[L2593]              _balances_ERC20[this][from_s554] := __var_11;
[L2594]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s554];
[L2595]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2085]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2086]  COND FALSE  !(!(c_s93 >= a_s93))
[L2090]              __ret_0_ := c_s93;
[L2595]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2596]  COND FALSE  !(revert)
[L2599]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s554];
[L2600]              _balances_ERC20[this][to_s554] := __var_12;
[L2601]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s554];
[L2602]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2458]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2459]  COND FALSE  !(revert)
[L2465]              assert { :EventEmitted "Approval_ERC20" } true;
[L2466]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L593]               assume !revert && gas >= 0;
[L4323]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L4436]  RET         call CorralChoice_FnxToken(this);
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND TRUE   gas >= 0
[L4307]              assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]              assume msgvalue_MSG == 0;
[L4309]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L474]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2367]  COND TRUE   DType[this] == FnxToken
[L2368]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2583]              __var_10 := null;
[L2584]  COND FALSE  !(!(to_s554 != null))
[L2588]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2588]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2589]  COND FALSE  !(revert)
[L2592]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s554];
[L2593]              _balances_ERC20[this][from_s554] := __var_11;
[L2594]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s554];
[L2595]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2085]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2086]  COND FALSE  !(!(c_s93 >= a_s93))
[L2090]              __ret_0_ := c_s93;
[L2595]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2596]  COND FALSE  !(revert)
[L2599]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s554];
[L2600]              _balances_ERC20[this][to_s554] := __var_12;
[L2601]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s554];
[L2602]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2368]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2369]  COND FALSE  !(revert)
[L2380]              __ret_0_ := true;
[L474]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L475]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_FnxToken[this] == old(_name_FnxToken[this])) && _symbol_FnxToken[this] == old(_symbol_FnxToken[this])) && _decimals_FnxToken[this] == old(_decimals_FnxToken[this])) && MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] == old(MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4309]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET         call CorralChoice_FnxToken(this);

Loop:
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND TRUE   gas >= 0
[L4307]              assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]              assume msgvalue_MSG == 0;
[L4309]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L474]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2367]  COND TRUE   DType[this] == FnxToken
[L2368]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2583]              __var_10 := null;
[L2584]  COND FALSE  !(!(to_s554 != null))
[L2588]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2588]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2589]  COND FALSE  !(revert)
[L2592]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s554];
[L2593]              _balances_ERC20[this][from_s554] := __var_11;
[L2594]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s554];
[L2595]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2085]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2086]  COND FALSE  !(!(c_s93 >= a_s93))
[L2090]              __ret_0_ := c_s93;
[L2595]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2596]  COND FALSE  !(revert)
[L2599]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s554];
[L2600]              _balances_ERC20[this][to_s554] := __var_12;
[L2601]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s554];
[L2602]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2368]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2369]  COND FALSE  !(revert)
[L2380]              __ret_0_ := true;
[L474]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L475]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_FnxToken[this] == old(_name_FnxToken[this])) && _symbol_FnxToken[this] == old(_symbol_FnxToken[this])) && _decimals_FnxToken[this] == old(_decimals_FnxToken[this])) && MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] == old(MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4309]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET         call CorralChoice_FnxToken(this);

[2020-11-25 16:35:08,932 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:35:08,933 INFO  L82        PathProgramCache]: Analyzing trace with hash -790328399, now seen corresponding path program 1 times
[2020-11-25 16:35:08,933 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:35:08,940 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:35:08,978 INFO  L134       CoverageAnalysis]: Checked inductivity of 74 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 73 trivial. 0 not checked.
[2020-11-25 16:35:08,978 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:35:08,978 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 16:35:08,978 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:35:08,978 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 16:35:08,978 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 16:35:08,978 INFO  L87              Difference]: Start difference. First operand 2048 states and 2237 transitions. cyclomatic complexity: 193 Second operand 6 states.
[2020-11-25 16:35:09,007 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:35:09,007 INFO  L93              Difference]: Finished difference Result 2070 states and 2257 transitions.
[2020-11-25 16:35:09,007 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 16:35:09,007 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2070 states and 2257 transitions.
[2020-11-25 16:35:09,010 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:35:09,014 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2070 states to 2038 states and 2223 transitions.
[2020-11-25 16:35:09,014 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 446
[2020-11-25 16:35:09,014 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 446
[2020-11-25 16:35:09,014 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2038 states and 2223 transitions.
[2020-11-25 16:35:09,015 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:35:09,015 INFO  L728         BuchiCegarLoop]: Abstraction has 2038 states and 2223 transitions.
[2020-11-25 16:35:09,016 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2038 states and 2223 transitions.
[2020-11-25 16:35:09,026 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2038 to 2038.
[2020-11-25 16:35:09,026 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2038 states.
[2020-11-25 16:35:09,027 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2038 states to 2038 states and 2223 transitions.
[2020-11-25 16:35:09,027 INFO  L751         BuchiCegarLoop]: Abstraction has 2038 states and 2223 transitions.
[2020-11-25 16:35:09,027 INFO  L631         BuchiCegarLoop]: Abstraction has 2038 states and 2223 transitions.
[2020-11-25 16:35:09,027 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 16:35:09,028 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2038 states and 2223 transitions.
[2020-11-25 16:35:09,030 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:35:09,030 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:35:09,030 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:35:09,032 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:35:09,032 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4426]              assume null == 0;
[L4427]  CALL        call this := FreshRefGenerator__success();
[L2000]              havoc newRef;
[L2001]              assume Alloc[newRef] == false;
[L2002]              Alloc[newRef] := true;
[L2003]              assume newRef != null;
[L4427]  RET         call this := FreshRefGenerator__success();
[L4428]              assume now >= 0;
[L4429]              assume DType[this] == FnxToken;
[L4430]              assume msgvalue_MSG == 0;
[L4431]              gas := gas - 53000;
[L4432]  CALL        call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2894]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2768]              assume msgsender_MSG != null;
[L2769]              Balance[this] := 0;
[L2770]              owner_Owned[this] := null;
[L2771]              newOwner_Owned[this] := null;
[L2773]              owner_Owned[this] := msgsender_MSG;
[L2786]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2787]  COND FALSE  !(revert)
[L2894]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2895]  COND FALSE  !(revert)
[L2898]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2898]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  COND FALSE  !(revert)
[L2902]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2300]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2300]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]  COND FALSE  !(revert)
[L2304]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]              assume msgsender_MSG != null;
[L2277]              Balance[this] := 0;
[L2278]              _balances_ERC20[this] := zeroRefintArr();
[L2279]              sum__balances0[this] := 0;
[L2280]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2281]              sum__allowed1[this] := 0;
[L2282]              _totalSupply_ERC20[this] := 0;
[L2304]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2305]  COND FALSE  !(revert)
[L2902]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2903]  COND FALSE  !(revert)
[L2906]  CALL        call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2863]              assume msgsender_MSG != null;
[L2864]              Balance[this] := 0;
[L2865]              _name_FnxToken[this] := 699458114;
[L2866]              _symbol_FnxToken[this] := -216537299;
[L2867]              _decimals_FnxToken[this] := 18;
[L2868]              MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] := 500000000;
[L2906]  RET         call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]  COND FALSE  !(revert)
[L4432]  RET         call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]              assume !revert && gas >= 0;
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND FALSE  !(choice == 18)
[L4311]  COND FALSE  !(choice == 17)
[L4318]  COND TRUE   choice == 16
[L4319]              gas := gas - 21000;
[L4320]  COND TRUE   gas >= 0
[L4321]              assume value_s410 >= 0 && value_s410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4322]              assume msgvalue_MSG == 0;
[L4323]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2445]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s410][msgsender_MSG], value_s410);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2445]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s410][msgsender_MSG], value_s410);
[L2446]  COND FALSE  !(revert)
[L2449]              sum__allowed1[from_s410] := sum__allowed1[from_s410] - _allowed_ERC20[this][from_s410][msgsender_MSG];
[L2450]              _allowed_ERC20[this][from_s410][msgsender_MSG] := __var_5;
[L2451]              sum__allowed1[from_s410] := sum__allowed1[from_s410] + _allowed_ERC20[this][from_s410][msgsender_MSG];
[L2452]  COND TRUE   DType[this] == FnxToken
[L2453]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2583]              __var_10 := null;
[L2584]  COND FALSE  !(!(to_s554 != null))
[L2588]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2588]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2589]  COND FALSE  !(revert)
[L2592]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s554];
[L2593]              _balances_ERC20[this][from_s554] := __var_11;
[L2594]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s554];
[L2595]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2085]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2086]  COND FALSE  !(!(c_s93 >= a_s93))
[L2090]              __ret_0_ := c_s93;
[L2595]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2596]  COND FALSE  !(revert)
[L2599]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s554];
[L2600]              _balances_ERC20[this][to_s554] := __var_12;
[L2601]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s554];
[L2602]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2453]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2454]  COND FALSE  !(revert)
[L2465]              assert { :EventEmitted "Approval_ERC20" } true;
[L2466]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L593]               assume !revert && gas >= 0;
[L4323]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L4436]  RET         call CorralChoice_FnxToken(this);
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND TRUE   gas >= 0
[L4307]              assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]              assume msgvalue_MSG == 0;
[L4309]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L474]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2367]  COND TRUE   DType[this] == FnxToken
[L2368]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2583]              __var_10 := null;
[L2584]  COND FALSE  !(!(to_s554 != null))
[L2588]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2588]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2589]  COND FALSE  !(revert)
[L2592]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s554];
[L2593]              _balances_ERC20[this][from_s554] := __var_11;
[L2594]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s554];
[L2595]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2085]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2086]  COND FALSE  !(!(c_s93 >= a_s93))
[L2090]              __ret_0_ := c_s93;
[L2595]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2596]  COND FALSE  !(revert)
[L2599]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s554];
[L2600]              _balances_ERC20[this][to_s554] := __var_12;
[L2601]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s554];
[L2602]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2368]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2369]  COND FALSE  !(revert)
[L2380]              __ret_0_ := true;
[L474]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L475]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_FnxToken[this] == old(_name_FnxToken[this])) && _symbol_FnxToken[this] == old(_symbol_FnxToken[this])) && _decimals_FnxToken[this] == old(_decimals_FnxToken[this])) && MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] == old(MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4309]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET         call CorralChoice_FnxToken(this);

Loop:
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND TRUE   gas >= 0
[L4307]              assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]              assume msgvalue_MSG == 0;
[L4309]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L474]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2367]  COND TRUE   DType[this] == FnxToken
[L2368]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2583]              __var_10 := null;
[L2584]  COND FALSE  !(!(to_s554 != null))
[L2588]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2588]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2589]  COND FALSE  !(revert)
[L2592]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s554];
[L2593]              _balances_ERC20[this][from_s554] := __var_11;
[L2594]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s554];
[L2595]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2085]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2086]  COND FALSE  !(!(c_s93 >= a_s93))
[L2090]              __ret_0_ := c_s93;
[L2595]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2596]  COND FALSE  !(revert)
[L2599]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s554];
[L2600]              _balances_ERC20[this][to_s554] := __var_12;
[L2601]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s554];
[L2602]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2368]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2369]  COND FALSE  !(revert)
[L2380]              __ret_0_ := true;
[L474]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L475]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_FnxToken[this] == old(_name_FnxToken[this])) && _symbol_FnxToken[this] == old(_symbol_FnxToken[this])) && _decimals_FnxToken[this] == old(_decimals_FnxToken[this])) && MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] == old(MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4309]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET         call CorralChoice_FnxToken(this);

[2020-11-25 16:35:09,036 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:35:09,036 INFO  L82        PathProgramCache]: Analyzing trace with hash 1477677855, now seen corresponding path program 1 times
[2020-11-25 16:35:09,037 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:35:09,059 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:35:09,708 INFO  L134       CoverageAnalysis]: Checked inductivity of 74 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 65 trivial. 0 not checked.
[2020-11-25 16:35:09,708 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:35:09,708 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [39] imperfect sequences [] total 39
[2020-11-25 16:35:09,709 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:35:09,709 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 40 interpolants.
[2020-11-25 16:35:09,710 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=120, Invalid=1440, Unknown=0, NotChecked=0, Total=1560
[2020-11-25 16:35:09,710 INFO  L87              Difference]: Start difference. First operand 2038 states and 2223 transitions. cyclomatic complexity: 189 Second operand 40 states.
[2020-11-25 16:35:13,934 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:35:13,934 INFO  L93              Difference]: Finished difference Result 2071 states and 2275 transitions.
[2020-11-25 16:35:13,934 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-11-25 16:35:13,934 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2071 states and 2275 transitions.
[2020-11-25 16:35:13,937 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 16:35:13,941 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2071 states to 2071 states and 2275 transitions.
[2020-11-25 16:35:13,941 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 468
[2020-11-25 16:35:13,941 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 468
[2020-11-25 16:35:13,941 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2071 states and 2275 transitions.
[2020-11-25 16:35:13,942 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:35:13,942 INFO  L728         BuchiCegarLoop]: Abstraction has 2071 states and 2275 transitions.
[2020-11-25 16:35:13,944 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2071 states and 2275 transitions.
[2020-11-25 16:35:13,953 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2071 to 2062.
[2020-11-25 16:35:13,953 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2062 states.
[2020-11-25 16:35:13,955 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2062 states to 2062 states and 2261 transitions.
[2020-11-25 16:35:13,955 INFO  L751         BuchiCegarLoop]: Abstraction has 2062 states and 2261 transitions.
[2020-11-25 16:35:13,955 INFO  L631         BuchiCegarLoop]: Abstraction has 2062 states and 2261 transitions.
[2020-11-25 16:35:13,955 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 16:35:13,955 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2062 states and 2261 transitions.
[2020-11-25 16:35:13,957 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 16:35:13,957 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:35:13,957 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:35:13,958 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:35:13,958 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4426]              assume null == 0;
[L4427]  CALL        call this := FreshRefGenerator__success();
[L2000]              havoc newRef;
[L2001]              assume Alloc[newRef] == false;
[L2002]              Alloc[newRef] := true;
[L2003]              assume newRef != null;
[L4427]  RET         call this := FreshRefGenerator__success();
[L4428]              assume now >= 0;
[L4429]              assume DType[this] == FnxToken;
[L4430]              assume msgvalue_MSG == 0;
[L4431]              gas := gas - 53000;
[L4432]  CALL        call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2894]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2768]              assume msgsender_MSG != null;
[L2769]              Balance[this] := 0;
[L2770]              owner_Owned[this] := null;
[L2771]              newOwner_Owned[this] := null;
[L2773]              owner_Owned[this] := msgsender_MSG;
[L2786]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2787]  COND FALSE  !(revert)
[L2894]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2895]  COND FALSE  !(revert)
[L2898]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2898]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  COND FALSE  !(revert)
[L2902]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2300]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2300]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]  COND FALSE  !(revert)
[L2304]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]              assume msgsender_MSG != null;
[L2277]              Balance[this] := 0;
[L2278]              _balances_ERC20[this] := zeroRefintArr();
[L2279]              sum__balances0[this] := 0;
[L2280]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2281]              sum__allowed1[this] := 0;
[L2282]              _totalSupply_ERC20[this] := 0;
[L2304]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2305]  COND FALSE  !(revert)
[L2902]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2903]  COND FALSE  !(revert)
[L2906]  CALL        call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2863]              assume msgsender_MSG != null;
[L2864]              Balance[this] := 0;
[L2865]              _name_FnxToken[this] := 699458114;
[L2866]              _symbol_FnxToken[this] := -216537299;
[L2867]              _decimals_FnxToken[this] := 18;
[L2868]              MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] := 500000000;
[L2906]  RET         call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]  COND FALSE  !(revert)
[L4432]  RET         call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]              assume !revert && gas >= 0;
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND FALSE  !(choice == 18)
[L4311]  COND FALSE  !(choice == 17)
[L4318]  COND TRUE   choice == 16
[L4319]              gas := gas - 21000;
[L4320]  COND TRUE   gas >= 0
[L4321]              assume value_s410 >= 0 && value_s410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4322]              assume msgvalue_MSG == 0;
[L4323]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2445]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s410][msgsender_MSG], value_s410);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2445]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][from_s410][msgsender_MSG], value_s410);
[L2446]  COND FALSE  !(revert)
[L2449]              sum__allowed1[from_s410] := sum__allowed1[from_s410] - _allowed_ERC20[this][from_s410][msgsender_MSG];
[L2450]              _allowed_ERC20[this][from_s410][msgsender_MSG] := __var_5;
[L2451]              sum__allowed1[from_s410] := sum__allowed1[from_s410] + _allowed_ERC20[this][from_s410][msgsender_MSG];
[L2452]  COND TRUE   DType[this] == FnxToken
[L2453]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2583]              __var_10 := null;
[L2584]  COND FALSE  !(!(to_s554 != null))
[L2588]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2588]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2589]  COND FALSE  !(revert)
[L2592]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s554];
[L2593]              _balances_ERC20[this][from_s554] := __var_11;
[L2594]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s554];
[L2595]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2085]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2086]  COND FALSE  !(!(c_s93 >= a_s93))
[L2090]              __ret_0_ := c_s93;
[L2595]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2596]  COND FALSE  !(revert)
[L2599]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s554];
[L2600]              _balances_ERC20[this][to_s554] := __var_12;
[L2601]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s554];
[L2602]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2453]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L2454]  COND FALSE  !(revert)
[L2465]              assert { :EventEmitted "Approval_ERC20" } true;
[L2466]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L593]               assume !revert && gas >= 0;
[L4323]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, from_s410, to_s410, value_s410);
[L4436]  RET         call CorralChoice_FnxToken(this);
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND TRUE   gas >= 0
[L4307]              assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]              assume msgvalue_MSG == 0;
[L4309]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND TRUE   __exception
[L451]               __tmp__Balance := Balance;
[L452]               __tmp__DType := DType;
[L453]               __tmp__Alloc := Alloc;
[L454]               __tmp__balance_ADDR := balance_ADDR;
[L455]               __tmp__M_Ref_int := M_Ref_int;
[L456]               __tmp__sum__balances0 := sum__balances0;
[L457]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L458]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L459]               __tmp__sum__allowed1 := sum__allowed1;
[L460]               __tmp__Length := Length;
[L461]               __tmp__now := now;
[L462]               __tmp___balances_ERC20 := _balances_ERC20;
[L463]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L464]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L465]               __tmp__owner_Owned := owner_Owned;
[L466]               __tmp__newOwner_Owned := newOwner_Owned;
[L467]               __tmp___name_FnxToken := _name_FnxToken;
[L468]               __tmp___symbol_FnxToken := _symbol_FnxToken;
[L469]               __tmp___decimals_FnxToken := _decimals_FnxToken;
[L470]               __tmp__MAX_TOTAL_TOKEN_AMOUNT_FnxToken := MAX_TOTAL_TOKEN_AMOUNT_FnxToken;
[L471]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2348]  COND TRUE   __tmp__DType[this] == FnxToken
[L2349]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2557]              __var_10 := null;
[L2558]  COND FALSE  !(!(to_s554 != null))
[L2562]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s554], value_s554);
[L2097]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2119]  COND FALSE  !(!(b_s136 <= a_s136))
[L2123]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2124]              __ret_0_ := c_s136;
[L2097]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2098]  COND FALSE  !(revert)
[L2101]              __ret_0_ := __var_1;
[L2562]  RET         call __var_11 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][from_s554], value_s554);
[L2563]  COND FALSE  !(revert)
[L2566]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][from_s554];
[L2567]              __tmp___balances_ERC20[this][from_s554] := __var_11;
[L2568]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][from_s554];
[L2569]  CALL        call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s554], value_s554);
[L2073]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2074]  COND TRUE   !(c_s93 >= a_s93)
[L2075]              revert := true;
[L2569]  RET         call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s554], value_s554);
[L2570]  COND TRUE   revert
[L2349]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2350]  COND TRUE   revert
[L471]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L472]               assume revert || gas < 0;
[L4309]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET         call CorralChoice_FnxToken(this);

Loop:
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND FALSE  !(gas >= 0)
[L4436]  RET         call CorralChoice_FnxToken(this);

[2020-11-25 16:35:13,961 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:35:13,961 INFO  L82        PathProgramCache]: Analyzing trace with hash -1574028720, now seen corresponding path program 1 times
[2020-11-25 16:35:13,961 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:35:13,973 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:35:14,062 INFO  L134       CoverageAnalysis]: Checked inductivity of 74 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 74 trivial. 0 not checked.
[2020-11-25 16:35:14,062 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:35:14,062 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 16:35:14,063 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:35:14,064 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 16:35:14,064 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=33, Invalid=207, Unknown=0, NotChecked=0, Total=240
[2020-11-25 16:35:14,064 INFO  L87              Difference]: Start difference. First operand 2062 states and 2261 transitions. cyclomatic complexity: 205 Second operand 16 states.
[2020-11-25 16:35:15,024 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:35:15,024 INFO  L93              Difference]: Finished difference Result 2105 states and 2327 transitions.
[2020-11-25 16:35:15,025 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 16:35:15,025 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2105 states and 2327 transitions.
[2020-11-25 16:35:15,029 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 16:35:15,033 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2105 states to 2063 states and 2283 transitions.
[2020-11-25 16:35:15,033 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 480
[2020-11-25 16:35:15,033 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 480
[2020-11-25 16:35:15,033 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2063 states and 2283 transitions.
[2020-11-25 16:35:15,035 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:35:15,035 INFO  L728         BuchiCegarLoop]: Abstraction has 2063 states and 2283 transitions.
[2020-11-25 16:35:15,036 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2063 states and 2283 transitions.
[2020-11-25 16:35:15,045 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2063 to 1976.
[2020-11-25 16:35:15,046 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1976 states.
[2020-11-25 16:35:15,047 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1976 states to 1976 states and 2151 transitions.
[2020-11-25 16:35:15,047 INFO  L751         BuchiCegarLoop]: Abstraction has 1976 states and 2151 transitions.
[2020-11-25 16:35:15,047 INFO  L631         BuchiCegarLoop]: Abstraction has 1976 states and 2151 transitions.
[2020-11-25 16:35:15,047 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 16:35:15,047 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1976 states and 2151 transitions.
[2020-11-25 16:35:15,049 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:35:15,049 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:35:15,049 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:35:15,050 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:35:15,050 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4426]              assume null == 0;
[L4427]  CALL        call this := FreshRefGenerator__success();
[L2000]              havoc newRef;
[L2001]              assume Alloc[newRef] == false;
[L2002]              Alloc[newRef] := true;
[L2003]              assume newRef != null;
[L4427]  RET         call this := FreshRefGenerator__success();
[L4428]              assume now >= 0;
[L4429]              assume DType[this] == FnxToken;
[L4430]              assume msgvalue_MSG == 0;
[L4431]              gas := gas - 53000;
[L4432]  CALL        call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2894]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2768]              assume msgsender_MSG != null;
[L2769]              Balance[this] := 0;
[L2770]              owner_Owned[this] := null;
[L2771]              newOwner_Owned[this] := null;
[L2773]              owner_Owned[this] := msgsender_MSG;
[L2786]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2787]  COND FALSE  !(revert)
[L2894]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2895]  COND FALSE  !(revert)
[L2898]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2898]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  COND FALSE  !(revert)
[L2902]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2300]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2032]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2017]              assume msgsender_MSG != null;
[L2018]              Balance[this] := 0;
[L2032]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2033]  COND FALSE  !(revert)
[L2300]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]  COND FALSE  !(revert)
[L2304]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]              assume msgsender_MSG != null;
[L2277]              Balance[this] := 0;
[L2278]              _balances_ERC20[this] := zeroRefintArr();
[L2279]              sum__balances0[this] := 0;
[L2280]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2281]              sum__allowed1[this] := 0;
[L2282]              _totalSupply_ERC20[this] := 0;
[L2304]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2305]  COND FALSE  !(revert)
[L2902]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2903]  COND FALSE  !(revert)
[L2906]  CALL        call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2863]              assume msgsender_MSG != null;
[L2864]              Balance[this] := 0;
[L2865]              _name_FnxToken[this] := 699458114;
[L2866]              _symbol_FnxToken[this] := -216537299;
[L2867]              _decimals_FnxToken[this] := 18;
[L2868]              MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] := 500000000;
[L2906]  RET         call FnxToken_FnxToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2907]  COND FALSE  !(revert)
[L4432]  RET         call FnxToken_FnxToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]              assume !revert && gas >= 0;
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND FALSE  !(choice == 18)
[L4311]  COND FALSE  !(choice == 17)
[L4318]  COND FALSE  !(choice == 16)
[L4325]  COND FALSE  !(choice == 15)
[L4331]  COND FALSE  !(choice == 14)
[L4337]  COND FALSE  !(choice == 13)
[L4343]  COND FALSE  !(choice == 12)
[L4350]  COND FALSE  !(choice == 11)
[L4357]  COND FALSE  !(choice == 10)
[L4363]  COND FALSE  !(choice == 9)
[L4369]  COND FALSE  !(choice == 8)
[L4375]  COND FALSE  !(choice == 7)
[L4381]  COND FALSE  !(choice == 6)
[L4387]  COND FALSE  !(choice == 5)
[L4393]  COND FALSE  !(choice == 4)
[L4399]  COND FALSE  !(choice == 3)
[L4405]  COND FALSE  !(choice == 2)
[L4411]  COND TRUE   choice == 1
[L4412]              gas := gas - 21000;
[L4413]  COND TRUE   gas >= 0
[L4414]              assume amount_s827 >= 0 && amount_s827 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4415]              assume msgvalue_MSG == 0;
[L4416]  CALL        call mint~address~uint256_FnxToken(this, msgsender_MSG, msgvalue_MSG, account_s827, amount_s827);
[L1357]              havoc __exception;
[L1358]              revert := false;
[L1359]  COND FALSE  !(__exception)
[L1383]  CALL        call mint~address~uint256_FnxToken__success(this, msgsender_MSG, msgvalue_MSG, account_s827, amount_s827);
[L2990]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3872]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L2990]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2991]  COND FALSE  !(revert)
[L2994]  CALL        call maxWanTokenAmountNotReached_pre__success(this, msgsender_MSG, msgvalue_MSG, amount_s827);
[L3900]  COND TRUE   DType[this] == FnxToken
[L3901]  CALL        call __var_21 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2318]              __ret_0_ := _totalSupply_ERC20[this];
[L3901]  RET         call __var_21 := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3902]  COND FALSE  !(revert)
[L3908]  CALL        call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_21, amount_s767);
[L2085]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2086]  COND FALSE  !(!(c_s93 >= a_s93))
[L2090]              __ret_0_ := c_s93;
[L3908]  RET         call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, __var_21, amount_s767);
[L3909]  COND FALSE  !(revert)
[L3912]              assert __var_20 <= MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this];
[L2994]  RET         call maxWanTokenAmountNotReached_pre__success(this, msgsender_MSG, msgvalue_MSG, amount_s827);
[L2995]  COND FALSE  !(revert)
[L2998]  COND TRUE   DType[this] == FnxToken
[L2999]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s827, amount_s827);
[L2634]              __var_13 := null;
[L2635]  COND FALSE  !(!(account_s596 != null))
[L2639]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s596);
[L2085]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2086]  COND FALSE  !(!(c_s93 >= a_s93))
[L2090]              __ret_0_ := c_s93;
[L2639]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s596);
[L2640]  COND FALSE  !(revert)
[L2643]              _totalSupply_ERC20[this] := __var_14;
[L2644]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s596], value_s596);
[L2085]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2086]  COND FALSE  !(!(c_s93 >= a_s93))
[L2090]              __ret_0_ := c_s93;
[L2644]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s596], value_s596);
[L2645]  COND FALSE  !(revert)
[L2648]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s596];
[L2649]              _balances_ERC20[this][account_s596] := __var_15;
[L2650]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s596];
[L2651]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2999]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s827, amount_s827);
[L3000]  COND FALSE  !(revert)
[L1383]  RET         call mint~address~uint256_FnxToken__success(this, msgsender_MSG, msgvalue_MSG, account_s827, amount_s827);
[L1384]              assume !revert && gas >= 0;
[L4416]  RET         call mint~address~uint256_FnxToken(this, msgsender_MSG, msgvalue_MSG, account_s827, amount_s827);
[L4436]  RET         call CorralChoice_FnxToken(this);
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND TRUE   gas >= 0
[L4307]              assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]              assume msgvalue_MSG == 0;
[L4309]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L474]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2367]  COND TRUE   DType[this] == FnxToken
[L2368]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2583]              __var_10 := null;
[L2584]  COND FALSE  !(!(to_s554 != null))
[L2588]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2588]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2589]  COND FALSE  !(revert)
[L2592]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s554];
[L2593]              _balances_ERC20[this][from_s554] := __var_11;
[L2594]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s554];
[L2595]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2085]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2086]  COND FALSE  !(!(c_s93 >= a_s93))
[L2090]              __ret_0_ := c_s93;
[L2595]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2596]  COND FALSE  !(revert)
[L2599]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s554];
[L2600]              _balances_ERC20[this][to_s554] := __var_12;
[L2601]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s554];
[L2602]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2368]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2369]  COND FALSE  !(revert)
[L2380]              __ret_0_ := true;
[L474]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L475]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_FnxToken[this] == old(_name_FnxToken[this])) && _symbol_FnxToken[this] == old(_symbol_FnxToken[this])) && _decimals_FnxToken[this] == old(_decimals_FnxToken[this])) && MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] == old(MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4309]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET         call CorralChoice_FnxToken(this);

Loop:
[L4436]  CALL        call CorralChoice_FnxToken(this);
[L4255]              havoc msgsender_MSG;
[L4256]              havoc msgvalue_MSG;
[L4257]              havoc choice;
[L4258]              havoc to_s325;
[L4259]              havoc value_s325;
[L4260]              havoc __ret_0_transfer;
[L4261]              havoc spender_s361;
[L4262]              havoc value_s361;
[L4263]              havoc __ret_0_approve;
[L4264]              havoc from_s410;
[L4265]              havoc to_s410;
[L4266]              havoc value_s410;
[L4267]              havoc __ret_0_transferFrom;
[L4268]              havoc __ret_0_totalSupply;
[L4269]              havoc owner_s290;
[L4270]              havoc __ret_0_balanceOf;
[L4271]              havoc owner_s306;
[L4272]              havoc spender_s306;
[L4273]              havoc __ret_0_allowance;
[L4274]              havoc spender_s459;
[L4275]              havoc addedValue_s459;
[L4276]              havoc __ret_0_increaseAllowance;
[L4277]              havoc spender_s508;
[L4278]              havoc subtractedValue_s508;
[L4279]              havoc __ret_0_decreaseAllowance;
[L4280]              havoc __ret_0_owner;
[L4281]              havoc __ret_0_newOwner;
[L4282]              havoc _newOwner_s717;
[L4283]              havoc __ret_0_MAX_TOTAL_TOKEN_AMOUNT;
[L4284]              havoc __ret_0_name;
[L4285]              havoc __ret_0_symbol;
[L4286]              havoc __ret_0_decimals;
[L4287]              havoc newName_s809;
[L4288]              havoc newSymbol_s809;
[L4289]              havoc account_s827;
[L4290]              havoc amount_s827;
[L4291]              havoc tmpNow;
[L4292]              havoc gas;
[L4293]              assume gas > 4000000 && gas <= 8000000;
[L4294]              tmpNow := now;
[L4295]              havoc now;
[L4296]              assume now > tmpNow;
[L4297]              assume msgsender_MSG != null;
[L4298]              assume DType[msgsender_MSG] != IERC20;
[L4299]              assume DType[msgsender_MSG] != SafeMath;
[L4300]              assume DType[msgsender_MSG] != ERC20;
[L4301]              assume DType[msgsender_MSG] != Owned;
[L4302]              assume DType[msgsender_MSG] != FnxToken;
[L4303]              Alloc[msgsender_MSG] := true;
[L4304]  COND TRUE   choice == 18
[L4305]              gas := gas - 21000;
[L4306]  COND TRUE   gas >= 0
[L4307]              assume value_s325 >= 0 && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4308]              assume msgvalue_MSG == 0;
[L4309]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s325 && value_s325 <= _balances_ERC20[this][msgsender_MSG]) && value_s325 >= 0) && value_s325 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s325] >= 0) && _balances_ERC20[this][to_s325] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L448]               havoc __exception;
[L449]               revert := false;
[L450]   COND FALSE  !(__exception)
[L474]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L2367]  COND TRUE   DType[this] == FnxToken
[L2368]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2583]              __var_10 := null;
[L2584]  COND FALSE  !(!(to_s554 != null))
[L2588]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2108]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2131]  COND FALSE  !(!(b_s136 <= a_s136))
[L2135]              c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2136]              __ret_0_ := c_s136;
[L2108]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s109, b_s109, 1257583290);
[L2109]  COND FALSE  !(revert)
[L2112]              __ret_0_ := __var_1;
[L2588]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s554], value_s554);
[L2589]  COND FALSE  !(revert)
[L2592]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s554];
[L2593]              _balances_ERC20[this][from_s554] := __var_11;
[L2594]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s554];
[L2595]  CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2085]              c_s93 := (a_s93 + b_s93) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2086]  COND FALSE  !(!(c_s93 >= a_s93))
[L2090]              __ret_0_ := c_s93;
[L2595]  RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s554], value_s554);
[L2596]  COND FALSE  !(revert)
[L2599]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s554];
[L2600]              _balances_ERC20[this][to_s554] := __var_12;
[L2601]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s554];
[L2602]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2368]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s325, value_s325);
[L2369]  COND FALSE  !(revert)
[L2380]              __ret_0_ := true;
[L474]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L475]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _name_FnxToken[this] == old(_name_FnxToken[this])) && _symbol_FnxToken[this] == old(_symbol_FnxToken[this])) && _decimals_FnxToken[this] == old(_decimals_FnxToken[this])) && MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this] == old(MAX_TOTAL_TOKEN_AMOUNT_FnxToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4309]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s325, value_s325);
[L4436]  RET         call CorralChoice_FnxToken(this);

[2020-11-25 16:35:15,054 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:35:15,054 INFO  L82        PathProgramCache]: Analyzing trace with hash 637933291, now seen corresponding path program 1 times
[2020-11-25 16:35:15,055 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:35:15,082 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Received shutdown request...
[2020-11-25 16:49:46,811 FATAL L265        ToolchainWalker]: An unrecoverable error occured during an interaction with an SMT solver:
de.uni_freiburg.informatik.ultimate.logic.SMTLIBException: Timeout exceeded
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$MixedLAInterpolator.convert(Interpolator.java:1288)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.cacheConvert(TermTransformer.java:131)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.access$0(TermTransformer.java:127)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer$Convert.walk(TermTransformer.java:79)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.transform(TermTransformer.java:253)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.mixedPivotLA(Interpolator.java:1478)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.combine(Interpolator.java:359)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.access$2(Interpolator.java:328)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$CombineInterpolants.walk(Interpolator.java:153)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.interpolate(Interpolator.java:220)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.getInterpolants(Interpolator.java:201)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.smtlib2.SMTInterpol.getInterpolants(SMTInterpol.java:919)
	at de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.managedscript.ManagedScript.getInterpolants(ManagedScript.java:200)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.computeCraigInterpolants(NestedInterpolantsBuilder.java:303)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:167)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:182)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolantsTree(InterpolatingTraceCheckCraig.java:271)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolants(InterpolatingTraceCheckCraig.java:207)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.<init>(InterpolatingTraceCheckCraig.java:109)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructCraig(TraceCheckConstructor.java:211)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructTraceCheck(TraceCheckConstructor.java:183)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.get(TraceCheckConstructor.java:165)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.FixedRefinementStrategy.getTraceCheck(FixedRefinementStrategy.java:134)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.checkFeasibility(BaseRefinementStrategy.java:223)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.executeStrategy(BaseRefinementStrategy.java:197)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceAbstractionRefinementEngine.<init>(TraceAbstractionRefinementEngine.java:70)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkFeasibilityAndComputeInterpolants(LassoCheck.java:1126)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkStemFeasibility(LassoCheck.java:1080)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:994)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-25 16:49:46,812 INFO  L168              Benchmark]: Toolchain (without parser) took 898584.82 ms. Allocated memory was 1.0 GB in the beginning and 6.5 GB in the end (delta: 5.5 GB). Free memory was 935.2 MB in the beginning and 5.4 GB in the end (delta: -4.5 GB). Peak memory consumption was 6.2 GB. Max. memory is 15.3 GB.
[2020-11-25 16:49:46,813 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 16:49:46,813 INFO  L168              Benchmark]: Boogie Preprocessor took 99.20 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 16:49:46,814 INFO  L168              Benchmark]: UtopiaSpecLang took 65.37 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:49:46,814 INFO  L168              Benchmark]: Boogie Printer took 15.94 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:49:46,814 INFO  L168              Benchmark]: RCFGBuilder took 698.03 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 801.0 MB in the end (delta: 112.7 MB). Peak memory consumption was 112.7 MB. Max. memory is 15.3 GB.
[2020-11-25 16:49:46,814 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.66 ms. Allocated memory is still 1.0 GB. Free memory was 801.0 MB in the beginning and 792.0 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 16:49:46,814 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1255.16 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 206.0 MB). Free memory was 792.0 MB in the beginning and 1.0 GB in the end (delta: -242.1 MB). Peak memory consumption was 171.2 MB. Max. memory is 15.3 GB.
[2020-11-25 16:49:46,816 INFO  L168              Benchmark]: BlockEncodingV2 took 129.19 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 966.8 MB in the end (delta: 67.3 MB). Peak memory consumption was 67.3 MB. Max. memory is 15.3 GB.
[2020-11-25 16:49:46,816 INFO  L168              Benchmark]: BuchiAutomizer took 896280.28 ms. Allocated memory was 1.2 GB in the beginning and 6.5 GB in the end (delta: 5.3 GB). Free memory was 966.8 MB in the beginning and 5.4 GB in the end (delta: -4.4 GB). Peak memory consumption was 6.0 GB. Max. memory is 15.3 GB.
[2020-11-25 16:49:46,820 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3838 locations, 6753 edges
  - StatisticsResult: Encoded RCFG
    3778 locations, 6593 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 99.20 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 65.37 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 15.94 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 698.03 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 801.0 MB in the end (delta: 112.7 MB). Peak memory consumption was 112.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.66 ms. Allocated memory is still 1.0 GB. Free memory was 801.0 MB in the beginning and 792.0 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1255.16 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 206.0 MB). Free memory was 792.0 MB in the beginning and 1.0 GB in the end (delta: -242.1 MB). Peak memory consumption was 171.2 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 129.19 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 966.8 MB in the end (delta: 67.3 MB). Peak memory consumption was 67.3 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 896280.28 ms. Allocated memory was 1.2 GB in the beginning and 6.5 GB in the end (delta: 5.3 GB). Free memory was 966.8 MB in the beginning and 5.4 GB in the end (delta: -4.4 GB). Peak memory consumption was 6.0 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1560 locations, 2060 edges
  - StatisticsResult: BuchiProgram size
    3838 locations, 6753 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: SMTLIBException: Timeout exceeded
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: SMTLIBException: Timeout exceeded: de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Completed graceful shutdown
