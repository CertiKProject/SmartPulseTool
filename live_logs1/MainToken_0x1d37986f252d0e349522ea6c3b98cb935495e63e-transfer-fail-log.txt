This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 21:30:36,857 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 21:30:36,858 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 21:30:36,871 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 21:30:36,871 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 21:30:36,872 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 21:30:36,873 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 21:30:36,874 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 21:30:36,877 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 21:30:36,877 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 21:30:36,878 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 21:30:36,879 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 21:30:36,879 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 21:30:36,880 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 21:30:36,881 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 21:30:36,881 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 21:30:36,882 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 21:30:36,883 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 21:30:36,885 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 21:30:36,886 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 21:30:36,887 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 21:30:36,888 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 21:30:36,890 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 21:30:36,890 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 21:30:36,890 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 21:30:36,890 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 21:30:36,891 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 21:30:36,891 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 21:30:36,892 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 21:30:36,892 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 21:30:36,892 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 21:30:36,893 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 21:30:36,893 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 21:30:36,894 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 21:30:36,895 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 21:30:36,895 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 21:30:36,896 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 21:30:36,896 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 21:30:36,896 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 21:30:36,897 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 21:30:36,897 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 21:30:36,897 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 21:30:36,905 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 21:30:36,905 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 21:30:36,906 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 21:30:36,906 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 21:30:36,907 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 21:30:36,907 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 21:30:36,907 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 21:30:36,907 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 21:30:36,907 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 21:30:36,907 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 21:30:36,907 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 21:30:36,908 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 21:30:36,908 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 21:30:36,908 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 21:30:36,908 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 21:30:36,908 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 21:30:36,908 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 21:30:36,908 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 21:30:36,908 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 21:30:36,909 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 21:30:36,909 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 21:30:36,909 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 21:30:36,909 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 21:30:36,909 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 21:30:36,909 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 21:30:36,909 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 21:30:36,935 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 21:30:36,948 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 21:30:36,951 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 21:30:36,952 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 21:30:36,953 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 21:30:36,953 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-fail.bpl
[2020-11-24 21:30:36,953 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-fail.bpl'
[2020-11-24 21:30:37,108 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 21:30:37,109 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 21:30:37,110 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 21:30:37,110 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 21:30:37,110 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 21:30:37,127 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:30:37" (1/1) ...
[2020-11-24 21:30:37,129 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:30:37" (1/1) ...
[2020-11-24 21:30:37,180 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:30:37" (1/1) ...
[2020-11-24 21:30:37,181 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:30:37" (1/1) ...
[2020-11-24 21:30:37,225 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:30:37" (1/1) ...
[2020-11-24 21:30:37,252 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:30:37" (1/1) ...
[2020-11-24 21:30:37,273 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:30:37" (1/1) ...
[2020-11-24 21:30:37,299 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 21:30:37,299 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 21:30:37,300 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 21:30:37,302 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 21:30:37,306 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:30:37" (1/1) ...
[2020-11-24 21:30:37,338 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(MainToken.transfer(to, value), msg.sender != to && (value > balances_BasicToken[this][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(MainToken.transfer)))
[2020-11-24 21:30:37,345 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(MainToken.transfer(to, value), msg.sender != to && (value > balances_BasicToken[this][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(MainToken.transfer)))
[2020-11-24 21:30:37,353 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(MainToken.transfer(to, value), msg.sender != to && (value > balances_BasicToken[this][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(MainToken.transfer)))
[2020-11-24 21:30:37,364 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender!=_to_s1572 && ( _value_s1572>balances_BasicToken[this][msg.sender] || ( balances_BasicToken[this][_to_s1572] + _value_s1572 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && _value_s1572>=0 ) && _value_s1572<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_to_s1572]>=0 ) && balances_BasicToken[this][_to_s1572]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][msg.sender]>=0 ) && balances_BasicToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>],IdentifierExpression[_to_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[_value_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],IdentifierExpression[_value_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 21:30:37,371 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(MainToken.transfer(to, value), msg.sender != to && (value > balances_BasicToken[this][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(MainToken.transfer)))
[2020-11-24 21:30:37,371 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_MainToken0) ==> ( <>AP(fail_transfer_MainToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 21:30:37,403 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:30:37 PropertyContainer
[2020-11-24 21:30:37,404 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 21:30:37,404 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 21:30:37,404 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 21:30:37,404 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 21:30:37,405 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:30:37" (1/2) ...
[2020-11-24 21:30:37,406 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 21:30:37,406 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 21:30:37,439 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:30:37" (2/2) ...
[2020-11-24 21:30:37,439 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 21:30:37,439 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 21:30:37,440 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 21:30:37,440 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 21:30:37,440 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:30:37" (1/2) ...
[2020-11-24 21:30:37,497 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 21:30:37,497 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:30:37,498 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:30:37,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:30:37,498 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-24 21:30:37,498 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-24 21:30:37,498 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-24 21:30:37,498 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:30:37,498 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 21:30:37,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 21:30:37,498 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:30:37,499 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:30:37,499 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:30:37,499 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:30:37,499 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:30:37,499 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-24 21:30:37,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-24 21:30:37,499 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-24 21:30:37,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-24 21:30:37,500 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:30:37,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:30:37,500 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-24 21:30:37,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-24 21:30:37,500 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:30:37,500 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 21:30:37,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 21:30:37,500 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 21:30:37,500 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 21:30:37,501 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 21:30:37,501 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:30:37,501 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-24 21:30:37,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-24 21:30:37,501 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:30:37,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:30:37,501 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-24 21:30:37,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-24 21:30:37,501 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-24 21:30:37,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-24 21:30:37,502 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:30:37,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:30:37,502 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:30:37,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:30:37,502 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:30:37,502 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 21:30:37,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 21:30:37,502 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-24 21:30:37,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-24 21:30:37,502 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 21:30:37,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 21:30:37,503 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:30:37,503 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 21:30:37,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 21:30:37,503 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:30:37,503 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-24 21:30:37,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-24 21:30:37,503 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-24 21:30:37,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-24 21:30:37,503 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-24 21:30:37,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-24 21:30:37,504 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-24 21:30:37,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-24 21:30:37,504 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:30:37,504 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken
[2020-11-24 21:30:37,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken
[2020-11-24 21:30:37,504 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken
[2020-11-24 21:30:37,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken
[2020-11-24 21:30:37,504 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:30:37,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:30:37,505 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:30:37,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:30:37,505 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken
[2020-11-24 21:30:37,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken
[2020-11-24 21:30:37,505 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:30:37,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:30:37,505 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:30:37,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:30:37,505 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken
[2020-11-24 21:30:37,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken
[2020-11-24 21:30:37,506 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken
[2020-11-24 21:30:37,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken
[2020-11-24 21:30:37,506 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:30:37,506 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:30:37,506 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:30:37,506 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-24 21:30:37,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-24 21:30:37,506 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-24 21:30:37,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-24 21:30:37,506 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:30:37,507 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:30:37,507 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-24 21:30:37,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-24 21:30:37,507 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-24 21:30:37,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-24 21:30:37,507 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-24 21:30:37,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-24 21:30:37,507 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-24 21:30:37,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-24 21:30:37,508 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:30:37,508 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:30:37,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:30:37,508 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:30:37,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:30:37,508 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:30:37,508 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts
[2020-11-24 21:30:37,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts
[2020-11-24 21:30:37,508 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:30:37,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:30:37,508 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:30:37,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:30:37,509 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:30:37,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:30:37,509 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts
[2020-11-24 21:30:37,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts
[2020-11-24 21:30:37,509 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:30:37,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:30:37,509 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts
[2020-11-24 21:30:37,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts
[2020-11-24 21:30:37,510 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts
[2020-11-24 21:30:37,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts
[2020-11-24 21:30:37,510 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:30:37,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:30:37,510 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:30:37,510 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken
[2020-11-24 21:30:37,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken
[2020-11-24 21:30:37,510 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken
[2020-11-24 21:30:37,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken
[2020-11-24 21:30:37,510 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken
[2020-11-24 21:30:37,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken
[2020-11-24 21:30:37,511 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken
[2020-11-24 21:30:37,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken
[2020-11-24 21:30:37,511 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:30:37,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:30:37,511 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken
[2020-11-24 21:30:37,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken
[2020-11-24 21:30:37,511 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__success
[2020-11-24 21:30:37,511 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken
[2020-11-24 21:30:37,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken
[2020-11-24 21:30:37,512 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 21:30:37,512 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 21:30:37,512 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 21:30:37,512 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 21:30:37,512 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-24 21:30:37,512 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-24 21:30:37,512 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-24 21:30:37,512 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-24 21:30:37,513 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-24 21:30:37,513 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-24 21:30:37,513 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 21:30:37,513 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 21:30:37,513 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-24 21:30:37,513 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-24 21:30:37,513 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 21:30:37,513 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 21:30:37,513 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-24 21:30:37,513 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-24 21:30:37,514 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 21:30:37,514 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 21:30:37,514 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-24 21:30:37,514 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-24 21:30:37,514 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableToken
[2020-11-24 21:30:37,514 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableToken
[2020-11-24 21:30:37,514 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-24 21:30:37,514 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-24 21:30:37,514 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-24 21:30:37,514 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-24 21:30:37,515 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:30:37,515 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:30:37,515 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Consts
[2020-11-24 21:30:37,515 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Consts
[2020-11-24 21:30:37,515 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MainToken
[2020-11-24 21:30:37,515 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 21:30:37,515 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 21:30:37,515 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:30:37,515 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:30:37,515 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:30:37,516 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:30:37,516 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 21:30:37,516 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 21:30:37,516 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:30:37,516 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:30:37,516 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:30:37,516 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:30:37,516 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:30:37,516 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-24 21:30:37,516 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-24 21:30:37,516 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-24 21:30:37,517 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-24 21:30:37,517 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:30:37,517 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:30:37,517 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:30:37,517 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:30:37,517 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:30:37,517 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 21:30:37,517 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 21:30:37,517 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:30:37,517 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-24 21:30:37,517 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-24 21:30:37,517 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:30:37,518 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:30:37,518 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:30:37,518 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:30:37,518 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:30:37,518 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:30:37,518 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:30:37,518 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:30:37,518 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:30:37,518 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:30:37,518 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:30:37,518 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 21:30:37,518 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 21:30:37,519 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-24 21:30:37,519 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:30:37,519 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:30:37,519 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:30:37,519 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:30:37,519 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 21:30:37,519 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 21:30:37,519 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:30:37,519 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-24 21:30:37,519 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-24 21:30:37,519 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:30:37,520 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:30:37,520 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-24 21:30:37,520 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-24 21:30:37,520 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-24 21:30:37,520 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:30:37,520 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:30:37,520 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:30:37,520 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:30:37,520 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:30:37,520 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:30:37,520 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:30:37,521 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:30:37,521 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:30:37,521 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:30:37,521 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:30:37,521 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:30:37,521 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:30:37,521 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:30:37,521 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:30:37,521 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:30:37,521 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:30:37,521 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:30:37,521 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__success
[2020-11-24 21:30:37,522 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:30:37,522 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:30:37,522 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:30:37,522 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:30:37,522 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:30:37,522 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:30:37,522 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:30:37,522 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:30:37,522 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:30:37,522 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:30:37,522 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-24 21:30:37,522 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-24 21:30:37,523 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-24 21:30:37,523 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-24 21:30:37,523 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-24 21:30:37,523 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-24 21:30:37,523 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-24 21:30:37,523 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-24 21:30:37,523 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:30:37,523 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:30:37,523 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:30:37,523 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:30:37,523 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:30:37,523 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:30:37,524 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__success
[2020-11-24 21:30:37,524 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__fail
[2020-11-24 21:30:37,524 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:30:37,524 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:30:37,524 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:30:37,524 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:30:37,524 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:30:37,524 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:30:37,524 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:30:37,524 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:30:37,524 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:30:37,525 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:30:37,525 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__success
[2020-11-24 21:30:37,525 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__fail
[2020-11-24 21:30:37,525 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__success
[2020-11-24 21:30:37,525 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__fail
[2020-11-24 21:30:37,525 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:30:37,525 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:30:37,525 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:30:37,525 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__success
[2020-11-24 21:30:37,525 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__fail
[2020-11-24 21:30:37,525 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__success
[2020-11-24 21:30:37,526 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__fail
[2020-11-24 21:30:37,526 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__success
[2020-11-24 21:30:37,526 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__fail
[2020-11-24 21:30:37,526 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__success
[2020-11-24 21:30:37,526 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__fail
[2020-11-24 21:30:37,526 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:30:37,526 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:30:37,526 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:30:37,526 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:30:37,526 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__fail
[2020-11-24 21:30:37,526 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__success
[2020-11-24 21:30:37,527 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__fail
[2020-11-24 21:30:37,527 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 21:30:37,527 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 21:30:37,527 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 21:30:37,527 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 21:30:37,527 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-24 21:30:37,527 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-24 21:30:37,527 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-24 21:30:37,527 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-24 21:30:37,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 21:30:37,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 21:30:37,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:30:37,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:30:37,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:30:37,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:30:37,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:30:37,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:30:37,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 21:30:37,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 21:30:37,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:30:37,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:30:37,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:30:37,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:30:37,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:30:37,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:30:37,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:30:37,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:30:37,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:30:37,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:30:37,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-24 21:30:37,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-24 21:30:37,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-24 21:30:37,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-24 21:30:37,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:30:37,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:30:37,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:30:37,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:30:37,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:30:37,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:30:37,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 21:30:37,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 21:30:37,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:30:37,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:30:37,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-24 21:30:37,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-24 21:30:37,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:30:37,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:30:37,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:30:37,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:30:37,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:30:37,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:30:37,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:30:37,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:30:37,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:30:37,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:30:37,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:30:37,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:30:37,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 21:30:37,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 21:30:37,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:30:37,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-24 21:30:37,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:30:37,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:30:37,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:30:37,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:30:37,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 21:30:37,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 21:30:37,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:30:37,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:30:37,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-24 21:30:37,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-24 21:30:37,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:30:37,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:30:37,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-24 21:30:37,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-24 21:30:37,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:30:37,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-24 21:30:37,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:30:37,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:30:37,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:30:37,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:30:37,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:30:37,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:30:37,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:30:37,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:30:37,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:30:37,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:30:37,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:30:37,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:30:37,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:30:37,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:30:37,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:30:37,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:30:37,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:30:37,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:30:37,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:30:37,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__success
[2020-11-24 21:30:37,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:30:37,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:30:37,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:30:37,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:30:37,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:30:37,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:30:37,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:30:37,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:30:37,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:30:37,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:30:37,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:30:37,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:30:37,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:30:37,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:30:37,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-24 21:30:37,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-24 21:30:37,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-24 21:30:37,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-24 21:30:37,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-24 21:30:37,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-24 21:30:37,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-24 21:30:37,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-24 21:30:37,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:30:37,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:30:37,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:30:37,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:30:37,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:30:37,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:30:37,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:30:37,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:30:37,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__fail
[2020-11-24 21:30:37,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__success
[2020-11-24 21:30:37,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:30:37,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:30:37,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:30:37,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:30:37,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:30:37,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:30:37,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:30:37,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:30:37,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:30:37,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:30:37,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__fail
[2020-11-24 21:30:37,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__success
[2020-11-24 21:30:37,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__fail
[2020-11-24 21:30:37,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__success
[2020-11-24 21:30:37,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:30:37,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:30:37,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:30:37,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:30:37,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__fail
[2020-11-24 21:30:37,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__success
[2020-11-24 21:30:37,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__fail
[2020-11-24 21:30:37,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__success
[2020-11-24 21:30:37,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__fail
[2020-11-24 21:30:37,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__success
[2020-11-24 21:30:37,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__fail
[2020-11-24 21:30:37,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__success
[2020-11-24 21:30:37,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:30:37,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:30:37,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:30:37,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:30:37,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__fail
[2020-11-24 21:30:37,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__success
[2020-11-24 21:30:37,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__fail
[2020-11-24 21:30:37,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__success
[2020-11-24 21:30:37,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 21:30:37,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 21:30:37,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 21:30:37,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 21:30:37,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 21:30:37,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 21:30:37,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 21:30:37,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 21:30:37,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-24 21:30:37,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-24 21:30:37,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-24 21:30:37,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-24 21:30:37,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-24 21:30:37,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-24 21:30:37,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-24 21:30:37,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-24 21:30:37,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-24 21:30:37,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-24 21:30:37,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 21:30:37,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 21:30:37,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-24 21:30:37,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-24 21:30:37,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 21:30:37,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 21:30:37,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-24 21:30:37,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-24 21:30:37,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 21:30:37,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 21:30:37,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-24 21:30:37,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-24 21:30:37,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableToken
[2020-11-24 21:30:37,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableToken
[2020-11-24 21:30:37,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-24 21:30:37,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-24 21:30:37,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-24 21:30:37,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-24 21:30:37,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:30:37,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:30:37,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Consts
[2020-11-24 21:30:37,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Consts
[2020-11-24 21:30:37,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MainToken
[2020-11-24 21:30:37,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 21:30:37,543 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 21:30:37,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 21:30:38,899 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:30:38,900 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:30:39,230 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 21:30:39,230 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-24 21:30:39,233 INFO  L202        PluginConnector]: Adding new model MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:30:39 BoogieIcfgContainer
[2020-11-24 21:30:39,233 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:30:37" (2/2) ...
[2020-11-24 21:30:39,233 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 21:30:39,233 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@363dbaff and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:30:39, skipping insertion in model container
[2020-11-24 21:30:39,233 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 21:30:39,234 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 21:30:39,234 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 21:30:39,235 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 21:30:39,235 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:30:37" (1/3) ...
[2020-11-24 21:30:39,235 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@5075b09f and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:30:39, skipping insertion in model container
[2020-11-24 21:30:39,235 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:30:37" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 21:30:39,269 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:30:39 NWAContainer
[2020-11-24 21:30:39,269 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 21:30:39,269 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 21:30:39,269 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 21:30:39,270 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 21:30:39,270 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:30:39" (3/4) ...
[2020-11-24 21:30:39,271 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@67bbd358 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:30:39, skipping insertion in model container
[2020-11-24 21:30:39,271 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:30:39" (4/4) ...
[2020-11-24 21:30:39,274 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 21:30:39,282 INFO  L110   BuchiProductObserver]: Initial RCFG 5262 locations, 7415 edges
[2020-11-24 21:30:39,283 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 21:30:39,297 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 21:30:43,513 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 21:30:43,529 INFO  L110   BuchiProductObserver]: BuchiProgram size 13188 locations, 24274 edges
[2020-11-24 21:30:43,529 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:30:43 BoogieIcfgContainer
[2020-11-24 21:30:43,529 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 21:30:43,529 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 21:30:43,529 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 21:30:43,531 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 21:30:43,531 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:30:43" (1/1) ...
[2020-11-24 21:30:43,751 INFO  L313           BlockEncoder]: Initial Icfg 13188 locations, 24274 edges
[2020-11-24 21:30:43,751 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 21:30:43,751 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 21:30:43,751 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 21:30:43,752 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 21:30:43,783 INFO  L70    emoveInfeasibleEdges]: Removed 306 edges and 30 locations because of local infeasibility
[2020-11-24 21:30:43,805 INFO  L70        RemoveSinkStates]: Removed 300 edges and 176 locations by removing sink states
[2020-11-24 21:30:43,827 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 21:30:43,835 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 21:30:43,842 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 21:30:43,843 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 21:30:43,849 INFO  L313           BlockEncoder]: Encoded RCFG 12914 locations, 23567 edges
[2020-11-24 21:30:43,849 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:30:43 BasicIcfg
[2020-11-24 21:30:43,849 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 21:30:43,849 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 21:30:43,850 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 21:30:43,851 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 21:30:43,851 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:30:43,852 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:30:37" (1/6) ...
[2020-11-24 21:30:43,853 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1885cc05 and model type MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:30:43, skipping insertion in model container
[2020-11-24 21:30:43,853 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:30:43,853 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:30:37" (2/6) ...
[2020-11-24 21:30:43,853 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1885cc05 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:30:43, skipping insertion in model container
[2020-11-24 21:30:43,853 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:30:43,853 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:30:39" (3/6) ...
[2020-11-24 21:30:43,854 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1885cc05 and model type MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:30:43, skipping insertion in model container
[2020-11-24 21:30:43,854 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:30:43,854 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:30:39" (4/6) ...
[2020-11-24 21:30:43,854 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1885cc05 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:30:43, skipping insertion in model container
[2020-11-24 21:30:43,854 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:30:43,854 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:30:43" (5/6) ...
[2020-11-24 21:30:43,854 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1885cc05 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 09:30:43, skipping insertion in model container
[2020-11-24 21:30:43,854 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:30:43,854 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:30:43" (6/6) ...
[2020-11-24 21:30:43,855 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_transfer-fail.bpl_BEv2
[2020-11-24 21:30:43,890 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 21:30:43,891 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 21:30:43,891 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 21:30:43,891 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 21:30:43,891 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 21:30:43,891 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 21:30:43,891 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 21:30:43,891 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 21:30:43,891 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 21:30:43,972 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12914 states.
[2020-11-24 21:30:44,091 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:30:44,091 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:30:44,092 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:30:44,099 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:30:44,099 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:30:44,099 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 21:30:44,099 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12914 states.
[2020-11-24 21:30:44,142 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:30:44,142 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:30:44,142 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:30:44,143 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:30:44,144 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND TRUE   revert
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND TRUE   choice == 38
[L14131]              gas := gas - 21000;
[L14132]  COND FALSE  !(gas >= 0)
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:30:44,158 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:30:44,158 INFO  L82        PathProgramCache]: Analyzing trace with hash 1677098414, now seen corresponding path program 1 times
[2020-11-24 21:30:44,162 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:30:44,181 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:30:44,218 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:30:44,219 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:30:44,219 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 21:30:44,614 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:30:44,623 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 21:30:44,623 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 21:30:44,624 INFO  L87              Difference]: Start difference. First operand 12914 states. Second operand 4 states.
[2020-11-24 21:30:45,886 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:30:45,886 INFO  L93              Difference]: Finished difference Result 7933 states and 9312 transitions.
[2020-11-24 21:30:45,886 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 21:30:45,888 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7933 states and 9312 transitions.
[2020-11-24 21:30:45,919 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:30:45,959 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7933 states to 7929 states and 9304 transitions.
[2020-11-24 21:30:45,960 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-24 21:30:45,963 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1780
[2020-11-24 21:30:45,963 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7929 states and 9304 transitions.
[2020-11-24 21:30:45,980 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:30:45,980 INFO  L728         BuchiCegarLoop]: Abstraction has 7929 states and 9304 transitions.
[2020-11-24 21:30:46,001 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7929 states and 9304 transitions.
[2020-11-24 21:30:46,094 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7929 to 7929.
[2020-11-24 21:30:46,094 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7929 states.
[2020-11-24 21:30:46,108 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7929 states to 7929 states and 9304 transitions.
[2020-11-24 21:30:46,109 INFO  L751         BuchiCegarLoop]: Abstraction has 7929 states and 9304 transitions.
[2020-11-24 21:30:46,109 INFO  L631         BuchiCegarLoop]: Abstraction has 7929 states and 9304 transitions.
[2020-11-24 21:30:46,109 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 21:30:46,109 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7929 states and 9304 transitions.
[2020-11-24 21:30:46,122 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:30:46,122 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:30:46,122 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:30:46,124 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:30:46,124 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND TRUE   revert
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != _to_s1572 && (_value_s1572 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s1572] + _value_s1572 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND FALSE  !(__exception)
[L4638]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9355]   COND TRUE   !!paused_Pausable[this]
[L9356]               revert := true;
[L4638]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4639]               assume !revert && gas >= 0;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != _to_s1572 && (_value_s1572 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s1572] + _value_s1572 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND FALSE  !(__exception)
[L4638]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9355]   COND TRUE   !!paused_Pausable[this]
[L9356]               revert := true;
[L4638]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4639]               assume !revert && gas >= 0;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:30:46,128 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:30:46,128 INFO  L82        PathProgramCache]: Analyzing trace with hash -91009237, now seen corresponding path program 1 times
[2020-11-24 21:30:46,129 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:30:46,146 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:30:46,174 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:30:46,175 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:30:46,175 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:30:46,176 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:30:46,176 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:30:46,176 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:30:46,176 INFO  L87              Difference]: Start difference. First operand 7929 states and 9304 transitions. cyclomatic complexity: 1393 Second operand 3 states.
[2020-11-24 21:30:46,361 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:30:46,361 INFO  L93              Difference]: Finished difference Result 9360 states and 10725 transitions.
[2020-11-24 21:30:46,361 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:30:46,361 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9360 states and 10725 transitions.
[2020-11-24 21:30:46,386 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:30:46,426 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9360 states to 9360 states and 10725 transitions.
[2020-11-24 21:30:46,426 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2181
[2020-11-24 21:30:46,428 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2181
[2020-11-24 21:30:46,428 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9360 states and 10725 transitions.
[2020-11-24 21:30:46,439 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:30:46,439 INFO  L728         BuchiCegarLoop]: Abstraction has 9360 states and 10725 transitions.
[2020-11-24 21:30:46,450 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9360 states and 10725 transitions.
[2020-11-24 21:30:46,537 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9360 to 8563.
[2020-11-24 21:30:46,537 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8563 states.
[2020-11-24 21:30:46,548 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8563 states to 8563 states and 9748 transitions.
[2020-11-24 21:30:46,548 INFO  L751         BuchiCegarLoop]: Abstraction has 8563 states and 9748 transitions.
[2020-11-24 21:30:46,548 INFO  L631         BuchiCegarLoop]: Abstraction has 8563 states and 9748 transitions.
[2020-11-24 21:30:46,548 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 21:30:46,549 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8563 states and 9748 transitions.
[2020-11-24 21:30:46,559 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:30:46,559 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:30:46,559 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:30:46,566 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:30:46,566 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND TRUE   !!initialized_MainToken[this]
[L9405]               revert := true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND TRUE   revert
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != _to_s1572 && (_value_s1572 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s1572] + _value_s1572 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND FALSE  !(__exception)
[L4638]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9355]   COND TRUE   !!paused_Pausable[this]
[L9356]               revert := true;
[L4638]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4639]               assume !revert && gas >= 0;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != _to_s1572 && (_value_s1572 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s1572] + _value_s1572 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND FALSE  !(__exception)
[L4638]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9355]   COND TRUE   !!paused_Pausable[this]
[L9356]               revert := true;
[L4638]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4639]               assume !revert && gas >= 0;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:30:46,576 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:30:46,576 INFO  L82        PathProgramCache]: Analyzing trace with hash -638799210, now seen corresponding path program 1 times
[2020-11-24 21:30:46,577 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:30:46,614 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:30:47,325 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:30:47,325 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:30:47,326 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:30:47,326 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:30:47,327 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:30:47,327 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:30:47,327 INFO  L87              Difference]: Start difference. First operand 8563 states and 9748 transitions. cyclomatic complexity: 1203 Second operand 3 states.
[2020-11-24 21:30:47,452 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:30:47,452 INFO  L93              Difference]: Finished difference Result 9360 states and 10573 transitions.
[2020-11-24 21:30:47,452 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:30:47,453 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9360 states and 10573 transitions.
[2020-11-24 21:30:47,472 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:30:47,506 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9360 states to 9020 states and 10177 transitions.
[2020-11-24 21:30:47,507 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2061
[2020-11-24 21:30:47,509 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2090
[2020-11-24 21:30:47,510 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9020 states and 10177 transitions.
[2020-11-24 21:30:47,522 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:30:47,522 INFO  L728         BuchiCegarLoop]: Abstraction has 9020 states and 10177 transitions.
[2020-11-24 21:30:47,530 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9020 states and 10177 transitions.
[2020-11-24 21:30:47,589 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9020 to 8329.
[2020-11-24 21:30:47,589 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8329 states.
[2020-11-24 21:30:47,598 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8329 states to 8329 states and 9306 transitions.
[2020-11-24 21:30:47,598 INFO  L751         BuchiCegarLoop]: Abstraction has 8329 states and 9306 transitions.
[2020-11-24 21:30:47,598 INFO  L631         BuchiCegarLoop]: Abstraction has 8329 states and 9306 transitions.
[2020-11-24 21:30:47,598 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 21:30:47,598 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8329 states and 9306 transitions.
[2020-11-24 21:30:47,606 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:30:47,606 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:30:47,606 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:30:47,611 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:30:47,611 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != _to_s1572 && (_value_s1572 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s1572] + _value_s1572 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND FALSE  !(__exception)
[L4638]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9355]   COND FALSE  !(!!paused_Pausable[this])
[L9359]   COND TRUE   DType[this] == MainToken
[L9360]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6624]               __var_1 := null;
[L6625]   COND FALSE  !(!(_to_s202 != null))
[L6629]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6633]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6633]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6634]   COND FALSE  !(revert)
[L6637]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6638]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6639]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6640]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L6640]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6641]   COND FALSE  !(revert)
[L6644]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6645]               balances_BasicToken[this][_to_s202] := __var_3;
[L6646]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6647]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6648]               __ret_0_ := true;
[L9360]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9361]   COND FALSE  !(revert)
[L9367]               _success_s1572 := __var_55;
[L4638]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4639]               assume !revert && gas >= 0;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != _to_s1572 && (_value_s1572 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s1572] + _value_s1572 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND FALSE  !(__exception)
[L4638]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9355]   COND FALSE  !(!!paused_Pausable[this])
[L9359]   COND TRUE   DType[this] == MainToken
[L9360]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6624]               __var_1 := null;
[L6625]   COND FALSE  !(!(_to_s202 != null))
[L6629]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6633]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6633]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6634]   COND FALSE  !(revert)
[L6637]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6638]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6639]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6640]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L6640]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6641]   COND FALSE  !(revert)
[L6644]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6645]               balances_BasicToken[this][_to_s202] := __var_3;
[L6646]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6647]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6648]               __ret_0_ := true;
[L9360]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9361]   COND FALSE  !(revert)
[L9367]               _success_s1572 := __var_55;
[L4638]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4639]               assume !revert && gas >= 0;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:30:47,621 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:30:47,621 INFO  L82        PathProgramCache]: Analyzing trace with hash 424448816, now seen corresponding path program 1 times
[2020-11-24 21:30:47,622 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:30:47,658 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:30:48,456 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 96 proven. 0 refuted. 0 times theorem prover too weak. 9727 trivial. 0 not checked.
[2020-11-24 21:30:48,456 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:30:48,456 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-24 21:30:48,457 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:30:48,458 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-24 21:30:48,458 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=210, Unknown=0, NotChecked=0, Total=240
[2020-11-24 21:30:48,458 INFO  L87              Difference]: Start difference. First operand 8329 states and 9306 transitions. cyclomatic complexity: 995 Second operand 16 states.
[2020-11-24 21:30:55,549 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:30:55,549 INFO  L93              Difference]: Finished difference Result 8468 states and 9469 transitions.
[2020-11-24 21:30:55,549 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-24 21:30:55,549 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8468 states and 9469 transitions.
[2020-11-24 21:30:55,564 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:30:55,585 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8468 states to 8468 states and 9469 transitions.
[2020-11-24 21:30:55,585 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2007
[2020-11-24 21:30:55,586 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2007
[2020-11-24 21:30:55,586 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8468 states and 9469 transitions.
[2020-11-24 21:30:55,591 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:30:55,591 INFO  L728         BuchiCegarLoop]: Abstraction has 8468 states and 9469 transitions.
[2020-11-24 21:30:55,598 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8468 states and 9469 transitions.
[2020-11-24 21:30:55,647 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8468 to 8108.
[2020-11-24 21:30:55,647 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8108 states.
[2020-11-24 21:30:55,655 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8108 states to 8108 states and 9013 transitions.
[2020-11-24 21:30:55,655 INFO  L751         BuchiCegarLoop]: Abstraction has 8108 states and 9013 transitions.
[2020-11-24 21:30:55,655 INFO  L631         BuchiCegarLoop]: Abstraction has 8108 states and 9013 transitions.
[2020-11-24 21:30:55,655 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 21:30:55,655 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8108 states and 9013 transitions.
[2020-11-24 21:30:55,663 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:30:55,664 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:30:55,664 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:30:55,667 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:30:55,667 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND TRUE   __exception
[L4186]               __tmp__Balance := Balance;
[L4187]               __tmp__DType := DType;
[L4188]               __tmp__Alloc := Alloc;
[L4189]               __tmp__balance_ADDR := balance_ADDR;
[L4190]               __tmp__M_Ref_int := M_Ref_int;
[L4191]               __tmp__sum_balances0 := sum_balances0;
[L4192]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4193]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4194]               __tmp__sum_allowed1 := sum_allowed1;
[L4195]               __tmp__M_int_int := M_int_int;
[L4196]               __tmp__sum_chains2 := sum_chains2;
[L4197]               __tmp__sum_freezings3 := sum_freezings3;
[L4198]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4199]               __tmp__Length := Length;
[L4200]               __tmp__now := now;
[L4201]               __tmp__balances_BasicToken := balances_BasicToken;
[L4202]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4203]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4204]               __tmp__owner_Ownable := owner_Ownable;
[L4205]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4206]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4207]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4208]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4209]               __tmp__paused_Pausable := paused_Pausable;
[L4210]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4211]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4212]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4213]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4214]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4215]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4216]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4217]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4218]               __tmp__initialized_MainToken := initialized_MainToken;
[L4219]   CALL        call MainToken_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9153]   CALL        call Consts_Consts__fail(this, msgsender_MSG, msgvalue_MSG);
[L8999]   CALL        call Consts_Consts_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8965]               assume msgsender_MSG != null;
[L8966]               __tmp__Balance[this] := 0;
[L8967]               __tmp__TOKEN_DECIMALS_Consts[this] := 18;
[L8968]               __tmp__TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8969]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, __tmp__TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8970]               __tmp__TOKEN_NAME_Consts[this] := -1051245219;
[L8971]               __tmp__TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8972]               __tmp__PAUSED_Consts[this] := false;
[L8973]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8974]               __tmp__TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8975]               __tmp__CONTINUE_MINTING_Consts[this] := true;
[L8999]   RET         call Consts_Consts_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9000]   COND FALSE  !(revert)
[L9153]   RET         call Consts_Consts__fail(this, msgsender_MSG, msgvalue_MSG);
[L9154]   COND FALSE  !(revert)
[L9157]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L9157]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L9158]   COND FALSE  !(revert)
[L9161]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6682]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6682]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   COND FALSE  !(revert)
[L6686]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6667]               assume msgsender_MSG != null;
[L6668]               __tmp__Balance[this] := 0;
[L6686]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6687]   COND FALSE  !(revert)
[L9161]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L9162]   COND FALSE  !(revert)
[L9165]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6553]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6557]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6532]               assume msgsender_MSG != null;
[L6533]               __tmp__Balance[this] := 0;
[L6534]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6535]               __tmp__sum_balances0[this] := 0;
[L6536]               __tmp__totalSupply__BasicToken[this] := 0;
[L6557]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6558]   COND FALSE  !(revert)
[L9165]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9166]   COND FALSE  !(revert)
[L9169]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6726]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6726]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6682]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6682]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   COND FALSE  !(revert)
[L6686]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6667]               assume msgsender_MSG != null;
[L6668]               __tmp__Balance[this] := 0;
[L6686]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6687]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6553]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6557]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6532]               assume msgsender_MSG != null;
[L6533]               __tmp__Balance[this] := 0;
[L6534]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6535]               __tmp__sum_balances0[this] := 0;
[L6536]               __tmp__totalSupply__BasicToken[this] := 0;
[L6557]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6558]   COND FALSE  !(revert)
[L6734]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6709]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L6710]               __tmp__sum_allowed1[this] := 0;
[L6738]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L9169]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9170]   COND FALSE  !(revert)
[L9173]   CALL        call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7329]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L7329]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7330]   COND FALSE  !(revert)
[L7333]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6682]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6682]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   COND FALSE  !(revert)
[L6686]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6667]               assume msgsender_MSG != null;
[L6668]               __tmp__Balance[this] := 0;
[L6686]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6687]   COND FALSE  !(revert)
[L7333]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7334]   COND FALSE  !(revert)
[L7337]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6553]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6557]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6532]               assume msgsender_MSG != null;
[L6533]               __tmp__Balance[this] := 0;
[L6534]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6535]               __tmp__sum_balances0[this] := 0;
[L6536]               __tmp__totalSupply__BasicToken[this] := 0;
[L6557]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6558]   COND FALSE  !(revert)
[L7337]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7338]   COND FALSE  !(revert)
[L7341]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6726]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6726]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6682]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6682]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   COND FALSE  !(revert)
[L6686]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6667]               assume msgsender_MSG != null;
[L6668]               __tmp__Balance[this] := 0;
[L6686]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6687]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6553]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6557]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6532]               assume msgsender_MSG != null;
[L6533]               __tmp__Balance[this] := 0;
[L6534]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6535]               __tmp__sum_balances0[this] := 0;
[L6536]               __tmp__totalSupply__BasicToken[this] := 0;
[L6557]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6558]   COND FALSE  !(revert)
[L6734]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6709]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L6710]               __tmp__sum_allowed1[this] := 0;
[L6738]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L7341]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7342]   COND FALSE  !(revert)
[L7345]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7302]               assume msgsender_MSG != null;
[L7303]               __tmp__Balance[this] := 0;
[L7304]               __tmp__chains_FreezableToken[this] := zerointintArr();
[L7305]               __tmp__sum_chains2[this] := 0;
[L7306]               __tmp__freezings_FreezableToken[this] := zerointintArr();
[L7307]               __tmp__sum_freezings3[this] := 0;
[L7308]               __tmp__freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7309]               __tmp__sum_freezingBalance4[this] := 0;
[L7345]   RET         call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L9173]   RET         call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9174]   COND FALSE  !(revert)
[L9177]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6980]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6961]               assume msgsender_MSG != null;
[L6962]               __tmp__Balance[this] := 0;
[L6963]               __tmp__owner_Ownable[this] := null;
[L6965]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L6980]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6981]   COND FALSE  !(revert)
[L9177]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9178]   COND FALSE  !(revert)
[L9181]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7144]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L7144]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7145]   COND FALSE  !(revert)
[L7148]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6682]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6682]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   COND FALSE  !(revert)
[L6686]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6667]               assume msgsender_MSG != null;
[L6668]               __tmp__Balance[this] := 0;
[L6686]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6687]   COND FALSE  !(revert)
[L7148]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7149]   COND FALSE  !(revert)
[L7152]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6553]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6557]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6532]               assume msgsender_MSG != null;
[L6533]               __tmp__Balance[this] := 0;
[L6534]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6535]               __tmp__sum_balances0[this] := 0;
[L6536]               __tmp__totalSupply__BasicToken[this] := 0;
[L6557]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6558]   COND FALSE  !(revert)
[L7152]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7153]   COND FALSE  !(revert)
[L7156]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6726]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6726]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6682]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6682]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   COND FALSE  !(revert)
[L6686]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6667]               assume msgsender_MSG != null;
[L6668]               __tmp__Balance[this] := 0;
[L6686]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6687]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6553]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6557]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6532]               assume msgsender_MSG != null;
[L6533]               __tmp__Balance[this] := 0;
[L6534]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6535]               __tmp__sum_balances0[this] := 0;
[L6536]               __tmp__totalSupply__BasicToken[this] := 0;
[L6557]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6558]   COND FALSE  !(revert)
[L6734]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6709]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L6710]               __tmp__sum_allowed1[this] := 0;
[L6738]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L7156]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7157]   COND FALSE  !(revert)
[L7160]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6980]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6961]               assume msgsender_MSG != null;
[L6962]               __tmp__Balance[this] := 0;
[L6963]               __tmp__owner_Ownable[this] := null;
[L6965]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L6980]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6981]   COND FALSE  !(revert)
[L7160]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7161]   COND FALSE  !(revert)
[L7164]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7127]               assume msgsender_MSG != null;
[L7128]               __tmp__Balance[this] := 0;
[L7129]               __tmp__mintingFinished_MintableToken[this] := false;
[L7164]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND FALSE  !(revert)
[L9181]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9182]   COND FALSE  !(revert)
[L9185]   CALL        call FreezableMintableToken_FreezableMintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8756]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L8756]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L8757]   COND FALSE  !(revert)
[L8760]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6682]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6682]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   COND FALSE  !(revert)
[L6686]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6667]               assume msgsender_MSG != null;
[L6668]               __tmp__Balance[this] := 0;
[L6686]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6687]   COND FALSE  !(revert)
[L8760]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L8761]   COND FALSE  !(revert)
[L8764]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6553]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6557]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6532]               assume msgsender_MSG != null;
[L6533]               __tmp__Balance[this] := 0;
[L6534]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6535]               __tmp__sum_balances0[this] := 0;
[L6536]               __tmp__totalSupply__BasicToken[this] := 0;
[L6557]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6558]   COND FALSE  !(revert)
[L8764]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8765]   COND FALSE  !(revert)
[L8768]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6726]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6726]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6682]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6682]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   COND FALSE  !(revert)
[L6686]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6667]               assume msgsender_MSG != null;
[L6668]               __tmp__Balance[this] := 0;
[L6686]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6687]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6553]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6557]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6532]               assume msgsender_MSG != null;
[L6533]               __tmp__Balance[this] := 0;
[L6534]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6535]               __tmp__sum_balances0[this] := 0;
[L6536]               __tmp__totalSupply__BasicToken[this] := 0;
[L6557]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6558]   COND FALSE  !(revert)
[L6734]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6709]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L6710]               __tmp__sum_allowed1[this] := 0;
[L6738]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L8768]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8769]   COND FALSE  !(revert)
[L8772]   CALL        call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7329]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L7329]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7330]   COND FALSE  !(revert)
[L7333]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6682]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6682]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   COND FALSE  !(revert)
[L6686]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6667]               assume msgsender_MSG != null;
[L6668]               __tmp__Balance[this] := 0;
[L6686]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6687]   COND FALSE  !(revert)
[L7333]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7334]   COND FALSE  !(revert)
[L7337]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6553]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6557]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6532]               assume msgsender_MSG != null;
[L6533]               __tmp__Balance[this] := 0;
[L6534]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6535]               __tmp__sum_balances0[this] := 0;
[L6536]               __tmp__totalSupply__BasicToken[this] := 0;
[L6557]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6558]   COND FALSE  !(revert)
[L7337]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7338]   COND FALSE  !(revert)
[L7341]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6726]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6726]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6682]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6682]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   COND FALSE  !(revert)
[L6686]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6667]               assume msgsender_MSG != null;
[L6668]               __tmp__Balance[this] := 0;
[L6686]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6687]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6553]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6557]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6532]               assume msgsender_MSG != null;
[L6533]               __tmp__Balance[this] := 0;
[L6534]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6535]               __tmp__sum_balances0[this] := 0;
[L6536]               __tmp__totalSupply__BasicToken[this] := 0;
[L6557]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6558]   COND FALSE  !(revert)
[L6734]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6709]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L6710]               __tmp__sum_allowed1[this] := 0;
[L6738]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L7341]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7342]   COND FALSE  !(revert)
[L7345]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7302]               assume msgsender_MSG != null;
[L7303]               __tmp__Balance[this] := 0;
[L7304]               __tmp__chains_FreezableToken[this] := zerointintArr();
[L7305]               __tmp__sum_chains2[this] := 0;
[L7306]               __tmp__freezings_FreezableToken[this] := zerointintArr();
[L7307]               __tmp__sum_freezings3[this] := 0;
[L7308]               __tmp__freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7309]               __tmp__sum_freezingBalance4[this] := 0;
[L7345]   RET         call FreezableToken_FreezableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L8772]   RET         call FreezableToken_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8773]   COND FALSE  !(revert)
[L8776]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6980]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6961]               assume msgsender_MSG != null;
[L6962]               __tmp__Balance[this] := 0;
[L6963]               __tmp__owner_Ownable[this] := null;
[L6965]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L6980]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6981]   COND FALSE  !(revert)
[L8776]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L8777]   COND FALSE  !(revert)
[L8780]   CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7144]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L7144]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L7145]   COND FALSE  !(revert)
[L7148]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6682]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6682]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   COND FALSE  !(revert)
[L6686]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6667]               assume msgsender_MSG != null;
[L6668]               __tmp__Balance[this] := 0;
[L6686]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6687]   COND FALSE  !(revert)
[L7148]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7149]   COND FALSE  !(revert)
[L7152]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6553]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6557]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6532]               assume msgsender_MSG != null;
[L6533]               __tmp__Balance[this] := 0;
[L6534]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6535]               __tmp__sum_balances0[this] := 0;
[L6536]               __tmp__totalSupply__BasicToken[this] := 0;
[L6557]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6558]   COND FALSE  !(revert)
[L7152]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7153]   COND FALSE  !(revert)
[L7156]   CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6726]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6726]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6682]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6682]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]   COND FALSE  !(revert)
[L6686]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6667]               assume msgsender_MSG != null;
[L6668]               __tmp__Balance[this] := 0;
[L6686]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6687]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6553]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6557]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6532]               assume msgsender_MSG != null;
[L6533]               __tmp__Balance[this] := 0;
[L6534]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6535]               __tmp__sum_balances0[this] := 0;
[L6536]               __tmp__totalSupply__BasicToken[this] := 0;
[L6557]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6558]   COND FALSE  !(revert)
[L6734]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]               assume msgsender_MSG != null;
[L6708]               __tmp__Balance[this] := 0;
[L6709]               __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L6710]               __tmp__sum_allowed1[this] := 0;
[L6738]   RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L7156]   RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L7157]   COND FALSE  !(revert)
[L7160]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6980]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6961]               assume msgsender_MSG != null;
[L6962]               __tmp__Balance[this] := 0;
[L6963]               __tmp__owner_Ownable[this] := null;
[L6965]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L6980]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6981]   COND FALSE  !(revert)
[L7160]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7161]   COND FALSE  !(revert)
[L7164]   CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7127]               assume msgsender_MSG != null;
[L7128]               __tmp__Balance[this] := 0;
[L7129]               __tmp__mintingFinished_MintableToken[this] := false;
[L7164]   RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND FALSE  !(revert)
[L8780]   RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8781]   COND FALSE  !(revert)
[L8784]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8741]               assume msgsender_MSG != null;
[L8742]               __tmp__Balance[this] := 0;
[L8784]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8785]   COND FALSE  !(revert)
[L9185]   RET         call FreezableMintableToken_FreezableMintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9186]   COND FALSE  !(revert)
[L9189]   CALL        call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8520]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L8520]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L8521]   COND FALSE  !(revert)
[L8524]   CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]   CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6420]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6405]               assume msgsender_MSG != null;
[L6406]               __tmp__Balance[this] := 0;
[L6420]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]   COND FALSE  !(revert)
[L6553]   RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6557]   CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6532]               assume msgsender_MSG != null;
[L6533]               __tmp__Balance[this] := 0;
[L6534]               __tmp__balances_BasicToken[this] := zeroRefintArr();
[L6535]               __tmp__sum_balances0[this] := 0;
[L6536]               __tmp__totalSupply__BasicToken[this] := 0;
[L6557]   RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6558]   COND FALSE  !(revert)
[L8524]   RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L8525]   COND FALSE  !(revert)
[L8528]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8505]               assume msgsender_MSG != null;
[L8506]               __tmp__Balance[this] := 0;
[L8528]   RET         call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8529]   COND FALSE  !(revert)
[L9189]   RET         call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9190]   COND FALSE  !(revert)
[L9193]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L8650]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6980]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6961]               assume msgsender_MSG != null;
[L6962]               __tmp__Balance[this] := 0;
[L6963]               __tmp__owner_Ownable[this] := null;
[L6965]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L6980]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6981]   COND FALSE  !(revert)
[L8650]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L8651]   COND FALSE  !(revert)
[L8654]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8633]               assume msgsender_MSG != null;
[L8634]               __tmp__Balance[this] := 0;
[L8635]               __tmp__paused_Pausable[this] := false;
[L8654]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L8655]   COND FALSE  !(revert)
[L9193]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L9194]   COND FALSE  !(revert)
[L9197]   CALL        call MainToken_MainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9112]               assume msgsender_MSG != null;
[L9113]               __tmp__Balance[this] := 0;
[L9114]               __tmp__initialized_MainToken[this] := false;
[L9116]   CALL        call init_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9374]   COND FALSE  !(!!__tmp__initialized_MainToken[this])
[L9378]               __tmp__initialized_MainToken[this] := true;
[L9379]   COND FALSE  !(__tmp__PAUSED_Consts[this])
[L9389]   COND FALSE  !(!__tmp__CONTINUE_MINTING_Consts[this])
[L9116]   RET         call init_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L9117]   COND FALSE  !(revert)
[L9120]   COND TRUE   __tmp__DType[this] == MainToken
[L9121]   CALL        call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__TARGET_USER_Consts[this]);
[L7019]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L12324]  COND FALSE  !(!(msgsender_MSG == __tmp__owner_Ownable[this]))
[L7019]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   COND TRUE   __tmp__DType[this] == MainToken
[L7024]   CALL        call _transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7092]               __var_11 := null;
[L7093]   COND FALSE  !(!(_newOwner_s581 != null))
[L7097]               __tmp__owner_Ownable[this] := _newOwner_s581;
[L7024]   RET         call _transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7025]   COND FALSE  !(revert)
[L9121]   RET         call transferOwnership~address_Ownable__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__TARGET_USER_Consts[this]);
[L9122]   COND FALSE  !(revert)
[L9197]   RET         call MainToken_MainToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L9198]   COND FALSE  !(revert)
[L4219]   RET         call MainToken_MainToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4220]               assume revert || gas < 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != _to_s1572 && (_value_s1572 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s1572] + _value_s1572 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND FALSE  !(__exception)
[L4638]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9355]   COND FALSE  !(!!paused_Pausable[this])
[L9359]   COND TRUE   DType[this] == MainToken
[L9360]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6624]               __var_1 := null;
[L6625]   COND FALSE  !(!(_to_s202 != null))
[L6629]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6633]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6633]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6634]   COND FALSE  !(revert)
[L6637]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6638]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6639]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6640]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L6640]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6641]   COND FALSE  !(revert)
[L6644]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6645]               balances_BasicToken[this][_to_s202] := __var_3;
[L6646]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6647]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6648]               __ret_0_ := true;
[L9360]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9361]   COND FALSE  !(revert)
[L9367]               _success_s1572 := __var_55;
[L4638]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4639]               assume !revert && gas >= 0;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != _to_s1572 && (_value_s1572 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s1572] + _value_s1572 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND FALSE  !(__exception)
[L4638]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9355]   COND FALSE  !(!!paused_Pausable[this])
[L9359]   COND TRUE   DType[this] == MainToken
[L9360]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6624]               __var_1 := null;
[L6625]   COND FALSE  !(!(_to_s202 != null))
[L6629]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6633]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6633]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6634]   COND FALSE  !(revert)
[L6637]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6638]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6639]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6640]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L6640]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6641]   COND FALSE  !(revert)
[L6644]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6645]               balances_BasicToken[this][_to_s202] := __var_3;
[L6646]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6647]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6648]               __ret_0_ := true;
[L9360]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9361]   COND FALSE  !(revert)
[L9367]               _success_s1572 := __var_55;
[L4638]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4639]               assume !revert && gas >= 0;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:30:55,676 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:30:55,676 INFO  L82        PathProgramCache]: Analyzing trace with hash -1322845956, now seen corresponding path program 1 times
[2020-11-24 21:30:55,677 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:30:55,707 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:30:56,176 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:30:56,176 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:30:56,176 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 21:30:56,177 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:30:56,177 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 21:30:56,177 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-24 21:30:56,177 INFO  L87              Difference]: Start difference. First operand 8108 states and 9013 transitions. cyclomatic complexity: 924 Second operand 4 states.
[2020-11-24 21:30:57,134 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:30:57,134 INFO  L93              Difference]: Finished difference Result 10244 states and 11675 transitions.
[2020-11-24 21:30:57,134 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 21:30:57,134 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10244 states and 11675 transitions.
[2020-11-24 21:30:57,155 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-24 21:30:57,177 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10244 states to 9477 states and 10798 transitions.
[2020-11-24 21:30:57,177 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2243
[2020-11-24 21:30:57,178 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2252
[2020-11-24 21:30:57,178 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9477 states and 10798 transitions.
[2020-11-24 21:30:57,184 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:30:57,184 INFO  L728         BuchiCegarLoop]: Abstraction has 9477 states and 10798 transitions.
[2020-11-24 21:30:57,190 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9477 states and 10798 transitions.
[2020-11-24 21:30:57,232 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9477 to 8085.
[2020-11-24 21:30:57,232 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8085 states.
[2020-11-24 21:30:57,240 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8085 states to 8085 states and 9038 transitions.
[2020-11-24 21:30:57,240 INFO  L751         BuchiCegarLoop]: Abstraction has 8085 states and 9038 transitions.
[2020-11-24 21:30:57,240 INFO  L631         BuchiCegarLoop]: Abstraction has 8085 states and 9038 transitions.
[2020-11-24 21:30:57,240 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 21:30:57,240 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8085 states and 9038 transitions.
[2020-11-24 21:30:57,247 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:30:57,247 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:30:57,247 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:30:57,250 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:30:57,251 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND FALSE  !(choice == 34)
[L14162]  COND FALSE  !(choice == 33)
[L14169]  COND FALSE  !(choice == 32)
[L14176]  COND FALSE  !(choice == 31)
[L14183]  COND FALSE  !(choice == 30)
[L14189]  COND FALSE  !(choice == 29)
[L14195]  COND FALSE  !(choice == 28)
[L14201]  COND FALSE  !(choice == 27)
[L14207]  COND FALSE  !(choice == 26)
[L14214]  COND FALSE  !(choice == 25)
[L14220]  COND FALSE  !(choice == 24)
[L14226]  COND FALSE  !(choice == 23)
[L14232]  COND FALSE  !(choice == 22)
[L14238]  COND FALSE  !(choice == 21)
[L14245]  COND FALSE  !(choice == 20)
[L14253]  COND FALSE  !(choice == 19)
[L14259]  COND FALSE  !(choice == 18)
[L14265]  COND TRUE   choice == 17
[L14266]              gas := gas - 21000;
[L14267]  COND TRUE   gas >= 0
[L14268]              assume _value_s1261 >= 0 && _value_s1261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14269]              assume msgvalue_MSG == 0;
[L14270]  CALL        call burn~uint256_BurnableToken(this, msgsender_MSG, msgvalue_MSG, _value_s1261);
[L2775]               havoc __exception;
[L2776]               revert := false;
[L2777]   COND FALSE  !(__exception)
[L2814]   CALL        call burn~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, _value_s1261);
[L8569]   COND TRUE   DType[this] == MainToken
[L8570]   CALL        call _burn~address~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s1261);
[L8610]   COND FALSE  !(!(_value_s1308 <= balances_BasicToken[this][_who_s1308]))
[L8614]   CALL        call __var_46 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_who_s1308], _value_s1308);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8614]   RET         call __var_46 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_who_s1308], _value_s1308);
[L8615]   COND FALSE  !(revert)
[L8618]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_who_s1308];
[L8619]               balances_BasicToken[this][_who_s1308] := __var_46;
[L8620]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_who_s1308];
[L8621]   CALL        call __var_47 := sub~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _value_s1308);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8621]   RET         call __var_47 := sub~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _value_s1308);
[L8622]   COND FALSE  !(revert)
[L8625]               totalSupply__BasicToken[this] := __var_47;
[L8626]               assert { :EventEmitted "Burn_BurnableToken" } true;
[L8627]               assert { :EventEmitted "Transfer_BurnableToken" } true;
[L8570]   RET         call _burn~address~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s1261);
[L8571]   COND FALSE  !(revert)
[L2814]   RET         call burn~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, _value_s1261);
[L2815]               assume !revert && gas >= 0;
[L14270]  RET         call burn~uint256_BurnableToken(this, msgsender_MSG, msgvalue_MSG, _value_s1261);
[L14388]  RET         call CorralChoice_MainToken(this);
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != _to_s1572 && (_value_s1572 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s1572] + _value_s1572 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND FALSE  !(__exception)
[L4638]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9355]   COND FALSE  !(!!paused_Pausable[this])
[L9359]   COND TRUE   DType[this] == MainToken
[L9360]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6624]               __var_1 := null;
[L6625]   COND FALSE  !(!(_to_s202 != null))
[L6629]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6633]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6633]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6634]   COND FALSE  !(revert)
[L6637]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6638]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6639]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6640]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L6640]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6641]   COND FALSE  !(revert)
[L6644]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6645]               balances_BasicToken[this][_to_s202] := __var_3;
[L6646]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6647]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6648]               __ret_0_ := true;
[L9360]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9361]   COND FALSE  !(revert)
[L9367]               _success_s1572 := __var_55;
[L4638]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4639]               assume !revert && gas >= 0;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != _to_s1572 && (_value_s1572 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s1572] + _value_s1572 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND FALSE  !(__exception)
[L4638]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9355]   COND FALSE  !(!!paused_Pausable[this])
[L9359]   COND TRUE   DType[this] == MainToken
[L9360]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6624]               __var_1 := null;
[L6625]   COND FALSE  !(!(_to_s202 != null))
[L6629]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6633]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6633]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6634]   COND FALSE  !(revert)
[L6637]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6638]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6639]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6640]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L6640]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6641]   COND FALSE  !(revert)
[L6644]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6645]               balances_BasicToken[this][_to_s202] := __var_3;
[L6646]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6647]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6648]               __ret_0_ := true;
[L9360]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9361]   COND FALSE  !(revert)
[L9367]               _success_s1572 := __var_55;
[L4638]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4639]               assume !revert && gas >= 0;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:30:57,259 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:30:57,259 INFO  L82        PathProgramCache]: Analyzing trace with hash 1573062918, now seen corresponding path program 1 times
[2020-11-24 21:30:57,260 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:30:57,297 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:30:58,358 INFO  L134       CoverageAnalysis]: Checked inductivity of 9917 backedges. 96 proven. 1 refuted. 0 times theorem prover too weak. 9820 trivial. 0 not checked.
[2020-11-24 21:30:58,358 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 21:30:58,359 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-24 21:30:58,359 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:30:58,359 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-24 21:30:58,360 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=68, Invalid=582, Unknown=0, NotChecked=0, Total=650
[2020-11-24 21:30:58,360 INFO  L87              Difference]: Start difference. First operand 8085 states and 9038 transitions. cyclomatic complexity: 972 Second operand 26 states.
[2020-11-24 21:31:09,438 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:31:09,438 INFO  L93              Difference]: Finished difference Result 8170 states and 9139 transitions.
[2020-11-24 21:31:09,438 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-11-24 21:31:09,438 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8170 states and 9139 transitions.
[2020-11-24 21:31:09,459 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:31:09,483 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8170 states to 8170 states and 9139 transitions.
[2020-11-24 21:31:09,483 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1883
[2020-11-24 21:31:09,484 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1883
[2020-11-24 21:31:09,484 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8170 states and 9139 transitions.
[2020-11-24 21:31:09,490 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:31:09,490 INFO  L728         BuchiCegarLoop]: Abstraction has 8170 states and 9139 transitions.
[2020-11-24 21:31:09,499 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8170 states and 9139 transitions.
[2020-11-24 21:31:09,560 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8170 to 8089.
[2020-11-24 21:31:09,561 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8089 states.
[2020-11-24 21:31:09,573 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8089 states to 8089 states and 9046 transitions.
[2020-11-24 21:31:09,573 INFO  L751         BuchiCegarLoop]: Abstraction has 8089 states and 9046 transitions.
[2020-11-24 21:31:09,573 INFO  L631         BuchiCegarLoop]: Abstraction has 8089 states and 9046 transitions.
[2020-11-24 21:31:09,573 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 21:31:09,573 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8089 states and 9046 transitions.
[2020-11-24 21:31:09,586 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:31:09,586 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:31:09,586 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:31:09,590 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:31:09,590 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((msgsender_MSG != _to_s1572 && (_value_s1572 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s1572] + _value_s1572 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND FALSE  !(__exception)
[L4638]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9355]   COND FALSE  !(!!paused_Pausable[this])
[L9359]   COND TRUE   DType[this] == MainToken
[L9360]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6624]               __var_1 := null;
[L6625]   COND FALSE  !(!(_to_s202 != null))
[L6629]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6633]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6633]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6634]   COND FALSE  !(revert)
[L6637]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6638]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6639]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6640]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L6640]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6641]   COND FALSE  !(revert)
[L6644]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6645]               balances_BasicToken[this][_to_s202] := __var_3;
[L6646]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6647]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6648]               __ret_0_ := true;
[L9360]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9361]   COND FALSE  !(revert)
[L9367]               _success_s1572 := __var_55;
[L4638]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4639]               assume !revert && gas >= 0;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != _to_s1572 && (_value_s1572 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s1572] + _value_s1572 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND FALSE  !(__exception)
[L4638]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9355]   COND FALSE  !(!!paused_Pausable[this])
[L9359]   COND TRUE   DType[this] == MainToken
[L9360]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6624]               __var_1 := null;
[L6625]   COND FALSE  !(!(_to_s202 != null))
[L6629]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6633]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6633]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6634]   COND FALSE  !(revert)
[L6637]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6638]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6639]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6640]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L6640]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6641]   COND FALSE  !(revert)
[L6644]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6645]               balances_BasicToken[this][_to_s202] := __var_3;
[L6646]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6647]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6648]               __ret_0_ := true;
[L9360]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9361]   COND FALSE  !(revert)
[L9367]               _success_s1572 := __var_55;
[L4638]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4639]               assume !revert && gas >= 0;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND TRUE   choice == 38
[L14131]              gas := gas - 21000;
[L14132]  COND FALSE  !(gas >= 0)
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:31:09,602 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:31:09,603 INFO  L82        PathProgramCache]: Analyzing trace with hash 480927180, now seen corresponding path program 1 times
[2020-11-24 21:31:09,604 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:31:09,680 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:31:10,484 INFO  L134       CoverageAnalysis]: Checked inductivity of 9922 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9922 trivial. 0 not checked.
[2020-11-24 21:31:10,484 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:31:10,484 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-24 21:31:10,485 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:31:10,485 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-24 21:31:10,485 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-11-24 21:31:10,485 INFO  L87              Difference]: Start difference. First operand 8089 states and 9046 transitions. cyclomatic complexity: 977 Second operand 12 states.
[2020-11-24 21:31:13,824 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:31:13,824 INFO  L93              Difference]: Finished difference Result 4405 states and 4913 transitions.
[2020-11-24 21:31:13,824 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-24 21:31:13,825 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4405 states and 4913 transitions.
[2020-11-24 21:31:13,833 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 21:31:13,833 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4405 states to 0 states and 0 transitions.
[2020-11-24 21:31:13,833 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-24 21:31:13,833 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-24 21:31:13,833 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-24 21:31:13,833 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:31:13,833 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 21:31:13,833 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 21:31:13,833 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 21:31:13,833 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 21:31:13,833 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-24 21:31:13,833 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 21:31:13,833 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-24 21:31:13,836 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:31:13 BasicIcfg
[2020-11-24 21:31:13,836 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 21:31:13,837 INFO  L168              Benchmark]: Toolchain (without parser) took 36728.05 ms. Allocated memory was 1.0 GB in the beginning and 4.3 GB in the end (delta: 3.3 GB). Free memory was 913.7 MB in the beginning and 2.0 GB in the end (delta: -1.0 GB). Peak memory consumption was 2.3 GB. Max. memory is 15.3 GB.
[2020-11-24 21:31:13,837 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 21:31:13,838 INFO  L168              Benchmark]: Boogie Preprocessor took 189.37 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 886.9 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
[2020-11-24 21:31:13,838 INFO  L168              Benchmark]: UtopiaSpecLang took 104.33 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 876.1 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
[2020-11-24 21:31:13,839 INFO  L168              Benchmark]: Boogie Printer took 35.09 ms. Allocated memory is still 1.0 GB. Free memory was 876.1 MB in the beginning and 865.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 21:31:13,839 INFO  L168              Benchmark]: RCFGBuilder took 1794.02 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 197.7 MB). Free memory was 865.4 MB in the beginning and 1.1 GB in the end (delta: -248.0 MB). Peak memory consumption was 261.3 MB. Max. memory is 15.3 GB.
[2020-11-24 21:31:13,839 INFO  L168              Benchmark]: UtopiaLTL2Aut took 35.27 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-24 21:31:13,839 INFO  L168              Benchmark]: BÃ¼chi Program Product took 4260.11 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 326.1 MB). Free memory was 1.1 GB in the beginning and 870.5 MB in the end (delta: 226.7 MB). Peak memory consumption was 801.2 MB. Max. memory is 15.3 GB.
[2020-11-24 21:31:13,840 INFO  L168              Benchmark]: BlockEncodingV2 took 319.94 ms. Allocated memory is still 1.6 GB. Free memory was 870.5 MB in the beginning and 687.4 MB in the end (delta: 183.1 MB). Peak memory consumption was 183.1 MB. Max. memory is 15.3 GB.
[2020-11-24 21:31:13,840 INFO  L168              Benchmark]: BuchiAutomizer took 29986.85 ms. Allocated memory was 1.6 GB in the beginning and 4.3 GB in the end (delta: 2.8 GB). Free memory was 687.4 MB in the beginning and 2.0 GB in the end (delta: -1.3 GB). Peak memory consumption was 1.5 GB. Max. memory is 15.3 GB.
[2020-11-24 21:31:13,843 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    13188 locations, 24274 edges
  - StatisticsResult: Encoded RCFG
    12914 locations, 23567 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 189.37 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 886.9 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 104.33 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 876.1 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 35.09 ms. Allocated memory is still 1.0 GB. Free memory was 876.1 MB in the beginning and 865.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1794.02 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 197.7 MB). Free memory was 865.4 MB in the beginning and 1.1 GB in the end (delta: -248.0 MB). Peak memory consumption was 261.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 35.27 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 4260.11 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 326.1 MB). Free memory was 1.1 GB in the beginning and 870.5 MB in the end (delta: 226.7 MB). Peak memory consumption was 801.2 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 319.94 ms. Allocated memory is still 1.6 GB. Free memory was 870.5 MB in the beginning and 687.4 MB in the end (delta: 183.1 MB). Peak memory consumption was 183.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 29986.85 ms. Allocated memory was 1.6 GB in the beginning and 4.3 GB in the end (delta: 2.8 GB). Free memory was 687.4 MB in the beginning and 2.0 GB in the end (delta: -1.3 GB). Peak memory consumption was 1.5 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    5262 locations, 7415 edges
  - StatisticsResult: BuchiProgram size
    13188 locations, 24274 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic). 7 modules have a trivial ranking function, the largest among these consists of 26 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 29.9s and 8 iterations.  TraceHistogramMax:38. Analysis of lassos took 4.6s. Construction of modules took 18.3s. BÃ¼chi inclusion checks took 5.7s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.5s AutomataMinimizationTime, 6 MinimizatonAttempts, 3321 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.3s Buchi closure took 0.0s. Biggest automaton had 8563 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 57729 SDtfs, 47739 SDslu, 96865 SDs, 0 SdLazy, 230943 SolverSat, 7220 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 18.3s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_MainToken0) ==> ( <>(fail_transfer_MainToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
