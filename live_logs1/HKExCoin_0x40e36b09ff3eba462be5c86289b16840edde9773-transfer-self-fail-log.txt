This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 17:43:19,796 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 17:43:19,797 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 17:43:19,807 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 17:43:19,808 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 17:43:19,808 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 17:43:19,809 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 17:43:19,811 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 17:43:19,812 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 17:43:19,813 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 17:43:19,813 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 17:43:19,814 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 17:43:19,814 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 17:43:19,815 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 17:43:19,816 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 17:43:19,816 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 17:43:19,817 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 17:43:19,818 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 17:43:19,819 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 17:43:19,821 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 17:43:19,821 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 17:43:19,822 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 17:43:19,824 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 17:43:19,824 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 17:43:19,824 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 17:43:19,825 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 17:43:19,825 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 17:43:19,825 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 17:43:19,826 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 17:43:19,826 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 17:43:19,826 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 17:43:19,827 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 17:43:19,827 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 17:43:19,828 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 17:43:19,828 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 17:43:19,829 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 17:43:19,829 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 17:43:19,829 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 17:43:19,829 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 17:43:19,830 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 17:43:19,831 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 17:43:19,831 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 17:43:19,838 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 17:43:19,838 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 17:43:19,839 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 17:43:19,839 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 17:43:19,839 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 17:43:19,839 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 17:43:19,839 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 17:43:19,840 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 17:43:19,840 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 17:43:19,840 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 17:43:19,840 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 17:43:19,840 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 17:43:19,840 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 17:43:19,840 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 17:43:19,840 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 17:43:19,840 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 17:43:19,840 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 17:43:19,841 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 17:43:19,841 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 17:43:19,841 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 17:43:19,841 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 17:43:19,841 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 17:43:19,841 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 17:43:19,841 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 17:43:19,841 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 17:43:19,841 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 17:43:19,863 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 17:43:19,876 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 17:43:19,878 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 17:43:19,879 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 17:43:19,879 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 17:43:19,880 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transfer-self-fail.bpl
[2020-11-25 17:43:19,880 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transfer-self-fail.bpl'
[2020-11-25 17:43:19,998 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 17:43:19,999 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 17:43:20,000 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 17:43:20,000 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 17:43:20,000 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 17:43:20,016 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:43:19" (1/1) ...
[2020-11-25 17:43:20,017 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:43:19" (1/1) ...
[2020-11-25 17:43:20,055 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:43:19" (1/1) ...
[2020-11-25 17:43:20,056 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:43:19" (1/1) ...
[2020-11-25 17:43:20,082 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:43:19" (1/1) ...
[2020-11-25 17:43:20,097 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:43:19" (1/1) ...
[2020-11-25 17:43:20,110 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:43:19" (1/1) ...
[2020-11-25 17:43:20,131 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 17:43:20,132 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 17:43:20,132 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 17:43:20,134 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 17:43:20,138 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:43:19" (1/1) ...
[2020-11-25 17:43:20,160 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(HKExCoin.transfer(to, value), msg.sender == to && value > balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(HKExCoin.transfer)))
[2020-11-25 17:43:20,166 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(HKExCoin.transfer(to, value), msg.sender == to && value > balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(HKExCoin.transfer)))
[2020-11-25 17:43:20,174 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(HKExCoin.transfer(to, value), msg.sender == to && value > balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(HKExCoin.transfer)))
[2020-11-25 17:43:20,184 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==_to_s828 && _value_s828>balances_BasicToken[this][msg.sender] ) && _value_s828>=0 ) && _value_s828<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_to_s828]>=0 ) && balances_BasicToken[this][_to_s828]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][msg.sender]>=0 ) && balances_BasicToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HKExCoin>],IdentifierExpression[_to_s828,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HKExCoin>]],BinaryExpression[COMPGT,IdentifierExpression[_value_s828,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HKExCoin>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HKExCoin>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HKExCoin>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s828,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HKExCoin>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s828,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HKExCoin>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HKExCoin>]]],[IdentifierExpression[_to_s828,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HKExCoin>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HKExCoin>]]],[IdentifierExpression[_to_s828,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HKExCoin>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HKExCoin>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HKExCoin>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HKExCoin>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HKExCoin>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 17:43:20,190 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(HKExCoin.transfer(to, value), msg.sender == to && value > balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(HKExCoin.transfer)))
[2020-11-25 17:43:20,190 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_HKExCoin0) ==> ( <>AP(fail_transfer_HKExCoin0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 17:43:20,206 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:43:20 PropertyContainer
[2020-11-25 17:43:20,207 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 17:43:20,207 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 17:43:20,207 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 17:43:20,207 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 17:43:20,208 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:43:19" (1/2) ...
[2020-11-25 17:43:20,208 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 17:43:20,208 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 17:43:20,231 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:43:20" (2/2) ...
[2020-11-25 17:43:20,231 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 17:43:20,232 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 17:43:20,232 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 17:43:20,232 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 17:43:20,233 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:43:19" (1/2) ...
[2020-11-25 17:43:20,287 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 17:43:20,288 INFO  L130     BoogieDeclarations]: Found specification of procedure HKExCoin.TimeLock_ctor__success
[2020-11-25 17:43:20,288 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 17:43:20,288 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 17:43:20,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 17:43:20,288 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 17:43:20,288 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 17:43:20,288 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 17:43:20,288 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 17:43:20,289 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 17:43:20,289 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 17:43:20,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 17:43:20,289 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 17:43:20,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 17:43:20,289 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 17:43:20,289 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 17:43:20,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 17:43:20,289 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 17:43:20,290 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-25 17:43:20,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-25 17:43:20,290 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-25 17:43:20,290 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-25 17:43:20,290 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-25 17:43:20,290 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 17:43:20,290 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-25 17:43:20,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-25 17:43:20,290 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-25 17:43:20,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-25 17:43:20,291 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-25 17:43:20,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-25 17:43:20,291 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-25 17:43:20,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-25 17:43:20,291 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 17:43:20,291 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 17:43:20,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 17:43:20,291 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 17:43:20,291 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 17:43:20,292 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 17:43:20,292 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 17:43:20,292 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-25 17:43:20,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-25 17:43:20,292 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 17:43:20,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 17:43:20,292 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-25 17:43:20,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-25 17:43:20,292 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-25 17:43:20,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-25 17:43:20,293 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 17:43:20,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 17:43:20,293 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 17:43:20,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 17:43:20,293 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 17:43:20,293 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 17:43:20,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 17:43:20,293 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 17:43:20,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 17:43:20,293 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 17:43:20,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 17:43:20,294 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 17:43:20,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 17:43:20,294 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken_NoBaseCtor__success
[2020-11-25 17:43:20,294 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken
[2020-11-25 17:43:20,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken
[2020-11-25 17:43:20,294 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_PausableToken
[2020-11-25 17:43:20,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_PausableToken
[2020-11-25 17:43:20,294 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_PausableToken
[2020-11-25 17:43:20,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_PausableToken
[2020-11-25 17:43:20,295 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_PausableToken
[2020-11-25 17:43:20,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_PausableToken
[2020-11-25 17:43:20,295 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_PausableToken
[2020-11-25 17:43:20,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_PausableToken
[2020-11-25 17:43:20,295 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_PausableToken
[2020-11-25 17:43:20,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_PausableToken
[2020-11-25 17:43:20,295 INFO  L130     BoogieDeclarations]: Found specification of procedure HKExCoin_HKExCoin_NoBaseCtor__success
[2020-11-25 17:43:20,295 INFO  L130     BoogieDeclarations]: Found specification of procedure HKExCoin_HKExCoin
[2020-11-25 17:43:20,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure HKExCoin_HKExCoin
[2020-11-25 17:43:20,295 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HKExCoin
[2020-11-25 17:43:20,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HKExCoin
[2020-11-25 17:43:20,296 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HKExCoin
[2020-11-25 17:43:20,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HKExCoin
[2020-11-25 17:43:20,296 INFO  L130     BoogieDeclarations]: Found specification of procedure canSubAllocation~address~uint256_HKExCoin__success
[2020-11-25 17:43:20,296 INFO  L130     BoogieDeclarations]: Found specification of procedure subAllocation~address_HKExCoin__success
[2020-11-25 17:43:20,296 INFO  L130     BoogieDeclarations]: Found specification of procedure setAllocation~address~uint256~arr~arr_HKExCoin
[2020-11-25 17:43:20,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure setAllocation~address~uint256~arr~arr_HKExCoin
[2020-11-25 17:43:20,296 INFO  L130     BoogieDeclarations]: Found specification of procedure name_HKExCoin
[2020-11-25 17:43:20,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_HKExCoin
[2020-11-25 17:43:20,297 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_HKExCoin
[2020-11-25 17:43:20,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_HKExCoin
[2020-11-25 17:43:20,297 INFO  L130     BoogieDeclarations]: Found specification of procedure standard_HKExCoin
[2020-11-25 17:43:20,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure standard_HKExCoin
[2020-11-25 17:43:20,297 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_HKExCoin
[2020-11-25 17:43:20,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_HKExCoin
[2020-11-25 17:43:20,297 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_HKExCoin
[2020-11-25 17:43:20,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_HKExCoin
[2020-11-25 17:43:20,297 INFO  L130     BoogieDeclarations]: Found specification of procedure allocations~address~uint256_HKExCoin
[2020-11-25 17:43:20,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure allocations~address~uint256_HKExCoin
[2020-11-25 17:43:20,298 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 17:43:20,298 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 17:43:20,298 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 17:43:20,298 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 17:43:20,298 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 17:43:20,298 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 17:43:20,298 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 17:43:20,298 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 17:43:20,298 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 17:43:20,298 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 17:43:20,298 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-25 17:43:20,299 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-25 17:43:20,299 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-25 17:43:20,299 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-25 17:43:20,299 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 17:43:20,299 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 17:43:20,299 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-25 17:43:20,299 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-25 17:43:20,299 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 17:43:20,299 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 17:43:20,299 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PausableToken
[2020-11-25 17:43:20,300 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PausableToken
[2020-11-25 17:43:20,300 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HKExCoin
[2020-11-25 17:43:20,300 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 17:43:20,300 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 17:43:20,300 INFO  L130     BoogieDeclarations]: Found specification of procedure HKExCoin.TimeLock_ctor__fail
[2020-11-25 17:43:20,300 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 17:43:20,300 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 17:43:20,300 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 17:43:20,301 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 17:43:20,301 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 17:43:20,301 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 17:43:20,301 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 17:43:20,301 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 17:43:20,301 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 17:43:20,301 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 17:43:20,301 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 17:43:20,301 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 17:43:20,301 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 17:43:20,302 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 17:43:20,302 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 17:43:20,302 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 17:43:20,302 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 17:43:20,302 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 17:43:20,302 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 17:43:20,302 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-25 17:43:20,302 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-25 17:43:20,302 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-25 17:43:20,303 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-25 17:43:20,303 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 17:43:20,303 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 17:43:20,303 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-25 17:43:20,303 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-25 17:43:20,303 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 17:43:20,303 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 17:43:20,303 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 17:43:20,304 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 17:43:20,304 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-25 17:43:20,304 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-25 17:43:20,304 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 17:43:20,304 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 17:43:20,304 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-25 17:43:20,304 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 17:43:20,304 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-25 17:43:20,304 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-25 17:43:20,304 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 17:43:20,304 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 17:43:20,305 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 17:43:20,305 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 17:43:20,305 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 17:43:20,305 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 17:43:20,305 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 17:43:20,305 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 17:43:20,305 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 17:43:20,305 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 17:43:20,305 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 17:43:20,305 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 17:43:20,305 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 17:43:20,306 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken_NoBaseCtor__fail
[2020-11-25 17:43:20,306 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken__success
[2020-11-25 17:43:20,306 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken__fail
[2020-11-25 17:43:20,306 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_PausableToken__success
[2020-11-25 17:43:20,306 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_PausableToken__fail
[2020-11-25 17:43:20,306 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_PausableToken__success
[2020-11-25 17:43:20,306 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_PausableToken__fail
[2020-11-25 17:43:20,306 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_PausableToken__success
[2020-11-25 17:43:20,306 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_PausableToken__fail
[2020-11-25 17:43:20,306 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_PausableToken__success
[2020-11-25 17:43:20,306 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_PausableToken__fail
[2020-11-25 17:43:20,307 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_PausableToken__success
[2020-11-25 17:43:20,307 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_PausableToken__fail
[2020-11-25 17:43:20,307 INFO  L130     BoogieDeclarations]: Found specification of procedure HKExCoin_HKExCoin_NoBaseCtor__fail
[2020-11-25 17:43:20,307 INFO  L130     BoogieDeclarations]: Found specification of procedure HKExCoin_HKExCoin__success
[2020-11-25 17:43:20,307 INFO  L130     BoogieDeclarations]: Found specification of procedure HKExCoin_HKExCoin__fail
[2020-11-25 17:43:20,307 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HKExCoin__success
[2020-11-25 17:43:20,307 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HKExCoin__fail
[2020-11-25 17:43:20,307 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HKExCoin__success
[2020-11-25 17:43:20,307 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HKExCoin__fail
[2020-11-25 17:43:20,307 INFO  L130     BoogieDeclarations]: Found specification of procedure canSubAllocation~address~uint256_HKExCoin__fail
[2020-11-25 17:43:20,307 INFO  L130     BoogieDeclarations]: Found specification of procedure subAllocation~address_HKExCoin__fail
[2020-11-25 17:43:20,307 INFO  L130     BoogieDeclarations]: Found specification of procedure setAllocation~address~uint256~arr~arr_HKExCoin__success
[2020-11-25 17:43:20,308 INFO  L130     BoogieDeclarations]: Found specification of procedure setAllocation~address~uint256~arr~arr_HKExCoin__fail
[2020-11-25 17:43:20,308 INFO  L130     BoogieDeclarations]: Found specification of procedure name_HKExCoin__success
[2020-11-25 17:43:20,308 INFO  L130     BoogieDeclarations]: Found specification of procedure name_HKExCoin__fail
[2020-11-25 17:43:20,308 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_HKExCoin__success
[2020-11-25 17:43:20,308 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_HKExCoin__fail
[2020-11-25 17:43:20,308 INFO  L130     BoogieDeclarations]: Found specification of procedure standard_HKExCoin__success
[2020-11-25 17:43:20,308 INFO  L130     BoogieDeclarations]: Found specification of procedure standard_HKExCoin__fail
[2020-11-25 17:43:20,308 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_HKExCoin__success
[2020-11-25 17:43:20,308 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_HKExCoin__fail
[2020-11-25 17:43:20,308 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_HKExCoin__success
[2020-11-25 17:43:20,308 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_HKExCoin__fail
[2020-11-25 17:43:20,308 INFO  L130     BoogieDeclarations]: Found specification of procedure allocations~address~uint256_HKExCoin__success
[2020-11-25 17:43:20,309 INFO  L130     BoogieDeclarations]: Found specification of procedure allocations~address~uint256_HKExCoin__fail
[2020-11-25 17:43:20,309 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 17:43:20,309 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 17:43:20,309 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 17:43:20,309 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 17:43:20,309 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 17:43:20,309 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 17:43:20,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 17:43:20,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 17:43:20,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure HKExCoin.TimeLock_ctor__fail
[2020-11-25 17:43:20,309 INFO  L138     BoogieDeclarations]: Found implementation of procedure HKExCoin.TimeLock_ctor__success
[2020-11-25 17:43:20,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 17:43:20,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 17:43:20,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 17:43:20,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 17:43:20,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 17:43:20,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 17:43:20,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 17:43:20,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 17:43:20,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 17:43:20,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 17:43:20,310 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 17:43:20,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 17:43:20,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 17:43:20,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 17:43:20,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 17:43:20,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 17:43:20,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 17:43:20,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 17:43:20,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 17:43:20,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 17:43:20,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 17:43:20,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 17:43:20,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 17:43:20,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 17:43:20,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 17:43:20,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 17:43:20,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 17:43:20,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 17:43:20,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-25 17:43:20,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-25 17:43:20,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-25 17:43:20,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-25 17:43:20,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 17:43:20,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 17:43:20,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-25 17:43:20,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-25 17:43:20,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 17:43:20,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 17:43:20,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 17:43:20,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 17:43:20,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 17:43:20,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 17:43:20,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-25 17:43:20,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-25 17:43:20,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 17:43:20,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 17:43:20,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 17:43:20,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-25 17:43:20,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-25 17:43:20,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-25 17:43:20,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 17:43:20,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 17:43:20,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 17:43:20,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 17:43:20,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 17:43:20,315 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 17:43:20,315 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 17:43:20,315 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 17:43:20,315 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 17:43:20,315 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 17:43:20,315 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 17:43:20,315 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 17:43:20,315 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 17:43:20,315 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 17:43:20,315 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken_NoBaseCtor__fail
[2020-11-25 17:43:20,316 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken_NoBaseCtor__success
[2020-11-25 17:43:20,316 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken__fail
[2020-11-25 17:43:20,316 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken__success
[2020-11-25 17:43:20,316 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_PausableToken__fail
[2020-11-25 17:43:20,316 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_PausableToken__success
[2020-11-25 17:43:20,316 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_PausableToken__fail
[2020-11-25 17:43:20,316 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_PausableToken__success
[2020-11-25 17:43:20,316 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_PausableToken__fail
[2020-11-25 17:43:20,316 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_PausableToken__success
[2020-11-25 17:43:20,316 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_PausableToken__fail
[2020-11-25 17:43:20,316 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_PausableToken__success
[2020-11-25 17:43:20,316 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_PausableToken__fail
[2020-11-25 17:43:20,317 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_PausableToken__success
[2020-11-25 17:43:20,317 INFO  L138     BoogieDeclarations]: Found implementation of procedure HKExCoin_HKExCoin_NoBaseCtor__fail
[2020-11-25 17:43:20,317 INFO  L138     BoogieDeclarations]: Found implementation of procedure HKExCoin_HKExCoin_NoBaseCtor__success
[2020-11-25 17:43:20,317 INFO  L138     BoogieDeclarations]: Found implementation of procedure HKExCoin_HKExCoin__fail
[2020-11-25 17:43:20,317 INFO  L138     BoogieDeclarations]: Found implementation of procedure HKExCoin_HKExCoin__success
[2020-11-25 17:43:20,317 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HKExCoin__fail
[2020-11-25 17:43:20,317 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HKExCoin__success
[2020-11-25 17:43:20,317 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HKExCoin__fail
[2020-11-25 17:43:20,317 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HKExCoin__success
[2020-11-25 17:43:20,317 INFO  L138     BoogieDeclarations]: Found implementation of procedure canSubAllocation~address~uint256_HKExCoin__fail
[2020-11-25 17:43:20,317 INFO  L138     BoogieDeclarations]: Found implementation of procedure canSubAllocation~address~uint256_HKExCoin__success
[2020-11-25 17:43:20,317 INFO  L138     BoogieDeclarations]: Found implementation of procedure subAllocation~address_HKExCoin__fail
[2020-11-25 17:43:20,318 INFO  L138     BoogieDeclarations]: Found implementation of procedure subAllocation~address_HKExCoin__success
[2020-11-25 17:43:20,318 INFO  L138     BoogieDeclarations]: Found implementation of procedure setAllocation~address~uint256~arr~arr_HKExCoin__fail
[2020-11-25 17:43:20,318 INFO  L138     BoogieDeclarations]: Found implementation of procedure setAllocation~address~uint256~arr~arr_HKExCoin__success
[2020-11-25 17:43:20,318 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_HKExCoin__fail
[2020-11-25 17:43:20,318 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_HKExCoin__success
[2020-11-25 17:43:20,318 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_HKExCoin__fail
[2020-11-25 17:43:20,318 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_HKExCoin__success
[2020-11-25 17:43:20,318 INFO  L138     BoogieDeclarations]: Found implementation of procedure standard_HKExCoin__fail
[2020-11-25 17:43:20,318 INFO  L138     BoogieDeclarations]: Found implementation of procedure standard_HKExCoin__success
[2020-11-25 17:43:20,318 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_HKExCoin__fail
[2020-11-25 17:43:20,318 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_HKExCoin__success
[2020-11-25 17:43:20,318 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_HKExCoin__fail
[2020-11-25 17:43:20,318 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_HKExCoin__success
[2020-11-25 17:43:20,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure allocations~address~uint256_HKExCoin__fail
[2020-11-25 17:43:20,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure allocations~address~uint256_HKExCoin__success
[2020-11-25 17:43:20,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 17:43:20,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 17:43:20,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 17:43:20,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 17:43:20,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 17:43:20,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 17:43:20,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 17:43:20,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 17:43:20,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 17:43:20,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 17:43:20,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 17:43:20,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 17:43:20,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 17:43:20,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 17:43:20,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 17:43:20,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 17:43:20,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-25 17:43:20,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-25 17:43:20,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-25 17:43:20,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-25 17:43:20,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 17:43:20,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 17:43:20,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-25 17:43:20,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-25 17:43:20,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 17:43:20,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 17:43:20,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PausableToken
[2020-11-25 17:43:20,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PausableToken
[2020-11-25 17:43:20,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HKExCoin
[2020-11-25 17:43:20,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 17:43:20,321 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 17:43:20,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 17:43:20,677 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 17:43:20,677 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 17:43:21,517 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 17:43:21,517 INFO  L286             CfgBuilder]: Removed 9 assue(true) statements.
[2020-11-25 17:43:21,519 INFO  L202        PluginConnector]: Adding new model HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:43:21 BoogieIcfgContainer
[2020-11-25 17:43:21,519 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:43:20" (2/2) ...
[2020-11-25 17:43:21,519 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 17:43:21,519 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@555a3aea and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:43:21, skipping insertion in model container
[2020-11-25 17:43:21,519 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 17:43:21,520 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 17:43:21,520 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 17:43:21,521 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 17:43:21,521 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:43:19" (1/3) ...
[2020-11-25 17:43:21,521 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@4b606e2e and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:43:21, skipping insertion in model container
[2020-11-25 17:43:21,521 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:43:20" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 17:43:21,555 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:43:21 NWAContainer
[2020-11-25 17:43:21,555 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 17:43:21,555 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 17:43:21,555 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 17:43:21,556 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 17:43:21,557 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:43:21" (3/4) ...
[2020-11-25 17:43:21,557 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@4515f458 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:43:21, skipping insertion in model container
[2020-11-25 17:43:21,557 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:43:21" (4/4) ...
[2020-11-25 17:43:21,559 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 17:43:21,564 INFO  L110   BuchiProductObserver]: Initial RCFG 3266 locations, 4464 edges
[2020-11-25 17:43:21,564 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 17:43:21,574 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 17:43:23,855 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 17:43:23,865 INFO  L110   BuchiProductObserver]: BuchiProgram size 8068 locations, 14499 edges
[2020-11-25 17:43:23,866 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:43:23 BoogieIcfgContainer
[2020-11-25 17:43:23,866 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 17:43:23,866 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 17:43:23,866 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 17:43:23,867 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 17:43:23,868 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:43:23" (1/1) ...
[2020-11-25 17:43:24,015 INFO  L313           BlockEncoder]: Initial Icfg 8068 locations, 14499 edges
[2020-11-25 17:43:24,015 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 17:43:24,016 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 17:43:24,016 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 17:43:24,016 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 17:43:24,032 INFO  L70    emoveInfeasibleEdges]: Removed 150 edges and 22 locations because of local infeasibility
[2020-11-25 17:43:24,051 INFO  L70        RemoveSinkStates]: Removed 178 edges and 98 locations by removing sink states
[2020-11-25 17:43:24,068 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 17:43:24,073 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 17:43:24,078 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 17:43:24,079 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 17:43:24,083 INFO  L313           BlockEncoder]: Encoded RCFG 7908 locations, 14112 edges
[2020-11-25 17:43:24,084 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:43:24 BasicIcfg
[2020-11-25 17:43:24,084 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 17:43:24,084 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 17:43:24,084 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 17:43:24,086 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 17:43:24,086 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:43:24,086 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:43:19" (1/6) ...
[2020-11-25 17:43:24,088 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4c1b3 and model type HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:43:24, skipping insertion in model container
[2020-11-25 17:43:24,088 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:43:24,088 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:43:20" (2/6) ...
[2020-11-25 17:43:24,088 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4c1b3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:43:24, skipping insertion in model container
[2020-11-25 17:43:24,088 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:43:24,088 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:43:21" (3/6) ...
[2020-11-25 17:43:24,088 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4c1b3 and model type HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 05:43:24, skipping insertion in model container
[2020-11-25 17:43:24,088 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:43:24,088 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:43:21" (4/6) ...
[2020-11-25 17:43:24,088 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4c1b3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:43:24, skipping insertion in model container
[2020-11-25 17:43:24,088 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:43:24,088 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:43:23" (5/6) ...
[2020-11-25 17:43:24,089 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4c1b3 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 05:43:24, skipping insertion in model container
[2020-11-25 17:43:24,089 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:43:24,089 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:43:24" (6/6) ...
[2020-11-25 17:43:24,090 INFO  L404   chiAutomizerObserver]: Analyzing ICFG HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_transfer-self-fail.bpl_BEv2
[2020-11-25 17:43:24,125 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 17:43:24,125 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 17:43:24,125 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 17:43:24,125 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 17:43:24,125 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 17:43:24,125 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 17:43:24,125 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 17:43:24,125 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 17:43:24,125 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 17:43:24,175 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7908 states.
[2020-11-25 17:43:24,242 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:43:24,242 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:43:24,242 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:43:24,249 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:43:24,249 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:43:24,249 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 17:43:24,250 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7908 states.
[2020-11-25 17:43:24,278 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:43:24,278 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:43:24,278 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:43:24,279 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:43:24,279 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_HKExCoin0 := false;
[L2]                 call_transfer_HKExCoin0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == HKExCoin;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND TRUE   revert
[L2126]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;

Loop:
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND TRUE   choice == 20
[L8542]              gas := gas - 21000;
[L8543]  COND FALSE  !(gas >= 0)
[L8688]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:43:24,292 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:43:24,293 INFO  L82        PathProgramCache]: Analyzing trace with hash 487172050, now seen corresponding path program 1 times
[2020-11-25 17:43:24,297 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:43:24,318 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:43:24,352 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:43:24,354 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:43:24,354 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 17:43:24,721 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:43:24,729 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 17:43:24,730 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 17:43:24,731 INFO  L87              Difference]: Start difference. First operand 7908 states. Second operand 3 states.
[2020-11-25 17:43:25,085 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:43:25,085 INFO  L93              Difference]: Finished difference Result 4659 states and 5489 transitions.
[2020-11-25 17:43:25,086 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 17:43:25,087 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4659 states and 5489 transitions.
[2020-11-25 17:43:25,110 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:43:25,143 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4659 states to 4655 states and 5481 transitions.
[2020-11-25 17:43:25,144 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 17:43:25,146 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 926
[2020-11-25 17:43:25,146 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4655 states and 5481 transitions.
[2020-11-25 17:43:25,156 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:43:25,156 INFO  L728         BuchiCegarLoop]: Abstraction has 4655 states and 5481 transitions.
[2020-11-25 17:43:25,173 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4655 states and 5481 transitions.
[2020-11-25 17:43:25,249 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4655 to 4655.
[2020-11-25 17:43:25,250 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4655 states.
[2020-11-25 17:43:25,257 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4655 states to 4655 states and 5481 transitions.
[2020-11-25 17:43:25,258 INFO  L751         BuchiCegarLoop]: Abstraction has 4655 states and 5481 transitions.
[2020-11-25 17:43:25,258 INFO  L631         BuchiCegarLoop]: Abstraction has 4655 states and 5481 transitions.
[2020-11-25 17:43:25,259 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 17:43:25,259 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4655 states and 5481 transitions.
[2020-11-25 17:43:25,272 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:43:25,272 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:43:25,273 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:43:25,275 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:43:25,275 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_HKExCoin0 := false;
[L2]                 call_transfer_HKExCoin0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == HKExCoin;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND TRUE   revert
[L2126]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s828 && _value_s828 > balances_BasicToken[this][msgsender_MSG]) && _value_s828 >= 0) && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s828] >= 0) && balances_BasicToken[this][_to_s828] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HKExCoin0 := true;
[L2]                 call_transfer_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND TRUE   sub_value_s949 == 0
[L5329]              __ret_0_ := false;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND TRUE   revert
[L2204]  RET         call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s828 && _value_s828 > balances_BasicToken[this][msgsender_MSG]) && _value_s828 >= 0) && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s828] >= 0) && balances_BasicToken[this][_to_s828] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HKExCoin0 := true;
[L2]                 call_transfer_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND TRUE   sub_value_s949 == 0
[L5329]              __ret_0_ := false;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND TRUE   revert
[L2204]  RET         call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:43:25,280 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:43:25,281 INFO  L82        PathProgramCache]: Analyzing trace with hash 1133945709, now seen corresponding path program 1 times
[2020-11-25 17:43:25,282 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:43:25,296 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:43:25,326 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:43:25,326 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:43:25,326 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 17:43:25,327 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:43:25,328 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 17:43:25,328 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 17:43:25,328 INFO  L87              Difference]: Start difference. First operand 4655 states and 5481 transitions. cyclomatic complexity: 842 Second operand 4 states.
[2020-11-25 17:43:26,088 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:43:26,089 INFO  L93              Difference]: Finished difference Result 5611 states and 6346 transitions.
[2020-11-25 17:43:26,090 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 17:43:26,090 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5611 states and 6346 transitions.
[2020-11-25 17:43:26,111 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:43:26,149 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5611 states to 5389 states and 6084 transitions.
[2020-11-25 17:43:26,150 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1076
[2020-11-25 17:43:26,151 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1092
[2020-11-25 17:43:26,151 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5389 states and 6084 transitions.
[2020-11-25 17:43:26,160 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:43:26,160 INFO  L728         BuchiCegarLoop]: Abstraction has 5389 states and 6084 transitions.
[2020-11-25 17:43:26,166 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5389 states and 6084 transitions.
[2020-11-25 17:43:26,225 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5389 to 5175.
[2020-11-25 17:43:26,225 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5175 states.
[2020-11-25 17:43:26,233 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5175 states to 5175 states and 5813 transitions.
[2020-11-25 17:43:26,233 INFO  L751         BuchiCegarLoop]: Abstraction has 5175 states and 5813 transitions.
[2020-11-25 17:43:26,233 INFO  L631         BuchiCegarLoop]: Abstraction has 5175 states and 5813 transitions.
[2020-11-25 17:43:26,233 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 17:43:26,233 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5175 states and 5813 transitions.
[2020-11-25 17:43:26,242 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:43:26,243 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:43:26,243 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:43:26,248 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:43:26,248 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_HKExCoin0 := false;
[L2]                 call_transfer_HKExCoin0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == HKExCoin;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND FALSE  !(revert)
[L5083]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L5083]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]  COND FALSE  !(revert)
[L5087]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L5087]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5088]  COND FALSE  !(revert)
[L5091]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L5091]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5092]  COND FALSE  !(revert)
[L5095]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L5095]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5096]  COND FALSE  !(revert)
[L5099]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L5099]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5100]  COND FALSE  !(revert)
[L5103]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4700]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L4712]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4716]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4716]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]  COND FALSE  !(revert)
[L4720]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L4720]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  COND FALSE  !(revert)
[L4724]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4661]              assume msgsender_MSG != null;
[L4662]              Balance[this] := 0;
[L4724]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4725]  COND FALSE  !(revert)
[L5103]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5104]  COND FALSE  !(revert)
[L5107]  CALL        call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5013]              assume msgsender_MSG != null;
[L5014]              Balance[this] := 0;
[L5015]              name_HKExCoin[this] := 1400933812;
[L5016]              symbol_HKExCoin[this] := -256252482;
[L5017]              standard_HKExCoin[this] := -941536354;
[L5018]              decimals_HKExCoin[this] := 18;
[L5019]              __var_22 := decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5020]              INITIAL_SUPPLY_HKExCoin[this] := nonlinearMul(10 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5022]  CALL        call __var_23 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5022]  RET         call __var_23 := FreshRefGenerator__success();
[L5023]  COND FALSE  !(revert)
[L5026]              allocations_HKExCoin[this] := __var_23;
[L5028]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]] := zeroRefboolArr();
[L5030]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_HKExCoin[this];
[L5031]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5032]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_HKExCoin[this];
[L5033]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5034]              assert { :EventEmitted "Transfer_HKExCoin" } true;
[L5107]  RET         call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5108]  COND FALSE  !(revert)
[L2126]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s828 && _value_s828 > balances_BasicToken[this][msgsender_MSG]) && _value_s828 >= 0) && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s828] >= 0) && balances_BasicToken[this][_to_s828] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HKExCoin0 := true;
[L2]                 call_transfer_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND TRUE   sub_value_s949 == 0
[L5329]              __ret_0_ := false;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == HKExCoin
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND TRUE   DType[this] == HKExCoin
[L4764]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4764]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4765]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s828 && _value_s828 > balances_BasicToken[this][msgsender_MSG]) && _value_s828 >= 0) && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s828] >= 0) && balances_BasicToken[this][_to_s828] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HKExCoin0 := true;
[L2]                 call_transfer_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND TRUE   sub_value_s949 == 0
[L5329]              __ret_0_ := false;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == HKExCoin
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND TRUE   DType[this] == HKExCoin
[L4764]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4764]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4765]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:43:26,257 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:43:26,257 INFO  L82        PathProgramCache]: Analyzing trace with hash -545722712, now seen corresponding path program 1 times
[2020-11-25 17:43:26,258 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:43:26,289 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:43:26,545 INFO  L134       CoverageAnalysis]: Checked inductivity of 963 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 963 trivial. 0 not checked.
[2020-11-25 17:43:26,545 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:43:26,546 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 17:43:26,546 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:43:26,546 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 17:43:26,546 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 17:43:26,547 INFO  L87              Difference]: Start difference. First operand 5175 states and 5813 transitions. cyclomatic complexity: 655 Second operand 4 states.
[2020-11-25 17:43:26,604 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:43:26,604 INFO  L93              Difference]: Finished difference Result 5185 states and 5823 transitions.
[2020-11-25 17:43:26,604 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 17:43:26,604 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5185 states and 5823 transitions.
[2020-11-25 17:43:26,613 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:43:26,627 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5185 states to 5179 states and 5817 transitions.
[2020-11-25 17:43:26,627 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1036
[2020-11-25 17:43:26,627 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1036
[2020-11-25 17:43:26,627 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5179 states and 5817 transitions.
[2020-11-25 17:43:26,632 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:43:26,632 INFO  L728         BuchiCegarLoop]: Abstraction has 5179 states and 5817 transitions.
[2020-11-25 17:43:26,636 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5179 states and 5817 transitions.
[2020-11-25 17:43:26,671 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5179 to 5179.
[2020-11-25 17:43:26,671 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5179 states.
[2020-11-25 17:43:26,676 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5179 states to 5179 states and 5817 transitions.
[2020-11-25 17:43:26,676 INFO  L751         BuchiCegarLoop]: Abstraction has 5179 states and 5817 transitions.
[2020-11-25 17:43:26,676 INFO  L631         BuchiCegarLoop]: Abstraction has 5179 states and 5817 transitions.
[2020-11-25 17:43:26,676 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 17:43:26,677 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5179 states and 5817 transitions.
[2020-11-25 17:43:26,682 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:43:26,682 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:43:26,682 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:43:26,684 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:43:26,685 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_HKExCoin0 := false;
[L2]                 call_transfer_HKExCoin0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == HKExCoin;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND FALSE  !(revert)
[L5083]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L5083]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]  COND FALSE  !(revert)
[L5087]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L5087]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5088]  COND FALSE  !(revert)
[L5091]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L5091]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5092]  COND FALSE  !(revert)
[L5095]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L5095]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5096]  COND FALSE  !(revert)
[L5099]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L5099]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5100]  COND FALSE  !(revert)
[L5103]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4700]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L4712]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4716]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4716]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]  COND FALSE  !(revert)
[L4720]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L4720]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  COND FALSE  !(revert)
[L4724]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4661]              assume msgsender_MSG != null;
[L4662]              Balance[this] := 0;
[L4724]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4725]  COND FALSE  !(revert)
[L5103]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5104]  COND FALSE  !(revert)
[L5107]  CALL        call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5013]              assume msgsender_MSG != null;
[L5014]              Balance[this] := 0;
[L5015]              name_HKExCoin[this] := 1400933812;
[L5016]              symbol_HKExCoin[this] := -256252482;
[L5017]              standard_HKExCoin[this] := -941536354;
[L5018]              decimals_HKExCoin[this] := 18;
[L5019]              __var_22 := decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5020]              INITIAL_SUPPLY_HKExCoin[this] := nonlinearMul(10 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5022]  CALL        call __var_23 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5022]  RET         call __var_23 := FreshRefGenerator__success();
[L5023]  COND FALSE  !(revert)
[L5026]              allocations_HKExCoin[this] := __var_23;
[L5028]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]] := zeroRefboolArr();
[L5030]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_HKExCoin[this];
[L5031]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5032]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_HKExCoin[this];
[L5033]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5034]              assert { :EventEmitted "Transfer_HKExCoin" } true;
[L5107]  RET         call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5108]  COND FALSE  !(revert)
[L2126]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s828 && _value_s828 > balances_BasicToken[this][msgsender_MSG]) && _value_s828 >= 0) && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s828] >= 0) && balances_BasicToken[this][_to_s828] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HKExCoin0 := true;
[L2]                 call_transfer_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == HKExCoin
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND FALSE  !(DType[this] == HKExCoin)
[L4768]  COND TRUE   DType[this] == PausableToken
[L4769]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4769]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4770]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s828 && _value_s828 > balances_BasicToken[this][msgsender_MSG]) && _value_s828 >= 0) && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s828] >= 0) && balances_BasicToken[this][_to_s828] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HKExCoin0 := true;
[L2]                 call_transfer_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == HKExCoin
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND FALSE  !(DType[this] == HKExCoin)
[L4768]  COND TRUE   DType[this] == PausableToken
[L4769]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4769]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4770]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:43:26,690 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:43:26,690 INFO  L82        PathProgramCache]: Analyzing trace with hash 1696278830, now seen corresponding path program 1 times
[2020-11-25 17:43:26,691 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:43:26,709 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:43:26,863 INFO  L134       CoverageAnalysis]: Checked inductivity of 963 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 963 trivial. 0 not checked.
[2020-11-25 17:43:26,864 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:43:26,864 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 17:43:26,864 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:43:26,864 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 17:43:26,864 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 17:43:26,865 INFO  L87              Difference]: Start difference. First operand 5179 states and 5817 transitions. cyclomatic complexity: 655 Second operand 7 states.
[2020-11-25 17:43:26,974 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:43:26,974 INFO  L93              Difference]: Finished difference Result 5209 states and 5848 transitions.
[2020-11-25 17:43:26,975 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 17:43:26,975 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5209 states and 5848 transitions.
[2020-11-25 17:43:26,986 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:43:27,002 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5209 states to 5185 states and 5823 transitions.
[2020-11-25 17:43:27,002 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1039
[2020-11-25 17:43:27,003 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1039
[2020-11-25 17:43:27,003 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5185 states and 5823 transitions.
[2020-11-25 17:43:27,008 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:43:27,008 INFO  L728         BuchiCegarLoop]: Abstraction has 5185 states and 5823 transitions.
[2020-11-25 17:43:27,013 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5185 states and 5823 transitions.
[2020-11-25 17:43:27,045 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5185 to 5185.
[2020-11-25 17:43:27,045 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5185 states.
[2020-11-25 17:43:27,051 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5185 states to 5185 states and 5823 transitions.
[2020-11-25 17:43:27,051 INFO  L751         BuchiCegarLoop]: Abstraction has 5185 states and 5823 transitions.
[2020-11-25 17:43:27,051 INFO  L631         BuchiCegarLoop]: Abstraction has 5185 states and 5823 transitions.
[2020-11-25 17:43:27,051 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 17:43:27,051 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5185 states and 5823 transitions.
[2020-11-25 17:43:27,057 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:43:27,057 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:43:27,057 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:43:27,060 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:43:27,060 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_HKExCoin0 := false;
[L2]                 call_transfer_HKExCoin0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == HKExCoin;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND FALSE  !(revert)
[L5083]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L5083]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]  COND FALSE  !(revert)
[L5087]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L5087]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5088]  COND FALSE  !(revert)
[L5091]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L5091]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5092]  COND FALSE  !(revert)
[L5095]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L5095]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5096]  COND FALSE  !(revert)
[L5099]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L5099]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5100]  COND FALSE  !(revert)
[L5103]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4700]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L4712]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4716]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4716]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]  COND FALSE  !(revert)
[L4720]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L4720]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  COND FALSE  !(revert)
[L4724]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4661]              assume msgsender_MSG != null;
[L4662]              Balance[this] := 0;
[L4724]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4725]  COND FALSE  !(revert)
[L5103]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5104]  COND FALSE  !(revert)
[L5107]  CALL        call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5013]              assume msgsender_MSG != null;
[L5014]              Balance[this] := 0;
[L5015]              name_HKExCoin[this] := 1400933812;
[L5016]              symbol_HKExCoin[this] := -256252482;
[L5017]              standard_HKExCoin[this] := -941536354;
[L5018]              decimals_HKExCoin[this] := 18;
[L5019]              __var_22 := decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5020]              INITIAL_SUPPLY_HKExCoin[this] := nonlinearMul(10 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5022]  CALL        call __var_23 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5022]  RET         call __var_23 := FreshRefGenerator__success();
[L5023]  COND FALSE  !(revert)
[L5026]              allocations_HKExCoin[this] := __var_23;
[L5028]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]] := zeroRefboolArr();
[L5030]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_HKExCoin[this];
[L5031]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5032]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_HKExCoin[this];
[L5033]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5034]              assert { :EventEmitted "Transfer_HKExCoin" } true;
[L5107]  RET         call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5108]  COND FALSE  !(revert)
[L2126]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s828 && _value_s828 > balances_BasicToken[this][msgsender_MSG]) && _value_s828 >= 0) && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s828] >= 0) && balances_BasicToken[this][_to_s828] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HKExCoin0 := true;
[L2]                 call_transfer_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == HKExCoin
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND TRUE   DType[this] == HKExCoin
[L4764]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4764]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4765]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s828 && _value_s828 > balances_BasicToken[this][msgsender_MSG]) && _value_s828 >= 0) && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s828] >= 0) && balances_BasicToken[this][_to_s828] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HKExCoin0 := true;
[L2]                 call_transfer_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == HKExCoin
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND TRUE   DType[this] == HKExCoin
[L4764]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4764]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4765]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:43:27,066 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:43:27,066 INFO  L82        PathProgramCache]: Analyzing trace with hash 1471410903, now seen corresponding path program 1 times
[2020-11-25 17:43:27,067 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:43:27,091 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:43:27,299 INFO  L134       CoverageAnalysis]: Checked inductivity of 963 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 963 trivial. 0 not checked.
[2020-11-25 17:43:27,299 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:43:27,299 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-25 17:43:27,299 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:43:27,300 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 17:43:27,300 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=108, Unknown=0, NotChecked=0, Total=132
[2020-11-25 17:43:27,300 INFO  L87              Difference]: Start difference. First operand 5185 states and 5823 transitions. cyclomatic complexity: 655 Second operand 12 states.
[2020-11-25 17:43:29,931 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:43:29,931 INFO  L93              Difference]: Finished difference Result 5638 states and 6436 transitions.
[2020-11-25 17:43:29,931 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 17:43:29,931 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5638 states and 6436 transitions.
[2020-11-25 17:43:29,941 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 17:43:29,956 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5638 states to 5638 states and 6436 transitions.
[2020-11-25 17:43:29,956 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1097
[2020-11-25 17:43:29,957 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1097
[2020-11-25 17:43:29,957 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5638 states and 6436 transitions.
[2020-11-25 17:43:29,962 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:43:29,962 INFO  L728         BuchiCegarLoop]: Abstraction has 5638 states and 6436 transitions.
[2020-11-25 17:43:29,966 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5638 states and 6436 transitions.
[2020-11-25 17:43:30,006 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5638 to 5478.
[2020-11-25 17:43:30,006 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5478 states.
[2020-11-25 17:43:30,012 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5478 states to 5478 states and 6219 transitions.
[2020-11-25 17:43:30,012 INFO  L751         BuchiCegarLoop]: Abstraction has 5478 states and 6219 transitions.
[2020-11-25 17:43:30,012 INFO  L631         BuchiCegarLoop]: Abstraction has 5478 states and 6219 transitions.
[2020-11-25 17:43:30,012 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 17:43:30,012 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5478 states and 6219 transitions.
[2020-11-25 17:43:30,017 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:43:30,017 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:43:30,017 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:43:30,020 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:43:30,020 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_HKExCoin0 := false;
[L2]                 call_transfer_HKExCoin0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == HKExCoin;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND FALSE  !(revert)
[L5083]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L5083]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]  COND FALSE  !(revert)
[L5087]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L5087]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5088]  COND FALSE  !(revert)
[L5091]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L5091]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5092]  COND FALSE  !(revert)
[L5095]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L5095]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5096]  COND FALSE  !(revert)
[L5099]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L5099]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5100]  COND FALSE  !(revert)
[L5103]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4700]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L4712]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4716]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4716]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]  COND FALSE  !(revert)
[L4720]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L4720]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  COND FALSE  !(revert)
[L4724]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4661]              assume msgsender_MSG != null;
[L4662]              Balance[this] := 0;
[L4724]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4725]  COND FALSE  !(revert)
[L5103]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5104]  COND FALSE  !(revert)
[L5107]  CALL        call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5013]              assume msgsender_MSG != null;
[L5014]              Balance[this] := 0;
[L5015]              name_HKExCoin[this] := 1400933812;
[L5016]              symbol_HKExCoin[this] := -256252482;
[L5017]              standard_HKExCoin[this] := -941536354;
[L5018]              decimals_HKExCoin[this] := 18;
[L5019]              __var_22 := decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5020]              INITIAL_SUPPLY_HKExCoin[this] := nonlinearMul(10 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5022]  CALL        call __var_23 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5022]  RET         call __var_23 := FreshRefGenerator__success();
[L5023]  COND FALSE  !(revert)
[L5026]              allocations_HKExCoin[this] := __var_23;
[L5028]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]] := zeroRefboolArr();
[L5030]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_HKExCoin[this];
[L5031]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5032]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_HKExCoin[this];
[L5033]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5034]              assert { :EventEmitted "Transfer_HKExCoin" } true;
[L5107]  RET         call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5108]  COND FALSE  !(revert)
[L2126]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s828 && _value_s828 > balances_BasicToken[this][msgsender_MSG]) && _value_s828 >= 0) && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s828] >= 0) && balances_BasicToken[this][_to_s828] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HKExCoin0 := true;
[L2]                 call_transfer_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND TRUE   alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false
[L5337]  CALL        call __var_30 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5337]  RET         call __var_30 := FreshRefGenerator__success();
[L5338]  COND FALSE  !(revert)
[L5341]              assume Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5342]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] := true;
[L5343]              assume M_int_Ref[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == zerointRefArr();
[L5344]              assume M_Ref_Ref[allocations_HKExCoin[this]][sender_s949] == __var_30;
[L5345]              assume sum[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == HKExCoin
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND TRUE   DType[this] == HKExCoin
[L4764]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4764]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4765]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8688]  CALL        call CorralChoice_HKExCoin(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != HKExCoin;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s828 && _value_s828 > balances_BasicToken[this][msgsender_MSG]) && _value_s828 >= 0) && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s828] >= 0) && balances_BasicToken[this][_to_s828] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HKExCoin0 := true;
[L2]                 call_transfer_HKExCoin0 := false;
[L2]                 revert := revert_hold;
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND TRUE   alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] == false
[L5337]  CALL        call __var_30 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5337]  RET         call __var_30 := FreshRefGenerator__success();
[L5338]  COND FALSE  !(revert)
[L5341]              assume Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5342]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s949] := true;
[L5343]              assume M_int_Ref[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == zerointRefArr();
[L5344]              assume M_Ref_Ref[allocations_HKExCoin[this]][sender_s949] == __var_30;
[L5345]              assume sum[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0;
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_HKExCoin[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == HKExCoin
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND TRUE   DType[this] == HKExCoin
[L4764]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4764]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4765]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_HKExCoin(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:43:30,025 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:43:30,026 INFO  L82        PathProgramCache]: Analyzing trace with hash 2112655538, now seen corresponding path program 1 times
[2020-11-25 17:43:30,026 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:43:30,045 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:43:30,260 INFO  L134       CoverageAnalysis]: Checked inductivity of 963 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 963 trivial. 0 not checked.
[2020-11-25 17:43:30,260 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:43:30,260 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 17:43:30,261 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:43:30,261 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 17:43:30,261 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=29, Unknown=0, NotChecked=0, Total=42
[2020-11-25 17:43:30,261 INFO  L87              Difference]: Start difference. First operand 5478 states and 6219 transitions. cyclomatic complexity: 765 Second operand 7 states.
[2020-11-25 17:43:31,346 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:43:31,346 INFO  L93              Difference]: Finished difference Result 3549 states and 4051 transitions.
[2020-11-25 17:43:31,347 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 17:43:31,348 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3549 states and 4051 transitions.
[2020-11-25 17:43:31,357 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 17:43:31,357 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3549 states to 0 states and 0 transitions.
[2020-11-25 17:43:31,357 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 17:43:31,357 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 17:43:31,357 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 17:43:31,357 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:43:31,357 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 17:43:31,357 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 17:43:31,357 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 17:43:31,358 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 17:43:31,358 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 17:43:31,358 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 17:43:31,358 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 17:43:31,362 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 05:43:31 BasicIcfg
[2020-11-25 17:43:31,362 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 17:43:31,362 INFO  L168              Benchmark]: Toolchain (without parser) took 11363.58 ms. Allocated memory was 1.0 GB in the beginning and 2.2 GB in the end (delta: 1.1 GB). Free memory was 924.5 MB in the beginning and 1.4 GB in the end (delta: -455.1 MB). Peak memory consumption was 694.2 MB. Max. memory is 15.3 GB.
[2020-11-25 17:43:31,363 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 17:43:31,363 INFO  L168              Benchmark]: Boogie Preprocessor took 132.04 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 908.4 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 17:43:31,364 INFO  L168              Benchmark]: UtopiaSpecLang took 74.68 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 897.6 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 17:43:31,364 INFO  L168              Benchmark]: Boogie Printer took 24.46 ms. Allocated memory is still 1.0 GB. Free memory was 897.6 MB in the beginning and 892.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 17:43:31,365 INFO  L168              Benchmark]: RCFGBuilder took 1287.72 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 64.5 MB). Free memory was 892.2 MB in the beginning and 926.1 MB in the end (delta: -33.8 MB). Peak memory consumption was 181.9 MB. Max. memory is 15.3 GB.
[2020-11-25 17:43:31,365 INFO  L168              Benchmark]: UtopiaLTL2Aut took 35.68 ms. Allocated memory is still 1.1 GB. Free memory was 926.1 MB in the beginning and 916.5 MB in the end (delta: 9.5 MB). Peak memory consumption was 9.5 MB. Max. memory is 15.3 GB.
[2020-11-25 17:43:31,366 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2310.35 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 191.4 MB). Free memory was 916.5 MB in the beginning and 974.4 MB in the end (delta: -57.9 MB). Peak memory consumption was 498.4 MB. Max. memory is 15.3 GB.
[2020-11-25 17:43:31,366 INFO  L168              Benchmark]: BlockEncodingV2 took 217.94 ms. Allocated memory is still 1.3 GB. Free memory was 974.4 MB in the beginning and 853.6 MB in the end (delta: 120.8 MB). Peak memory consumption was 120.8 MB. Max. memory is 15.3 GB.
[2020-11-25 17:43:31,366 INFO  L168              Benchmark]: BuchiAutomizer took 7277.59 ms. Allocated memory was 1.3 GB in the beginning and 2.2 GB in the end (delta: 893.4 MB). Free memory was 853.6 MB in the beginning and 1.4 GB in the end (delta: -525.9 MB). Peak memory consumption was 367.5 MB. Max. memory is 15.3 GB.
[2020-11-25 17:43:31,370 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    8068 locations, 14499 edges
  - StatisticsResult: Encoded RCFG
    7908 locations, 14112 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 132.04 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 908.4 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 74.68 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 897.6 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 24.46 ms. Allocated memory is still 1.0 GB. Free memory was 897.6 MB in the beginning and 892.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1287.72 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 64.5 MB). Free memory was 892.2 MB in the beginning and 926.1 MB in the end (delta: -33.8 MB). Peak memory consumption was 181.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 35.68 ms. Allocated memory is still 1.1 GB. Free memory was 926.1 MB in the beginning and 916.5 MB in the end (delta: 9.5 MB). Peak memory consumption was 9.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2310.35 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 191.4 MB). Free memory was 916.5 MB in the beginning and 974.4 MB in the end (delta: -57.9 MB). Peak memory consumption was 498.4 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 217.94 ms. Allocated memory is still 1.3 GB. Free memory was 974.4 MB in the beginning and 853.6 MB in the end (delta: 120.8 MB). Peak memory consumption was 120.8 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 7277.59 ms. Allocated memory was 1.3 GB in the beginning and 2.2 GB in the end (delta: 893.4 MB). Free memory was 853.6 MB in the beginning and 1.4 GB in the end (delta: -525.9 MB). Peak memory consumption was 367.5 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3266 locations, 4464 edges
  - StatisticsResult: BuchiProgram size
    8068 locations, 14499 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 6 terminating modules (6 trivial, 0 deterministic, 0 nondeterministic). 6 modules have a trivial ranking function, the largest among these consists of 12 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 7.2s and 7 iterations.  TraceHistogramMax:12. Analysis of lassos took 1.4s. Construction of modules took 3.6s. BÃ¼chi inclusion checks took 1.3s. Highest rank in rank-based complementation 0. Minimization of det autom 6. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 5 MinimizatonAttempts, 374 StatesRemovedByMinimization, 2 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 5478 states and ocurred in iteration 5.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 29443 SDtfs, 18507 SDslu, 53617 SDs, 0 SdLazy, 51762 SolverSat, 3756 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 3.6s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU6 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_HKExCoin0) ==> ( <>(fail_transfer_HKExCoin0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
