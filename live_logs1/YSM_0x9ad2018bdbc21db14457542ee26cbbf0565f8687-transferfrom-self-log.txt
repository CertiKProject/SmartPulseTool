This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 09:48:29,975 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 09:48:29,976 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 09:48:29,988 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 09:48:29,988 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 09:48:29,989 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 09:48:29,990 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 09:48:29,991 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 09:48:29,993 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 09:48:29,993 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 09:48:29,994 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 09:48:29,994 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 09:48:29,995 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 09:48:29,996 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 09:48:29,997 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 09:48:29,997 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 09:48:29,998 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 09:48:29,999 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 09:48:30,000 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 09:48:30,002 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 09:48:30,002 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 09:48:30,004 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 09:48:30,005 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 09:48:30,006 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 09:48:30,006 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 09:48:30,006 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 09:48:30,007 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 09:48:30,007 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 09:48:30,007 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 09:48:30,008 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 09:48:30,008 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 09:48:30,009 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 09:48:30,009 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 09:48:30,010 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 09:48:30,010 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 09:48:30,011 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 09:48:30,011 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 09:48:30,011 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 09:48:30,011 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 09:48:30,012 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 09:48:30,012 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 09:48:30,013 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 09:48:30,021 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 09:48:30,021 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 09:48:30,022 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 09:48:30,022 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 09:48:30,022 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 09:48:30,022 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 09:48:30,022 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 09:48:30,022 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 09:48:30,022 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 09:48:30,023 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 09:48:30,023 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 09:48:30,023 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 09:48:30,023 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 09:48:30,023 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 09:48:30,023 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 09:48:30,023 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 09:48:30,023 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 09:48:30,023 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 09:48:30,023 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 09:48:30,024 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 09:48:30,024 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 09:48:30,024 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 09:48:30,024 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 09:48:30,024 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 09:48:30,024 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 09:48:30,024 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 09:48:30,048 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 09:48:30,062 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 09:48:30,064 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 09:48:30,065 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 09:48:30,066 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 09:48:30,066 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-self.bpl
[2020-11-25 09:48:30,067 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-self.bpl'
[2020-11-25 09:48:30,126 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 09:48:30,127 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 09:48:30,127 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 09:48:30,128 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 09:48:30,128 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 09:48:30,144 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:48:30" (1/1) ...
[2020-11-25 09:48:30,145 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:48:30" (1/1) ...
[2020-11-25 09:48:30,169 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:48:30" (1/1) ...
[2020-11-25 09:48:30,170 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:48:30" (1/1) ...
[2020-11-25 09:48:30,186 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:48:30" (1/1) ...
[2020-11-25 09:48:30,194 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:48:30" (1/1) ...
[2020-11-25 09:48:30,198 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:48:30" (1/1) ...
[2020-11-25 09:48:30,207 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 09:48:30,207 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 09:48:30,207 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 09:48:30,210 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 09:48:30,214 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:48:30" (1/1) ...
[2020-11-25 09:48:30,227 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(YSM.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= holders_YSM[this][from] && value <= approach_YSM[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_YSM[this][to] >= 0 && holders_YSM[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_YSM[this][from] >= 0 &&  holders_YSM[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && approach_YSM[this][from][msg.sender] >= 0 && approach_YSM[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(YSM.transferFrom(from, to, value), return == true && approach_YSM[this][from][msg.sender] == old(approach_YSM[this][from][msg.sender]) - value && totalSupply_YSM[this] == old(totalSupply_YSM[this]) && holders_YSM[this] == old(holders_YSM[this]) && approach_YSM[this][p1][p2] == old(approach_YSM[this][p1][p2]) && decimals_YSM[this] == old(decimals_YSM[this]) && symbol_YSM[this] == old(symbol_YSM[this]) && name_YSM[this] == old(name_YSM[this]))))
[2020-11-25 09:48:30,233 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(YSM.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= holders_YSM[this][from] && value <= approach_YSM[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_YSM[this][to] >= 0 && holders_YSM[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_YSM[this][from] >= 0 &&  holders_YSM[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && approach_YSM[this][from][msg.sender] >= 0 && approach_YSM[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(YSM.transferFrom(from, to, value), return == true && approach_YSM[this][from][msg.sender] == old(approach_YSM[this][from][msg.sender]) - value && totalSupply_YSM[this] == old(totalSupply_YSM[this]) && holders_YSM[this] == old(holders_YSM[this]) && approach_YSM[this][p1][p2] == old(approach_YSM[this][p1][p2]) && decimals_YSM[this] == old(decimals_YSM[this]) && symbol_YSM[this] == old(symbol_YSM[this]) && name_YSM[this] == old(name_YSM[this]))))
[2020-11-25 09:48:30,241 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(YSM.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= holders_YSM[this][from] && value <= approach_YSM[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_YSM[this][to] >= 0 && holders_YSM[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_YSM[this][from] >= 0 &&  holders_YSM[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && approach_YSM[this][from][msg.sender] >= 0 && approach_YSM[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(YSM.transferFrom(from, to, value), return == true && approach_YSM[this][from][msg.sender] == old(approach_YSM[this][from][msg.sender]) - value && totalSupply_YSM[this] == old(totalSupply_YSM[this]) && holders_YSM[this] == old(holders_YSM[this]) && approach_YSM[this][p1][p2] == old(approach_YSM[this][p1][p2]) && decimals_YSM[this] == old(decimals_YSM[this]) && symbol_YSM[this] == old(symbol_YSM[this]) && name_YSM[this] == old(name_YSM[this]))))
[2020-11-25 09:48:30,248 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( p1!=_from_s315 || p2!=msg.sender ) && _from_s315==_to_s315 ) && _val_s315<=holders_YSM[this][_from_s315] ) && _val_s315<=approach_YSM[this][_from_s315][msg.sender] ) && _val_s315>=0 ) && _val_s315<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && holders_YSM[this][_to_s315]>=0 ) && holders_YSM[this][_to_s315]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && holders_YSM[this][_from_s315]>=0 ) && holders_YSM[this][_from_s315]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && approach_YSM[this][_from_s315][msg.sender]>=0 ) && approach_YSM[this][_from_s315][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],BinaryExpression[COMPEQ,IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>],IdentifierExpression[_to_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],BinaryExpression[COMPLEQ,IdentifierExpression[_val_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[_val_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[approach_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_val_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_val_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[_to_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[_to_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[approach_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[approach_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 09:48:30,251 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( __ret_0_==true && approach_YSM[this][_from_s315][msg.sender]==( ( old(approach_YSM[this][_from_s315][msg.sender]) ) - _val_s315 ) ) && totalSupply_YSM[this]==( old(totalSupply_YSM[this]) ) ) && holders_YSM[this]==( old(holders_YSM[this]) ) ) && approach_YSM[this][p1][p2]==( old(approach_YSM[this][p1][p2]) ) ) && decimals_YSM[this]==( old(decimals_YSM[this]) ) ) && symbol_YSM[this]==( old(symbol_YSM[this]) ) ) && name_YSM[this]==( old(name_YSM[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_YSM>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[approach_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[approach_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]]],IdentifierExpression[_val_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[holders_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[holders_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[approach_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[approach_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]]]]]
[2020-11-25 09:48:30,255 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(YSM.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= holders_YSM[this][from] && value <= approach_YSM[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_YSM[this][to] >= 0 && holders_YSM[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_YSM[this][from] >= 0 &&  holders_YSM[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && approach_YSM[this][from][msg.sender] >= 0 && approach_YSM[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(YSM.transferFrom(from, to, value), return == true && approach_YSM[this][from][msg.sender] == old(approach_YSM[this][from][msg.sender]) - value && totalSupply_YSM[this] == old(totalSupply_YSM[this]) && holders_YSM[this] == old(holders_YSM[this]) && approach_YSM[this][p1][p2] == old(approach_YSM[this][p1][p2]) && decimals_YSM[this] == old(decimals_YSM[this]) && symbol_YSM[this] == old(symbol_YSM[this]) && name_YSM[this] == old(name_YSM[this]))))
[2020-11-25 09:48:30,255 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_YSM0) ==> ( <>AP(success_transferFrom_YSM0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 09:48:30,260 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:48:30 PropertyContainer
[2020-11-25 09:48:30,260 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 09:48:30,261 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 09:48:30,261 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 09:48:30,261 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 09:48:30,262 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:48:30" (1/2) ...
[2020-11-25 09:48:30,262 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 09:48:30,262 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 09:48:30,270 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:48:30" (2/2) ...
[2020-11-25 09:48:30,270 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 09:48:30,271 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 09:48:30,271 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 09:48:30,271 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 09:48:30,271 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:48:30" (1/2) ...
[2020-11-25 09:48:30,325 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 09:48:30,326 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 09:48:30,326 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 09:48:30,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 09:48:30,326 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 09:48:30,326 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 09:48:30,326 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 09:48:30,326 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 09:48:30,326 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 09:48:30,326 INFO  L130     BoogieDeclarations]: Found specification of procedure YSM_YSM_NoBaseCtor__success
[2020-11-25 09:48:30,326 INFO  L130     BoogieDeclarations]: Found specification of procedure YSM_YSM
[2020-11-25 09:48:30,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure YSM_YSM
[2020-11-25 09:48:30,327 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_YSM__success
[2020-11-25 09:48:30,327 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_YSM
[2020-11-25 09:48:30,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_YSM
[2020-11-25 09:48:30,327 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_YSM
[2020-11-25 09:48:30,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_YSM
[2020-11-25 09:48:30,328 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_YSM
[2020-11-25 09:48:30,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_YSM
[2020-11-25 09:48:30,328 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_YSM
[2020-11-25 09:48:30,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_YSM
[2020-11-25 09:48:30,328 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_YSM
[2020-11-25 09:48:30,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_YSM
[2020-11-25 09:48:30,329 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_YSM
[2020-11-25 09:48:30,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_YSM
[2020-11-25 09:48:30,329 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_YSM
[2020-11-25 09:48:30,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_YSM
[2020-11-25 09:48:30,329 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_YSM
[2020-11-25 09:48:30,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_YSM
[2020-11-25 09:48:30,329 INFO  L130     BoogieDeclarations]: Found specification of procedure name_YSM
[2020-11-25 09:48:30,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_YSM
[2020-11-25 09:48:30,329 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 09:48:30,329 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 09:48:30,329 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 09:48:30,329 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 09:48:30,330 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 09:48:30,330 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_YSM
[2020-11-25 09:48:30,330 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 09:48:30,330 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 09:48:30,330 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 09:48:30,330 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 09:48:30,330 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 09:48:30,330 INFO  L130     BoogieDeclarations]: Found specification of procedure YSM_YSM_NoBaseCtor__fail
[2020-11-25 09:48:30,330 INFO  L130     BoogieDeclarations]: Found specification of procedure YSM_YSM__success
[2020-11-25 09:48:30,330 INFO  L130     BoogieDeclarations]: Found specification of procedure YSM_YSM__fail
[2020-11-25 09:48:30,330 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_YSM__fail
[2020-11-25 09:48:30,330 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_YSM__success
[2020-11-25 09:48:30,330 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_YSM__fail
[2020-11-25 09:48:30,331 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_YSM__success
[2020-11-25 09:48:30,331 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_YSM__fail
[2020-11-25 09:48:30,331 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_YSM__success
[2020-11-25 09:48:30,331 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_YSM__fail
[2020-11-25 09:48:30,331 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_YSM__success
[2020-11-25 09:48:30,331 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_YSM__fail
[2020-11-25 09:48:30,331 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_YSM__success
[2020-11-25 09:48:30,331 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_YSM__fail
[2020-11-25 09:48:30,331 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_YSM__success
[2020-11-25 09:48:30,331 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_YSM__fail
[2020-11-25 09:48:30,331 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_YSM__success
[2020-11-25 09:48:30,331 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_YSM__fail
[2020-11-25 09:48:30,331 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_YSM__success
[2020-11-25 09:48:30,332 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_YSM__fail
[2020-11-25 09:48:30,332 INFO  L130     BoogieDeclarations]: Found specification of procedure name_YSM__success
[2020-11-25 09:48:30,332 INFO  L130     BoogieDeclarations]: Found specification of procedure name_YSM__fail
[2020-11-25 09:48:30,332 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 09:48:30,332 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 09:48:30,332 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 09:48:30,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 09:48:30,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 09:48:30,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 09:48:30,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 09:48:30,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 09:48:30,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 09:48:30,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure YSM_YSM_NoBaseCtor__fail
[2020-11-25 09:48:30,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure YSM_YSM_NoBaseCtor__success
[2020-11-25 09:48:30,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure YSM_YSM__fail
[2020-11-25 09:48:30,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure YSM_YSM__success
[2020-11-25 09:48:30,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_YSM__fail
[2020-11-25 09:48:30,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_YSM__success
[2020-11-25 09:48:30,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_YSM__fail
[2020-11-25 09:48:30,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_YSM__success
[2020-11-25 09:48:30,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_YSM__fail
[2020-11-25 09:48:30,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_YSM__success
[2020-11-25 09:48:30,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_YSM__fail
[2020-11-25 09:48:30,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_YSM__success
[2020-11-25 09:48:30,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_YSM__fail
[2020-11-25 09:48:30,333 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_YSM__success
[2020-11-25 09:48:30,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_YSM__fail
[2020-11-25 09:48:30,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_YSM__success
[2020-11-25 09:48:30,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_YSM__fail
[2020-11-25 09:48:30,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_YSM__success
[2020-11-25 09:48:30,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_YSM__fail
[2020-11-25 09:48:30,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_YSM__success
[2020-11-25 09:48:30,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_YSM__fail
[2020-11-25 09:48:30,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_YSM__success
[2020-11-25 09:48:30,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_YSM__fail
[2020-11-25 09:48:30,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_YSM__success
[2020-11-25 09:48:30,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 09:48:30,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 09:48:30,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 09:48:30,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 09:48:30,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 09:48:30,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 09:48:30,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 09:48:30,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 09:48:30,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_YSM
[2020-11-25 09:48:30,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 09:48:30,335 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 09:48:30,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 09:48:30,497 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:48:30,741 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:48:30,742 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:48:30,743 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:48:30,831 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 09:48:30,831 INFO  L286             CfgBuilder]: Removed 2 assue(true) statements.
[2020-11-25 09:48:30,834 INFO  L202        PluginConnector]: Adding new model YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:48:30 BoogieIcfgContainer
[2020-11-25 09:48:30,834 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:48:30" (2/2) ...
[2020-11-25 09:48:30,834 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 09:48:30,835 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@4920e17e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:48:30, skipping insertion in model container
[2020-11-25 09:48:30,835 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 09:48:30,836 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 09:48:30,836 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 09:48:30,839 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 09:48:30,839 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:48:30" (1/3) ...
[2020-11-25 09:48:30,840 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@60153a9a and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:48:30, skipping insertion in model container
[2020-11-25 09:48:30,840 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:48:30" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 09:48:30,877 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:48:30 NWAContainer
[2020-11-25 09:48:30,877 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 09:48:30,877 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 09:48:30,878 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 09:48:30,878 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 09:48:30,879 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:48:30" (3/4) ...
[2020-11-25 09:48:30,880 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@5ec1b46c and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:48:30, skipping insertion in model container
[2020-11-25 09:48:30,880 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:48:30" (4/4) ...
[2020-11-25 09:48:30,883 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 09:48:30,885 INFO  L110   BuchiProductObserver]: Initial RCFG 659 locations, 787 edges
[2020-11-25 09:48:30,886 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 09:48:30,897 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 09:48:31,719 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 09:48:31,721 INFO  L110   BuchiProductObserver]: BuchiProgram size 1526 locations, 2546 edges
[2020-11-25 09:48:31,722 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:48:31 BoogieIcfgContainer
[2020-11-25 09:48:31,722 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 09:48:31,722 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 09:48:31,722 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 09:48:31,724 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 09:48:31,724 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:48:31" (1/1) ...
[2020-11-25 09:48:31,764 INFO  L313           BlockEncoder]: Initial Icfg 1526 locations, 2546 edges
[2020-11-25 09:48:31,764 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 09:48:31,765 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 09:48:31,765 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 09:48:31,765 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 09:48:31,771 INFO  L70    emoveInfeasibleEdges]: Removed 27 edges and 7 locations because of local infeasibility
[2020-11-25 09:48:31,775 INFO  L70        RemoveSinkStates]: Removed 2 edges and 1 locations by removing sink states
[2020-11-25 09:48:31,779 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 09:48:31,782 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 09:48:31,783 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 09:48:31,784 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 09:48:31,787 INFO  L313           BlockEncoder]: Encoded RCFG 1508 locations, 2503 edges
[2020-11-25 09:48:31,787 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:48:31 BasicIcfg
[2020-11-25 09:48:31,787 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 09:48:31,788 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 09:48:31,788 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 09:48:31,790 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 09:48:31,791 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:48:31,791 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:48:30" (1/6) ...
[2020-11-25 09:48:31,793 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@39db2b5c and model type YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:48:31, skipping insertion in model container
[2020-11-25 09:48:31,794 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:48:31,794 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:48:30" (2/6) ...
[2020-11-25 09:48:31,794 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@39db2b5c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:48:31, skipping insertion in model container
[2020-11-25 09:48:31,794 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:48:31,795 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:48:30" (3/6) ...
[2020-11-25 09:48:31,795 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@39db2b5c and model type YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:48:31, skipping insertion in model container
[2020-11-25 09:48:31,795 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:48:31,795 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:48:30" (4/6) ...
[2020-11-25 09:48:31,796 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@39db2b5c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:48:31, skipping insertion in model container
[2020-11-25 09:48:31,796 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:48:31,796 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:48:31" (5/6) ...
[2020-11-25 09:48:31,797 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@39db2b5c and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 09:48:31, skipping insertion in model container
[2020-11-25 09:48:31,797 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:48:31,797 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:48:31" (6/6) ...
[2020-11-25 09:48:31,800 INFO  L404   chiAutomizerObserver]: Analyzing ICFG YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-self.bpl_BEv2
[2020-11-25 09:48:31,843 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 09:48:31,843 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 09:48:31,843 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 09:48:31,843 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 09:48:31,843 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 09:48:31,843 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 09:48:31,843 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 09:48:31,844 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 09:48:31,844 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 09:48:31,864 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1508 states.
[2020-11-25 09:48:31,914 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:48:31,914 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:48:31,914 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:48:31,923 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:48:31,924 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:48:31,924 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 09:48:31,924 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1508 states.
[2020-11-25 09:48:31,935 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:48:31,935 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:48:31,935 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:48:31,937 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:48:31,937 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YSM0 := false;
[L3]                 call_transferFrom_YSM0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == YSM;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND TRUE   revert
[L167]   RET         call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;

Loop:
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND FALSE  !(gas >= 0)
[L1770]  RET         call CorralChoice_YSM(this);

[2020-11-25 09:48:31,954 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:48:31,954 INFO  L82        PathProgramCache]: Analyzing trace with hash -1906113810, now seen corresponding path program 1 times
[2020-11-25 09:48:31,959 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:48:31,982 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:48:32,030 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:48:32,032 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:48:32,032 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 09:48:32,036 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:48:32,132 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 09:48:32,133 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 09:48:32,134 INFO  L87              Difference]: Start difference. First operand 1508 states. Second operand 4 states.
[2020-11-25 09:48:32,305 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:48:32,306 INFO  L93              Difference]: Finished difference Result 1147 states and 1244 transitions.
[2020-11-25 09:48:32,306 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 09:48:32,307 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1147 states and 1244 transitions.
[2020-11-25 09:48:32,313 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:48:32,322 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1147 states to 1137 states and 1224 transitions.
[2020-11-25 09:48:32,323 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 09:48:32,324 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 501
[2020-11-25 09:48:32,325 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1137 states and 1224 transitions.
[2020-11-25 09:48:32,329 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:48:32,329 INFO  L728         BuchiCegarLoop]: Abstraction has 1137 states and 1224 transitions.
[2020-11-25 09:48:32,341 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1137 states and 1224 transitions.
[2020-11-25 09:48:32,366 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1137 to 1137.
[2020-11-25 09:48:32,367 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1137 states.
[2020-11-25 09:48:32,369 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1137 states to 1137 states and 1224 transitions.
[2020-11-25 09:48:32,370 INFO  L751         BuchiCegarLoop]: Abstraction has 1137 states and 1224 transitions.
[2020-11-25 09:48:32,370 INFO  L631         BuchiCegarLoop]: Abstraction has 1137 states and 1224 transitions.
[2020-11-25 09:48:32,370 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 09:48:32,370 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1137 states and 1224 transitions.
[2020-11-25 09:48:32,374 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:48:32,374 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:48:32,374 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:48:32,376 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:48:32,376 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YSM0 := false;
[L3]                 call_transferFrom_YSM0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == YSM;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND TRUE   revert
[L167]   RET         call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND TRUE   !(holders_YSM[this][_from_s315] >= _val_s315)
[L1089]              revert := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this] == old(holders_YSM[this])) && approach_YSM[this][p1][p2] == old(approach_YSM[this][p1][p2])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

Loop:
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND TRUE   !(holders_YSM[this][_from_s315] >= _val_s315)
[L1089]              revert := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this] == old(holders_YSM[this])) && approach_YSM[this][p1][p2] == old(approach_YSM[this][p1][p2])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

[2020-11-25 09:48:32,379 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:48:32,379 INFO  L82        PathProgramCache]: Analyzing trace with hash 697498403, now seen corresponding path program 1 times
[2020-11-25 09:48:32,380 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:48:32,388 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:48:32,404 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:48:32,405 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:48:32,405 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 09:48:32,406 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:48:32,406 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 09:48:32,406 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 09:48:32,406 INFO  L87              Difference]: Start difference. First operand 1137 states and 1224 transitions. cyclomatic complexity: 89 Second operand 4 states.
[2020-11-25 09:48:32,558 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:48:32,558 INFO  L93              Difference]: Finished difference Result 1657 states and 1884 transitions.
[2020-11-25 09:48:32,559 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 09:48:32,560 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1657 states and 1884 transitions.
[2020-11-25 09:48:32,577 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 09:48:32,588 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1657 states to 1623 states and 1846 transitions.
[2020-11-25 09:48:32,588 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 744
[2020-11-25 09:48:32,589 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 744
[2020-11-25 09:48:32,589 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1623 states and 1846 transitions.
[2020-11-25 09:48:32,593 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:48:32,593 INFO  L728         BuchiCegarLoop]: Abstraction has 1623 states and 1846 transitions.
[2020-11-25 09:48:32,594 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1623 states and 1846 transitions.
[2020-11-25 09:48:32,612 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1623 to 1127.
[2020-11-25 09:48:32,612 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1127 states.
[2020-11-25 09:48:32,615 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1127 states to 1127 states and 1198 transitions.
[2020-11-25 09:48:32,615 INFO  L751         BuchiCegarLoop]: Abstraction has 1127 states and 1198 transitions.
[2020-11-25 09:48:32,615 INFO  L631         BuchiCegarLoop]: Abstraction has 1127 states and 1198 transitions.
[2020-11-25 09:48:32,615 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 09:48:32,615 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1127 states and 1198 transitions.
[2020-11-25 09:48:32,620 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:48:32,620 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:48:32,620 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:48:32,622 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:48:32,622 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YSM0 := false;
[L3]                 call_transferFrom_YSM0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == YSM;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_YSM[this] := 0;
[L952]               decimals_YSM[this] := 0;
[L953]               symbol_YSM[this] := -339949848;
[L954]               name_YSM[this] := -339949848;
[L955]               approach_YSM[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_YSM[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_YSM[this] := 488267391;
[L961]               symbol_YSM[this] := 774884429;
[L962]               decimals_YSM[this] := 18;
[L963]               __var_1 := decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_YSM[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_YSM[this][msgsender_MSG];
[L966]               holders_YSM[this][msgsender_MSG] := totalSupply_YSM[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_YSM[this][msgsender_MSG];
[L990]   RET         call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND TRUE   __exception
[L305]               __tmp__Balance := Balance;
[L306]               __tmp__DType := DType;
[L307]               __tmp__Alloc := Alloc;
[L308]               __tmp__balance_ADDR := balance_ADDR;
[L309]               __tmp__M_Ref_int := M_Ref_int;
[L310]               __tmp__alloc_approach_YSM_lvl0 := alloc_approach_YSM_lvl0;
[L311]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L312]               __tmp__sum_approach0 := sum_approach0;
[L313]               __tmp__sum_holders1 := sum_holders1;
[L314]               __tmp__Length := Length;
[L315]               __tmp__now := now;
[L316]               __tmp__totalSupply_YSM := totalSupply_YSM;
[L317]               __tmp__decimals_YSM := decimals_YSM;
[L318]               __tmp__symbol_YSM := symbol_YSM;
[L319]               __tmp__name_YSM := name_YSM;
[L320]               __tmp__approach_YSM := approach_YSM;
[L321]               __tmp__holders_YSM := holders_YSM;
[L322]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1065]  COND TRUE   !(__tmp__holders_YSM[this][_from_s315] >= _val_s315)
[L1066]              revert := true;
[L322]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L323]               assume revert || gas < 0;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

Loop:
[L1770]  CALL       call CorralChoice_YSM(this);
[L1663]             havoc msgsender_MSG;
[L1664]             havoc msgvalue_MSG;
[L1665]             havoc choice;
[L1666]             havoc _from_s315;
[L1667]             havoc _to_s315;
[L1668]             havoc _val_s315;
[L1669]             havoc __ret_0_transferFrom;
[L1670]             havoc _to_s213;
[L1671]             havoc _val_s213;
[L1672]             havoc __ret_0_transfer;
[L1673]             havoc _own_s139;
[L1674]             havoc __ret_0_balanceOf;
[L1675]             havoc _owner_s368;
[L1676]             havoc _spender_s368;
[L1677]             havoc __ret_0_allowance;
[L1678]             havoc _spender_s352;
[L1679]             havoc _val_s352;
[L1680]             havoc __ret_0_approve;
[L1681]             havoc __ret_0_totalSupply;
[L1682]             havoc __ret_0_decimals;
[L1683]             havoc __ret_0_symbol;
[L1684]             havoc __ret_0_name;
[L1685]             havoc tmpNow;
[L1686]             havoc gas;
[L1687]             assume gas > 4000000 && gas <= 8000000;
[L1688]             tmpNow := now;
[L1689]             havoc now;
[L1690]             assume now > tmpNow;
[L1691]             assume msgsender_MSG != null;
[L1692]             assume DType[msgsender_MSG] != ERC20;
[L1693]             assume DType[msgsender_MSG] != YSM;
[L1694]             Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE  choice == 9
[L1696]             gas := gas - 21000;
[L1697]  COND TRUE  gas >= 0
[L1698]             assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]             assume msgvalue_MSG == 0;
[L1700]  CALL       call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                call_transferFrom_YSM0 := true;
[L3]                call_transferFrom_YSM0 := false;
[L3]                revert := revert_hold;
[L302]              havoc __exception;
[L303]              revert := false;
[L304]   COND TRUE  __exception
[L305]              __tmp__Balance := Balance;
[L306]              __tmp__DType := DType;
[L307]              __tmp__Alloc := Alloc;
[L308]              __tmp__balance_ADDR := balance_ADDR;
[L309]              __tmp__M_Ref_int := M_Ref_int;
[L310]              __tmp__alloc_approach_YSM_lvl0 := alloc_approach_YSM_lvl0;
[L311]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L312]              __tmp__sum_approach0 := sum_approach0;
[L313]              __tmp__sum_holders1 := sum_holders1;
[L314]              __tmp__Length := Length;
[L315]              __tmp__now := now;
[L316]              __tmp__totalSupply_YSM := totalSupply_YSM;
[L317]              __tmp__decimals_YSM := decimals_YSM;
[L318]              __tmp__symbol_YSM := symbol_YSM;
[L319]              __tmp__name_YSM := name_YSM;
[L320]              __tmp__approach_YSM := approach_YSM;
[L321]              __tmp__holders_YSM := holders_YSM;
[L322]   CALL       call __ret_0_ := transferFrom~address~address~uint256_YSM__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1065]  COND TRUE  !(__tmp__holders_YSM[this][_from_s315] >= _val_s315)
[L1066]             revert := true;
[L322]   RET        call __ret_0_ := transferFrom~address~address~uint256_YSM__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L323]              assume revert || gas < 0;
[L1700]  RET        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET        call CorralChoice_YSM(this);

[2020-11-25 09:48:32,625 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:48:32,626 INFO  L82        PathProgramCache]: Analyzing trace with hash 1504672283, now seen corresponding path program 1 times
[2020-11-25 09:48:32,627 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:48:32,645 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:48:32,716 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:48:32,716 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:48:32,717 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 09:48:32,717 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:48:32,717 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 09:48:32,717 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 09:48:32,717 INFO  L87              Difference]: Start difference. First operand 1127 states and 1198 transitions. cyclomatic complexity: 73 Second operand 6 states.
[2020-11-25 09:48:33,218 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:48:33,218 INFO  L93              Difference]: Finished difference Result 1267 states and 1355 transitions.
[2020-11-25 09:48:33,219 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 09:48:33,219 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1267 states and 1355 transitions.
[2020-11-25 09:48:33,227 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:48:33,233 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1267 states to 1267 states and 1355 transitions.
[2020-11-25 09:48:33,233 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 564
[2020-11-25 09:48:33,235 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 564
[2020-11-25 09:48:33,235 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1267 states and 1355 transitions.
[2020-11-25 09:48:33,237 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:48:33,237 INFO  L728         BuchiCegarLoop]: Abstraction has 1267 states and 1355 transitions.
[2020-11-25 09:48:33,238 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1267 states and 1355 transitions.
[2020-11-25 09:48:33,254 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1267 to 1179.
[2020-11-25 09:48:33,254 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1179 states.
[2020-11-25 09:48:33,257 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1179 states to 1179 states and 1254 transitions.
[2020-11-25 09:48:33,258 INFO  L751         BuchiCegarLoop]: Abstraction has 1179 states and 1254 transitions.
[2020-11-25 09:48:33,258 INFO  L631         BuchiCegarLoop]: Abstraction has 1179 states and 1254 transitions.
[2020-11-25 09:48:33,258 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 09:48:33,258 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1179 states and 1254 transitions.
[2020-11-25 09:48:33,262 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:48:33,263 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:48:33,263 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:48:33,265 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:48:33,265 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YSM0 := false;
[L3]                 call_transferFrom_YSM0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == YSM;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_YSM[this] := 0;
[L952]               decimals_YSM[this] := 0;
[L953]               symbol_YSM[this] := -339949848;
[L954]               name_YSM[this] := -339949848;
[L955]               approach_YSM[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_YSM[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_YSM[this] := 488267391;
[L961]               symbol_YSM[this] := 774884429;
[L962]               decimals_YSM[this] := 18;
[L963]               __var_1 := decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_YSM[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_YSM[this][msgsender_MSG];
[L966]               holders_YSM[this][msgsender_MSG] := totalSupply_YSM[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_YSM[this][msgsender_MSG];
[L990]   RET         call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND TRUE   __exception
[L305]               __tmp__Balance := Balance;
[L306]               __tmp__DType := DType;
[L307]               __tmp__Alloc := Alloc;
[L308]               __tmp__balance_ADDR := balance_ADDR;
[L309]               __tmp__M_Ref_int := M_Ref_int;
[L310]               __tmp__alloc_approach_YSM_lvl0 := alloc_approach_YSM_lvl0;
[L311]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L312]               __tmp__sum_approach0 := sum_approach0;
[L313]               __tmp__sum_holders1 := sum_holders1;
[L314]               __tmp__Length := Length;
[L315]               __tmp__now := now;
[L316]               __tmp__totalSupply_YSM := totalSupply_YSM;
[L317]               __tmp__decimals_YSM := decimals_YSM;
[L318]               __tmp__symbol_YSM := symbol_YSM;
[L319]               __tmp__name_YSM := name_YSM;
[L320]               __tmp__approach_YSM := approach_YSM;
[L321]               __tmp__holders_YSM := holders_YSM;
[L322]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1065]  COND FALSE  !(!(__tmp__holders_YSM[this][_from_s315] >= _val_s315))
[L1069]  COND TRUE   !(__tmp__approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315)
[L1070]              revert := true;
[L322]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L323]               assume revert || gas < 0;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

Loop:
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND TRUE   __exception
[L305]               __tmp__Balance := Balance;
[L306]               __tmp__DType := DType;
[L307]               __tmp__Alloc := Alloc;
[L308]               __tmp__balance_ADDR := balance_ADDR;
[L309]               __tmp__M_Ref_int := M_Ref_int;
[L310]               __tmp__alloc_approach_YSM_lvl0 := alloc_approach_YSM_lvl0;
[L311]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L312]               __tmp__sum_approach0 := sum_approach0;
[L313]               __tmp__sum_holders1 := sum_holders1;
[L314]               __tmp__Length := Length;
[L315]               __tmp__now := now;
[L316]               __tmp__totalSupply_YSM := totalSupply_YSM;
[L317]               __tmp__decimals_YSM := decimals_YSM;
[L318]               __tmp__symbol_YSM := symbol_YSM;
[L319]               __tmp__name_YSM := name_YSM;
[L320]               __tmp__approach_YSM := approach_YSM;
[L321]               __tmp__holders_YSM := holders_YSM;
[L322]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1065]  COND FALSE  !(!(__tmp__holders_YSM[this][_from_s315] >= _val_s315))
[L1069]  COND TRUE   !(__tmp__approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315)
[L1070]              revert := true;
[L322]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L323]               assume revert || gas < 0;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

[2020-11-25 09:48:33,268 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:48:33,268 INFO  L82        PathProgramCache]: Analyzing trace with hash -71516276, now seen corresponding path program 1 times
[2020-11-25 09:48:33,269 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:48:33,282 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:48:33,331 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:48:33,331 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:48:33,331 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 09:48:33,332 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:48:33,332 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 09:48:33,332 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 09:48:33,332 INFO  L87              Difference]: Start difference. First operand 1179 states and 1254 transitions. cyclomatic complexity: 77 Second operand 6 states.
[2020-11-25 09:48:33,715 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:48:33,715 INFO  L93              Difference]: Finished difference Result 1259 states and 1344 transitions.
[2020-11-25 09:48:33,715 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 09:48:33,715 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1259 states and 1344 transitions.
[2020-11-25 09:48:33,719 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:48:33,723 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1259 states to 1259 states and 1344 transitions.
[2020-11-25 09:48:33,723 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 560
[2020-11-25 09:48:33,724 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 560
[2020-11-25 09:48:33,724 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1259 states and 1344 transitions.
[2020-11-25 09:48:33,725 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:48:33,725 INFO  L728         BuchiCegarLoop]: Abstraction has 1259 states and 1344 transitions.
[2020-11-25 09:48:33,726 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1259 states and 1344 transitions.
[2020-11-25 09:48:33,734 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1259 to 1179.
[2020-11-25 09:48:33,734 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1179 states.
[2020-11-25 09:48:33,736 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1179 states to 1179 states and 1254 transitions.
[2020-11-25 09:48:33,736 INFO  L751         BuchiCegarLoop]: Abstraction has 1179 states and 1254 transitions.
[2020-11-25 09:48:33,736 INFO  L631         BuchiCegarLoop]: Abstraction has 1179 states and 1254 transitions.
[2020-11-25 09:48:33,736 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 09:48:33,736 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1179 states and 1254 transitions.
[2020-11-25 09:48:33,739 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:48:33,739 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:48:33,739 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:48:33,740 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:48:33,740 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YSM0 := false;
[L3]                 call_transferFrom_YSM0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == YSM;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_YSM[this] := 0;
[L952]               decimals_YSM[this] := 0;
[L953]               symbol_YSM[this] := -339949848;
[L954]               name_YSM[this] := -339949848;
[L955]               approach_YSM[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_YSM[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_YSM[this] := 488267391;
[L961]               symbol_YSM[this] := 774884429;
[L962]               decimals_YSM[this] := 18;
[L963]               __var_1 := decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_YSM[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_YSM[this][msgsender_MSG];
[L966]               holders_YSM[this][msgsender_MSG] := totalSupply_YSM[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_YSM[this][msgsender_MSG];
[L990]   RET         call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_YSM[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_YSM[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_from_s315];
[L1098]              holders_YSM[this][_from_s315] := (holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_from_s315];
[L1100]              assert _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_YSM[this][_from_s315][msgsender_MSG];
[L1102]              approach_YSM[this][_from_s315][msgsender_MSG] := (approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_YSM[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_to_s315];
[L1105]              holders_YSM[this][_to_s315] := (holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_to_s315];
[L1107]              assert holders_YSM[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_YSM" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this] == old(holders_YSM[this])) && approach_YSM[this][p1][p2] == old(approach_YSM[this][p1][p2])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

Loop:
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_YSM[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_YSM[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_from_s315];
[L1098]              holders_YSM[this][_from_s315] := (holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_from_s315];
[L1100]              assert _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_YSM[this][_from_s315][msgsender_MSG];
[L1102]              approach_YSM[this][_from_s315][msgsender_MSG] := (approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_YSM[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_to_s315];
[L1105]              holders_YSM[this][_to_s315] := (holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_to_s315];
[L1107]              assert holders_YSM[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_YSM" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this] == old(holders_YSM[this])) && approach_YSM[this][p1][p2] == old(approach_YSM[this][p1][p2])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

[2020-11-25 09:48:33,742 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:48:33,742 INFO  L82        PathProgramCache]: Analyzing trace with hash -1178576176, now seen corresponding path program 1 times
[2020-11-25 09:48:33,742 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:48:33,790 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:48:34,627 WARN  L188               SmtUtils]: Spent 251.00 ms on a formula simplification. DAG size of input: 124 DAG size of output: 66
[2020-11-25 09:48:34,891 WARN  L188               SmtUtils]: Spent 173.00 ms on a formula simplification. DAG size of input: 118 DAG size of output: 62
[2020-11-25 09:48:35,063 WARN  L188               SmtUtils]: Spent 124.00 ms on a formula simplification. DAG size of input: 144 DAG size of output: 81
[2020-11-25 09:48:35,265 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:48:35,266 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:48:35,266 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [23] imperfect sequences [] total 23
[2020-11-25 09:48:35,266 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:48:35,266 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-11-25 09:48:35,266 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=63, Invalid=489, Unknown=0, NotChecked=0, Total=552
[2020-11-25 09:48:35,266 INFO  L87              Difference]: Start difference. First operand 1179 states and 1254 transitions. cyclomatic complexity: 77 Second operand 24 states.
[2020-11-25 09:48:38,922 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:48:38,922 INFO  L93              Difference]: Finished difference Result 1254 states and 1361 transitions.
[2020-11-25 09:48:38,922 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 22 states. 
[2020-11-25 09:48:38,922 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1254 states and 1361 transitions.
[2020-11-25 09:48:38,926 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:48:38,931 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1254 states to 1254 states and 1361 transitions.
[2020-11-25 09:48:38,931 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 555
[2020-11-25 09:48:38,931 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 555
[2020-11-25 09:48:38,931 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1254 states and 1361 transitions.
[2020-11-25 09:48:38,932 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:48:38,933 INFO  L728         BuchiCegarLoop]: Abstraction has 1254 states and 1361 transitions.
[2020-11-25 09:48:38,933 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1254 states and 1361 transitions.
[2020-11-25 09:48:38,943 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1254 to 1235.
[2020-11-25 09:48:38,943 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1235 states.
[2020-11-25 09:48:38,946 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1235 states to 1235 states and 1321 transitions.
[2020-11-25 09:48:38,946 INFO  L751         BuchiCegarLoop]: Abstraction has 1235 states and 1321 transitions.
[2020-11-25 09:48:38,946 INFO  L631         BuchiCegarLoop]: Abstraction has 1235 states and 1321 transitions.
[2020-11-25 09:48:38,946 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 09:48:38,946 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1235 states and 1321 transitions.
[2020-11-25 09:48:38,950 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:48:38,950 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:48:38,950 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:48:38,951 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:48:38,952 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YSM0 := false;
[L3]                 call_transferFrom_YSM0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == YSM;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_YSM[this] := 0;
[L952]               decimals_YSM[this] := 0;
[L953]               symbol_YSM[this] := -339949848;
[L954]               name_YSM[this] := -339949848;
[L955]               approach_YSM[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_YSM[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_YSM[this] := 488267391;
[L961]               symbol_YSM[this] := 774884429;
[L962]               decimals_YSM[this] := 18;
[L963]               __var_1 := decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_YSM[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_YSM[this][msgsender_MSG];
[L966]               holders_YSM[this][msgsender_MSG] := totalSupply_YSM[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_YSM[this][msgsender_MSG];
[L990]   RET         call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND TRUE   __exception
[L305]               __tmp__Balance := Balance;
[L306]               __tmp__DType := DType;
[L307]               __tmp__Alloc := Alloc;
[L308]               __tmp__balance_ADDR := balance_ADDR;
[L309]               __tmp__M_Ref_int := M_Ref_int;
[L310]               __tmp__alloc_approach_YSM_lvl0 := alloc_approach_YSM_lvl0;
[L311]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L312]               __tmp__sum_approach0 := sum_approach0;
[L313]               __tmp__sum_holders1 := sum_holders1;
[L314]               __tmp__Length := Length;
[L315]               __tmp__now := now;
[L316]               __tmp__totalSupply_YSM := totalSupply_YSM;
[L317]               __tmp__decimals_YSM := decimals_YSM;
[L318]               __tmp__symbol_YSM := symbol_YSM;
[L319]               __tmp__name_YSM := name_YSM;
[L320]               __tmp__approach_YSM := approach_YSM;
[L321]               __tmp__holders_YSM := holders_YSM;
[L322]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1065]  COND FALSE  !(!(__tmp__holders_YSM[this][_from_s315] >= _val_s315))
[L1069]  COND FALSE  !(!(__tmp__approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1073]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] - __tmp__holders_YSM[this][_from_s315];
[L1074]              __tmp__holders_YSM[this][_from_s315] := (__tmp__holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1075]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] + __tmp__holders_YSM[this][_from_s315];
[L1076]              __tmp__sum_approach0[_from_s315] := __tmp__sum_approach0[_from_s315] - __tmp__approach_YSM[this][_from_s315][msgsender_MSG];
[L1077]              __tmp__approach_YSM[this][_from_s315][msgsender_MSG] := (__tmp__approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1078]              __tmp__sum_approach0[_from_s315] := __tmp__sum_approach0[_from_s315] + __tmp__approach_YSM[this][_from_s315][msgsender_MSG];
[L1079]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] - __tmp__holders_YSM[this][_to_s315];
[L1080]              __tmp__holders_YSM[this][_to_s315] := (__tmp__holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1081]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] + __tmp__holders_YSM[this][_to_s315];
[L1082]              __ret_0_ := true;
[L322]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L323]               assume revert || gas < 0;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

Loop:
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND TRUE   __exception
[L305]               __tmp__Balance := Balance;
[L306]               __tmp__DType := DType;
[L307]               __tmp__Alloc := Alloc;
[L308]               __tmp__balance_ADDR := balance_ADDR;
[L309]               __tmp__M_Ref_int := M_Ref_int;
[L310]               __tmp__alloc_approach_YSM_lvl0 := alloc_approach_YSM_lvl0;
[L311]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L312]               __tmp__sum_approach0 := sum_approach0;
[L313]               __tmp__sum_holders1 := sum_holders1;
[L314]               __tmp__Length := Length;
[L315]               __tmp__now := now;
[L316]               __tmp__totalSupply_YSM := totalSupply_YSM;
[L317]               __tmp__decimals_YSM := decimals_YSM;
[L318]               __tmp__symbol_YSM := symbol_YSM;
[L319]               __tmp__name_YSM := name_YSM;
[L320]               __tmp__approach_YSM := approach_YSM;
[L321]               __tmp__holders_YSM := holders_YSM;
[L322]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1065]  COND FALSE  !(!(__tmp__holders_YSM[this][_from_s315] >= _val_s315))
[L1069]  COND FALSE  !(!(__tmp__approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1073]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] - __tmp__holders_YSM[this][_from_s315];
[L1074]              __tmp__holders_YSM[this][_from_s315] := (__tmp__holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1075]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] + __tmp__holders_YSM[this][_from_s315];
[L1076]              __tmp__sum_approach0[_from_s315] := __tmp__sum_approach0[_from_s315] - __tmp__approach_YSM[this][_from_s315][msgsender_MSG];
[L1077]              __tmp__approach_YSM[this][_from_s315][msgsender_MSG] := (__tmp__approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1078]              __tmp__sum_approach0[_from_s315] := __tmp__sum_approach0[_from_s315] + __tmp__approach_YSM[this][_from_s315][msgsender_MSG];
[L1079]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] - __tmp__holders_YSM[this][_to_s315];
[L1080]              __tmp__holders_YSM[this][_to_s315] := (__tmp__holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1081]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] + __tmp__holders_YSM[this][_to_s315];
[L1082]              __ret_0_ := true;
[L322]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L323]               assume revert || gas < 0;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

[2020-11-25 09:48:38,954 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:48:38,954 INFO  L82        PathProgramCache]: Analyzing trace with hash 1225128246, now seen corresponding path program 1 times
[2020-11-25 09:48:38,954 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:48:38,960 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:48:38,977 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:48:38,978 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:48:38,978 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 09:48:38,978 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:48:38,978 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 09:48:38,978 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-11-25 09:48:38,978 INFO  L87              Difference]: Start difference. First operand 1235 states and 1321 transitions. cyclomatic complexity: 90 Second operand 6 states.
[2020-11-25 09:48:39,101 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:48:39,101 INFO  L93              Difference]: Finished difference Result 1605 states and 1790 transitions.
[2020-11-25 09:48:39,101 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 09:48:39,101 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1605 states and 1790 transitions.
[2020-11-25 09:48:39,105 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 09:48:39,109 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1605 states to 1148 states and 1330 transitions.
[2020-11-25 09:48:39,109 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 534
[2020-11-25 09:48:39,109 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 534
[2020-11-25 09:48:39,109 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1148 states and 1330 transitions.
[2020-11-25 09:48:39,110 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:48:39,110 INFO  L728         BuchiCegarLoop]: Abstraction has 1148 states and 1330 transitions.
[2020-11-25 09:48:39,111 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1148 states and 1330 transitions.
[2020-11-25 09:48:39,118 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1148 to 781.
[2020-11-25 09:48:39,118 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 781 states.
[2020-11-25 09:48:39,119 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 781 states to 781 states and 838 transitions.
[2020-11-25 09:48:39,119 INFO  L751         BuchiCegarLoop]: Abstraction has 781 states and 838 transitions.
[2020-11-25 09:48:39,119 INFO  L631         BuchiCegarLoop]: Abstraction has 781 states and 838 transitions.
[2020-11-25 09:48:39,119 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 09:48:39,119 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 781 states and 838 transitions.
[2020-11-25 09:48:39,120 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:48:39,120 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:48:39,120 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:48:39,121 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:48:39,121 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YSM0 := false;
[L3]                 call_transferFrom_YSM0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == YSM;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_YSM[this] := 0;
[L952]               decimals_YSM[this] := 0;
[L953]               symbol_YSM[this] := -339949848;
[L954]               name_YSM[this] := -339949848;
[L955]               approach_YSM[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_YSM[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_YSM[this] := 488267391;
[L961]               symbol_YSM[this] := 774884429;
[L962]               decimals_YSM[this] := 18;
[L963]               __var_1 := decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_YSM[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_YSM[this][msgsender_MSG];
[L966]               holders_YSM[this][msgsender_MSG] := totalSupply_YSM[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_YSM[this][msgsender_MSG];
[L990]   RET         call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND FALSE  !(choice == 8)
[L1709]  COND FALSE  !(choice == 7)
[L1715]  COND FALSE  !(choice == 6)
[L1721]  COND TRUE   choice == 5
[L1722]              gas := gas - 21000;
[L1723]  COND TRUE   gas >= 0
[L1724]              assume _val_s352 >= 0 && _val_s352 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1725]              assume msgvalue_MSG == 0;
[L1726]  CALL        call __ret_0_approve := approve~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L354]               havoc __exception;
[L355]               revert := false;
[L356]   COND FALSE  !(__exception)
[L377]   CALL        call __ret_0_ := approve~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1128]  COND FALSE  !(!(holders_YSM[this][msgsender_MSG] >= _val_s352))
[L1132]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] - approach_YSM[this][msgsender_MSG][_spender_s352];
[L1133]              approach_YSM[this][msgsender_MSG][_spender_s352] := _val_s352;
[L1134]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] + approach_YSM[this][msgsender_MSG][_spender_s352];
[L1135]              assert { :EventEmitted "Approval_YSM" } true;
[L1136]              __ret_0_ := true;
[L377]   RET         call __ret_0_ := approve~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L378]               assume !revert && gas >= 0;
[L1726]  RET         call __ret_0_approve := approve~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1770]  RET         call CorralChoice_YSM(this);
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_YSM[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_YSM[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_from_s315];
[L1098]              holders_YSM[this][_from_s315] := (holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_from_s315];
[L1100]              assert _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_YSM[this][_from_s315][msgsender_MSG];
[L1102]              approach_YSM[this][_from_s315][msgsender_MSG] := (approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_YSM[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_to_s315];
[L1105]              holders_YSM[this][_to_s315] := (holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_to_s315];
[L1107]              assert holders_YSM[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_YSM" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this] == old(holders_YSM[this])) && approach_YSM[this][p1][p2] == old(approach_YSM[this][p1][p2])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

Loop:
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND FALSE  !(gas >= 0)
[L1770]  RET         call CorralChoice_YSM(this);

[2020-11-25 09:48:39,123 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:48:39,123 INFO  L82        PathProgramCache]: Analyzing trace with hash 286367050, now seen corresponding path program 1 times
[2020-11-25 09:48:39,124 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:48:39,161 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:48:39,590 INFO  L134       CoverageAnalysis]: Checked inductivity of 35 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 34 trivial. 0 not checked.
[2020-11-25 09:48:39,590 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:48:39,590 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [24] total 24
[2020-11-25 09:48:39,590 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:48:39,590 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-25 09:48:39,591 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=74, Invalid=526, Unknown=0, NotChecked=0, Total=600
[2020-11-25 09:48:39,591 INFO  L87              Difference]: Start difference. First operand 781 states and 838 transitions. cyclomatic complexity: 60 Second operand 25 states.
[2020-11-25 09:48:41,213 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:48:41,214 INFO  L93              Difference]: Finished difference Result 912 states and 1013 transitions.
[2020-11-25 09:48:41,214 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 09:48:41,214 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 912 states and 1013 transitions.
[2020-11-25 09:48:41,216 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:48:41,218 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 912 states to 912 states and 1013 transitions.
[2020-11-25 09:48:41,218 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 465
[2020-11-25 09:48:41,218 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 465
[2020-11-25 09:48:41,218 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 912 states and 1013 transitions.
[2020-11-25 09:48:41,219 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:48:41,219 INFO  L728         BuchiCegarLoop]: Abstraction has 912 states and 1013 transitions.
[2020-11-25 09:48:41,219 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 912 states and 1013 transitions.
[2020-11-25 09:48:41,225 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 912 to 888.
[2020-11-25 09:48:41,225 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 888 states.
[2020-11-25 09:48:41,226 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 888 states to 888 states and 987 transitions.
[2020-11-25 09:48:41,226 INFO  L751         BuchiCegarLoop]: Abstraction has 888 states and 987 transitions.
[2020-11-25 09:48:41,226 INFO  L631         BuchiCegarLoop]: Abstraction has 888 states and 987 transitions.
[2020-11-25 09:48:41,226 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 09:48:41,226 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 888 states and 987 transitions.
[2020-11-25 09:48:41,227 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:48:41,227 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:48:41,227 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:48:41,228 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:48:41,228 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YSM0 := false;
[L3]                 call_transferFrom_YSM0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == YSM;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_YSM[this] := 0;
[L952]               decimals_YSM[this] := 0;
[L953]               symbol_YSM[this] := -339949848;
[L954]               name_YSM[this] := -339949848;
[L955]               approach_YSM[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_YSM[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_YSM[this] := 488267391;
[L961]               symbol_YSM[this] := 774884429;
[L962]               decimals_YSM[this] := 18;
[L963]               __var_1 := decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_YSM[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_YSM[this][msgsender_MSG];
[L966]               holders_YSM[this][msgsender_MSG] := totalSupply_YSM[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_YSM[this][msgsender_MSG];
[L990]   RET         call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_YSM[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_YSM[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_from_s315];
[L1098]              holders_YSM[this][_from_s315] := (holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_from_s315];
[L1100]              assert _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_YSM[this][_from_s315][msgsender_MSG];
[L1102]              approach_YSM[this][_from_s315][msgsender_MSG] := (approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_YSM[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_to_s315];
[L1105]              holders_YSM[this][_to_s315] := (holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_to_s315];
[L1107]              assert holders_YSM[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_YSM" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this] == old(holders_YSM[this])) && approach_YSM[this][p1][p2] == old(approach_YSM[this][p1][p2])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_YSM[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_YSM[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_from_s315];
[L1098]              holders_YSM[this][_from_s315] := (holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_from_s315];
[L1100]              assert _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_YSM[this][_from_s315][msgsender_MSG];
[L1102]              approach_YSM[this][_from_s315][msgsender_MSG] := (approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_YSM[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_to_s315];
[L1105]              holders_YSM[this][_to_s315] := (holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_to_s315];
[L1107]              assert holders_YSM[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_YSM" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this] == old(holders_YSM[this])) && approach_YSM[this][p1][p2] == old(approach_YSM[this][p1][p2])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

Loop:
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND FALSE  !(gas >= 0)
[L1770]  RET         call CorralChoice_YSM(this);

[2020-11-25 09:48:41,230 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:48:41,230 INFO  L82        PathProgramCache]: Analyzing trace with hash -1694162580, now seen corresponding path program 1 times
[2020-11-25 09:48:41,231 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:48:41,286 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:48:42,391 WARN  L188               SmtUtils]: Spent 190.00 ms on a formula simplification. DAG size of input: 186 DAG size of output: 76
[2020-11-25 09:48:43,117 WARN  L188               SmtUtils]: Spent 486.00 ms on a formula simplification. DAG size of input: 249 DAG size of output: 89
[2020-11-25 09:48:43,527 WARN  L188               SmtUtils]: Spent 102.00 ms on a formula simplification. DAG size of input: 132 DAG size of output: 65
[2020-11-25 09:48:44,179 INFO  L134       CoverageAnalysis]: Checked inductivity of 44 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 43 trivial. 0 not checked.
[2020-11-25 09:48:44,179 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:48:44,179 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 09:48:44,179 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:48:44,179 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 09:48:44,179 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=106, Invalid=886, Unknown=0, NotChecked=0, Total=992
[2020-11-25 09:48:44,180 INFO  L87              Difference]: Start difference. First operand 888 states and 987 transitions. cyclomatic complexity: 105 Second operand 32 states.
[2020-11-25 09:48:44,987 WARN  L188               SmtUtils]: Spent 646.00 ms on a formula simplification. DAG size of input: 156 DAG size of output: 155
[2020-11-25 09:48:45,727 WARN  L188               SmtUtils]: Spent 626.00 ms on a formula simplification. DAG size of input: 158 DAG size of output: 157
[2020-11-25 09:48:46,702 WARN  L188               SmtUtils]: Spent 703.00 ms on a formula simplification. DAG size of input: 163 DAG size of output: 162
[2020-11-25 09:48:50,723 WARN  L188               SmtUtils]: Spent 230.00 ms on a formula simplification. DAG size of input: 89 DAG size of output: 86
[2020-11-25 09:48:50,798 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:48:50,798 INFO  L93              Difference]: Finished difference Result 1026 states and 1174 transitions.
[2020-11-25 09:48:50,798 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 09:48:50,798 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1026 states and 1174 transitions.
[2020-11-25 09:48:50,801 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 09:48:50,803 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1026 states to 1026 states and 1174 transitions.
[2020-11-25 09:48:50,803 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 570
[2020-11-25 09:48:50,804 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 570
[2020-11-25 09:48:50,804 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1026 states and 1174 transitions.
[2020-11-25 09:48:50,804 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:48:50,804 INFO  L728         BuchiCegarLoop]: Abstraction has 1026 states and 1174 transitions.
[2020-11-25 09:48:50,805 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1026 states and 1174 transitions.
[2020-11-25 09:48:50,811 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1026 to 994.
[2020-11-25 09:48:50,811 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 994 states.
[2020-11-25 09:48:50,812 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 994 states to 994 states and 1137 transitions.
[2020-11-25 09:48:50,812 INFO  L751         BuchiCegarLoop]: Abstraction has 994 states and 1137 transitions.
[2020-11-25 09:48:50,812 INFO  L631         BuchiCegarLoop]: Abstraction has 994 states and 1137 transitions.
[2020-11-25 09:48:50,812 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 09:48:50,812 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 994 states and 1137 transitions.
[2020-11-25 09:48:50,814 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 09:48:50,814 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:48:50,814 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:48:50,815 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:48:50,815 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YSM0 := false;
[L3]                 call_transferFrom_YSM0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == YSM;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_YSM[this] := 0;
[L952]               decimals_YSM[this] := 0;
[L953]               symbol_YSM[this] := -339949848;
[L954]               name_YSM[this] := -339949848;
[L955]               approach_YSM[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_YSM[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_YSM[this] := 488267391;
[L961]               symbol_YSM[this] := 774884429;
[L962]               decimals_YSM[this] := 18;
[L963]               __var_1 := decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_YSM[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_YSM[this][msgsender_MSG];
[L966]               holders_YSM[this][msgsender_MSG] := totalSupply_YSM[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_YSM[this][msgsender_MSG];
[L990]   RET         call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND TRUE   choice == 8
[L1703]              gas := gas - 21000;
[L1704]  COND TRUE   gas >= 0
[L1705]              assume _val_s213 >= 0 && _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1706]              assume msgvalue_MSG == 0;
[L1707]  CALL        call __ret_0_transfer := transfer~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L248]               havoc __exception;
[L249]               revert := false;
[L250]   COND FALSE  !(__exception)
[L271]   CALL        call __ret_0_ := transfer~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1042]  COND FALSE  !(!(holders_YSM[this][msgsender_MSG] >= _val_s213))
[L1046]  COND FALSE  !(!(msgsender_MSG != _to_s213))
[L1050]              assert _val_s213 <= holders_YSM[this][msgsender_MSG];
[L1051]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][msgsender_MSG];
[L1052]              holders_YSM[this][msgsender_MSG] := (holders_YSM[this][msgsender_MSG] - _val_s213) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1053]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][msgsender_MSG];
[L1054]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_to_s213];
[L1055]              holders_YSM[this][_to_s213] := (holders_YSM[this][_to_s213] + _val_s213) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1056]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_to_s213];
[L1057]              assert holders_YSM[this][_to_s213] >= _val_s213;
[L1058]              assert { :EventEmitted "Transfer_YSM" } true;
[L1059]              __ret_0_ := true;
[L271]   RET         call __ret_0_ := transfer~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L272]               assume !revert && gas >= 0;
[L1707]  RET         call __ret_0_transfer := transfer~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1770]  RET         call CorralChoice_YSM(this);
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_YSM[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_YSM[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_from_s315];
[L1098]              holders_YSM[this][_from_s315] := (holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_from_s315];
[L1100]              assert _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_YSM[this][_from_s315][msgsender_MSG];
[L1102]              approach_YSM[this][_from_s315][msgsender_MSG] := (approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_YSM[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_to_s315];
[L1105]              holders_YSM[this][_to_s315] := (holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_to_s315];
[L1107]              assert holders_YSM[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_YSM" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this] == old(holders_YSM[this])) && approach_YSM[this][p1][p2] == old(approach_YSM[this][p1][p2])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

Loop:
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_YSM[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_YSM[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_from_s315];
[L1098]              holders_YSM[this][_from_s315] := (holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_from_s315];
[L1100]              assert _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_YSM[this][_from_s315][msgsender_MSG];
[L1102]              approach_YSM[this][_from_s315][msgsender_MSG] := (approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_YSM[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_to_s315];
[L1105]              holders_YSM[this][_to_s315] := (holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_to_s315];
[L1107]              assert holders_YSM[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_YSM" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this] == old(holders_YSM[this])) && approach_YSM[this][p1][p2] == old(approach_YSM[this][p1][p2])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

[2020-11-25 09:48:50,819 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:48:50,819 INFO  L82        PathProgramCache]: Analyzing trace with hash 1426946198, now seen corresponding path program 1 times
[2020-11-25 09:48:50,819 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:48:50,879 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:48:52,683 INFO  L134       CoverageAnalysis]: Checked inductivity of 35 backedges. 0 proven. 35 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:48:52,683 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:48:52,683 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [40] total 40
[2020-11-25 09:48:52,683 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:48:52,683 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 41 interpolants.
[2020-11-25 09:48:52,684 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=145, Invalid=1495, Unknown=0, NotChecked=0, Total=1640
[2020-11-25 09:48:52,684 INFO  L87              Difference]: Start difference. First operand 994 states and 1137 transitions. cyclomatic complexity: 152 Second operand 41 states.
[2020-11-25 09:48:56,658 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:48:56,658 INFO  L93              Difference]: Finished difference Result 1258 states and 1498 transitions.
[2020-11-25 09:48:56,658 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 41 states. 
[2020-11-25 09:48:56,658 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1258 states and 1498 transitions.
[2020-11-25 09:48:56,661 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 09:48:56,664 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1258 states to 1258 states and 1498 transitions.
[2020-11-25 09:48:56,664 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 794
[2020-11-25 09:48:56,665 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 794
[2020-11-25 09:48:56,665 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1258 states and 1498 transitions.
[2020-11-25 09:48:56,666 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:48:56,666 INFO  L728         BuchiCegarLoop]: Abstraction has 1258 states and 1498 transitions.
[2020-11-25 09:48:56,666 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1258 states and 1498 transitions.
[2020-11-25 09:48:56,672 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1258 to 992.
[2020-11-25 09:48:56,672 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 992 states.
[2020-11-25 09:48:56,673 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 992 states to 992 states and 1130 transitions.
[2020-11-25 09:48:56,674 INFO  L751         BuchiCegarLoop]: Abstraction has 992 states and 1130 transitions.
[2020-11-25 09:48:56,674 INFO  L631         BuchiCegarLoop]: Abstraction has 992 states and 1130 transitions.
[2020-11-25 09:48:56,674 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 09:48:56,674 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 992 states and 1130 transitions.
[2020-11-25 09:48:56,675 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 09:48:56,675 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:48:56,675 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:48:56,676 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:48:56,676 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YSM0 := false;
[L3]                 call_transferFrom_YSM0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == YSM;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_YSM[this] := 0;
[L952]               decimals_YSM[this] := 0;
[L953]               symbol_YSM[this] := -339949848;
[L954]               name_YSM[this] := -339949848;
[L955]               approach_YSM[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_YSM[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_YSM[this] := 488267391;
[L961]               symbol_YSM[this] := 774884429;
[L962]               decimals_YSM[this] := 18;
[L963]               __var_1 := decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_YSM[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_YSM[this][msgsender_MSG];
[L966]               holders_YSM[this][msgsender_MSG] := totalSupply_YSM[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_YSM[this][msgsender_MSG];
[L990]   RET         call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND FALSE  !(choice == 8)
[L1709]  COND FALSE  !(choice == 7)
[L1715]  COND FALSE  !(choice == 6)
[L1721]  COND TRUE   choice == 5
[L1722]              gas := gas - 21000;
[L1723]  COND TRUE   gas >= 0
[L1724]              assume _val_s352 >= 0 && _val_s352 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1725]              assume msgvalue_MSG == 0;
[L1726]  CALL        call __ret_0_approve := approve~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L354]               havoc __exception;
[L355]               revert := false;
[L356]   COND FALSE  !(__exception)
[L377]   CALL        call __ret_0_ := approve~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1128]  COND FALSE  !(!(holders_YSM[this][msgsender_MSG] >= _val_s352))
[L1132]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] - approach_YSM[this][msgsender_MSG][_spender_s352];
[L1133]              approach_YSM[this][msgsender_MSG][_spender_s352] := _val_s352;
[L1134]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] + approach_YSM[this][msgsender_MSG][_spender_s352];
[L1135]              assert { :EventEmitted "Approval_YSM" } true;
[L1136]              __ret_0_ := true;
[L377]   RET         call __ret_0_ := approve~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L378]               assume !revert && gas >= 0;
[L1726]  RET         call __ret_0_approve := approve~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1770]  RET         call CorralChoice_YSM(this);
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND FALSE  !(choice == 8)
[L1709]  COND FALSE  !(choice == 7)
[L1715]  COND FALSE  !(choice == 6)
[L1721]  COND TRUE   choice == 5
[L1722]              gas := gas - 21000;
[L1723]  COND TRUE   gas >= 0
[L1724]              assume _val_s352 >= 0 && _val_s352 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1725]              assume msgvalue_MSG == 0;
[L1726]  CALL        call __ret_0_approve := approve~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L354]               havoc __exception;
[L355]               revert := false;
[L356]   COND FALSE  !(__exception)
[L377]   CALL        call __ret_0_ := approve~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1128]  COND FALSE  !(!(holders_YSM[this][msgsender_MSG] >= _val_s352))
[L1132]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] - approach_YSM[this][msgsender_MSG][_spender_s352];
[L1133]              approach_YSM[this][msgsender_MSG][_spender_s352] := _val_s352;
[L1134]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] + approach_YSM[this][msgsender_MSG][_spender_s352];
[L1135]              assert { :EventEmitted "Approval_YSM" } true;
[L1136]              __ret_0_ := true;
[L377]   RET         call __ret_0_ := approve~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L378]               assume !revert && gas >= 0;
[L1726]  RET         call __ret_0_approve := approve~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1770]  RET         call CorralChoice_YSM(this);
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_YSM[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_YSM[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_from_s315];
[L1098]              holders_YSM[this][_from_s315] := (holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_from_s315];
[L1100]              assert _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_YSM[this][_from_s315][msgsender_MSG];
[L1102]              approach_YSM[this][_from_s315][msgsender_MSG] := (approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_YSM[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_to_s315];
[L1105]              holders_YSM[this][_to_s315] := (holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_to_s315];
[L1107]              assert holders_YSM[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_YSM" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this] == old(holders_YSM[this])) && approach_YSM[this][p1][p2] == old(approach_YSM[this][p1][p2])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

Loop:
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND FALSE  !(gas >= 0)
[L1770]  RET         call CorralChoice_YSM(this);

[2020-11-25 09:48:56,678 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:48:56,678 INFO  L82        PathProgramCache]: Analyzing trace with hash 1816090948, now seen corresponding path program 2 times
[2020-11-25 09:48:56,679 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:48:56,720 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:48:56,984 WARN  L188               SmtUtils]: Spent 103.00 ms on a formula simplification. DAG size of input: 25 DAG size of output: 19
[2020-11-25 09:48:57,943 INFO  L134       CoverageAnalysis]: Checked inductivity of 136 backedges. 14 proven. 2 refuted. 0 times theorem prover too weak. 120 trivial. 0 not checked.
[2020-11-25 09:48:57,943 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:48:57,943 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [36] total 36
[2020-11-25 09:48:57,944 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:48:57,944 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 37 interpolants.
[2020-11-25 09:48:57,944 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=136, Invalid=1196, Unknown=0, NotChecked=0, Total=1332
[2020-11-25 09:48:57,944 INFO  L87              Difference]: Start difference. First operand 992 states and 1130 transitions. cyclomatic complexity: 147 Second operand 37 states.
[2020-11-25 09:49:00,611 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:49:00,611 INFO  L93              Difference]: Finished difference Result 1135 states and 1333 transitions.
[2020-11-25 09:49:00,611 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 36 states. 
[2020-11-25 09:49:00,611 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1135 states and 1333 transitions.
[2020-11-25 09:49:00,614 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:49:00,616 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1135 states to 1135 states and 1333 transitions.
[2020-11-25 09:49:00,617 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 676
[2020-11-25 09:49:00,617 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 676
[2020-11-25 09:49:00,617 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1135 states and 1333 transitions.
[2020-11-25 09:49:00,618 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:49:00,618 INFO  L728         BuchiCegarLoop]: Abstraction has 1135 states and 1333 transitions.
[2020-11-25 09:49:00,618 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1135 states and 1333 transitions.
[2020-11-25 09:49:00,623 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1135 to 996.
[2020-11-25 09:49:00,624 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 996 states.
[2020-11-25 09:49:00,625 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 996 states to 996 states and 1143 transitions.
[2020-11-25 09:49:00,625 INFO  L751         BuchiCegarLoop]: Abstraction has 996 states and 1143 transitions.
[2020-11-25 09:49:00,625 INFO  L631         BuchiCegarLoop]: Abstraction has 996 states and 1143 transitions.
[2020-11-25 09:49:00,625 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 09:49:00,625 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 996 states and 1143 transitions.
[2020-11-25 09:49:00,626 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 09:49:00,626 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:49:00,626 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:49:00,627 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:49:00,627 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YSM0 := false;
[L3]                 call_transferFrom_YSM0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == YSM;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_YSM[this] := 0;
[L952]               decimals_YSM[this] := 0;
[L953]               symbol_YSM[this] := -339949848;
[L954]               name_YSM[this] := -339949848;
[L955]               approach_YSM[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_YSM[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_YSM[this] := 488267391;
[L961]               symbol_YSM[this] := 774884429;
[L962]               decimals_YSM[this] := 18;
[L963]               __var_1 := decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_YSM[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_YSM[this][msgsender_MSG];
[L966]               holders_YSM[this][msgsender_MSG] := totalSupply_YSM[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_YSM[this][msgsender_MSG];
[L990]   RET         call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND FALSE  !(choice == 8)
[L1709]  COND FALSE  !(choice == 7)
[L1715]  COND FALSE  !(choice == 6)
[L1721]  COND TRUE   choice == 5
[L1722]              gas := gas - 21000;
[L1723]  COND TRUE   gas >= 0
[L1724]              assume _val_s352 >= 0 && _val_s352 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1725]              assume msgvalue_MSG == 0;
[L1726]  CALL        call __ret_0_approve := approve~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L354]               havoc __exception;
[L355]               revert := false;
[L356]   COND FALSE  !(__exception)
[L377]   CALL        call __ret_0_ := approve~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1128]  COND FALSE  !(!(holders_YSM[this][msgsender_MSG] >= _val_s352))
[L1132]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] - approach_YSM[this][msgsender_MSG][_spender_s352];
[L1133]              approach_YSM[this][msgsender_MSG][_spender_s352] := _val_s352;
[L1134]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] + approach_YSM[this][msgsender_MSG][_spender_s352];
[L1135]              assert { :EventEmitted "Approval_YSM" } true;
[L1136]              __ret_0_ := true;
[L377]   RET         call __ret_0_ := approve~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L378]               assume !revert && gas >= 0;
[L1726]  RET         call __ret_0_approve := approve~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1770]  RET         call CorralChoice_YSM(this);
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND TRUE   choice == 8
[L1703]              gas := gas - 21000;
[L1704]  COND TRUE   gas >= 0
[L1705]              assume _val_s213 >= 0 && _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1706]              assume msgvalue_MSG == 0;
[L1707]  CALL        call __ret_0_transfer := transfer~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L248]               havoc __exception;
[L249]               revert := false;
[L250]   COND FALSE  !(__exception)
[L271]   CALL        call __ret_0_ := transfer~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1042]  COND FALSE  !(!(holders_YSM[this][msgsender_MSG] >= _val_s213))
[L1046]  COND FALSE  !(!(msgsender_MSG != _to_s213))
[L1050]              assert _val_s213 <= holders_YSM[this][msgsender_MSG];
[L1051]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][msgsender_MSG];
[L1052]              holders_YSM[this][msgsender_MSG] := (holders_YSM[this][msgsender_MSG] - _val_s213) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1053]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][msgsender_MSG];
[L1054]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_to_s213];
[L1055]              holders_YSM[this][_to_s213] := (holders_YSM[this][_to_s213] + _val_s213) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1056]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_to_s213];
[L1057]              assert holders_YSM[this][_to_s213] >= _val_s213;
[L1058]              assert { :EventEmitted "Transfer_YSM" } true;
[L1059]              __ret_0_ := true;
[L271]   RET         call __ret_0_ := transfer~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L272]               assume !revert && gas >= 0;
[L1707]  RET         call __ret_0_transfer := transfer~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1770]  RET         call CorralChoice_YSM(this);
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_YSM[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_YSM[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_from_s315];
[L1098]              holders_YSM[this][_from_s315] := (holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_from_s315];
[L1100]              assert _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_YSM[this][_from_s315][msgsender_MSG];
[L1102]              approach_YSM[this][_from_s315][msgsender_MSG] := (approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_YSM[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_to_s315];
[L1105]              holders_YSM[this][_to_s315] := (holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_to_s315];
[L1107]              assert holders_YSM[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_YSM" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this] == old(holders_YSM[this])) && approach_YSM[this][p1][p2] == old(approach_YSM[this][p1][p2])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

Loop:
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_YSM[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_YSM[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_from_s315];
[L1098]              holders_YSM[this][_from_s315] := (holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_from_s315];
[L1100]              assert _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_YSM[this][_from_s315][msgsender_MSG];
[L1102]              approach_YSM[this][_from_s315][msgsender_MSG] := (approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_YSM[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_to_s315];
[L1105]              holders_YSM[this][_to_s315] := (holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_to_s315];
[L1107]              assert holders_YSM[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_YSM" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this] == old(holders_YSM[this])) && approach_YSM[this][p1][p2] == old(approach_YSM[this][p1][p2])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

[2020-11-25 09:49:00,630 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:49:00,630 INFO  L82        PathProgramCache]: Analyzing trace with hash -466386340, now seen corresponding path program 1 times
[2020-11-25 09:49:00,630 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:49:00,756 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:49:01,108 WARN  L188               SmtUtils]: Spent 101.00 ms on a formula simplification. DAG size of input: 49 DAG size of output: 28
[2020-11-25 09:49:01,630 WARN  L188               SmtUtils]: Spent 234.00 ms on a formula simplification. DAG size of input: 150 DAG size of output: 84
[2020-11-25 09:49:01,855 WARN  L188               SmtUtils]: Spent 115.00 ms on a formula simplification. DAG size of input: 137 DAG size of output: 63
[2020-11-25 09:49:02,084 WARN  L188               SmtUtils]: Spent 159.00 ms on a formula simplification. DAG size of input: 144 DAG size of output: 73
[2020-11-25 09:49:02,438 WARN  L188               SmtUtils]: Spent 264.00 ms on a formula simplification. DAG size of input: 181 DAG size of output: 86
[2020-11-25 09:49:02,885 INFO  L134       CoverageAnalysis]: Checked inductivity of 109 backedges. 68 proven. 6 refuted. 0 times theorem prover too weak. 35 trivial. 0 not checked.
[2020-11-25 09:49:02,885 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:49:02,885 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [36] total 36
[2020-11-25 09:49:02,886 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:49:02,886 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 37 interpolants.
[2020-11-25 09:49:02,886 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=143, Invalid=1189, Unknown=0, NotChecked=0, Total=1332
[2020-11-25 09:49:02,886 INFO  L87              Difference]: Start difference. First operand 996 states and 1143 transitions. cyclomatic complexity: 157 Second operand 37 states.
[2020-11-25 09:49:04,233 WARN  L188               SmtUtils]: Spent 133.00 ms on a formula simplification. DAG size of input: 106 DAG size of output: 105
[2020-11-25 09:49:07,560 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:49:07,560 INFO  L93              Difference]: Finished difference Result 1127 states and 1321 transitions.
[2020-11-25 09:49:07,561 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 36 states. 
[2020-11-25 09:49:07,561 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1127 states and 1321 transitions.
[2020-11-25 09:49:07,563 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:49:07,566 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1127 states to 1127 states and 1321 transitions.
[2020-11-25 09:49:07,566 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 668
[2020-11-25 09:49:07,566 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 668
[2020-11-25 09:49:07,566 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1127 states and 1321 transitions.
[2020-11-25 09:49:07,567 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:49:07,567 INFO  L728         BuchiCegarLoop]: Abstraction has 1127 states and 1321 transitions.
[2020-11-25 09:49:07,568 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1127 states and 1321 transitions.
[2020-11-25 09:49:07,573 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1127 to 998.
[2020-11-25 09:49:07,573 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 998 states.
[2020-11-25 09:49:07,574 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 998 states to 998 states and 1149 transitions.
[2020-11-25 09:49:07,574 INFO  L751         BuchiCegarLoop]: Abstraction has 998 states and 1149 transitions.
[2020-11-25 09:49:07,574 INFO  L631         BuchiCegarLoop]: Abstraction has 998 states and 1149 transitions.
[2020-11-25 09:49:07,574 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 09:49:07,575 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 998 states and 1149 transitions.
[2020-11-25 09:49:07,576 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 09:49:07,576 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:49:07,576 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:49:07,577 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:49:07,577 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YSM0 := false;
[L3]                 call_transferFrom_YSM0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == YSM;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_YSM[this] := 0;
[L952]               decimals_YSM[this] := 0;
[L953]               symbol_YSM[this] := -339949848;
[L954]               name_YSM[this] := -339949848;
[L955]               approach_YSM[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_YSM[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_YSM[this] := 488267391;
[L961]               symbol_YSM[this] := 774884429;
[L962]               decimals_YSM[this] := 18;
[L963]               __var_1 := decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_YSM[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_YSM[this][msgsender_MSG];
[L966]               holders_YSM[this][msgsender_MSG] := totalSupply_YSM[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_YSM[this][msgsender_MSG];
[L990]   RET         call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND FALSE  !(choice == 8)
[L1709]  COND FALSE  !(choice == 7)
[L1715]  COND FALSE  !(choice == 6)
[L1721]  COND TRUE   choice == 5
[L1722]              gas := gas - 21000;
[L1723]  COND TRUE   gas >= 0
[L1724]              assume _val_s352 >= 0 && _val_s352 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1725]              assume msgvalue_MSG == 0;
[L1726]  CALL        call __ret_0_approve := approve~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L354]               havoc __exception;
[L355]               revert := false;
[L356]   COND FALSE  !(__exception)
[L377]   CALL        call __ret_0_ := approve~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1128]  COND FALSE  !(!(holders_YSM[this][msgsender_MSG] >= _val_s352))
[L1132]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] - approach_YSM[this][msgsender_MSG][_spender_s352];
[L1133]              approach_YSM[this][msgsender_MSG][_spender_s352] := _val_s352;
[L1134]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] + approach_YSM[this][msgsender_MSG][_spender_s352];
[L1135]              assert { :EventEmitted "Approval_YSM" } true;
[L1136]              __ret_0_ := true;
[L377]   RET         call __ret_0_ := approve~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L378]               assume !revert && gas >= 0;
[L1726]  RET         call __ret_0_approve := approve~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1770]  RET         call CorralChoice_YSM(this);
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_YSM[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_YSM[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_from_s315];
[L1098]              holders_YSM[this][_from_s315] := (holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_from_s315];
[L1100]              assert _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_YSM[this][_from_s315][msgsender_MSG];
[L1102]              approach_YSM[this][_from_s315][msgsender_MSG] := (approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_YSM[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_to_s315];
[L1105]              holders_YSM[this][_to_s315] := (holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_to_s315];
[L1107]              assert holders_YSM[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_YSM" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this] == old(holders_YSM[this])) && approach_YSM[this][p1][p2] == old(approach_YSM[this][p1][p2])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_YSM[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_YSM[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_from_s315];
[L1098]              holders_YSM[this][_from_s315] := (holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_from_s315];
[L1100]              assert _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_YSM[this][_from_s315][msgsender_MSG];
[L1102]              approach_YSM[this][_from_s315][msgsender_MSG] := (approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_YSM[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_to_s315];
[L1105]              holders_YSM[this][_to_s315] := (holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_to_s315];
[L1107]              assert holders_YSM[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_YSM" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this] == old(holders_YSM[this])) && approach_YSM[this][p1][p2] == old(approach_YSM[this][p1][p2])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

Loop:
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((p1 != _from_s315 || p2 != msgsender_MSG) && _from_s315 == _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_YSM[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_YSM[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_from_s315];
[L1098]              holders_YSM[this][_from_s315] := (holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_from_s315];
[L1100]              assert _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_YSM[this][_from_s315][msgsender_MSG];
[L1102]              approach_YSM[this][_from_s315][msgsender_MSG] := (approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_YSM[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_to_s315];
[L1105]              holders_YSM[this][_to_s315] := (holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_to_s315];
[L1107]              assert holders_YSM[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_YSM" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this] == old(holders_YSM[this])) && approach_YSM[this][p1][p2] == old(approach_YSM[this][p1][p2])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

[2020-11-25 09:49:07,580 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:49:07,580 INFO  L82        PathProgramCache]: Analyzing trace with hash 1783980006, now seen corresponding path program 1 times
[2020-11-25 09:49:07,581 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:49:07,768 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:49:10,122 WARN  L188               SmtUtils]: Spent 333.00 ms on a formula simplification. DAG size of input: 177 DAG size of output: 60
[2020-11-25 09:49:10,946 WARN  L188               SmtUtils]: Spent 601.00 ms on a formula simplification. DAG size of input: 177 DAG size of output: 60
[2020-11-25 09:49:11,457 WARN  L188               SmtUtils]: Spent 354.00 ms on a formula simplification. DAG size of input: 183 DAG size of output: 70
[2020-11-25 09:49:12,383 WARN  L188               SmtUtils]: Spent 504.00 ms on a formula simplification. DAG size of input: 265 DAG size of output: 63
[2020-11-25 09:49:12,890 WARN  L188               SmtUtils]: Spent 335.00 ms on a formula simplification. DAG size of input: 246 DAG size of output: 46
[2020-11-25 09:49:13,580 WARN  L188               SmtUtils]: Spent 479.00 ms on a formula simplification. DAG size of input: 244 DAG size of output: 66
[2020-11-25 09:49:14,721 WARN  L188               SmtUtils]: Spent 818.00 ms on a formula simplification. DAG size of input: 299 DAG size of output: 76
[2020-11-25 09:49:15,430 WARN  L188               SmtUtils]: Spent 517.00 ms on a formula simplification. DAG size of input: 273 DAG size of output: 100
[2020-11-25 09:49:15,904 WARN  L188               SmtUtils]: Spent 311.00 ms on a formula simplification. DAG size of input: 270 DAG size of output: 79
[2020-11-25 09:49:16,410 WARN  L188               SmtUtils]: Spent 346.00 ms on a formula simplification. DAG size of input: 271 DAG size of output: 80
[2020-11-25 09:49:38,500 WARN  L188               SmtUtils]: Spent 20.17 s on a formula simplification. DAG size of input: 1847 DAG size of output: 183
[2020-11-25 09:49:39,921 WARN  L188               SmtUtils]: Spent 648.00 ms on a formula simplification. DAG size of input: 1303 DAG size of output: 7
[2020-11-25 09:49:40,149 INFO  L134       CoverageAnalysis]: Checked inductivity of 117 backedges. 0 proven. 8 refuted. 0 times theorem prover too weak. 109 trivial. 0 not checked.
[2020-11-25 09:49:40,149 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:49:40,149 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [41] total 41
[2020-11-25 09:49:40,149 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:49:40,149 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 41 interpolants.
[2020-11-25 09:49:40,150 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=131, Invalid=1509, Unknown=0, NotChecked=0, Total=1640
[2020-11-25 09:49:40,150 INFO  L87              Difference]: Start difference. First operand 998 states and 1149 transitions. cyclomatic complexity: 162 Second operand 41 states.
[2020-11-25 09:49:45,052 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:49:45,052 INFO  L93              Difference]: Finished difference Result 483 states and 551 transitions.
[2020-11-25 09:49:45,052 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 34 states. 
[2020-11-25 09:49:45,052 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 483 states and 551 transitions.
[2020-11-25 09:49:45,053 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:49:45,053 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 483 states to 0 states and 0 transitions.
[2020-11-25 09:49:45,053 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 09:49:45,053 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 09:49:45,053 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 09:49:45,053 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:49:45,053 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:49:45,053 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:49:45,054 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:49:45,054 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 09:49:45,054 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 09:49:45,054 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:49:45,054 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 09:49:45,056 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:49:45 BasicIcfg
[2020-11-25 09:49:45,056 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 09:49:45,057 INFO  L168              Benchmark]: Toolchain (without parser) took 74930.56 ms. Allocated memory was 1.0 GB in the beginning and 4.1 GB in the end (delta: 3.1 GB). Free memory was 940.6 MB in the beginning and 1.4 GB in the end (delta: -474.1 MB). Peak memory consumption was 2.6 GB. Max. memory is 15.3 GB.
[2020-11-25 09:49:45,057 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 09:49:45,057 INFO  L168              Benchmark]: Boogie Preprocessor took 79.65 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:49:45,058 INFO  L168              Benchmark]: UtopiaSpecLang took 53.33 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:49:45,058 INFO  L168              Benchmark]: Boogie Printer took 9.54 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 09:49:45,058 INFO  L168              Benchmark]: RCFGBuilder took 565.01 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 881.5 MB in the end (delta: 48.3 MB). Peak memory consumption was 48.3 MB. Max. memory is 15.3 GB.
[2020-11-25 09:49:45,058 INFO  L168              Benchmark]: UtopiaLTL2Aut took 41.41 ms. Allocated memory is still 1.0 GB. Free memory was 881.5 MB in the beginning and 872.6 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 09:49:45,058 INFO  L168              Benchmark]: BÃ¼chi Program Product took 844.46 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 60.8 MB). Free memory was 872.6 MB in the beginning and 949.0 MB in the end (delta: -76.4 MB). Peak memory consumption was 155.9 MB. Max. memory is 15.3 GB.
[2020-11-25 09:49:45,059 INFO  L168              Benchmark]: BlockEncodingV2 took 65.14 ms. Allocated memory is still 1.1 GB. Free memory was 949.0 MB in the beginning and 912.9 MB in the end (delta: 36.1 MB). Peak memory consumption was 36.1 MB. Max. memory is 15.3 GB.
[2020-11-25 09:49:45,059 INFO  L168              Benchmark]: BuchiAutomizer took 73268.80 ms. Allocated memory was 1.1 GB in the beginning and 4.1 GB in the end (delta: 3.0 GB). Free memory was 912.9 MB in the beginning and 1.4 GB in the end (delta: -501.8 MB). Peak memory consumption was 2.5 GB. Max. memory is 15.3 GB.
[2020-11-25 09:49:45,061 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    1526 locations, 2546 edges
  - StatisticsResult: Encoded RCFG
    1508 locations, 2503 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 79.65 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 53.33 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 9.54 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 565.01 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 881.5 MB in the end (delta: 48.3 MB). Peak memory consumption was 48.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 41.41 ms. Allocated memory is still 1.0 GB. Free memory was 881.5 MB in the beginning and 872.6 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 844.46 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 60.8 MB). Free memory was 872.6 MB in the beginning and 949.0 MB in the end (delta: -76.4 MB). Peak memory consumption was 155.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 65.14 ms. Allocated memory is still 1.1 GB. Free memory was 949.0 MB in the beginning and 912.9 MB in the end (delta: 36.1 MB). Peak memory consumption was 36.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 73268.80 ms. Allocated memory was 1.1 GB in the beginning and 4.1 GB in the end (delta: 3.0 GB). Free memory was 912.9 MB in the beginning and 1.4 GB in the end (delta: -501.8 MB). Peak memory consumption was 2.5 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    659 locations, 787 edges
  - StatisticsResult: BuchiProgram size
    1526 locations, 2546 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 12 terminating modules (12 trivial, 0 deterministic, 0 nondeterministic). 12 modules have a trivial ranking function, the largest among these consists of 41 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 73.2s and 13 iterations.  TraceHistogramMax:3. Analysis of lassos took 43.2s. Construction of modules took 21.4s. BÃ¼chi inclusion checks took 8.1s. Highest rank in rank-based complementation 0. Minimization of det autom 12. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 11 MinimizatonAttempts, 1640 StatesRemovedByMinimization, 10 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 1235 states and ocurred in iteration 5.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 11824 SDtfs, 15014 SDslu, 57039 SDs, 0 SdLazy, 71391 SolverSat, 2621 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 21.4s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU12 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_YSM0) ==> ( <>(success_transferFrom_YSM0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
