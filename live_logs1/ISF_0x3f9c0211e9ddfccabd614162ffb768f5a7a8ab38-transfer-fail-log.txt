This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 18:31:22,082 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 18:31:22,083 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 18:31:22,095 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 18:31:22,095 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 18:31:22,095 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 18:31:22,096 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 18:31:22,098 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 18:31:22,100 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 18:31:22,100 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 18:31:22,101 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 18:31:22,101 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 18:31:22,102 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 18:31:22,103 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 18:31:22,103 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 18:31:22,104 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 18:31:22,105 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 18:31:22,106 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 18:31:22,107 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 18:31:22,108 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 18:31:22,109 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 18:31:22,110 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 18:31:22,111 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 18:31:22,112 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 18:31:22,112 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 18:31:22,112 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 18:31:22,113 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 18:31:22,113 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 18:31:22,113 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 18:31:22,114 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 18:31:22,114 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 18:31:22,115 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 18:31:22,115 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 18:31:22,116 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 18:31:22,116 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 18:31:22,117 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 18:31:22,117 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 18:31:22,117 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 18:31:22,117 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 18:31:22,118 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 18:31:22,118 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 18:31:22,119 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 18:31:22,127 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 18:31:22,127 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 18:31:22,128 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 18:31:22,128 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 18:31:22,128 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 18:31:22,128 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 18:31:22,128 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 18:31:22,128 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 18:31:22,128 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 18:31:22,128 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 18:31:22,129 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 18:31:22,129 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 18:31:22,129 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 18:31:22,129 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 18:31:22,129 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 18:31:22,129 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 18:31:22,129 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 18:31:22,129 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 18:31:22,129 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 18:31:22,129 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 18:31:22,130 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 18:31:22,130 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 18:31:22,130 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 18:31:22,130 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 18:31:22,130 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 18:31:22,130 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 18:31:22,156 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 18:31:22,170 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 18:31:22,173 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 18:31:22,174 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 18:31:22,174 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 18:31:22,175 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-fail.bpl
[2020-11-25 18:31:22,175 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-fail.bpl'
[2020-11-25 18:31:22,272 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 18:31:22,273 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 18:31:22,274 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 18:31:22,274 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 18:31:22,274 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 18:31:22,290 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:31:22" (1/1) ...
[2020-11-25 18:31:22,292 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:31:22" (1/1) ...
[2020-11-25 18:31:22,335 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:31:22" (1/1) ...
[2020-11-25 18:31:22,336 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:31:22" (1/1) ...
[2020-11-25 18:31:22,366 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:31:22" (1/1) ...
[2020-11-25 18:31:22,379 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:31:22" (1/1) ...
[2020-11-25 18:31:22,390 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:31:22" (1/1) ...
[2020-11-25 18:31:22,402 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 18:31:22,403 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 18:31:22,403 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 18:31:22,405 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 18:31:22,409 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:31:22" (1/1) ...
[2020-11-25 18:31:22,427 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20Protected.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Protected.transfer)))
[2020-11-25 18:31:22,433 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20Protected.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Protected.transfer)))
[2020-11-25 18:31:22,445 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20Protected.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Protected.transfer)))
[2020-11-25 18:31:22,458 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender!=to_s717 && ( value_s717>_balances_ERC20[this][msg.sender] || ( _balances_ERC20[this][to_s717] + value_s717 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && value_s717>=0 ) && value_s717<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s717]>=0 ) && _balances_ERC20[this][to_s717]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>],IdentifierExpression[to_s717,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[value_s717,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]],[IdentifierExpression[to_s717,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]],IdentifierExpression[value_s717,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s717,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s717,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]],[IdentifierExpression[to_s717,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]],[IdentifierExpression[to_s717,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Protected>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 18:31:22,465 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20Protected.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Protected.transfer)))
[2020-11-25 18:31:22,465 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC20Protected0) ==> ( <>AP(fail_transfer_ERC20Protected0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 18:31:22,477 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:31:22 PropertyContainer
[2020-11-25 18:31:22,477 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 18:31:22,477 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 18:31:22,477 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 18:31:22,478 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 18:31:22,478 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:31:22" (1/2) ...
[2020-11-25 18:31:22,479 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 18:31:22,479 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 18:31:22,501 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:31:22" (2/2) ...
[2020-11-25 18:31:22,501 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 18:31:22,502 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 18:31:22,502 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 18:31:22,502 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 18:31:22,503 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:31:22" (1/2) ...
[2020-11-25 18:31:22,562 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 18:31:22,562 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 18:31:22,563 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 18:31:22,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 18:31:22,563 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 18:31:22,563 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 18:31:22,563 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 18:31:22,563 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 18:31:22,563 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 18:31:22,563 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 18:31:22,563 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 18:31:22,564 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 18:31:22,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 18:31:22,564 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 18:31:22,564 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 18:31:22,564 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 18:31:22,564 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 18:31:22,565 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 18:31:22,565 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 18:31:22,565 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 18:31:22,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 18:31:22,565 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 18:31:22,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 18:31:22,565 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 18:31:22,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 18:31:22,566 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 18:31:22,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 18:31:22,566 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 18:31:22,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 18:31:22,566 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 18:31:22,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 18:31:22,566 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 18:31:22,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 18:31:22,566 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 18:31:22,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 18:31:22,567 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 18:31:22,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 18:31:22,567 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 18:31:22,567 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 18:31:22,567 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 18:31:22,567 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 18:31:22,567 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 18:31:22,567 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 18:31:22,567 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 18:31:22,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 18:31:22,568 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 18:31:22,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 18:31:22,568 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable
[2020-11-25 18:31:22,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable
[2020-11-25 18:31:22,568 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-25 18:31:22,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-25 18:31:22,568 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 18:31:22,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 18:31:22,568 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 18:31:22,568 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Protected_ERC20Protected_NoBaseCtor__success
[2020-11-25 18:31:22,569 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Protected_ERC20Protected
[2020-11-25 18:31:22,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Protected_ERC20Protected
[2020-11-25 18:31:22,569 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ERC20Protected__success
[2020-11-25 18:31:22,569 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Protected
[2020-11-25 18:31:22,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Protected
[2020-11-25 18:31:22,569 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Protected
[2020-11-25 18:31:22,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Protected
[2020-11-25 18:31:22,569 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success
[2020-11-25 18:31:22,569 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20DetailedChangeable_ERC20DetailedChangeable
[2020-11-25 18:31:22,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20DetailedChangeable_ERC20DetailedChangeable
[2020-11-25 18:31:22,569 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20DetailedChangeable
[2020-11-25 18:31:22,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20DetailedChangeable
[2020-11-25 18:31:22,570 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20DetailedChangeable
[2020-11-25 18:31:22,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20DetailedChangeable
[2020-11-25 18:31:22,570 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20DetailedChangeable
[2020-11-25 18:31:22,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20DetailedChangeable
[2020-11-25 18:31:22,570 INFO  L130     BoogieDeclarations]: Found specification of procedure setName~string_ERC20DetailedChangeable
[2020-11-25 18:31:22,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure setName~string_ERC20DetailedChangeable
[2020-11-25 18:31:22,570 INFO  L130     BoogieDeclarations]: Found specification of procedure setSymbol~string_ERC20DetailedChangeable
[2020-11-25 18:31:22,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure setSymbol~string_ERC20DetailedChangeable
[2020-11-25 18:31:22,570 INFO  L130     BoogieDeclarations]: Found specification of procedure ISF_ISF_NoBaseCtor__success
[2020-11-25 18:31:22,570 INFO  L130     BoogieDeclarations]: Found specification of procedure ISF_ISF
[2020-11-25 18:31:22,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure ISF_ISF
[2020-11-25 18:31:22,571 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_ISF
[2020-11-25 18:31:22,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_ISF
[2020-11-25 18:31:22,571 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_ISF
[2020-11-25 18:31:22,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_ISF
[2020-11-25 18:31:22,571 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_ISF
[2020-11-25 18:31:22,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_ISF
[2020-11-25 18:31:22,571 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 18:31:22,571 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 18:31:22,571 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 18:31:22,571 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 18:31:22,571 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 18:31:22,571 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 18:31:22,571 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 18:31:22,571 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 18:31:22,572 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 18:31:22,572 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 18:31:22,572 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 18:31:22,572 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 18:31:22,572 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Protected
[2020-11-25 18:31:22,572 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Protected
[2020-11-25 18:31:22,572 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20DetailedChangeable
[2020-11-25 18:31:22,572 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20DetailedChangeable
[2020-11-25 18:31:22,572 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ISF
[2020-11-25 18:31:22,572 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 18:31:22,572 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 18:31:22,572 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 18:31:22,572 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 18:31:22,573 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 18:31:22,573 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 18:31:22,573 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 18:31:22,573 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 18:31:22,573 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 18:31:22,573 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 18:31:22,573 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 18:31:22,573 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 18:31:22,573 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 18:31:22,573 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 18:31:22,573 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 18:31:22,573 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 18:31:22,573 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 18:31:22,574 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 18:31:22,574 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 18:31:22,574 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 18:31:22,574 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 18:31:22,574 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 18:31:22,574 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 18:31:22,574 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 18:31:22,574 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 18:31:22,574 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 18:31:22,574 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 18:31:22,575 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 18:31:22,575 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 18:31:22,575 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 18:31:22,575 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 18:31:22,575 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 18:31:22,575 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 18:31:22,575 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 18:31:22,575 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 18:31:22,575 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 18:31:22,576 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 18:31:22,576 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 18:31:22,576 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 18:31:22,576 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 18:31:22,576 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 18:31:22,576 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 18:31:22,576 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__success
[2020-11-25 18:31:22,576 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__fail
[2020-11-25 18:31:22,576 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-25 18:31:22,577 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-25 18:31:22,577 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 18:31:22,577 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 18:31:22,577 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 18:31:22,577 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Protected_ERC20Protected_NoBaseCtor__fail
[2020-11-25 18:31:22,577 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Protected_ERC20Protected__success
[2020-11-25 18:31:22,577 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Protected_ERC20Protected__fail
[2020-11-25 18:31:22,577 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ERC20Protected__fail
[2020-11-25 18:31:22,577 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Protected__success
[2020-11-25 18:31:22,577 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Protected__fail
[2020-11-25 18:31:22,578 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Protected__success
[2020-11-25 18:31:22,578 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Protected__fail
[2020-11-25 18:31:22,578 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__fail
[2020-11-25 18:31:22,578 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20DetailedChangeable_ERC20DetailedChangeable__success
[2020-11-25 18:31:22,578 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20DetailedChangeable_ERC20DetailedChangeable__fail
[2020-11-25 18:31:22,578 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20DetailedChangeable__success
[2020-11-25 18:31:22,578 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20DetailedChangeable__fail
[2020-11-25 18:31:22,578 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20DetailedChangeable__success
[2020-11-25 18:31:22,578 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20DetailedChangeable__fail
[2020-11-25 18:31:22,578 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20DetailedChangeable__success
[2020-11-25 18:31:22,579 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20DetailedChangeable__fail
[2020-11-25 18:31:22,579 INFO  L130     BoogieDeclarations]: Found specification of procedure setName~string_ERC20DetailedChangeable__success
[2020-11-25 18:31:22,579 INFO  L130     BoogieDeclarations]: Found specification of procedure setName~string_ERC20DetailedChangeable__fail
[2020-11-25 18:31:22,579 INFO  L130     BoogieDeclarations]: Found specification of procedure setSymbol~string_ERC20DetailedChangeable__success
[2020-11-25 18:31:22,579 INFO  L130     BoogieDeclarations]: Found specification of procedure setSymbol~string_ERC20DetailedChangeable__fail
[2020-11-25 18:31:22,579 INFO  L130     BoogieDeclarations]: Found specification of procedure ISF_ISF_NoBaseCtor__fail
[2020-11-25 18:31:22,579 INFO  L130     BoogieDeclarations]: Found specification of procedure ISF_ISF__success
[2020-11-25 18:31:22,579 INFO  L130     BoogieDeclarations]: Found specification of procedure ISF_ISF__fail
[2020-11-25 18:31:22,579 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_ISF__success
[2020-11-25 18:31:22,579 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_ISF__fail
[2020-11-25 18:31:22,580 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_ISF__success
[2020-11-25 18:31:22,580 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_ISF__fail
[2020-11-25 18:31:22,580 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_ISF__success
[2020-11-25 18:31:22,580 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_ISF__fail
[2020-11-25 18:31:22,580 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 18:31:22,580 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 18:31:22,580 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 18:31:22,580 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 18:31:22,580 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 18:31:22,580 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 18:31:22,580 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 18:31:22,580 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 18:31:22,581 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 18:31:22,581 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 18:31:22,581 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 18:31:22,581 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 18:31:22,581 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 18:31:22,581 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 18:31:22,581 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 18:31:22,581 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 18:31:22,581 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 18:31:22,581 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 18:31:22,581 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 18:31:22,581 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 18:31:22,582 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 18:31:22,582 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 18:31:22,582 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 18:31:22,582 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 18:31:22,582 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 18:31:22,582 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 18:31:22,582 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 18:31:22,582 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 18:31:22,582 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 18:31:22,582 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 18:31:22,582 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 18:31:22,582 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 18:31:22,583 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 18:31:22,583 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 18:31:22,583 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 18:31:22,583 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 18:31:22,583 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 18:31:22,583 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 18:31:22,583 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 18:31:22,583 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 18:31:22,583 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 18:31:22,583 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 18:31:22,583 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 18:31:22,584 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 18:31:22,584 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 18:31:22,584 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 18:31:22,584 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 18:31:22,584 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 18:31:22,584 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 18:31:22,584 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 18:31:22,584 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 18:31:22,584 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 18:31:22,584 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 18:31:22,584 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 18:31:22,584 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 18:31:22,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 18:31:22,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 18:31:22,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 18:31:22,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 18:31:22,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 18:31:22,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__fail
[2020-11-25 18:31:22,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__success
[2020-11-25 18:31:22,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-25 18:31:22,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-25 18:31:22,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 18:31:22,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 18:31:22,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 18:31:22,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 18:31:22,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Protected_ERC20Protected_NoBaseCtor__fail
[2020-11-25 18:31:22,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Protected_ERC20Protected_NoBaseCtor__success
[2020-11-25 18:31:22,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Protected_ERC20Protected__fail
[2020-11-25 18:31:22,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Protected_ERC20Protected__success
[2020-11-25 18:31:22,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ERC20Protected__fail
[2020-11-25 18:31:22,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ERC20Protected__success
[2020-11-25 18:31:22,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Protected__fail
[2020-11-25 18:31:22,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Protected__success
[2020-11-25 18:31:22,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Protected__fail
[2020-11-25 18:31:22,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Protected__success
[2020-11-25 18:31:22,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__fail
[2020-11-25 18:31:22,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success
[2020-11-25 18:31:22,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20DetailedChangeable_ERC20DetailedChangeable__fail
[2020-11-25 18:31:22,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20DetailedChangeable_ERC20DetailedChangeable__success
[2020-11-25 18:31:22,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20DetailedChangeable__fail
[2020-11-25 18:31:22,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20DetailedChangeable__success
[2020-11-25 18:31:22,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20DetailedChangeable__fail
[2020-11-25 18:31:22,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20DetailedChangeable__success
[2020-11-25 18:31:22,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20DetailedChangeable__fail
[2020-11-25 18:31:22,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20DetailedChangeable__success
[2020-11-25 18:31:22,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure setName~string_ERC20DetailedChangeable__fail
[2020-11-25 18:31:22,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure setName~string_ERC20DetailedChangeable__success
[2020-11-25 18:31:22,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure setSymbol~string_ERC20DetailedChangeable__fail
[2020-11-25 18:31:22,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure setSymbol~string_ERC20DetailedChangeable__success
[2020-11-25 18:31:22,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure ISF_ISF_NoBaseCtor__fail
[2020-11-25 18:31:22,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure ISF_ISF_NoBaseCtor__success
[2020-11-25 18:31:22,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure ISF_ISF__fail
[2020-11-25 18:31:22,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure ISF_ISF__success
[2020-11-25 18:31:22,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_ISF__fail
[2020-11-25 18:31:22,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_ISF__success
[2020-11-25 18:31:22,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_ISF__fail
[2020-11-25 18:31:22,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_ISF__success
[2020-11-25 18:31:22,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_ISF__fail
[2020-11-25 18:31:22,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_ISF__success
[2020-11-25 18:31:22,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 18:31:22,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 18:31:22,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 18:31:22,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 18:31:22,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 18:31:22,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 18:31:22,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 18:31:22,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 18:31:22,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 18:31:22,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 18:31:22,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 18:31:22,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 18:31:22,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 18:31:22,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 18:31:22,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 18:31:22,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 18:31:22,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Protected
[2020-11-25 18:31:22,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Protected
[2020-11-25 18:31:22,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20DetailedChangeable
[2020-11-25 18:31:22,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20DetailedChangeable
[2020-11-25 18:31:22,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ISF
[2020-11-25 18:31:22,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 18:31:22,592 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 18:31:22,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 18:31:23,362 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 18:31:23,362 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 18:31:23,455 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 18:31:23,455 INFO  L286             CfgBuilder]: Removed 7 assue(true) statements.
[2020-11-25 18:31:23,457 INFO  L202        PluginConnector]: Adding new model ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:31:23 BoogieIcfgContainer
[2020-11-25 18:31:23,457 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:31:22" (2/2) ...
[2020-11-25 18:31:23,457 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 18:31:23,458 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@34df8d90 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:31:23, skipping insertion in model container
[2020-11-25 18:31:23,458 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 18:31:23,458 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 18:31:23,458 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 18:31:23,459 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 18:31:23,460 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:31:22" (1/3) ...
[2020-11-25 18:31:23,460 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@11d21f5e and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:31:23, skipping insertion in model container
[2020-11-25 18:31:23,460 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:31:22" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 18:31:23,499 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:31:23 NWAContainer
[2020-11-25 18:31:23,499 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 18:31:23,500 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 18:31:23,500 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 18:31:23,501 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 18:31:23,501 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:31:23" (3/4) ...
[2020-11-25 18:31:23,502 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@6d9599e8 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:31:23, skipping insertion in model container
[2020-11-25 18:31:23,502 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:31:23" (4/4) ...
[2020-11-25 18:31:23,505 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 18:31:23,510 INFO  L110   BuchiProductObserver]: Initial RCFG 2331 locations, 3367 edges
[2020-11-25 18:31:23,510 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 18:31:23,522 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 18:31:25,185 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 18:31:25,195 INFO  L110   BuchiProductObserver]: BuchiProgram size 5986 locations, 11105 edges
[2020-11-25 18:31:25,196 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:31:25 BoogieIcfgContainer
[2020-11-25 18:31:25,196 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 18:31:25,196 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 18:31:25,196 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 18:31:25,198 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 18:31:25,198 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:31:25" (1/1) ...
[2020-11-25 18:31:25,324 INFO  L313           BlockEncoder]: Initial Icfg 5986 locations, 11105 edges
[2020-11-25 18:31:25,325 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 18:31:25,325 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 18:31:25,325 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 18:31:25,325 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 18:31:25,337 INFO  L70    emoveInfeasibleEdges]: Removed 150 edges and 18 locations because of local infeasibility
[2020-11-25 18:31:25,345 INFO  L70        RemoveSinkStates]: Removed 164 edges and 94 locations by removing sink states
[2020-11-25 18:31:25,356 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 18:31:25,359 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 18:31:25,363 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 18:31:25,364 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 18:31:25,366 INFO  L313           BlockEncoder]: Encoded RCFG 5842 locations, 10744 edges
[2020-11-25 18:31:25,367 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:31:25 BasicIcfg
[2020-11-25 18:31:25,367 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 18:31:25,367 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 18:31:25,367 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 18:31:25,369 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 18:31:25,369 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:31:25,369 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:31:22" (1/6) ...
[2020-11-25 18:31:25,370 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@d506b2a and model type ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:31:25, skipping insertion in model container
[2020-11-25 18:31:25,371 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:31:25,371 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:31:22" (2/6) ...
[2020-11-25 18:31:25,371 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@d506b2a and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:31:25, skipping insertion in model container
[2020-11-25 18:31:25,371 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:31:25,371 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:31:23" (3/6) ...
[2020-11-25 18:31:25,371 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@d506b2a and model type ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 06:31:25, skipping insertion in model container
[2020-11-25 18:31:25,371 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:31:25,371 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:31:23" (4/6) ...
[2020-11-25 18:31:25,371 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@d506b2a and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:31:25, skipping insertion in model container
[2020-11-25 18:31:25,371 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:31:25,371 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:31:25" (5/6) ...
[2020-11-25 18:31:25,372 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@d506b2a and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 06:31:25, skipping insertion in model container
[2020-11-25 18:31:25,372 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:31:25,372 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:31:25" (6/6) ...
[2020-11-25 18:31:25,373 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ISF_0x3f9c0211e9ddfccabd614162ffb768f5a7a8ab38_transfer-fail.bpl_BEv2
[2020-11-25 18:31:25,398 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 18:31:25,398 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 18:31:25,398 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 18:31:25,398 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 18:31:25,399 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 18:31:25,399 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 18:31:25,399 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 18:31:25,399 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 18:31:25,399 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 18:31:25,435 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5842 states.
[2020-11-25 18:31:25,484 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:31:25,484 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:31:25,484 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:31:25,491 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:31:25,491 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:31:25,491 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 18:31:25,491 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5842 states.
[2020-11-25 18:31:25,514 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:31:25,514 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:31:25,514 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:31:25,516 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:31:25,516 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC20Protected0 := false;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND TRUE   revert
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND FALSE  !(gas >= 0)
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:31:25,530 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:31:25,530 INFO  L82        PathProgramCache]: Analyzing trace with hash 97940999, now seen corresponding path program 1 times
[2020-11-25 18:31:25,536 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:31:25,557 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:31:25,603 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 18:31:25,605 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:31:25,605 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 18:31:25,947 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:31:25,955 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 18:31:25,956 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 18:31:25,957 INFO  L87              Difference]: Start difference. First operand 5842 states. Second operand 4 states.
[2020-11-25 18:31:26,496 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:31:26,496 INFO  L93              Difference]: Finished difference Result 3121 states and 3692 transitions.
[2020-11-25 18:31:26,497 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 18:31:26,498 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3121 states and 3692 transitions.
[2020-11-25 18:31:26,514 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:31:26,540 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3121 states to 3121 states and 3692 transitions.
[2020-11-25 18:31:26,541 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 18:31:26,544 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1115
[2020-11-25 18:31:26,544 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3121 states and 3692 transitions.
[2020-11-25 18:31:26,552 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:31:26,552 INFO  L728         BuchiCegarLoop]: Abstraction has 3121 states and 3692 transitions.
[2020-11-25 18:31:26,565 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3121 states and 3692 transitions.
[2020-11-25 18:31:26,613 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3121 to 3121.
[2020-11-25 18:31:26,613 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3121 states.
[2020-11-25 18:31:26,619 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3121 states to 3121 states and 3692 transitions.
[2020-11-25 18:31:26,619 INFO  L751         BuchiCegarLoop]: Abstraction has 3121 states and 3692 transitions.
[2020-11-25 18:31:26,619 INFO  L631         BuchiCegarLoop]: Abstraction has 3121 states and 3692 transitions.
[2020-11-25 18:31:26,619 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 18:31:26,619 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3121 states and 3692 transitions.
[2020-11-25 18:31:26,627 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:31:26,627 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:31:26,627 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:31:26,628 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:31:26,628 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC20Protected0 := false;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND TRUE   revert
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s717 && (value_s717 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s717] + value_s717 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND TRUE   !(to_s717 != this)
[L3756]              revert := true;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s717 && (value_s717 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s717] + value_s717 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND TRUE   !(to_s717 != this)
[L3756]              revert := true;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:31:26,632 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:31:26,632 INFO  L82        PathProgramCache]: Analyzing trace with hash -57823114, now seen corresponding path program 1 times
[2020-11-25 18:31:26,633 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:31:26,644 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:31:26,659 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 18:31:26,659 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:31:26,659 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 18:31:26,660 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:31:26,661 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 18:31:26,661 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 18:31:26,661 INFO  L87              Difference]: Start difference. First operand 3121 states and 3692 transitions. cyclomatic complexity: 573 Second operand 3 states.
[2020-11-25 18:31:26,743 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:31:26,743 INFO  L93              Difference]: Finished difference Result 4097 states and 4876 transitions.
[2020-11-25 18:31:26,743 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 18:31:26,743 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4097 states and 4876 transitions.
[2020-11-25 18:31:26,758 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:31:26,775 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4097 states to 4097 states and 4876 transitions.
[2020-11-25 18:31:26,775 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1451
[2020-11-25 18:31:26,776 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1451
[2020-11-25 18:31:26,776 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4097 states and 4876 transitions.
[2020-11-25 18:31:26,781 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:31:26,781 INFO  L728         BuchiCegarLoop]: Abstraction has 4097 states and 4876 transitions.
[2020-11-25 18:31:26,785 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4097 states and 4876 transitions.
[2020-11-25 18:31:26,818 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4097 to 3646.
[2020-11-25 18:31:26,818 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3646 states.
[2020-11-25 18:31:26,822 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3646 states to 3646 states and 4329 transitions.
[2020-11-25 18:31:26,823 INFO  L751         BuchiCegarLoop]: Abstraction has 3646 states and 4329 transitions.
[2020-11-25 18:31:26,823 INFO  L631         BuchiCegarLoop]: Abstraction has 3646 states and 4329 transitions.
[2020-11-25 18:31:26,823 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 18:31:26,823 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3646 states and 4329 transitions.
[2020-11-25 18:31:26,830 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:31:26,830 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:31:26,830 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:31:26,836 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:31:26,836 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC20Protected0 := false;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND FALSE  !(revert)
[L4048]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L4048]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4049]  COND FALSE  !(revert)
[L4052]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L4052]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]  COND FALSE  !(revert)
[L4056]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L3880]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3880]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3881]  COND FALSE  !(revert)
[L3884]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3884]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3885]  COND FALSE  !(revert)
[L3888]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L3888]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3889]  COND FALSE  !(revert)
[L3892]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3847]              assume msgsender_MSG != null;
[L3848]              Balance[this] := 0;
[L3849]              _name_ERC20DetailedChangeable[this] := 929111217;
[L3850]              _symbol_ERC20DetailedChangeable[this] := 929111217;
[L3851]              _decimals_ERC20DetailedChangeable[this] := 0;
[L3853]              _name_ERC20DetailedChangeable[this] := name_s794;
[L3854]              _symbol_ERC20DetailedChangeable[this] := symbol_s794;
[L3855]              _decimals_ERC20DetailedChangeable[this] := decimals_s794;
[L3892]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3893]  COND FALSE  !(revert)
[L4056]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L4057]  COND FALSE  !(revert)
[L4060]  CALL        call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L3686]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3686]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3687]  COND FALSE  !(revert)
[L3690]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3690]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3691]  COND FALSE  !(revert)
[L3694]  CALL        call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3694]  RET         call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3695]  COND FALSE  !(revert)
[L4060]  RET         call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L4061]  COND FALSE  !(revert)
[L4064]  CALL        call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]              assume msgsender_MSG != null;
[L3997]              Balance[this] := 0;
[L3998]              DECIMALS_ISF[this] := 18;
[L3999]              __var_25 := DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4000]              INITIAL_SUPPLY_ISF[this] := 40000000000 * (nonlinearPow(10, DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4002]  COND TRUE   DType[this] == ISF
[L4003]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L3275]              __var_7 := null;
[L3276]  COND TRUE   !(account_s464 != null)
[L3277]              revert := true;
[L4003]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L4004]  COND TRUE   revert
[L4064]  RET         call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4065]  COND FALSE  !(revert)
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s717 && (value_s717 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s717] + value_s717 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND TRUE   !(to_s717 != this)
[L3756]              revert := true;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s717 && (value_s717 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s717] + value_s717 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND TRUE   !(to_s717 != this)
[L3756]              revert := true;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:31:26,845 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:31:26,846 INFO  L82        PathProgramCache]: Analyzing trace with hash -1977934833, now seen corresponding path program 1 times
[2020-11-25 18:31:26,846 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:31:26,865 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:31:26,962 INFO  L134       CoverageAnalysis]: Checked inductivity of 220 backedges. 0 proven. 35 refuted. 0 times theorem prover too weak. 185 trivial. 0 not checked.
[2020-11-25 18:31:26,962 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 18:31:26,962 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 18:31:26,963 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:31:26,963 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 18:31:26,963 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 18:31:26,964 INFO  L87              Difference]: Start difference. First operand 3646 states and 4329 transitions. cyclomatic complexity: 685 Second operand 7 states.
[2020-11-25 18:31:27,038 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:31:27,038 INFO  L93              Difference]: Finished difference Result 3654 states and 4336 transitions.
[2020-11-25 18:31:27,038 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 18:31:27,038 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3654 states and 4336 transitions.
[2020-11-25 18:31:27,049 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:31:27,062 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3654 states to 3645 states and 4327 transitions.
[2020-11-25 18:31:27,062 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1337
[2020-11-25 18:31:27,062 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1337
[2020-11-25 18:31:27,063 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3645 states and 4327 transitions.
[2020-11-25 18:31:27,066 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:31:27,066 INFO  L728         BuchiCegarLoop]: Abstraction has 3645 states and 4327 transitions.
[2020-11-25 18:31:27,070 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3645 states and 4327 transitions.
[2020-11-25 18:31:27,114 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3645 to 3645.
[2020-11-25 18:31:27,114 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3645 states.
[2020-11-25 18:31:27,118 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3645 states to 3645 states and 4327 transitions.
[2020-11-25 18:31:27,118 INFO  L751         BuchiCegarLoop]: Abstraction has 3645 states and 4327 transitions.
[2020-11-25 18:31:27,118 INFO  L631         BuchiCegarLoop]: Abstraction has 3645 states and 4327 transitions.
[2020-11-25 18:31:27,118 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 18:31:27,119 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3645 states and 4327 transitions.
[2020-11-25 18:31:27,124 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:31:27,124 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:31:27,124 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:31:27,126 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:31:27,126 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC20Protected0 := false;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND FALSE  !(revert)
[L4048]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L4048]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4049]  COND FALSE  !(revert)
[L4052]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L4052]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]  COND FALSE  !(revert)
[L4056]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L3880]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3880]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3881]  COND FALSE  !(revert)
[L3884]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3884]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3885]  COND FALSE  !(revert)
[L3888]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L3888]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3889]  COND FALSE  !(revert)
[L3892]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3847]              assume msgsender_MSG != null;
[L3848]              Balance[this] := 0;
[L3849]              _name_ERC20DetailedChangeable[this] := 929111217;
[L3850]              _symbol_ERC20DetailedChangeable[this] := 929111217;
[L3851]              _decimals_ERC20DetailedChangeable[this] := 0;
[L3853]              _name_ERC20DetailedChangeable[this] := name_s794;
[L3854]              _symbol_ERC20DetailedChangeable[this] := symbol_s794;
[L3855]              _decimals_ERC20DetailedChangeable[this] := decimals_s794;
[L3892]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3893]  COND FALSE  !(revert)
[L4056]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L4057]  COND FALSE  !(revert)
[L4060]  CALL        call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L3686]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3686]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3687]  COND FALSE  !(revert)
[L3690]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3690]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3691]  COND FALSE  !(revert)
[L3694]  CALL        call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3694]  RET         call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3695]  COND FALSE  !(revert)
[L4060]  RET         call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L4061]  COND FALSE  !(revert)
[L4064]  CALL        call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]              assume msgsender_MSG != null;
[L3997]              Balance[this] := 0;
[L3998]              DECIMALS_ISF[this] := 18;
[L3999]              __var_25 := DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4000]              INITIAL_SUPPLY_ISF[this] := 40000000000 * (nonlinearPow(10, DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4002]  COND TRUE   DType[this] == ISF
[L4003]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L3275]              __var_7 := null;
[L3276]  COND FALSE  !(!(account_s464 != null))
[L3280]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND TRUE   !(c_s174 >= a_s174)
[L2714]              revert := true;
[L3280]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L3281]  COND TRUE   revert
[L4003]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L4004]  COND TRUE   revert
[L4064]  RET         call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4065]  COND FALSE  !(revert)
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s717 && (value_s717 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s717] + value_s717 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND TRUE   !(to_s717 != this)
[L3756]              revert := true;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s717 && (value_s717 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s717] + value_s717 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND TRUE   !(to_s717 != this)
[L3756]              revert := true;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:31:27,133 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:31:27,133 INFO  L82        PathProgramCache]: Analyzing trace with hash 933532604, now seen corresponding path program 1 times
[2020-11-25 18:31:27,133 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:31:27,144 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:31:27,186 INFO  L134       CoverageAnalysis]: Checked inductivity of 220 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 220 trivial. 0 not checked.
[2020-11-25 18:31:27,186 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:31:27,186 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 18:31:27,187 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:31:27,187 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 18:31:27,187 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 18:31:27,187 INFO  L87              Difference]: Start difference. First operand 3645 states and 4327 transitions. cyclomatic complexity: 684 Second operand 3 states.
[2020-11-25 18:31:27,239 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:31:27,239 INFO  L93              Difference]: Finished difference Result 4093 states and 4701 transitions.
[2020-11-25 18:31:27,239 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 18:31:27,239 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4093 states and 4701 transitions.
[2020-11-25 18:31:27,250 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:31:27,263 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4093 states to 3760 states and 4297 transitions.
[2020-11-25 18:31:27,263 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1321
[2020-11-25 18:31:27,264 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1321
[2020-11-25 18:31:27,264 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3760 states and 4297 transitions.
[2020-11-25 18:31:27,268 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:31:27,268 INFO  L728         BuchiCegarLoop]: Abstraction has 3760 states and 4297 transitions.
[2020-11-25 18:31:27,271 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3760 states and 4297 transitions.
[2020-11-25 18:31:27,299 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3760 to 3389.
[2020-11-25 18:31:27,299 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3389 states.
[2020-11-25 18:31:27,303 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3389 states to 3389 states and 3832 transitions.
[2020-11-25 18:31:27,303 INFO  L751         BuchiCegarLoop]: Abstraction has 3389 states and 3832 transitions.
[2020-11-25 18:31:27,303 INFO  L631         BuchiCegarLoop]: Abstraction has 3389 states and 3832 transitions.
[2020-11-25 18:31:27,303 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 18:31:27,303 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3389 states and 3832 transitions.
[2020-11-25 18:31:27,308 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:31:27,308 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:31:27,308 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:31:27,310 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:31:27,310 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC20Protected0 := false;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND FALSE  !(revert)
[L4048]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L4048]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4049]  COND FALSE  !(revert)
[L4052]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L4052]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]  COND FALSE  !(revert)
[L4056]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L3880]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3880]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3881]  COND FALSE  !(revert)
[L3884]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3884]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3885]  COND FALSE  !(revert)
[L3888]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L3888]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3889]  COND FALSE  !(revert)
[L3892]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3847]              assume msgsender_MSG != null;
[L3848]              Balance[this] := 0;
[L3849]              _name_ERC20DetailedChangeable[this] := 929111217;
[L3850]              _symbol_ERC20DetailedChangeable[this] := 929111217;
[L3851]              _decimals_ERC20DetailedChangeable[this] := 0;
[L3853]              _name_ERC20DetailedChangeable[this] := name_s794;
[L3854]              _symbol_ERC20DetailedChangeable[this] := symbol_s794;
[L3855]              _decimals_ERC20DetailedChangeable[this] := decimals_s794;
[L3892]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3893]  COND FALSE  !(revert)
[L4056]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L4057]  COND FALSE  !(revert)
[L4060]  CALL        call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L3686]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3686]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3687]  COND FALSE  !(revert)
[L3690]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3690]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3691]  COND FALSE  !(revert)
[L3694]  CALL        call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3694]  RET         call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3695]  COND FALSE  !(revert)
[L4060]  RET         call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L4061]  COND FALSE  !(revert)
[L4064]  CALL        call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]              assume msgsender_MSG != null;
[L3997]              Balance[this] := 0;
[L3998]              DECIMALS_ISF[this] := 18;
[L3999]              __var_25 := DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4000]              INITIAL_SUPPLY_ISF[this] := 40000000000 * (nonlinearPow(10, DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4002]  COND TRUE   DType[this] == ISF
[L4003]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L3275]              __var_7 := null;
[L3276]  COND FALSE  !(!(account_s464 != null))
[L3280]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3280]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L3281]  COND FALSE  !(revert)
[L3284]              _totalSupply_ERC20[this] := __var_8;
[L3285]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3285]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L3286]  COND FALSE  !(revert)
[L3289]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L3290]              _balances_ERC20[this][account_s464] := __var_9;
[L3291]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L3292]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4003]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L4004]  COND FALSE  !(revert)
[L4064]  RET         call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4065]  COND FALSE  !(revert)
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s717 && (value_s717 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s717] + value_s717 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND FALSE  !(!(to_s717 != this))
[L3759]  COND TRUE   DType[this] == ISF
[L3760]  CALL        call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2858]  COND TRUE   DType[this] == ISF
[L2859]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2859]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2860]  COND FALSE  !(revert)
[L2881]              __ret_0_ := true;
[L3760]  RET         call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3761]  COND FALSE  !(revert)
[L3772]              __ret_0_ := __var_20;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s717 && (value_s717 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s717] + value_s717 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND FALSE  !(!(to_s717 != this))
[L3759]  COND TRUE   DType[this] == ISF
[L3760]  CALL        call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2858]  COND TRUE   DType[this] == ISF
[L2859]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2859]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2860]  COND FALSE  !(revert)
[L2881]              __ret_0_ := true;
[L3760]  RET         call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3761]  COND FALSE  !(revert)
[L3772]              __ret_0_ := __var_20;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:31:27,314 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:31:27,314 INFO  L82        PathProgramCache]: Analyzing trace with hash -2059469216, now seen corresponding path program 1 times
[2020-11-25 18:31:27,315 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:31:27,332 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:31:27,647 INFO  L134       CoverageAnalysis]: Checked inductivity of 225 backedges. 20 proven. 0 refuted. 0 times theorem prover too weak. 205 trivial. 0 not checked.
[2020-11-25 18:31:27,647 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:31:27,648 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [21] imperfect sequences [] total 21
[2020-11-25 18:31:27,648 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:31:27,648 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-25 18:31:27,648 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=56, Invalid=406, Unknown=0, NotChecked=0, Total=462
[2020-11-25 18:31:27,649 INFO  L87              Difference]: Start difference. First operand 3389 states and 3832 transitions. cyclomatic complexity: 445 Second operand 22 states.
[2020-11-25 18:31:31,480 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:31:31,481 INFO  L93              Difference]: Finished difference Result 3461 states and 3916 transitions.
[2020-11-25 18:31:31,481 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 18:31:31,481 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3461 states and 3916 transitions.
[2020-11-25 18:31:31,491 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:31:31,504 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3461 states to 3461 states and 3916 transitions.
[2020-11-25 18:31:31,504 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1249
[2020-11-25 18:31:31,505 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1249
[2020-11-25 18:31:31,505 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3461 states and 3916 transitions.
[2020-11-25 18:31:31,509 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:31:31,509 INFO  L728         BuchiCegarLoop]: Abstraction has 3461 states and 3916 transitions.
[2020-11-25 18:31:31,513 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3461 states and 3916 transitions.
[2020-11-25 18:31:31,543 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3461 to 3270.
[2020-11-25 18:31:31,544 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3270 states.
[2020-11-25 18:31:31,548 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3270 states to 3270 states and 3678 transitions.
[2020-11-25 18:31:31,548 INFO  L751         BuchiCegarLoop]: Abstraction has 3270 states and 3678 transitions.
[2020-11-25 18:31:31,548 INFO  L631         BuchiCegarLoop]: Abstraction has 3270 states and 3678 transitions.
[2020-11-25 18:31:31,548 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 18:31:31,548 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3270 states and 3678 transitions.
[2020-11-25 18:31:31,554 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:31:31,554 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:31:31,554 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:31:31,558 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:31:31,558 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC20Protected0 := false;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND TRUE   __exception
[L1616]              __tmp__Balance := Balance;
[L1617]              __tmp__DType := DType;
[L1618]              __tmp__Alloc := Alloc;
[L1619]              __tmp__balance_ADDR := balance_ADDR;
[L1620]              __tmp__M_Ref_int := M_Ref_int;
[L1621]              __tmp__sum__balances0 := sum__balances0;
[L1622]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1623]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1624]              __tmp__sum__allowed1 := sum__allowed1;
[L1625]              __tmp__Length := Length;
[L1626]              __tmp__now := now;
[L1627]              __tmp___balances_ERC20 := _balances_ERC20;
[L1628]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1629]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1630]              __tmp___owner_Ownable := _owner_Ownable;
[L1631]              __tmp___name_ERC20DetailedChangeable := _name_ERC20DetailedChangeable;
[L1632]              __tmp___symbol_ERC20DetailedChangeable := _symbol_ERC20DetailedChangeable;
[L1633]              __tmp___decimals_ERC20DetailedChangeable := _decimals_ERC20DetailedChangeable;
[L1634]              __tmp__DECIMALS_ISF := DECIMALS_ISF;
[L1635]              __tmp__INITIAL_SUPPLY_ISF := INITIAL_SUPPLY_ISF;
[L1636]  CALL        call ISF_ISF__fail(this, msgsender_MSG, msgvalue_MSG);
[L4015]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2571]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2556]              assume msgsender_MSG != null;
[L2557]              __tmp__Balance[this] := 0;
[L2571]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2572]  COND FALSE  !(revert)
[L4015]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4016]  COND FALSE  !(revert)
[L4019]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2769]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2571]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2556]              assume msgsender_MSG != null;
[L2557]              __tmp__Balance[this] := 0;
[L2571]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2572]  COND FALSE  !(revert)
[L2769]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2770]  COND FALSE  !(revert)
[L2773]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2744]              assume msgsender_MSG != null;
[L2745]              __tmp__Balance[this] := 0;
[L2746]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2747]              __tmp__sum__balances0[this] := 0;
[L2748]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L2749]              __tmp__sum__allowed1[this] := 0;
[L2750]              __tmp___totalSupply_ERC20[this] := 0;
[L2773]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2774]  COND FALSE  !(revert)
[L4019]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4020]  COND FALSE  !(revert)
[L4023]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3516]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3496]              assume msgsender_MSG != null;
[L3497]              __tmp__Balance[this] := 0;
[L3498]              __tmp___owner_Ownable[this] := null;
[L3500]              __tmp___owner_Ownable[this] := msgsender_MSG;
[L3516]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3517]  COND FALSE  !(revert)
[L4023]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4024]  COND FALSE  !(revert)
[L4027]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable__fail(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, __tmp__DECIMALS_ISF[this]);
[L3860]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2571]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2556]              assume msgsender_MSG != null;
[L2557]              __tmp__Balance[this] := 0;
[L2571]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2572]  COND FALSE  !(revert)
[L3860]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3861]  COND FALSE  !(revert)
[L3864]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2769]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2571]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2556]              assume msgsender_MSG != null;
[L2557]              __tmp__Balance[this] := 0;
[L2571]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2572]  COND FALSE  !(revert)
[L2769]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2770]  COND FALSE  !(revert)
[L2773]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2744]              assume msgsender_MSG != null;
[L2745]              __tmp__Balance[this] := 0;
[L2746]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2747]              __tmp__sum__balances0[this] := 0;
[L2748]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L2749]              __tmp__sum__allowed1[this] := 0;
[L2750]              __tmp___totalSupply_ERC20[this] := 0;
[L2773]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2774]  COND FALSE  !(revert)
[L3864]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3865]  COND FALSE  !(revert)
[L3868]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3516]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3496]              assume msgsender_MSG != null;
[L3497]              __tmp__Balance[this] := 0;
[L3498]              __tmp___owner_Ownable[this] := null;
[L3500]              __tmp___owner_Ownable[this] := msgsender_MSG;
[L3516]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3517]  COND FALSE  !(revert)
[L3868]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3869]  COND FALSE  !(revert)
[L3872]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3833]              assume msgsender_MSG != null;
[L3834]              __tmp__Balance[this] := 0;
[L3835]              __tmp___name_ERC20DetailedChangeable[this] := 929111217;
[L3836]              __tmp___symbol_ERC20DetailedChangeable[this] := 929111217;
[L3837]              __tmp___decimals_ERC20DetailedChangeable[this] := 0;
[L3839]              __tmp___name_ERC20DetailedChangeable[this] := name_s794;
[L3840]              __tmp___symbol_ERC20DetailedChangeable[this] := symbol_s794;
[L3841]              __tmp___decimals_ERC20DetailedChangeable[this] := decimals_s794;
[L3872]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3873]  COND FALSE  !(revert)
[L4027]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable__fail(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, __tmp__DECIMALS_ISF[this]);
[L4028]  COND FALSE  !(revert)
[L4031]  CALL        call ERC20Protected_ERC20Protected__fail(this, msgsender_MSG, msgvalue_MSG);
[L3670]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2571]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2556]              assume msgsender_MSG != null;
[L2557]              __tmp__Balance[this] := 0;
[L2571]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2572]  COND FALSE  !(revert)
[L3670]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3671]  COND FALSE  !(revert)
[L3674]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2769]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2571]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2556]              assume msgsender_MSG != null;
[L2557]              __tmp__Balance[this] := 0;
[L2571]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2572]  COND FALSE  !(revert)
[L2769]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2770]  COND FALSE  !(revert)
[L2773]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2744]              assume msgsender_MSG != null;
[L2745]              __tmp__Balance[this] := 0;
[L2746]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2747]              __tmp__sum__balances0[this] := 0;
[L2748]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L2749]              __tmp__sum__allowed1[this] := 0;
[L2750]              __tmp___totalSupply_ERC20[this] := 0;
[L2773]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2774]  COND FALSE  !(revert)
[L3674]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3675]  COND FALSE  !(revert)
[L3678]  CALL        call ERC20Protected_ERC20Protected_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3655]              assume msgsender_MSG != null;
[L3656]              __tmp__Balance[this] := 0;
[L3678]  RET         call ERC20Protected_ERC20Protected_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3679]  COND FALSE  !(revert)
[L4031]  RET         call ERC20Protected_ERC20Protected__fail(this, msgsender_MSG, msgvalue_MSG);
[L4032]  COND FALSE  !(revert)
[L4035]  CALL        call ISF_ISF_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3976]              assume msgsender_MSG != null;
[L3977]              __tmp__Balance[this] := 0;
[L3978]              __tmp__DECIMALS_ISF[this] := 18;
[L3979]              __var_25 := __tmp__DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3980]              __tmp__INITIAL_SUPPLY_ISF[this] := 40000000000 * (nonlinearPow(10, __tmp__DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3982]  COND TRUE   __tmp__DType[this] == ISF
[L3983]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_ISF[this]);
[L3251]              __var_7 := null;
[L3252]  COND FALSE  !(!(account_s464 != null))
[L3256]  CALL        call __var_8 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s464);
[L2700]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2701]  COND FALSE  !(!(c_s174 >= a_s174))
[L2705]              __ret_0_ := c_s174;
[L3256]  RET         call __var_8 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s464);
[L3257]  COND FALSE  !(revert)
[L3260]              __tmp___totalSupply_ERC20[this] := __var_8;
[L3261]  CALL        call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s464], value_s464);
[L2700]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2701]  COND FALSE  !(!(c_s174 >= a_s174))
[L2705]              __ret_0_ := c_s174;
[L3261]  RET         call __var_9 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s464], value_s464);
[L3262]  COND FALSE  !(revert)
[L3265]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s464];
[L3266]              __tmp___balances_ERC20[this][account_s464] := __var_9;
[L3267]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s464];
[L3983]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_ISF[this]);
[L3984]  COND FALSE  !(revert)
[L4035]  RET         call ISF_ISF_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4036]  COND FALSE  !(revert)
[L1636]  RET         call ISF_ISF__fail(this, msgsender_MSG, msgvalue_MSG);
[L1637]              assume revert || gas < 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s717 && (value_s717 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s717] + value_s717 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND FALSE  !(!(to_s717 != this))
[L3759]  COND TRUE   DType[this] == ISF
[L3760]  CALL        call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2858]  COND TRUE   DType[this] == ISF
[L2859]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2859]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2860]  COND FALSE  !(revert)
[L2881]              __ret_0_ := true;
[L3760]  RET         call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3761]  COND FALSE  !(revert)
[L3772]              __ret_0_ := __var_20;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND FALSE  !(gas >= 0)
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:31:31,564 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:31:31,564 INFO  L82        PathProgramCache]: Analyzing trace with hash 19760112, now seen corresponding path program 1 times
[2020-11-25 18:31:31,565 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:31:31,583 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:31:31,651 INFO  L134       CoverageAnalysis]: Checked inductivity of 224 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 224 trivial. 0 not checked.
[2020-11-25 18:31:31,652 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:31:31,652 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 18:31:31,652 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:31:31,652 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 18:31:31,652 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 18:31:31,653 INFO  L87              Difference]: Start difference. First operand 3270 states and 3678 transitions. cyclomatic complexity: 411 Second operand 4 states.
[2020-11-25 18:31:31,747 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:31:31,747 INFO  L93              Difference]: Finished difference Result 4081 states and 4701 transitions.
[2020-11-25 18:31:31,747 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 18:31:31,747 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4081 states and 4701 transitions.
[2020-11-25 18:31:31,755 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 18:31:31,766 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4081 states to 3912 states and 4524 transitions.
[2020-11-25 18:31:31,766 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1385
[2020-11-25 18:31:31,766 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1385
[2020-11-25 18:31:31,766 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3912 states and 4524 transitions.
[2020-11-25 18:31:31,769 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:31:31,769 INFO  L728         BuchiCegarLoop]: Abstraction has 3912 states and 4524 transitions.
[2020-11-25 18:31:31,772 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3912 states and 4524 transitions.
[2020-11-25 18:31:31,791 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3912 to 3101.
[2020-11-25 18:31:31,791 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3101 states.
[2020-11-25 18:31:31,794 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3101 states to 3101 states and 3500 transitions.
[2020-11-25 18:31:31,794 INFO  L751         BuchiCegarLoop]: Abstraction has 3101 states and 3500 transitions.
[2020-11-25 18:31:31,794 INFO  L631         BuchiCegarLoop]: Abstraction has 3101 states and 3500 transitions.
[2020-11-25 18:31:31,794 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 18:31:31,794 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3101 states and 3500 transitions.
[2020-11-25 18:31:31,797 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:31:31,797 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:31:31,797 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:31:31,798 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:31:31,798 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC20Protected0 := false;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND FALSE  !(revert)
[L4048]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L4048]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4049]  COND FALSE  !(revert)
[L4052]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L4052]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]  COND FALSE  !(revert)
[L4056]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L3880]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3880]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3881]  COND FALSE  !(revert)
[L3884]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3884]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3885]  COND FALSE  !(revert)
[L3888]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L3888]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3889]  COND FALSE  !(revert)
[L3892]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3847]              assume msgsender_MSG != null;
[L3848]              Balance[this] := 0;
[L3849]              _name_ERC20DetailedChangeable[this] := 929111217;
[L3850]              _symbol_ERC20DetailedChangeable[this] := 929111217;
[L3851]              _decimals_ERC20DetailedChangeable[this] := 0;
[L3853]              _name_ERC20DetailedChangeable[this] := name_s794;
[L3854]              _symbol_ERC20DetailedChangeable[this] := symbol_s794;
[L3855]              _decimals_ERC20DetailedChangeable[this] := decimals_s794;
[L3892]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3893]  COND FALSE  !(revert)
[L4056]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L4057]  COND FALSE  !(revert)
[L4060]  CALL        call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L3686]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3686]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3687]  COND FALSE  !(revert)
[L3690]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3690]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3691]  COND FALSE  !(revert)
[L3694]  CALL        call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3694]  RET         call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3695]  COND FALSE  !(revert)
[L4060]  RET         call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L4061]  COND FALSE  !(revert)
[L4064]  CALL        call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]              assume msgsender_MSG != null;
[L3997]              Balance[this] := 0;
[L3998]              DECIMALS_ISF[this] := 18;
[L3999]              __var_25 := DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4000]              INITIAL_SUPPLY_ISF[this] := 40000000000 * (nonlinearPow(10, DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4002]  COND TRUE   DType[this] == ISF
[L4003]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L3275]              __var_7 := null;
[L3276]  COND FALSE  !(!(account_s464 != null))
[L3280]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3280]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L3281]  COND FALSE  !(revert)
[L3284]              _totalSupply_ERC20[this] := __var_8;
[L3285]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3285]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L3286]  COND FALSE  !(revert)
[L3289]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L3290]              _balances_ERC20[this][account_s464] := __var_9;
[L3291]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L3292]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4003]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L4004]  COND FALSE  !(revert)
[L4064]  RET         call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4065]  COND FALSE  !(revert)
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != to_s717 && (value_s717 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s717] + value_s717 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND FALSE  !(!(to_s717 != this))
[L3759]  COND FALSE  !(DType[this] == ISF)
[L3764]  COND TRUE   DType[this] == ERC20Protected
[L3765]  CALL        call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2858]  COND FALSE  !(DType[this] == ISF)
[L2863]  COND TRUE   DType[this] == ERC20DetailedChangeable
[L2864]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2864]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2865]  COND FALSE  !(revert)
[L2881]              __ret_0_ := true;
[L3765]  RET         call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3766]  COND FALSE  !(revert)
[L3772]              __ret_0_ := __var_20;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s717 && (value_s717 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s717] + value_s717 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND FALSE  !(!(to_s717 != this))
[L3759]  COND TRUE   DType[this] == ISF
[L3760]  CALL        call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2858]  COND TRUE   DType[this] == ISF
[L2859]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2859]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2860]  COND FALSE  !(revert)
[L2881]              __ret_0_ := true;
[L3760]  RET         call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3761]  COND FALSE  !(revert)
[L3772]              __ret_0_ := __var_20;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s717 && (value_s717 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s717] + value_s717 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND FALSE  !(!(to_s717 != this))
[L3759]  COND TRUE   DType[this] == ISF
[L3760]  CALL        call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2858]  COND TRUE   DType[this] == ISF
[L2859]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2859]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2860]  COND FALSE  !(revert)
[L2881]              __ret_0_ := true;
[L3760]  RET         call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3761]  COND FALSE  !(revert)
[L3772]              __ret_0_ := __var_20;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:31:31,803 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:31:31,803 INFO  L82        PathProgramCache]: Analyzing trace with hash -1579976596, now seen corresponding path program 1 times
[2020-11-25 18:31:31,803 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:31:31,815 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:31:31,896 INFO  L134       CoverageAnalysis]: Checked inductivity of 300 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 299 trivial. 0 not checked.
[2020-11-25 18:31:31,897 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:31:31,897 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 18:31:31,897 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:31:31,897 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 18:31:31,897 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 18:31:31,897 INFO  L87              Difference]: Start difference. First operand 3101 states and 3500 transitions. cyclomatic complexity: 402 Second operand 6 states.
[2020-11-25 18:31:31,958 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:31:31,959 INFO  L93              Difference]: Finished difference Result 3135 states and 3533 transitions.
[2020-11-25 18:31:31,959 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 18:31:31,959 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3135 states and 3533 transitions.
[2020-11-25 18:31:31,965 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:31:31,971 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3135 states to 3091 states and 3486 transitions.
[2020-11-25 18:31:31,971 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1156
[2020-11-25 18:31:31,972 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1156
[2020-11-25 18:31:31,972 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3091 states and 3486 transitions.
[2020-11-25 18:31:31,986 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:31:31,987 INFO  L728         BuchiCegarLoop]: Abstraction has 3091 states and 3486 transitions.
[2020-11-25 18:31:31,990 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3091 states and 3486 transitions.
[2020-11-25 18:31:32,010 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3091 to 3091.
[2020-11-25 18:31:32,010 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3091 states.
[2020-11-25 18:31:32,012 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3091 states to 3091 states and 3486 transitions.
[2020-11-25 18:31:32,013 INFO  L751         BuchiCegarLoop]: Abstraction has 3091 states and 3486 transitions.
[2020-11-25 18:31:32,013 INFO  L631         BuchiCegarLoop]: Abstraction has 3091 states and 3486 transitions.
[2020-11-25 18:31:32,013 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 18:31:32,013 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3091 states and 3486 transitions.
[2020-11-25 18:31:32,016 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:31:32,016 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:31:32,016 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:31:32,017 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:31:32,017 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC20Protected0 := false;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND FALSE  !(revert)
[L4048]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L4048]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4049]  COND FALSE  !(revert)
[L4052]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L4052]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]  COND FALSE  !(revert)
[L4056]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L3880]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3880]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3881]  COND FALSE  !(revert)
[L3884]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3884]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3885]  COND FALSE  !(revert)
[L3888]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L3888]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3889]  COND FALSE  !(revert)
[L3892]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3847]              assume msgsender_MSG != null;
[L3848]              Balance[this] := 0;
[L3849]              _name_ERC20DetailedChangeable[this] := 929111217;
[L3850]              _symbol_ERC20DetailedChangeable[this] := 929111217;
[L3851]              _decimals_ERC20DetailedChangeable[this] := 0;
[L3853]              _name_ERC20DetailedChangeable[this] := name_s794;
[L3854]              _symbol_ERC20DetailedChangeable[this] := symbol_s794;
[L3855]              _decimals_ERC20DetailedChangeable[this] := decimals_s794;
[L3892]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3893]  COND FALSE  !(revert)
[L4056]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L4057]  COND FALSE  !(revert)
[L4060]  CALL        call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L3686]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3686]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3687]  COND FALSE  !(revert)
[L3690]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3690]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3691]  COND FALSE  !(revert)
[L3694]  CALL        call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3694]  RET         call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3695]  COND FALSE  !(revert)
[L4060]  RET         call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L4061]  COND FALSE  !(revert)
[L4064]  CALL        call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]              assume msgsender_MSG != null;
[L3997]              Balance[this] := 0;
[L3998]              DECIMALS_ISF[this] := 18;
[L3999]              __var_25 := DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4000]              INITIAL_SUPPLY_ISF[this] := 40000000000 * (nonlinearPow(10, DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4002]  COND TRUE   DType[this] == ISF
[L4003]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L3275]              __var_7 := null;
[L3276]  COND FALSE  !(!(account_s464 != null))
[L3280]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3280]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L3281]  COND FALSE  !(revert)
[L3284]              _totalSupply_ERC20[this] := __var_8;
[L3285]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3285]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L3286]  COND FALSE  !(revert)
[L3289]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L3290]              _balances_ERC20[this][account_s464] := __var_9;
[L3291]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L3292]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4003]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L4004]  COND FALSE  !(revert)
[L4064]  RET         call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4065]  COND FALSE  !(revert)
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != to_s717 && (value_s717 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s717] + value_s717 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND FALSE  !(!(to_s717 != this))
[L3759]  COND TRUE   DType[this] == ISF
[L3760]  CALL        call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2858]  COND FALSE  !(DType[this] == ISF)
[L2863]  COND FALSE  !(DType[this] == ERC20DetailedChangeable)
[L2868]  COND FALSE  !(DType[this] == ERC20Protected)
[L2873]  COND TRUE   DType[this] == ERC20
[L2874]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2874]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2875]  COND FALSE  !(revert)
[L2881]              __ret_0_ := true;
[L3760]  RET         call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3761]  COND FALSE  !(revert)
[L3772]              __ret_0_ := __var_20;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s717 && (value_s717 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s717] + value_s717 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND FALSE  !(!(to_s717 != this))
[L3759]  COND TRUE   DType[this] == ISF
[L3760]  CALL        call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2858]  COND TRUE   DType[this] == ISF
[L2859]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2859]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2860]  COND FALSE  !(revert)
[L2881]              __ret_0_ := true;
[L3760]  RET         call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3761]  COND FALSE  !(revert)
[L3772]              __ret_0_ := __var_20;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND FALSE  !(gas >= 0)
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:31:32,022 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:31:32,023 INFO  L82        PathProgramCache]: Analyzing trace with hash -959751887, now seen corresponding path program 1 times
[2020-11-25 18:31:32,023 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:31:32,035 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:31:32,120 INFO  L134       CoverageAnalysis]: Checked inductivity of 300 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 299 trivial. 0 not checked.
[2020-11-25 18:31:32,120 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:31:32,120 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 18:31:32,120 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:31:32,120 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 18:31:32,120 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 18:31:32,121 INFO  L87              Difference]: Start difference. First operand 3091 states and 3486 transitions. cyclomatic complexity: 398 Second operand 7 states.
[2020-11-25 18:31:32,177 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:31:32,177 INFO  L93              Difference]: Finished difference Result 3135 states and 3529 transitions.
[2020-11-25 18:31:32,177 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 18:31:32,177 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3135 states and 3529 transitions.
[2020-11-25 18:31:32,182 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:31:32,188 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3135 states to 3081 states and 3472 transitions.
[2020-11-25 18:31:32,189 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1154
[2020-11-25 18:31:32,189 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1154
[2020-11-25 18:31:32,189 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3081 states and 3472 transitions.
[2020-11-25 18:31:32,191 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:31:32,191 INFO  L728         BuchiCegarLoop]: Abstraction has 3081 states and 3472 transitions.
[2020-11-25 18:31:32,193 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3081 states and 3472 transitions.
[2020-11-25 18:31:32,209 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3081 to 3081.
[2020-11-25 18:31:32,209 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3081 states.
[2020-11-25 18:31:32,212 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3081 states to 3081 states and 3472 transitions.
[2020-11-25 18:31:32,212 INFO  L751         BuchiCegarLoop]: Abstraction has 3081 states and 3472 transitions.
[2020-11-25 18:31:32,212 INFO  L631         BuchiCegarLoop]: Abstraction has 3081 states and 3472 transitions.
[2020-11-25 18:31:32,212 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 18:31:32,212 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3081 states and 3472 transitions.
[2020-11-25 18:31:32,215 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:31:32,215 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:31:32,215 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:31:32,217 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:31:32,217 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC20Protected0 := false;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND FALSE  !(revert)
[L4048]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L4048]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4049]  COND FALSE  !(revert)
[L4052]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L4052]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]  COND FALSE  !(revert)
[L4056]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L3880]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3880]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3881]  COND FALSE  !(revert)
[L3884]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3884]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3885]  COND FALSE  !(revert)
[L3888]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L3888]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3889]  COND FALSE  !(revert)
[L3892]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3847]              assume msgsender_MSG != null;
[L3848]              Balance[this] := 0;
[L3849]              _name_ERC20DetailedChangeable[this] := 929111217;
[L3850]              _symbol_ERC20DetailedChangeable[this] := 929111217;
[L3851]              _decimals_ERC20DetailedChangeable[this] := 0;
[L3853]              _name_ERC20DetailedChangeable[this] := name_s794;
[L3854]              _symbol_ERC20DetailedChangeable[this] := symbol_s794;
[L3855]              _decimals_ERC20DetailedChangeable[this] := decimals_s794;
[L3892]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3893]  COND FALSE  !(revert)
[L4056]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L4057]  COND FALSE  !(revert)
[L4060]  CALL        call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L3686]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3686]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3687]  COND FALSE  !(revert)
[L3690]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3690]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3691]  COND FALSE  !(revert)
[L3694]  CALL        call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3694]  RET         call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3695]  COND FALSE  !(revert)
[L4060]  RET         call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L4061]  COND FALSE  !(revert)
[L4064]  CALL        call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]              assume msgsender_MSG != null;
[L3997]              Balance[this] := 0;
[L3998]              DECIMALS_ISF[this] := 18;
[L3999]              __var_25 := DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4000]              INITIAL_SUPPLY_ISF[this] := 40000000000 * (nonlinearPow(10, DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4002]  COND TRUE   DType[this] == ISF
[L4003]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L3275]              __var_7 := null;
[L3276]  COND FALSE  !(!(account_s464 != null))
[L3280]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3280]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L3281]  COND FALSE  !(revert)
[L3284]              _totalSupply_ERC20[this] := __var_8;
[L3285]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3285]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L3286]  COND FALSE  !(revert)
[L3289]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L3290]              _balances_ERC20[this][account_s464] := __var_9;
[L3291]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L3292]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4003]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L4004]  COND FALSE  !(revert)
[L4064]  RET         call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4065]  COND FALSE  !(revert)
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != to_s717 && (value_s717 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s717] + value_s717 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND FALSE  !(!(to_s717 != this))
[L3759]  COND TRUE   DType[this] == ISF
[L3760]  CALL        call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2858]  COND FALSE  !(DType[this] == ISF)
[L2863]  COND FALSE  !(DType[this] == ERC20DetailedChangeable)
[L2868]  COND TRUE   DType[this] == ERC20Protected
[L2869]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2869]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2870]  COND FALSE  !(revert)
[L2881]              __ret_0_ := true;
[L3760]  RET         call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3761]  COND FALSE  !(revert)
[L3772]              __ret_0_ := __var_20;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s717 && (value_s717 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s717] + value_s717 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND FALSE  !(!(to_s717 != this))
[L3759]  COND TRUE   DType[this] == ISF
[L3760]  CALL        call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2858]  COND TRUE   DType[this] == ISF
[L2859]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2859]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2860]  COND FALSE  !(revert)
[L2881]              __ret_0_ := true;
[L3760]  RET         call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3761]  COND FALSE  !(revert)
[L3772]              __ret_0_ := __var_20;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND FALSE  !(gas >= 0)
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:31:32,220 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:31:32,220 INFO  L82        PathProgramCache]: Analyzing trace with hash 1888507561, now seen corresponding path program 1 times
[2020-11-25 18:31:32,221 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:31:32,233 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:31:32,316 INFO  L134       CoverageAnalysis]: Checked inductivity of 300 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 299 trivial. 0 not checked.
[2020-11-25 18:31:32,316 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:31:32,316 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 18:31:32,316 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:31:32,316 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 18:31:32,316 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 18:31:32,317 INFO  L87              Difference]: Start difference. First operand 3081 states and 3472 transitions. cyclomatic complexity: 394 Second operand 7 states.
[2020-11-25 18:31:32,375 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:31:32,375 INFO  L93              Difference]: Finished difference Result 3125 states and 3515 transitions.
[2020-11-25 18:31:32,375 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 18:31:32,376 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3125 states and 3515 transitions.
[2020-11-25 18:31:32,391 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:31:32,401 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3125 states to 3061 states and 3444 transitions.
[2020-11-25 18:31:32,402 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1150
[2020-11-25 18:31:32,402 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1150
[2020-11-25 18:31:32,402 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3061 states and 3444 transitions.
[2020-11-25 18:31:32,405 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:31:32,405 INFO  L728         BuchiCegarLoop]: Abstraction has 3061 states and 3444 transitions.
[2020-11-25 18:31:32,408 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3061 states and 3444 transitions.
[2020-11-25 18:31:32,422 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3061 to 3061.
[2020-11-25 18:31:32,422 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3061 states.
[2020-11-25 18:31:32,425 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3061 states to 3061 states and 3444 transitions.
[2020-11-25 18:31:32,425 INFO  L751         BuchiCegarLoop]: Abstraction has 3061 states and 3444 transitions.
[2020-11-25 18:31:32,425 INFO  L631         BuchiCegarLoop]: Abstraction has 3061 states and 3444 transitions.
[2020-11-25 18:31:32,425 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 18:31:32,425 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3061 states and 3444 transitions.
[2020-11-25 18:31:32,428 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:31:32,428 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:31:32,428 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:31:32,429 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:31:32,429 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC20Protected0 := false;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]     CALL        call main();
[L6427]              assume null == 0;
[L6428]  CALL        call this := FreshRefGenerator__success();
[L2547]              havoc newRef;
[L2548]              assume Alloc[newRef] == false;
[L2549]              Alloc[newRef] := true;
[L2550]              assume newRef != null;
[L6428]  RET         call this := FreshRefGenerator__success();
[L6429]              assume now >= 0;
[L6430]              assume DType[this] == ISF;
[L6431]              assume msgvalue_MSG == 0;
[L6432]              gas := gas - 53000;
[L6433]  CALL        call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L1613]              havoc __exception;
[L1614]              revert := false;
[L1615]  COND FALSE  !(__exception)
[L1639]  CALL        call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L4044]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L4044]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND FALSE  !(revert)
[L4048]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L4048]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4049]  COND FALSE  !(revert)
[L4052]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L4052]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]  COND FALSE  !(revert)
[L4056]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L3880]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3880]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3881]  COND FALSE  !(revert)
[L3884]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3884]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3885]  COND FALSE  !(revert)
[L3888]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3524]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3506]              assume msgsender_MSG != null;
[L3507]              Balance[this] := 0;
[L3508]              _owner_Ownable[this] := null;
[L3510]              _owner_Ownable[this] := msgsender_MSG;
[L3511]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3524]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3525]  COND FALSE  !(revert)
[L3888]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3889]  COND FALSE  !(revert)
[L3892]  CALL        call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3847]              assume msgsender_MSG != null;
[L3848]              Balance[this] := 0;
[L3849]              _name_ERC20DetailedChangeable[this] := 929111217;
[L3850]              _symbol_ERC20DetailedChangeable[this] := 929111217;
[L3851]              _decimals_ERC20DetailedChangeable[this] := 0;
[L3853]              _name_ERC20DetailedChangeable[this] := name_s794;
[L3854]              _symbol_ERC20DetailedChangeable[this] := symbol_s794;
[L3855]              _decimals_ERC20DetailedChangeable[this] := decimals_s794;
[L3892]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s794, symbol_s794, decimals_s794);
[L3893]  COND FALSE  !(revert)
[L4056]  RET         call ERC20DetailedChangeable_ERC20DetailedChangeable__success(this, msgsender_MSG, msgvalue_MSG, 1501229100, 1119552200, DECIMALS_ISF[this]);
[L4057]  COND FALSE  !(revert)
[L4060]  CALL        call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L3686]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L3686]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3687]  COND FALSE  !(revert)
[L3690]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2781]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2579]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2564]              assume msgsender_MSG != null;
[L2565]              Balance[this] := 0;
[L2579]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2580]  COND FALSE  !(revert)
[L2781]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2782]  COND FALSE  !(revert)
[L2785]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2757]              assume msgsender_MSG != null;
[L2758]              Balance[this] := 0;
[L2759]              _balances_ERC20[this] := zeroRefintArr();
[L2760]              sum__balances0[this] := 0;
[L2761]              _allowed_ERC20[this] := zeroRefRefintArr();
[L2762]              sum__allowed1[this] := 0;
[L2763]              _totalSupply_ERC20[this] := 0;
[L2785]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3690]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3691]  COND FALSE  !(revert)
[L3694]  CALL        call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3663]              assume msgsender_MSG != null;
[L3664]              Balance[this] := 0;
[L3694]  RET         call ERC20Protected_ERC20Protected_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3695]  COND FALSE  !(revert)
[L4060]  RET         call ERC20Protected_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG);
[L4061]  COND FALSE  !(revert)
[L4064]  CALL        call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3996]              assume msgsender_MSG != null;
[L3997]              Balance[this] := 0;
[L3998]              DECIMALS_ISF[this] := 18;
[L3999]              __var_25 := DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4000]              INITIAL_SUPPLY_ISF[this] := 40000000000 * (nonlinearPow(10, DECIMALS_ISF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4002]  COND TRUE   DType[this] == ISF
[L4003]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L3275]              __var_7 := null;
[L3276]  COND FALSE  !(!(account_s464 != null))
[L3280]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3280]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s464);
[L3281]  COND FALSE  !(revert)
[L3284]              _totalSupply_ERC20[this] := __var_8;
[L3285]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3285]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s464], value_s464);
[L3286]  COND FALSE  !(revert)
[L3289]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s464];
[L3290]              _balances_ERC20[this][account_s464] := __var_9;
[L3291]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s464];
[L3292]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4003]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_ISF[this]);
[L4004]  COND FALSE  !(revert)
[L4064]  RET         call ISF_ISF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4065]  COND FALSE  !(revert)
[L1639]  RET         call ISF_ISF__success(this, msgsender_MSG, msgvalue_MSG);
[L1640]              assume !revert && gas >= 0;
[L6433]  RET         call ISF_ISF(this, msgsender_MSG, msgvalue_MSG);
[L6434]              assume !revert && gas >= 0;
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != to_s717 && (value_s717 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s717] + value_s717 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND FALSE  !(!(to_s717 != this))
[L3759]  COND TRUE   DType[this] == ISF
[L3760]  CALL        call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2858]  COND TRUE   DType[this] == ISF
[L2859]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2859]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2860]  COND FALSE  !(revert)
[L2881]              __ret_0_ := true;
[L3760]  RET         call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3761]  COND FALSE  !(revert)
[L3772]              __ret_0_ := __var_20;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND TRUE   gas >= 0
[L6303]              assume value_s717 >= 0 && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6304]              assume msgvalue_MSG == 0;
[L6305]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s717 && (value_s717 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s717] + value_s717 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s717 >= 0) && value_s717 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s717] >= 0) && _balances_ERC20[this][to_s717] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Protected0 := true;
[L2]                 call_transfer_ERC20Protected0 := false;
[L2]                 revert := revert_hold;
[L1119]              havoc __exception;
[L1120]              revert := false;
[L1121]  COND FALSE  !(__exception)
[L1145]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3754]              __var_19 := this;
[L3755]  COND FALSE  !(!(to_s717 != this))
[L3759]  COND TRUE   DType[this] == ISF
[L3760]  CALL        call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L2858]  COND TRUE   DType[this] == ISF
[L2859]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L3224]              __var_4 := null;
[L3225]  COND FALSE  !(!(to_s422 != null))
[L3229]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L2688]  COND FALSE  !(!(b_s150 <= a_s150))
[L2692]              c_s150 := (a_s150 - b_s150) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2693]              __ret_0_ := c_s150;
[L3229]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s422], value_s422);
[L3230]  COND FALSE  !(revert)
[L3233]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s422];
[L3234]              _balances_ERC20[this][from_s422] := __var_5;
[L3235]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s422];
[L3236]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L2712]              c_s174 := (a_s174 + b_s174) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2713]  COND FALSE  !(!(c_s174 >= a_s174))
[L2717]              __ret_0_ := c_s174;
[L3236]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s422], value_s422);
[L3237]  COND FALSE  !(revert)
[L3240]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s422];
[L3241]              _balances_ERC20[this][to_s422] := __var_6;
[L3242]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s422];
[L3243]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2859]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s268, value_s268);
[L2860]  COND FALSE  !(revert)
[L2881]              __ret_0_ := true;
[L3760]  RET         call __var_20 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L3761]  COND FALSE  !(revert)
[L3772]              __ret_0_ := __var_20;
[L1145]  RET         call __ret_0_ := transfer~address~uint256_ERC20Protected__success(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L1146]              assume !revert && gas >= 0;
[L6305]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Protected(this, msgsender_MSG, msgvalue_MSG, to_s717, value_s717);
[L6437]  RET         call CorralChoice_ISF(this);

Loop:
[L6437]  CALL        call CorralChoice_ISF(this);
[L6247]              havoc msgsender_MSG;
[L6248]              havoc msgvalue_MSG;
[L6249]              havoc choice;
[L6250]              havoc to_s717;
[L6251]              havoc value_s717;
[L6252]              havoc __ret_0_transfer;
[L6253]              havoc spender_s287;
[L6254]              havoc value_s287;
[L6255]              havoc __ret_0_approve;
[L6256]              havoc from_s744;
[L6257]              havoc to_s744;
[L6258]              havoc value_s744;
[L6259]              havoc __ret_0_transferFrom;
[L6260]              havoc __ret_0_totalSupply;
[L6261]              havoc owner_s233;
[L6262]              havoc __ret_0_balanceOf;
[L6263]              havoc owner_s249;
[L6264]              havoc spender_s249;
[L6265]              havoc __ret_0_allowance;
[L6266]              havoc spender_s349;
[L6267]              havoc addedValue_s349;
[L6268]              havoc __ret_0_increaseAllowance;
[L6269]              havoc spender_s376;
[L6270]              havoc subtractedValue_s376;
[L6271]              havoc __ret_0_decreaseAllowance;
[L6272]              havoc __ret_0_owner;
[L6273]              havoc __ret_0_isOwner;
[L6274]              havoc newOwner_s659;
[L6275]              havoc name_s794;
[L6276]              havoc symbol_s794;
[L6277]              havoc decimals_s794;
[L6278]              havoc __ret_0_name;
[L6279]              havoc __ret_0_symbol;
[L6280]              havoc __ret_0_decimals;
[L6281]              havoc newName_s837;
[L6282]              havoc newSymbol_s856;
[L6283]              havoc __ret_0_DECIMALS;
[L6284]              havoc __ret_0_INITIAL_SUPPLY;
[L6285]              havoc tmpNow;
[L6286]              havoc gas;
[L6287]              assume gas > 4000000 && gas <= 8000000;
[L6288]              tmpNow := now;
[L6289]              havoc now;
[L6290]              assume now > tmpNow;
[L6291]              assume msgsender_MSG != null;
[L6292]              assume DType[msgsender_MSG] != IERC20;
[L6293]              assume DType[msgsender_MSG] != SafeMath;
[L6294]              assume DType[msgsender_MSG] != ERC20;
[L6295]              assume DType[msgsender_MSG] != Ownable;
[L6296]              assume DType[msgsender_MSG] != ERC20Protected;
[L6297]              assume DType[msgsender_MSG] != ERC20DetailedChangeable;
[L6298]              assume DType[msgsender_MSG] != ISF;
[L6299]              Alloc[msgsender_MSG] := true;
[L6300]  COND TRUE   choice == 19
[L6301]              gas := gas - 21000;
[L6302]  COND FALSE  !(gas >= 0)
[L6437]  RET         call CorralChoice_ISF(this);

[2020-11-25 18:31:32,433 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:31:32,433 INFO  L82        PathProgramCache]: Analyzing trace with hash -823590286, now seen corresponding path program 1 times
[2020-11-25 18:31:32,433 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:31:32,458 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:31:32,684 INFO  L134       CoverageAnalysis]: Checked inductivity of 300 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 300 trivial. 0 not checked.
[2020-11-25 18:31:32,685 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:31:32,685 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 18:31:32,685 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:31:32,685 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 18:31:32,685 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=128, Unknown=0, NotChecked=0, Total=156
[2020-11-25 18:31:32,686 INFO  L87              Difference]: Start difference. First operand 3061 states and 3444 transitions. cyclomatic complexity: 386 Second operand 13 states.
[2020-11-25 18:31:33,884 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:31:33,884 INFO  L93              Difference]: Finished difference Result 1813 states and 2033 transitions.
[2020-11-25 18:31:33,884 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 18:31:33,885 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1813 states and 2033 transitions.
[2020-11-25 18:31:33,887 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 18:31:33,887 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1813 states to 0 states and 0 transitions.
[2020-11-25 18:31:33,887 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 18:31:33,887 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 18:31:33,887 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 18:31:33,887 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:31:33,887 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 18:31:33,887 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 18:31:33,887 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 18:31:33,887 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 18:31:33,888 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 18:31:33,888 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 18:31:33,888 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 18:31:33,891 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 06:31:33 BasicIcfg
[2020-11-25 18:31:33,891 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 18:31:33,891 INFO  L168              Benchmark]: Toolchain (without parser) took 11618.53 ms. Allocated memory was 1.0 GB in the beginning and 2.0 GB in the end (delta: 1.0 GB). Free memory was 935.2 MB in the beginning and 1.6 GB in the end (delta: -706.3 MB). Peak memory consumption was 297.2 MB. Max. memory is 15.3 GB.
[2020-11-25 18:31:33,892 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 18:31:33,892 INFO  L168              Benchmark]: Boogie Preprocessor took 129.06 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 919.1 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 18:31:33,892 INFO  L168              Benchmark]: UtopiaSpecLang took 74.24 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 18:31:33,892 INFO  L168              Benchmark]: Boogie Printer took 23.84 ms. Allocated memory is still 1.0 GB. Free memory is still 908.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 18:31:33,892 INFO  L168              Benchmark]: RCFGBuilder took 956.41 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 59.2 MB). Free memory was 908.4 MB in the beginning and 1.0 GB in the end (delta: -109.5 MB). Peak memory consumption was 196.7 MB. Max. memory is 15.3 GB.
[2020-11-25 18:31:33,893 INFO  L168              Benchmark]: UtopiaLTL2Aut took 41.43 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 12.9 MB). Peak memory consumption was 12.9 MB. Max. memory is 15.3 GB.
[2020-11-25 18:31:33,893 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1696.02 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 165.2 MB). Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: -13.2 MB). Peak memory consumption was 505.9 MB. Max. memory is 15.3 GB.
[2020-11-25 18:31:33,894 INFO  L168              Benchmark]: BlockEncodingV2 took 171.12 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 925.8 MB in the end (delta: 92.3 MB). Peak memory consumption was 92.3 MB. Max. memory is 15.3 GB.
[2020-11-25 18:31:33,894 INFO  L168              Benchmark]: BuchiAutomizer took 8523.35 ms. Allocated memory was 1.3 GB in the beginning and 2.0 GB in the end (delta: 779.1 MB). Free memory was 925.8 MB in the beginning and 1.6 GB in the end (delta: -715.7 MB). Peak memory consumption was 63.4 MB. Max. memory is 15.3 GB.
[2020-11-25 18:31:33,896 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5986 locations, 11105 edges
  - StatisticsResult: Encoded RCFG
    5842 locations, 10744 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 129.06 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 919.1 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 74.24 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 23.84 ms. Allocated memory is still 1.0 GB. Free memory is still 908.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 956.41 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 59.2 MB). Free memory was 908.4 MB in the beginning and 1.0 GB in the end (delta: -109.5 MB). Peak memory consumption was 196.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 41.43 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 12.9 MB). Peak memory consumption was 12.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1696.02 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 165.2 MB). Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: -13.2 MB). Peak memory consumption was 505.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 171.12 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 925.8 MB in the end (delta: 92.3 MB). Peak memory consumption was 92.3 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 8523.35 ms. Allocated memory was 1.3 GB in the beginning and 2.0 GB in the end (delta: 779.1 MB). Free memory was 925.8 MB in the beginning and 1.6 GB in the end (delta: -715.7 MB). Peak memory consumption was 63.4 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2331 locations, 3367 edges
  - StatisticsResult: BuchiProgram size
    5986 locations, 11105 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 10 terminating modules (10 trivial, 0 deterministic, 0 nondeterministic). 10 modules have a trivial ranking function, the largest among these consists of 22 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 8.5s and 11 iterations.  TraceHistogramMax:6. Analysis of lassos took 1.6s. Construction of modules took 4.4s. BÃ¼chi inclusion checks took 1.5s. Highest rank in rank-based complementation 0. Minimization of det autom 10. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 9 MinimizatonAttempts, 1824 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 3646 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 33983 SDtfs, 16032 SDslu, 92272 SDs, 0 SdLazy, 62530 SolverSat, 3027 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 4.4s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU10 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_ERC20Protected0) ==> ( <>(fail_transfer_ERC20Protected0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
