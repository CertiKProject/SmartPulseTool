This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 11:40:41,538 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 11:40:41,539 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 11:40:41,547 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 11:40:41,547 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 11:40:41,548 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 11:40:41,548 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 11:40:41,549 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 11:40:41,551 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 11:40:41,551 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 11:40:41,551 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 11:40:41,552 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 11:40:41,552 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 11:40:41,553 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 11:40:41,553 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 11:40:41,554 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 11:40:41,554 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 11:40:41,555 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 11:40:41,556 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 11:40:41,557 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 11:40:41,557 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 11:40:41,558 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 11:40:41,559 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 11:40:41,559 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 11:40:41,559 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 11:40:41,560 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 11:40:41,560 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 11:40:41,560 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 11:40:41,561 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 11:40:41,561 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 11:40:41,561 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 11:40:41,561 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 11:40:41,562 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 11:40:41,562 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 11:40:41,563 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 11:40:41,563 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 11:40:41,563 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 11:40:41,563 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 11:40:41,563 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 11:40:41,564 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 11:40:41,564 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 11:40:41,564 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 11:40:41,570 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 11:40:41,570 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 11:40:41,571 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 11:40:41,571 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 11:40:41,571 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 11:40:41,571 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 11:40:41,571 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 11:40:41,571 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 11:40:41,571 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 11:40:41,572 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 11:40:41,572 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 11:40:41,572 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 11:40:41,572 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 11:40:41,572 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 11:40:41,572 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 11:40:41,572 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 11:40:41,572 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 11:40:41,572 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 11:40:41,572 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 11:40:41,572 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 11:40:41,573 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 11:40:41,573 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 11:40:41,573 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 11:40:41,573 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 11:40:41,573 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 11:40:41,573 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 11:40:41,597 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 11:40:41,617 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 11:40:41,622 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 11:40:41,624 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 11:40:41,624 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 11:40:41,625 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transfer-fail.bpl
[2020-11-25 11:40:41,625 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transfer-fail.bpl'
[2020-11-25 11:40:41,716 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 11:40:41,717 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 11:40:41,717 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 11:40:41,717 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 11:40:41,717 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 11:40:41,733 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:40:41" (1/1) ...
[2020-11-25 11:40:41,735 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:40:41" (1/1) ...
[2020-11-25 11:40:41,767 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:40:41" (1/1) ...
[2020-11-25 11:40:41,768 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:40:41" (1/1) ...
[2020-11-25 11:40:41,793 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:40:41" (1/1) ...
[2020-11-25 11:40:41,803 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:40:41" (1/1) ...
[2020-11-25 11:40:41,812 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:40:41" (1/1) ...
[2020-11-25 11:40:41,822 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 11:40:41,823 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 11:40:41,823 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 11:40:41,825 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 11:40:41,829 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:40:41" (1/1) ...
[2020-11-25 11:40:41,846 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-25 11:40:41,850 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-25 11:40:41,855 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-25 11:40:41,862 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender!=recipient_s210 && ( amount_s210>_balances_ERC20[this][msg.sender] || ( _balances_ERC20[this][recipient_s210] + amount_s210 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && amount_s210>=0 ) && amount_s210<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s210]>=0 ) && _balances_ERC20[this][recipient_s210]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IdentifierExpression[recipient_s210,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[amount_s210,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s210,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IdentifierExpression[amount_s210,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s210,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s210,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s210,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s210,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 11:40:41,872 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-25 11:40:41,872 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC200) ==> ( <>AP(fail_transfer_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 11:40:41,882 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:40:41 PropertyContainer
[2020-11-25 11:40:41,882 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 11:40:41,883 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 11:40:41,883 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 11:40:41,883 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 11:40:41,884 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:40:41" (1/2) ...
[2020-11-25 11:40:41,884 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 11:40:41,884 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 11:40:41,901 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:40:41" (2/2) ...
[2020-11-25 11:40:41,901 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 11:40:41,901 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 11:40:41,902 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 11:40:41,902 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 11:40:41,902 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:40:41" (1/2) ...
[2020-11-25 11:40:41,954 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 11:40:41,954 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 11:40:41,954 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 11:40:41,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 11:40:41,955 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 11:40:41,955 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 11:40:41,955 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 11:40:41,955 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 11:40:41,955 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 11:40:41,955 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 11:40:41,955 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 11:40:41,955 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 11:40:41,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 11:40:41,955 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 11:40:41,956 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 11:40:41,956 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 11:40:41,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 11:40:41,956 INFO  L130     BoogieDeclarations]: Found specification of procedure setAllow_ERC20
[2020-11-25 11:40:41,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure setAllow_ERC20
[2020-11-25 11:40:41,956 INFO  L130     BoogieDeclarations]: Found specification of procedure setExceptions~address_ERC20
[2020-11-25 11:40:41,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure setExceptions~address_ERC20
[2020-11-25 11:40:41,957 INFO  L130     BoogieDeclarations]: Found specification of procedure burnOwner_ERC20
[2020-11-25 11:40:41,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnOwner_ERC20
[2020-11-25 11:40:41,957 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 11:40:41,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 11:40:41,957 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 11:40:41,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 11:40:41,957 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 11:40:41,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 11:40:41,957 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 11:40:41,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 11:40:41,958 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 11:40:41,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 11:40:41,958 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 11:40:41,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 11:40:41,958 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 11:40:41,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 11:40:41,958 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 11:40:41,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 11:40:41,958 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 11:40:41,958 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 11:40:41,959 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 11:40:41,959 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 11:40:41,959 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 11:40:41,959 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 11:40:41,959 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 11:40:41,959 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 11:40:41,959 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 11:40:41,959 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 11:40:41,959 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 11:40:41,959 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 11:40:41,960 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 11:40:41,960 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 11:40:41,960 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 11:40:41,960 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 11:40:41,960 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 11:40:41,960 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 11:40:41,960 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 11:40:41,960 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 11:40:41,960 INFO  L130     BoogieDeclarations]: Found specification of procedure ZZZ_ZZZ_NoBaseCtor__success
[2020-11-25 11:40:41,960 INFO  L130     BoogieDeclarations]: Found specification of procedure ZZZ_ZZZ
[2020-11-25 11:40:41,960 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZZZ_ZZZ
[2020-11-25 11:40:41,961 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ZZZ
[2020-11-25 11:40:41,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ZZZ
[2020-11-25 11:40:41,961 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_ZZZ
[2020-11-25 11:40:41,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_ZZZ
[2020-11-25 11:40:41,961 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_ZZZ
[2020-11-25 11:40:41,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_ZZZ
[2020-11-25 11:40:41,961 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_ZZZ
[2020-11-25 11:40:41,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_ZZZ
[2020-11-25 11:40:41,961 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_ZZZ
[2020-11-25 11:40:41,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_ZZZ
[2020-11-25 11:40:41,962 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_ZZZ
[2020-11-25 11:40:41,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_ZZZ
[2020-11-25 11:40:41,962 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 11:40:41,962 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 11:40:41,962 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 11:40:41,962 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 11:40:41,962 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 11:40:41,962 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 11:40:41,962 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 11:40:41,962 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 11:40:41,963 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 11:40:41,963 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 11:40:41,963 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 11:40:41,963 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 11:40:41,963 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 11:40:41,963 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ZZZ
[2020-11-25 11:40:41,963 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 11:40:41,963 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 11:40:41,963 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 11:40:41,963 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 11:40:41,964 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 11:40:41,964 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 11:40:41,964 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 11:40:41,964 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 11:40:41,964 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 11:40:41,964 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 11:40:41,964 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 11:40:41,964 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 11:40:41,964 INFO  L130     BoogieDeclarations]: Found specification of procedure setAllow_ERC20__success
[2020-11-25 11:40:41,964 INFO  L130     BoogieDeclarations]: Found specification of procedure setAllow_ERC20__fail
[2020-11-25 11:40:41,964 INFO  L130     BoogieDeclarations]: Found specification of procedure setExceptions~address_ERC20__success
[2020-11-25 11:40:41,965 INFO  L130     BoogieDeclarations]: Found specification of procedure setExceptions~address_ERC20__fail
[2020-11-25 11:40:41,965 INFO  L130     BoogieDeclarations]: Found specification of procedure burnOwner_ERC20__success
[2020-11-25 11:40:41,965 INFO  L130     BoogieDeclarations]: Found specification of procedure burnOwner_ERC20__fail
[2020-11-25 11:40:41,965 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 11:40:41,965 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 11:40:41,965 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 11:40:41,965 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 11:40:41,965 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 11:40:41,965 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 11:40:41,965 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 11:40:41,966 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 11:40:41,966 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 11:40:41,966 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 11:40:41,966 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 11:40:41,966 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 11:40:41,966 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:40:41,966 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:40:41,966 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:40:41,966 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:40:41,966 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 11:40:41,967 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 11:40:41,967 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 11:40:41,967 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 11:40:41,967 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 11:40:41,967 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 11:40:41,967 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 11:40:41,967 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 11:40:41,967 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 11:40:41,967 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 11:40:41,967 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 11:40:41,968 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 11:40:41,968 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 11:40:41,968 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 11:40:41,968 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 11:40:41,968 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 11:40:41,968 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 11:40:41,968 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 11:40:41,968 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 11:40:41,968 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 11:40:41,968 INFO  L130     BoogieDeclarations]: Found specification of procedure ZZZ_ZZZ_NoBaseCtor__fail
[2020-11-25 11:40:41,968 INFO  L130     BoogieDeclarations]: Found specification of procedure ZZZ_ZZZ__success
[2020-11-25 11:40:41,968 INFO  L130     BoogieDeclarations]: Found specification of procedure ZZZ_ZZZ__fail
[2020-11-25 11:40:41,969 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ZZZ__success
[2020-11-25 11:40:41,969 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ZZZ__fail
[2020-11-25 11:40:41,969 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_ZZZ__success
[2020-11-25 11:40:41,969 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_ZZZ__fail
[2020-11-25 11:40:41,969 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_ZZZ__success
[2020-11-25 11:40:41,969 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_ZZZ__fail
[2020-11-25 11:40:41,969 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_ZZZ__success
[2020-11-25 11:40:41,969 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_ZZZ__fail
[2020-11-25 11:40:41,969 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_ZZZ__success
[2020-11-25 11:40:41,969 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_ZZZ__fail
[2020-11-25 11:40:41,969 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_ZZZ__success
[2020-11-25 11:40:41,969 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_ZZZ__fail
[2020-11-25 11:40:41,969 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 11:40:41,970 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 11:40:41,970 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 11:40:41,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 11:40:41,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 11:40:41,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 11:40:41,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 11:40:41,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 11:40:41,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 11:40:41,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 11:40:41,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 11:40:41,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 11:40:41,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 11:40:41,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 11:40:41,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 11:40:41,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 11:40:41,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 11:40:41,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 11:40:41,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 11:40:41,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure setAllow_ERC20__fail
[2020-11-25 11:40:41,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure setAllow_ERC20__success
[2020-11-25 11:40:41,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure setExceptions~address_ERC20__fail
[2020-11-25 11:40:41,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure setExceptions~address_ERC20__success
[2020-11-25 11:40:41,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnOwner_ERC20__fail
[2020-11-25 11:40:41,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnOwner_ERC20__success
[2020-11-25 11:40:41,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 11:40:41,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 11:40:41,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 11:40:41,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 11:40:41,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 11:40:41,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 11:40:41,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 11:40:41,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 11:40:41,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 11:40:41,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 11:40:41,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 11:40:41,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 11:40:41,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:40:41,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:40:41,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:40:41,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:40:41,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 11:40:41,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 11:40:41,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 11:40:41,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 11:40:41,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 11:40:41,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 11:40:41,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 11:40:41,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 11:40:41,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 11:40:41,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 11:40:41,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 11:40:41,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 11:40:41,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 11:40:41,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 11:40:41,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 11:40:41,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 11:40:41,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 11:40:41,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 11:40:41,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 11:40:41,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 11:40:41,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 11:40:41,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 11:40:41,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 11:40:41,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 11:40:41,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 11:40:41,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 11:40:41,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 11:40:41,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 11:40:41,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 11:40:41,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 11:40:41,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZZZ_ZZZ_NoBaseCtor__fail
[2020-11-25 11:40:41,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZZZ_ZZZ_NoBaseCtor__success
[2020-11-25 11:40:41,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZZZ_ZZZ__fail
[2020-11-25 11:40:41,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZZZ_ZZZ__success
[2020-11-25 11:40:41,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ZZZ__fail
[2020-11-25 11:40:41,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ZZZ__success
[2020-11-25 11:40:41,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_ZZZ__fail
[2020-11-25 11:40:41,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_ZZZ__success
[2020-11-25 11:40:41,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_ZZZ__fail
[2020-11-25 11:40:41,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_ZZZ__success
[2020-11-25 11:40:41,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_ZZZ__fail
[2020-11-25 11:40:41,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_ZZZ__success
[2020-11-25 11:40:41,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_ZZZ__fail
[2020-11-25 11:40:41,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_ZZZ__success
[2020-11-25 11:40:41,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_ZZZ__fail
[2020-11-25 11:40:41,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_ZZZ__success
[2020-11-25 11:40:41,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 11:40:41,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 11:40:41,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 11:40:41,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 11:40:41,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 11:40:41,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 11:40:41,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 11:40:41,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 11:40:41,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 11:40:41,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 11:40:41,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 11:40:41,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 11:40:41,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 11:40:41,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 11:40:41,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 11:40:41,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 11:40:41,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ZZZ
[2020-11-25 11:40:41,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 11:40:41,978 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 11:40:41,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 11:40:42,212 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:40:42,212 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:40:42,714 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 11:40:42,714 INFO  L286             CfgBuilder]: Removed 6 assue(true) statements.
[2020-11-25 11:40:42,716 INFO  L202        PluginConnector]: Adding new model ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:40:42 BoogieIcfgContainer
[2020-11-25 11:40:42,716 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:40:41" (2/2) ...
[2020-11-25 11:40:42,716 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 11:40:42,717 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@415199fd and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:40:42, skipping insertion in model container
[2020-11-25 11:40:42,717 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 11:40:42,717 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 11:40:42,717 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 11:40:42,719 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 11:40:42,719 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:40:41" (1/3) ...
[2020-11-25 11:40:42,719 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@64e4c2ca and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:40:42, skipping insertion in model container
[2020-11-25 11:40:42,719 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:40:41" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 11:40:42,756 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:40:42 NWAContainer
[2020-11-25 11:40:42,757 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 11:40:42,757 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 11:40:42,757 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 11:40:42,758 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 11:40:42,758 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:40:42" (3/4) ...
[2020-11-25 11:40:42,759 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@11d48a31 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:40:42, skipping insertion in model container
[2020-11-25 11:40:42,759 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:40:42" (4/4) ...
[2020-11-25 11:40:42,762 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 11:40:42,766 INFO  L110   BuchiProductObserver]: Initial RCFG 2176 locations, 2942 edges
[2020-11-25 11:40:42,767 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 11:40:42,779 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 11:40:44,198 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 11:40:44,205 INFO  L110   BuchiProductObserver]: BuchiProgram size 5338 locations, 9526 edges
[2020-11-25 11:40:44,205 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:40:44 BoogieIcfgContainer
[2020-11-25 11:40:44,205 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 11:40:44,206 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 11:40:44,206 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 11:40:44,207 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 11:40:44,208 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:40:44" (1/1) ...
[2020-11-25 11:40:44,338 INFO  L313           BlockEncoder]: Initial Icfg 5338 locations, 9526 edges
[2020-11-25 11:40:44,338 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 11:40:44,338 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 11:40:44,339 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 11:40:44,339 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 11:40:44,354 INFO  L70    emoveInfeasibleEdges]: Removed 162 edges and 16 locations because of local infeasibility
[2020-11-25 11:40:44,374 INFO  L70        RemoveSinkStates]: Removed 218 edges and 126 locations by removing sink states
[2020-11-25 11:40:44,394 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 11:40:44,401 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 11:40:44,408 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 11:40:44,408 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 11:40:44,414 INFO  L313           BlockEncoder]: Encoded RCFG 5174 locations, 9114 edges
[2020-11-25 11:40:44,414 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 11:40:44 BasicIcfg
[2020-11-25 11:40:44,414 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 11:40:44,415 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 11:40:44,415 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 11:40:44,417 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 11:40:44,418 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:40:44,418 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:40:41" (1/6) ...
[2020-11-25 11:40:44,420 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@46dd8b02 and model type ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:40:44, skipping insertion in model container
[2020-11-25 11:40:44,420 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:40:44,420 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:40:41" (2/6) ...
[2020-11-25 11:40:44,420 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@46dd8b02 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:40:44, skipping insertion in model container
[2020-11-25 11:40:44,420 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:40:44,420 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:40:42" (3/6) ...
[2020-11-25 11:40:44,421 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@46dd8b02 and model type ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 11:40:44, skipping insertion in model container
[2020-11-25 11:40:44,421 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:40:44,421 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:40:42" (4/6) ...
[2020-11-25 11:40:44,422 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@46dd8b02 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:40:44, skipping insertion in model container
[2020-11-25 11:40:44,422 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:40:44,422 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:40:44" (5/6) ...
[2020-11-25 11:40:44,422 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@46dd8b02 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 11:40:44, skipping insertion in model container
[2020-11-25 11:40:44,422 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:40:44,422 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 11:40:44" (6/6) ...
[2020-11-25 11:40:44,423 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transfer-fail.bpl_BEv2
[2020-11-25 11:40:44,465 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 11:40:44,466 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 11:40:44,466 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 11:40:44,466 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 11:40:44,466 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 11:40:44,466 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 11:40:44,466 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 11:40:44,466 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 11:40:44,466 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 11:40:44,548 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5174 states.
[2020-11-25 11:40:44,602 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:40:44,602 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:40:44,602 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:40:44,609 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:40:44,610 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:40:44,610 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 11:40:44,610 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5174 states.
[2020-11-25 11:40:44,631 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:40:44,632 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:40:44,632 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:40:44,633 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:40:44,633 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5780]              assume null == 0;
[L5781]  CALL        call this := FreshRefGenerator__success();
[L2620]              havoc newRef;
[L2621]              assume Alloc[newRef] == false;
[L2622]              Alloc[newRef] := true;
[L2623]              assume newRef != null;
[L5781]  RET         call this := FreshRefGenerator__success();
[L5782]              assume now >= 0;
[L5783]              assume DType[this] == ZZZ;
[L5784]              assume msgvalue_MSG == 0;
[L5785]              gas := gas - 53000;
[L5786]  CALL        call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L1487]              havoc __exception;
[L1488]              revert := false;
[L1489]  COND FALSE  !(__exception)
[L1519]  CALL        call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L3917]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND TRUE   revert
[L1519]  RET         call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L1520]              assume !revert && gas >= 0;
[L5786]  RET         call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L5787]              assume !revert && gas >= 0;

Loop:
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND TRUE   choice == 20
[L5647]              gas := gas - 21000;
[L5648]  COND FALSE  !(gas >= 0)
[L5790]  RET         call CorralChoice_ZZZ(this);

[2020-11-25 11:40:44,647 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:40:44,647 INFO  L82        PathProgramCache]: Analyzing trace with hash 1273938347, now seen corresponding path program 1 times
[2020-11-25 11:40:44,651 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:40:44,667 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:40:44,695 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:40:44,697 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:40:44,697 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 11:40:44,964 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:40:44,973 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 11:40:44,973 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 11:40:44,974 INFO  L87              Difference]: Start difference. First operand 5174 states. Second operand 3 states.
[2020-11-25 11:40:45,263 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:40:45,263 INFO  L93              Difference]: Finished difference Result 3417 states and 3964 transitions.
[2020-11-25 11:40:45,263 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 11:40:45,264 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3417 states and 3964 transitions.
[2020-11-25 11:40:45,283 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:40:45,308 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3417 states to 3417 states and 3964 transitions.
[2020-11-25 11:40:45,308 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 11:40:45,311 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 911
[2020-11-25 11:40:45,311 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3417 states and 3964 transitions.
[2020-11-25 11:40:45,319 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:40:45,319 INFO  L728         BuchiCegarLoop]: Abstraction has 3417 states and 3964 transitions.
[2020-11-25 11:40:45,335 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3417 states and 3964 transitions.
[2020-11-25 11:40:45,382 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3417 to 3417.
[2020-11-25 11:40:45,383 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3417 states.
[2020-11-25 11:40:45,389 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3417 states to 3417 states and 3964 transitions.
[2020-11-25 11:40:45,390 INFO  L751         BuchiCegarLoop]: Abstraction has 3417 states and 3964 transitions.
[2020-11-25 11:40:45,390 INFO  L631         BuchiCegarLoop]: Abstraction has 3417 states and 3964 transitions.
[2020-11-25 11:40:45,390 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 11:40:45,390 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3417 states and 3964 transitions.
[2020-11-25 11:40:45,398 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:40:45,398 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:40:45,398 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:40:45,400 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:40:45,400 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5780]              assume null == 0;
[L5781]  CALL        call this := FreshRefGenerator__success();
[L2620]              havoc newRef;
[L2621]              assume Alloc[newRef] == false;
[L2622]              Alloc[newRef] := true;
[L2623]              assume newRef != null;
[L5781]  RET         call this := FreshRefGenerator__success();
[L5782]              assume now >= 0;
[L5783]              assume DType[this] == ZZZ;
[L5784]              assume msgvalue_MSG == 0;
[L5785]              gas := gas - 53000;
[L5786]  CALL        call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L1487]              havoc __exception;
[L1488]              revert := false;
[L1489]  COND FALSE  !(__exception)
[L1519]  CALL        call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L3917]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND TRUE   revert
[L1519]  RET         call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L1520]              assume !revert && gas >= 0;
[L5786]  RET         call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L5787]              assume !revert && gas >= 0;
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND TRUE   choice == 18
[L5659]              gas := gas - 21000;
[L5660]  COND TRUE   gas >= 0
[L5661]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5662]              assume msgvalue_MSG == 0;
[L5663]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s210 && (amount_s210 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s210] + amount_s210 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s210] >= 0) && _balances_ERC20[this][recipient_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L667]               havoc __exception;
[L668]               revert := false;
[L669]   COND FALSE  !(__exception)
[L699]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2938]  COND TRUE   DType[this] == ZZZ
[L2939]  CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L2939]  RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2940]  COND TRUE   revert
[L699]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L700]               assume !revert && gas >= 0;
[L5663]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L5790]  RET         call CorralChoice_ZZZ(this);

Loop:
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND TRUE   choice == 18
[L5659]              gas := gas - 21000;
[L5660]  COND TRUE   gas >= 0
[L5661]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5662]              assume msgvalue_MSG == 0;
[L5663]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s210 && (amount_s210 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s210] + amount_s210 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s210] >= 0) && _balances_ERC20[this][recipient_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L667]               havoc __exception;
[L668]               revert := false;
[L669]   COND FALSE  !(__exception)
[L699]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2938]  COND TRUE   DType[this] == ZZZ
[L2939]  CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L2939]  RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2940]  COND TRUE   revert
[L699]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L700]               assume !revert && gas >= 0;
[L5663]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L5790]  RET         call CorralChoice_ZZZ(this);

[2020-11-25 11:40:45,403 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:40:45,404 INFO  L82        PathProgramCache]: Analyzing trace with hash -923049725, now seen corresponding path program 1 times
[2020-11-25 11:40:45,404 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:40:45,414 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:40:45,433 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:40:45,433 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:40:45,433 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 11:40:45,434 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:40:45,434 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 11:40:45,434 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 11:40:45,435 INFO  L87              Difference]: Start difference. First operand 3417 states and 3964 transitions. cyclomatic complexity: 549 Second operand 4 states.
[2020-11-25 11:40:45,984 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:40:45,984 INFO  L93              Difference]: Finished difference Result 4315 states and 4880 transitions.
[2020-11-25 11:40:45,984 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 11:40:45,985 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4315 states and 4880 transitions.
[2020-11-25 11:40:45,999 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:40:46,023 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4315 states to 4091 states and 4616 transitions.
[2020-11-25 11:40:46,023 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1090
[2020-11-25 11:40:46,026 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1095
[2020-11-25 11:40:46,026 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4091 states and 4616 transitions.
[2020-11-25 11:40:46,035 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:40:46,035 INFO  L728         BuchiCegarLoop]: Abstraction has 4091 states and 4616 transitions.
[2020-11-25 11:40:46,040 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4091 states and 4616 transitions.
[2020-11-25 11:40:46,083 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4091 to 3678.
[2020-11-25 11:40:46,083 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3678 states.
[2020-11-25 11:40:46,089 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3678 states to 3678 states and 4099 transitions.
[2020-11-25 11:40:46,089 INFO  L751         BuchiCegarLoop]: Abstraction has 3678 states and 4099 transitions.
[2020-11-25 11:40:46,089 INFO  L631         BuchiCegarLoop]: Abstraction has 3678 states and 4099 transitions.
[2020-11-25 11:40:46,089 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 11:40:46,089 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3678 states and 4099 transitions.
[2020-11-25 11:40:46,099 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:40:46,099 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:40:46,099 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:40:46,103 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:40:46,103 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5780]              assume null == 0;
[L5781]  CALL        call this := FreshRefGenerator__success();
[L2620]              havoc newRef;
[L2621]              assume Alloc[newRef] == false;
[L2622]              Alloc[newRef] := true;
[L2623]              assume newRef != null;
[L5781]  RET         call this := FreshRefGenerator__success();
[L5782]              assume now >= 0;
[L5783]              assume DType[this] == ZZZ;
[L5784]              assume msgvalue_MSG == 0;
[L5785]              gas := gas - 53000;
[L5786]  CALL        call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L1487]              havoc __exception;
[L1488]              revert := false;
[L1489]  COND FALSE  !(__exception)
[L1519]  CALL        call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L3917]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L3921]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L3921]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3922]  COND FALSE  !(revert)
[L3926]              havoc __var_30;
[L3927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L2758]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L2758]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2759]  COND FALSE  !(revert)
[L2762]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L2762]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2763]  COND FALSE  !(revert)
[L2766]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2724]              assume msgsender_MSG != null;
[L2725]              Balance[this] := 0;
[L2726]              _balances_ERC20[this] := zeroRefintArr();
[L2727]              sum__balances0[this] := 0;
[L2728]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2729]              sum__allowances1[this] := 0;
[L2730]              exceptions_ERC20[this] := zeroRefboolArr();
[L2731]              uniswap_ERC20[this] := null;
[L2732]              _owner_ERC20[this] := null;
[L2733]              _totalSupply_ERC20[this] := 0;
[L2734]              allow_ERC20[this] := false;
[L2736]              _owner_ERC20[this] := owner_s125;
[L2737]              allow_ERC20[this] := false;
[L2766]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2767]  COND FALSE  !(revert)
[L3927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3673]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L3673]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3674]  COND FALSE  !(revert)
[L3677]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3648]              assume msgsender_MSG != null;
[L3649]              Balance[this] := 0;
[L3650]              _name_ERC20Detailed[this] := -1905873549;
[L3651]              _symbol_ERC20Detailed[this] := -1905873549;
[L3652]              _decimals_ERC20Detailed[this] := 0;
[L3654]              _name_ERC20Detailed[this] := name_s600;
[L3655]              _symbol_ERC20Detailed[this] := symbol_s600;
[L3656]              _decimals_ERC20Detailed[this] := decimals_s600;
[L3677]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3678]  COND FALSE  !(revert)
[L3931]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3932]  COND FALSE  !(revert)
[L3935]  CALL        call ZZZ_ZZZ_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3875]              assume msgsender_MSG != null;
[L3876]              Balance[this] := 0;
[L3877]              governance_ZZZ[this] := null;
[L3878]              minters_ZZZ[this] := zeroRefboolArr();
[L3881]              havoc __var_29;
[L3882]              governance_ZZZ[this] := __var_29;
[L3935]  RET         call ZZZ_ZZZ_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3936]  COND FALSE  !(revert)
[L1519]  RET         call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L1520]              assume !revert && gas >= 0;
[L5786]  RET         call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L5787]              assume !revert && gas >= 0;
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND TRUE   choice == 18
[L5659]              gas := gas - 21000;
[L5660]  COND TRUE   gas >= 0
[L5661]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5662]              assume msgvalue_MSG == 0;
[L5663]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s210 && (amount_s210 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s210] + amount_s210 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s210] >= 0) && _balances_ERC20[this][recipient_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L667]               havoc __exception;
[L668]               revert := false;
[L669]   COND FALSE  !(__exception)
[L699]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2938]  COND TRUE   DType[this] == ZZZ
[L2939]  CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L2939]  RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2940]  COND FALSE  !(revert)
[L2951]  COND TRUE   DType[this] == ZZZ
[L2952]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND TRUE   sender_s439 == _owner_ERC20[this] || allow_ERC20[this]
[L3457]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3457]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3458]  COND FALSE  !(revert)
[L3461]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3462]              _balances_ERC20[this][sender_s439] := __var_17;
[L3463]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3464]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3464]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3465]  COND FALSE  !(revert)
[L3468]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3469]              _balances_ERC20[this][recipient_s439] := __var_18;
[L3470]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3471]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2952]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L2953]  COND FALSE  !(revert)
[L2964]              __ret_0_ := true;
[L699]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L700]               assume !revert && gas >= 0;
[L5663]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L5790]  RET         call CorralChoice_ZZZ(this);

Loop:
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND TRUE   choice == 18
[L5659]              gas := gas - 21000;
[L5660]  COND TRUE   gas >= 0
[L5661]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5662]              assume msgvalue_MSG == 0;
[L5663]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s210 && (amount_s210 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s210] + amount_s210 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s210] >= 0) && _balances_ERC20[this][recipient_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L667]               havoc __exception;
[L668]               revert := false;
[L669]   COND FALSE  !(__exception)
[L699]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2938]  COND TRUE   DType[this] == ZZZ
[L2939]  CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L2939]  RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2940]  COND FALSE  !(revert)
[L2951]  COND TRUE   DType[this] == ZZZ
[L2952]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND TRUE   sender_s439 == _owner_ERC20[this] || allow_ERC20[this]
[L3457]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3457]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3458]  COND FALSE  !(revert)
[L3461]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3462]              _balances_ERC20[this][sender_s439] := __var_17;
[L3463]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3464]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3464]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3465]  COND FALSE  !(revert)
[L3468]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3469]              _balances_ERC20[this][recipient_s439] := __var_18;
[L3470]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3471]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2952]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L2953]  COND FALSE  !(revert)
[L2964]              __ret_0_ := true;
[L699]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L700]               assume !revert && gas >= 0;
[L5663]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L5790]  RET         call CorralChoice_ZZZ(this);

[2020-11-25 11:40:46,109 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:40:46,110 INFO  L82        PathProgramCache]: Analyzing trace with hash 1623628868, now seen corresponding path program 1 times
[2020-11-25 11:40:46,110 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:40:46,134 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:40:46,330 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 11:40:46,330 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:40:46,330 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 11:40:46,331 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:40:46,332 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 11:40:46,332 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=34, Invalid=238, Unknown=0, NotChecked=0, Total=272
[2020-11-25 11:40:46,332 INFO  L87              Difference]: Start difference. First operand 3678 states and 4099 transitions. cyclomatic complexity: 423 Second operand 17 states.
[2020-11-25 11:40:48,895 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:40:48,895 INFO  L93              Difference]: Finished difference Result 3762 states and 4195 transitions.
[2020-11-25 11:40:48,895 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 11:40:48,895 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3762 states and 4195 transitions.
[2020-11-25 11:40:48,903 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:40:48,915 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3762 states to 3762 states and 4195 transitions.
[2020-11-25 11:40:48,915 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1042
[2020-11-25 11:40:48,916 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1042
[2020-11-25 11:40:48,916 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3762 states and 4195 transitions.
[2020-11-25 11:40:48,920 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:40:48,920 INFO  L728         BuchiCegarLoop]: Abstraction has 3762 states and 4195 transitions.
[2020-11-25 11:40:48,923 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3762 states and 4195 transitions.
[2020-11-25 11:40:48,976 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3762 to 3536.
[2020-11-25 11:40:48,976 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3536 states.
[2020-11-25 11:40:48,980 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3536 states to 3536 states and 3920 transitions.
[2020-11-25 11:40:48,980 INFO  L751         BuchiCegarLoop]: Abstraction has 3536 states and 3920 transitions.
[2020-11-25 11:40:48,980 INFO  L631         BuchiCegarLoop]: Abstraction has 3536 states and 3920 transitions.
[2020-11-25 11:40:48,980 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 11:40:48,980 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3536 states and 3920 transitions.
[2020-11-25 11:40:48,984 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:40:48,984 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:40:48,984 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:40:48,987 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:40:48,987 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5780]              assume null == 0;
[L5781]  CALL        call this := FreshRefGenerator__success();
[L2620]              havoc newRef;
[L2621]              assume Alloc[newRef] == false;
[L2622]              Alloc[newRef] := true;
[L2623]              assume newRef != null;
[L5781]  RET         call this := FreshRefGenerator__success();
[L5782]              assume now >= 0;
[L5783]              assume DType[this] == ZZZ;
[L5784]              assume msgvalue_MSG == 0;
[L5785]              gas := gas - 53000;
[L5786]  CALL        call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L1487]              havoc __exception;
[L1488]              revert := false;
[L1489]  COND TRUE   __exception
[L1490]              __tmp__Balance := Balance;
[L1491]              __tmp__DType := DType;
[L1492]              __tmp__Alloc := Alloc;
[L1493]              __tmp__balance_ADDR := balance_ADDR;
[L1494]              __tmp__M_Ref_int := M_Ref_int;
[L1495]              __tmp__sum__balances0 := sum__balances0;
[L1496]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1497]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1498]              __tmp__sum__allowances1 := sum__allowances1;
[L1499]              __tmp__M_Ref_bool := M_Ref_bool;
[L1500]              __tmp__sum_exceptions2 := sum_exceptions2;
[L1501]              __tmp__sum_minters3 := sum_minters3;
[L1502]              __tmp__Length := Length;
[L1503]              __tmp__now := now;
[L1504]              __tmp___balances_ERC20 := _balances_ERC20;
[L1505]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1506]              __tmp__exceptions_ERC20 := exceptions_ERC20;
[L1507]              __tmp__uniswap_ERC20 := uniswap_ERC20;
[L1508]              __tmp___owner_ERC20 := _owner_ERC20;
[L1509]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1510]              __tmp__allow_ERC20 := allow_ERC20;
[L1511]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1512]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1513]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1514]              __tmp__governance_ZZZ := governance_ZZZ;
[L1515]              __tmp__minters_ZZZ := minters_ZZZ;
[L1516]  CALL        call ZZZ_ZZZ__fail(this, msgsender_MSG, msgvalue_MSG);
[L3889]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2676]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2661]              assume msgsender_MSG != null;
[L2662]              __tmp__Balance[this] := 0;
[L2676]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2677]  COND FALSE  !(revert)
[L3889]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3890]  COND FALSE  !(revert)
[L3893]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2644]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2629]              assume msgsender_MSG != null;
[L2630]              __tmp__Balance[this] := 0;
[L2644]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2645]  COND FALSE  !(revert)
[L3893]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3894]  COND FALSE  !(revert)
[L3898]              havoc __var_30;
[L3899]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L2742]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2676]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2661]              assume msgsender_MSG != null;
[L2662]              __tmp__Balance[this] := 0;
[L2676]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2677]  COND FALSE  !(revert)
[L2742]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2743]  COND FALSE  !(revert)
[L2746]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2644]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2629]              assume msgsender_MSG != null;
[L2630]              __tmp__Balance[this] := 0;
[L2644]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2645]  COND FALSE  !(revert)
[L2746]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2747]  COND FALSE  !(revert)
[L2750]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2705]              assume msgsender_MSG != null;
[L2706]              __tmp__Balance[this] := 0;
[L2707]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2708]              __tmp__sum__balances0[this] := 0;
[L2709]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2710]              __tmp__sum__allowances1[this] := 0;
[L2711]              __tmp__exceptions_ERC20[this] := zeroRefboolArr();
[L2712]              __tmp__uniswap_ERC20[this] := null;
[L2713]              __tmp___owner_ERC20[this] := null;
[L2714]              __tmp___totalSupply_ERC20[this] := 0;
[L2715]              __tmp__allow_ERC20[this] := false;
[L2717]              __tmp___owner_ERC20[this] := owner_s125;
[L2718]              __tmp__allow_ERC20[this] := false;
[L2750]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2751]  COND FALSE  !(revert)
[L3899]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L3900]  COND FALSE  !(revert)
[L3903]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3661]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2644]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2629]              assume msgsender_MSG != null;
[L2630]              __tmp__Balance[this] := 0;
[L2644]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2645]  COND FALSE  !(revert)
[L3661]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3662]  COND FALSE  !(revert)
[L3665]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3634]              assume msgsender_MSG != null;
[L3635]              __tmp__Balance[this] := 0;
[L3636]              __tmp___name_ERC20Detailed[this] := -1905873549;
[L3637]              __tmp___symbol_ERC20Detailed[this] := -1905873549;
[L3638]              __tmp___decimals_ERC20Detailed[this] := 0;
[L3640]              __tmp___name_ERC20Detailed[this] := name_s600;
[L3641]              __tmp___symbol_ERC20Detailed[this] := symbol_s600;
[L3642]              __tmp___decimals_ERC20Detailed[this] := decimals_s600;
[L3665]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3666]  COND FALSE  !(revert)
[L3903]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3904]  COND FALSE  !(revert)
[L3907]  CALL        call ZZZ_ZZZ_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3860]              assume msgsender_MSG != null;
[L3861]              __tmp__Balance[this] := 0;
[L3862]              __tmp__governance_ZZZ[this] := null;
[L3863]              __tmp__minters_ZZZ[this] := zeroRefboolArr();
[L3866]              havoc __var_29;
[L3867]              __tmp__governance_ZZZ[this] := __var_29;
[L3907]  RET         call ZZZ_ZZZ_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3908]  COND FALSE  !(revert)
[L1516]  RET         call ZZZ_ZZZ__fail(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume revert || gas < 0;
[L5786]  RET         call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L5787]              assume !revert && gas >= 0;
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND TRUE   choice == 18
[L5659]              gas := gas - 21000;
[L5660]  COND TRUE   gas >= 0
[L5661]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5662]              assume msgvalue_MSG == 0;
[L5663]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s210 && (amount_s210 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s210] + amount_s210 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s210] >= 0) && _balances_ERC20[this][recipient_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L667]               havoc __exception;
[L668]               revert := false;
[L669]   COND FALSE  !(__exception)
[L699]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2938]  COND TRUE   DType[this] == ZZZ
[L2939]  CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L2939]  RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2940]  COND FALSE  !(revert)
[L2951]  COND TRUE   DType[this] == ZZZ
[L2952]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND TRUE   sender_s439 == _owner_ERC20[this] || allow_ERC20[this]
[L3457]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3457]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3458]  COND FALSE  !(revert)
[L3461]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3462]              _balances_ERC20[this][sender_s439] := __var_17;
[L3463]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3464]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3464]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3465]  COND FALSE  !(revert)
[L3468]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3469]              _balances_ERC20[this][recipient_s439] := __var_18;
[L3470]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3471]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2952]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L2953]  COND FALSE  !(revert)
[L2964]              __ret_0_ := true;
[L699]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L700]               assume !revert && gas >= 0;
[L5663]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L5790]  RET         call CorralChoice_ZZZ(this);

Loop:
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND TRUE   choice == 18
[L5659]              gas := gas - 21000;
[L5660]  COND TRUE   gas >= 0
[L5661]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5662]              assume msgvalue_MSG == 0;
[L5663]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s210 && (amount_s210 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s210] + amount_s210 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s210] >= 0) && _balances_ERC20[this][recipient_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L667]               havoc __exception;
[L668]               revert := false;
[L669]   COND FALSE  !(__exception)
[L699]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2938]  COND TRUE   DType[this] == ZZZ
[L2939]  CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L2939]  RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2940]  COND FALSE  !(revert)
[L2951]  COND TRUE   DType[this] == ZZZ
[L2952]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND TRUE   sender_s439 == _owner_ERC20[this] || allow_ERC20[this]
[L3457]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3457]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3458]  COND FALSE  !(revert)
[L3461]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3462]              _balances_ERC20[this][sender_s439] := __var_17;
[L3463]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3464]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3464]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3465]  COND FALSE  !(revert)
[L3468]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3469]              _balances_ERC20[this][recipient_s439] := __var_18;
[L3470]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3471]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2952]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L2953]  COND FALSE  !(revert)
[L2964]              __ret_0_ := true;
[L699]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L700]               assume !revert && gas >= 0;
[L5663]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L5790]  RET         call CorralChoice_ZZZ(this);

[2020-11-25 11:40:48,994 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:40:48,994 INFO  L82        PathProgramCache]: Analyzing trace with hash 1704672137, now seen corresponding path program 1 times
[2020-11-25 11:40:48,995 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:40:49,004 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:40:49,049 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 11:40:49,049 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:40:49,049 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 11:40:49,050 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:40:49,050 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 11:40:49,050 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 11:40:49,050 INFO  L87              Difference]: Start difference. First operand 3536 states and 3920 transitions. cyclomatic complexity: 387 Second operand 4 states.
[2020-11-25 11:40:49,336 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:40:49,337 INFO  L93              Difference]: Finished difference Result 4337 states and 4931 transitions.
[2020-11-25 11:40:49,337 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 11:40:49,338 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4337 states and 4931 transitions.
[2020-11-25 11:40:49,351 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 11:40:49,366 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4337 states to 4203 states and 4794 transitions.
[2020-11-25 11:40:49,366 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1161
[2020-11-25 11:40:49,367 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1161
[2020-11-25 11:40:49,367 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4203 states and 4794 transitions.
[2020-11-25 11:40:49,371 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:40:49,371 INFO  L728         BuchiCegarLoop]: Abstraction has 4203 states and 4794 transitions.
[2020-11-25 11:40:49,374 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4203 states and 4794 transitions.
[2020-11-25 11:40:49,414 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4203 to 3402.
[2020-11-25 11:40:49,415 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3402 states.
[2020-11-25 11:40:49,419 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3402 states to 3402 states and 3782 transitions.
[2020-11-25 11:40:49,419 INFO  L751         BuchiCegarLoop]: Abstraction has 3402 states and 3782 transitions.
[2020-11-25 11:40:49,419 INFO  L631         BuchiCegarLoop]: Abstraction has 3402 states and 3782 transitions.
[2020-11-25 11:40:49,419 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 11:40:49,419 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3402 states and 3782 transitions.
[2020-11-25 11:40:49,425 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:40:49,425 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:40:49,425 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:40:49,428 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:40:49,428 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5780]              assume null == 0;
[L5781]  CALL        call this := FreshRefGenerator__success();
[L2620]              havoc newRef;
[L2621]              assume Alloc[newRef] == false;
[L2622]              Alloc[newRef] := true;
[L2623]              assume newRef != null;
[L5781]  RET         call this := FreshRefGenerator__success();
[L5782]              assume now >= 0;
[L5783]              assume DType[this] == ZZZ;
[L5784]              assume msgvalue_MSG == 0;
[L5785]              gas := gas - 53000;
[L5786]  CALL        call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L1487]              havoc __exception;
[L1488]              revert := false;
[L1489]  COND FALSE  !(__exception)
[L1519]  CALL        call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L3917]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L3921]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L3921]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3922]  COND FALSE  !(revert)
[L3926]              havoc __var_30;
[L3927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L2758]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L2758]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2759]  COND FALSE  !(revert)
[L2762]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L2762]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2763]  COND FALSE  !(revert)
[L2766]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2724]              assume msgsender_MSG != null;
[L2725]              Balance[this] := 0;
[L2726]              _balances_ERC20[this] := zeroRefintArr();
[L2727]              sum__balances0[this] := 0;
[L2728]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2729]              sum__allowances1[this] := 0;
[L2730]              exceptions_ERC20[this] := zeroRefboolArr();
[L2731]              uniswap_ERC20[this] := null;
[L2732]              _owner_ERC20[this] := null;
[L2733]              _totalSupply_ERC20[this] := 0;
[L2734]              allow_ERC20[this] := false;
[L2736]              _owner_ERC20[this] := owner_s125;
[L2737]              allow_ERC20[this] := false;
[L2766]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2767]  COND FALSE  !(revert)
[L3927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3673]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L3673]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3674]  COND FALSE  !(revert)
[L3677]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3648]              assume msgsender_MSG != null;
[L3649]              Balance[this] := 0;
[L3650]              _name_ERC20Detailed[this] := -1905873549;
[L3651]              _symbol_ERC20Detailed[this] := -1905873549;
[L3652]              _decimals_ERC20Detailed[this] := 0;
[L3654]              _name_ERC20Detailed[this] := name_s600;
[L3655]              _symbol_ERC20Detailed[this] := symbol_s600;
[L3656]              _decimals_ERC20Detailed[this] := decimals_s600;
[L3677]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3678]  COND FALSE  !(revert)
[L3931]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3932]  COND FALSE  !(revert)
[L3935]  CALL        call ZZZ_ZZZ_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3875]              assume msgsender_MSG != null;
[L3876]              Balance[this] := 0;
[L3877]              governance_ZZZ[this] := null;
[L3878]              minters_ZZZ[this] := zeroRefboolArr();
[L3881]              havoc __var_29;
[L3882]              governance_ZZZ[this] := __var_29;
[L3935]  RET         call ZZZ_ZZZ_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3936]  COND FALSE  !(revert)
[L1519]  RET         call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L1520]              assume !revert && gas >= 0;
[L5786]  RET         call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L5787]              assume !revert && gas >= 0;
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND FALSE  !(choice == 18)
[L5665]  COND FALSE  !(choice == 17)
[L5671]  COND FALSE  !(choice == 16)
[L5678]  COND FALSE  !(choice == 15)
[L5685]  COND FALSE  !(choice == 14)
[L5691]  COND FALSE  !(choice == 13)
[L5697]  COND FALSE  !(choice == 12)
[L5703]  COND FALSE  !(choice == 11)
[L5710]  COND FALSE  !(choice == 10)
[L5717]  COND FALSE  !(choice == 9)
[L5723]  COND FALSE  !(choice == 8)
[L5729]  COND FALSE  !(choice == 7)
[L5735]  COND FALSE  !(choice == 6)
[L5741]  COND FALSE  !(choice == 5)
[L5747]  COND TRUE   choice == 4
[L5748]              gas := gas - 21000;
[L5749]  COND TRUE   gas >= 0
[L5750]              assume amount_s791 >= 0 && amount_s791 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5751]              assume msgvalue_MSG == 0;
[L5752]  CALL        call mint~address~uint256_ZZZ(this, msgsender_MSG, msgvalue_MSG, account_s791, amount_s791);
[L1558]              havoc __exception;
[L1559]              revert := false;
[L1560]  COND FALSE  !(__exception)
[L1590]  CALL        call mint~address~uint256_ZZZ__success(this, msgsender_MSG, msgvalue_MSG, account_s791, amount_s791);
[L3959]  COND FALSE  !(!minters_ZZZ[this][msgsender_MSG])
[L3963]  COND TRUE   DType[this] == ZZZ
[L3964]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s791, amount_s791);
[L3523]              __var_21 := null;
[L3524]  COND FALSE  !(!(account_s482 != null))
[L3528]  CALL        call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s482);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3528]  RET         call __var_22 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s482);
[L3529]  COND FALSE  !(revert)
[L3532]              _totalSupply_ERC20[this] := __var_22;
[L3533]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s482], amount_s482);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3533]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s482], amount_s482);
[L3534]  COND FALSE  !(revert)
[L3537]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s482];
[L3538]              _balances_ERC20[this][account_s482] := __var_23;
[L3539]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s482];
[L3540]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3964]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s791, amount_s791);
[L3965]  COND FALSE  !(revert)
[L1590]  RET         call mint~address~uint256_ZZZ__success(this, msgsender_MSG, msgvalue_MSG, account_s791, amount_s791);
[L1591]              assume !revert && gas >= 0;
[L5752]  RET         call mint~address~uint256_ZZZ(this, msgsender_MSG, msgvalue_MSG, account_s791, amount_s791);
[L5790]  RET         call CorralChoice_ZZZ(this);
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND TRUE   choice == 18
[L5659]              gas := gas - 21000;
[L5660]  COND TRUE   gas >= 0
[L5661]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5662]              assume msgvalue_MSG == 0;
[L5663]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s210 && (amount_s210 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s210] + amount_s210 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s210] >= 0) && _balances_ERC20[this][recipient_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L667]               havoc __exception;
[L668]               revert := false;
[L669]   COND FALSE  !(__exception)
[L699]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2938]  COND TRUE   DType[this] == ZZZ
[L2939]  CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L2939]  RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2940]  COND FALSE  !(revert)
[L2951]  COND TRUE   DType[this] == ZZZ
[L2952]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND TRUE   sender_s439 == _owner_ERC20[this] || allow_ERC20[this]
[L3457]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3457]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3458]  COND FALSE  !(revert)
[L3461]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3462]              _balances_ERC20[this][sender_s439] := __var_17;
[L3463]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3464]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3464]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3465]  COND FALSE  !(revert)
[L3468]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3469]              _balances_ERC20[this][recipient_s439] := __var_18;
[L3470]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3471]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2952]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L2953]  COND FALSE  !(revert)
[L2964]              __ret_0_ := true;
[L699]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L700]               assume !revert && gas >= 0;
[L5663]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L5790]  RET         call CorralChoice_ZZZ(this);

Loop:
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND TRUE   choice == 20
[L5647]              gas := gas - 21000;
[L5648]  COND FALSE  !(gas >= 0)
[L5790]  RET         call CorralChoice_ZZZ(this);

[2020-11-25 11:40:49,434 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:40:49,434 INFO  L82        PathProgramCache]: Analyzing trace with hash 544282767, now seen corresponding path program 1 times
[2020-11-25 11:40:49,435 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:40:49,454 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:40:49,563 INFO  L134       CoverageAnalysis]: Checked inductivity of 105 backedges. 1 proven. 59 refuted. 0 times theorem prover too weak. 45 trivial. 0 not checked.
[2020-11-25 11:40:49,563 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 11:40:49,563 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 11:40:49,564 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:40:49,564 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 11:40:49,564 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-11-25 11:40:49,564 INFO  L87              Difference]: Start difference. First operand 3402 states and 3782 transitions. cyclomatic complexity: 383 Second operand 10 states.
[2020-11-25 11:40:50,665 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:40:50,665 INFO  L93              Difference]: Finished difference Result 3431 states and 3824 transitions.
[2020-11-25 11:40:50,665 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 11:40:50,666 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3431 states and 3824 transitions.
[2020-11-25 11:40:50,672 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:40:50,679 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3431 states to 3431 states and 3824 transitions.
[2020-11-25 11:40:50,679 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 956
[2020-11-25 11:40:50,680 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 956
[2020-11-25 11:40:50,680 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3431 states and 3824 transitions.
[2020-11-25 11:40:50,682 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:40:50,683 INFO  L728         BuchiCegarLoop]: Abstraction has 3431 states and 3824 transitions.
[2020-11-25 11:40:50,685 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3431 states and 3824 transitions.
[2020-11-25 11:40:50,714 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3431 to 3431.
[2020-11-25 11:40:50,714 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3431 states.
[2020-11-25 11:40:50,719 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3431 states to 3431 states and 3824 transitions.
[2020-11-25 11:40:50,719 INFO  L751         BuchiCegarLoop]: Abstraction has 3431 states and 3824 transitions.
[2020-11-25 11:40:50,719 INFO  L631         BuchiCegarLoop]: Abstraction has 3431 states and 3824 transitions.
[2020-11-25 11:40:50,719 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 11:40:50,719 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3431 states and 3824 transitions.
[2020-11-25 11:40:50,724 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:40:50,724 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:40:50,724 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:40:50,728 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:40:50,728 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5780]              assume null == 0;
[L5781]  CALL        call this := FreshRefGenerator__success();
[L2620]              havoc newRef;
[L2621]              assume Alloc[newRef] == false;
[L2622]              Alloc[newRef] := true;
[L2623]              assume newRef != null;
[L5781]  RET         call this := FreshRefGenerator__success();
[L5782]              assume now >= 0;
[L5783]              assume DType[this] == ZZZ;
[L5784]              assume msgvalue_MSG == 0;
[L5785]              gas := gas - 53000;
[L5786]  CALL        call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L1487]              havoc __exception;
[L1488]              revert := false;
[L1489]  COND FALSE  !(__exception)
[L1519]  CALL        call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L3917]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L3921]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L3921]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3922]  COND FALSE  !(revert)
[L3926]              havoc __var_30;
[L3927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L2758]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L2758]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2759]  COND FALSE  !(revert)
[L2762]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L2762]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2763]  COND FALSE  !(revert)
[L2766]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2724]              assume msgsender_MSG != null;
[L2725]              Balance[this] := 0;
[L2726]              _balances_ERC20[this] := zeroRefintArr();
[L2727]              sum__balances0[this] := 0;
[L2728]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2729]              sum__allowances1[this] := 0;
[L2730]              exceptions_ERC20[this] := zeroRefboolArr();
[L2731]              uniswap_ERC20[this] := null;
[L2732]              _owner_ERC20[this] := null;
[L2733]              _totalSupply_ERC20[this] := 0;
[L2734]              allow_ERC20[this] := false;
[L2736]              _owner_ERC20[this] := owner_s125;
[L2737]              allow_ERC20[this] := false;
[L2766]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2767]  COND FALSE  !(revert)
[L3927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3673]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L3673]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3674]  COND FALSE  !(revert)
[L3677]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3648]              assume msgsender_MSG != null;
[L3649]              Balance[this] := 0;
[L3650]              _name_ERC20Detailed[this] := -1905873549;
[L3651]              _symbol_ERC20Detailed[this] := -1905873549;
[L3652]              _decimals_ERC20Detailed[this] := 0;
[L3654]              _name_ERC20Detailed[this] := name_s600;
[L3655]              _symbol_ERC20Detailed[this] := symbol_s600;
[L3656]              _decimals_ERC20Detailed[this] := decimals_s600;
[L3677]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3678]  COND FALSE  !(revert)
[L3931]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3932]  COND FALSE  !(revert)
[L3935]  CALL        call ZZZ_ZZZ_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3875]              assume msgsender_MSG != null;
[L3876]              Balance[this] := 0;
[L3877]              governance_ZZZ[this] := null;
[L3878]              minters_ZZZ[this] := zeroRefboolArr();
[L3881]              havoc __var_29;
[L3882]              governance_ZZZ[this] := __var_29;
[L3935]  RET         call ZZZ_ZZZ_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3936]  COND FALSE  !(revert)
[L1519]  RET         call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L1520]              assume !revert && gas >= 0;
[L5786]  RET         call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L5787]              assume !revert && gas >= 0;
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND TRUE   choice == 18
[L5659]              gas := gas - 21000;
[L5660]  COND TRUE   gas >= 0
[L5661]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5662]              assume msgvalue_MSG == 0;
[L5663]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != recipient_s210 && (amount_s210 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s210] + amount_s210 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s210] >= 0) && _balances_ERC20[this][recipient_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L667]               havoc __exception;
[L668]               revert := false;
[L669]   COND FALSE  !(__exception)
[L699]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2938]  COND FALSE  !(DType[this] == ZZZ)
[L2943]  COND TRUE   DType[this] == ERC20
[L2944]  CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L2944]  RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  COND FALSE  !(revert)
[L2951]  COND FALSE  !(DType[this] == ZZZ)
[L2956]  COND TRUE   DType[this] == ERC20
[L2957]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND TRUE   sender_s439 == _owner_ERC20[this] || allow_ERC20[this]
[L3457]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3457]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3458]  COND FALSE  !(revert)
[L3461]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3462]              _balances_ERC20[this][sender_s439] := __var_17;
[L3463]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3464]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3464]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3465]  COND FALSE  !(revert)
[L3468]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3469]              _balances_ERC20[this][recipient_s439] := __var_18;
[L3470]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3471]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2957]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L2958]  COND FALSE  !(revert)
[L2964]              __ret_0_ := true;
[L699]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L700]               assume !revert && gas >= 0;
[L5663]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L5790]  RET         call CorralChoice_ZZZ(this);
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND TRUE   choice == 18
[L5659]              gas := gas - 21000;
[L5660]  COND TRUE   gas >= 0
[L5661]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5662]              assume msgvalue_MSG == 0;
[L5663]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s210 && (amount_s210 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s210] + amount_s210 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s210] >= 0) && _balances_ERC20[this][recipient_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L667]               havoc __exception;
[L668]               revert := false;
[L669]   COND FALSE  !(__exception)
[L699]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2938]  COND TRUE   DType[this] == ZZZ
[L2939]  CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L2939]  RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2940]  COND FALSE  !(revert)
[L2951]  COND TRUE   DType[this] == ZZZ
[L2952]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND TRUE   sender_s439 == _owner_ERC20[this] || allow_ERC20[this]
[L3457]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3457]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3458]  COND FALSE  !(revert)
[L3461]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3462]              _balances_ERC20[this][sender_s439] := __var_17;
[L3463]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3464]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3464]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3465]  COND FALSE  !(revert)
[L3468]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3469]              _balances_ERC20[this][recipient_s439] := __var_18;
[L3470]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3471]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2952]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L2953]  COND FALSE  !(revert)
[L2964]              __ret_0_ := true;
[L699]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L700]               assume !revert && gas >= 0;
[L5663]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L5790]  RET         call CorralChoice_ZZZ(this);

Loop:
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND TRUE   choice == 18
[L5659]              gas := gas - 21000;
[L5660]  COND TRUE   gas >= 0
[L5661]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5662]              assume msgvalue_MSG == 0;
[L5663]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s210 && (amount_s210 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s210] + amount_s210 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s210] >= 0) && _balances_ERC20[this][recipient_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L667]               havoc __exception;
[L668]               revert := false;
[L669]   COND FALSE  !(__exception)
[L699]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2938]  COND TRUE   DType[this] == ZZZ
[L2939]  CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L2939]  RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2940]  COND FALSE  !(revert)
[L2951]  COND TRUE   DType[this] == ZZZ
[L2952]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND TRUE   sender_s439 == _owner_ERC20[this] || allow_ERC20[this]
[L3457]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3457]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3458]  COND FALSE  !(revert)
[L3461]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3462]              _balances_ERC20[this][sender_s439] := __var_17;
[L3463]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3464]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3464]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3465]  COND FALSE  !(revert)
[L3468]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3469]              _balances_ERC20[this][recipient_s439] := __var_18;
[L3470]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3471]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2952]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L2953]  COND FALSE  !(revert)
[L2964]              __ret_0_ := true;
[L699]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L700]               assume !revert && gas >= 0;
[L5663]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L5790]  RET         call CorralChoice_ZZZ(this);

[2020-11-25 11:40:50,734 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:40:50,734 INFO  L82        PathProgramCache]: Analyzing trace with hash -67233687, now seen corresponding path program 1 times
[2020-11-25 11:40:50,735 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:40:50,753 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:40:50,843 INFO  L134       CoverageAnalysis]: Checked inductivity of 109 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 108 trivial. 0 not checked.
[2020-11-25 11:40:50,843 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:40:50,843 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 11:40:50,844 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:40:50,844 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 11:40:50,844 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 11:40:50,844 INFO  L87              Difference]: Start difference. First operand 3431 states and 3824 transitions. cyclomatic complexity: 399 Second operand 6 states.
[2020-11-25 11:40:50,930 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:40:50,930 INFO  L93              Difference]: Finished difference Result 3467 states and 3859 transitions.
[2020-11-25 11:40:50,930 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 11:40:50,930 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3467 states and 3859 transitions.
[2020-11-25 11:40:50,937 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:40:50,944 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3467 states to 3411 states and 3796 transitions.
[2020-11-25 11:40:50,944 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 954
[2020-11-25 11:40:50,944 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 954
[2020-11-25 11:40:50,944 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3411 states and 3796 transitions.
[2020-11-25 11:40:50,947 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:40:50,947 INFO  L728         BuchiCegarLoop]: Abstraction has 3411 states and 3796 transitions.
[2020-11-25 11:40:50,950 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3411 states and 3796 transitions.
[2020-11-25 11:40:50,968 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3411 to 3411.
[2020-11-25 11:40:50,968 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3411 states.
[2020-11-25 11:40:50,972 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3411 states to 3411 states and 3796 transitions.
[2020-11-25 11:40:50,972 INFO  L751         BuchiCegarLoop]: Abstraction has 3411 states and 3796 transitions.
[2020-11-25 11:40:50,972 INFO  L631         BuchiCegarLoop]: Abstraction has 3411 states and 3796 transitions.
[2020-11-25 11:40:50,972 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 11:40:50,972 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3411 states and 3796 transitions.
[2020-11-25 11:40:50,975 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:40:50,975 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:40:50,975 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:40:50,976 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:40:50,977 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5780]              assume null == 0;
[L5781]  CALL        call this := FreshRefGenerator__success();
[L2620]              havoc newRef;
[L2621]              assume Alloc[newRef] == false;
[L2622]              Alloc[newRef] := true;
[L2623]              assume newRef != null;
[L5781]  RET         call this := FreshRefGenerator__success();
[L5782]              assume now >= 0;
[L5783]              assume DType[this] == ZZZ;
[L5784]              assume msgvalue_MSG == 0;
[L5785]              gas := gas - 53000;
[L5786]  CALL        call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L1487]              havoc __exception;
[L1488]              revert := false;
[L1489]  COND FALSE  !(__exception)
[L1519]  CALL        call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L3917]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L3921]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L3921]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3922]  COND FALSE  !(revert)
[L3926]              havoc __var_30;
[L3927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L2758]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L2758]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2759]  COND FALSE  !(revert)
[L2762]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L2762]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2763]  COND FALSE  !(revert)
[L2766]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2724]              assume msgsender_MSG != null;
[L2725]              Balance[this] := 0;
[L2726]              _balances_ERC20[this] := zeroRefintArr();
[L2727]              sum__balances0[this] := 0;
[L2728]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2729]              sum__allowances1[this] := 0;
[L2730]              exceptions_ERC20[this] := zeroRefboolArr();
[L2731]              uniswap_ERC20[this] := null;
[L2732]              _owner_ERC20[this] := null;
[L2733]              _totalSupply_ERC20[this] := 0;
[L2734]              allow_ERC20[this] := false;
[L2736]              _owner_ERC20[this] := owner_s125;
[L2737]              allow_ERC20[this] := false;
[L2766]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2767]  COND FALSE  !(revert)
[L3927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3673]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L3673]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3674]  COND FALSE  !(revert)
[L3677]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3648]              assume msgsender_MSG != null;
[L3649]              Balance[this] := 0;
[L3650]              _name_ERC20Detailed[this] := -1905873549;
[L3651]              _symbol_ERC20Detailed[this] := -1905873549;
[L3652]              _decimals_ERC20Detailed[this] := 0;
[L3654]              _name_ERC20Detailed[this] := name_s600;
[L3655]              _symbol_ERC20Detailed[this] := symbol_s600;
[L3656]              _decimals_ERC20Detailed[this] := decimals_s600;
[L3677]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3678]  COND FALSE  !(revert)
[L3931]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3932]  COND FALSE  !(revert)
[L3935]  CALL        call ZZZ_ZZZ_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3875]              assume msgsender_MSG != null;
[L3876]              Balance[this] := 0;
[L3877]              governance_ZZZ[this] := null;
[L3878]              minters_ZZZ[this] := zeroRefboolArr();
[L3881]              havoc __var_29;
[L3882]              governance_ZZZ[this] := __var_29;
[L3935]  RET         call ZZZ_ZZZ_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3936]  COND FALSE  !(revert)
[L1519]  RET         call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L1520]              assume !revert && gas >= 0;
[L5786]  RET         call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L5787]              assume !revert && gas >= 0;
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND TRUE   choice == 18
[L5659]              gas := gas - 21000;
[L5660]  COND TRUE   gas >= 0
[L5661]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5662]              assume msgvalue_MSG == 0;
[L5663]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != recipient_s210 && (amount_s210 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s210] + amount_s210 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s210] >= 0) && _balances_ERC20[this][recipient_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L667]               havoc __exception;
[L668]               revert := false;
[L669]   COND FALSE  !(__exception)
[L699]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2938]  COND TRUE   DType[this] == ZZZ
[L2939]  CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L2939]  RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2940]  COND FALSE  !(revert)
[L2951]  COND TRUE   DType[this] == ZZZ
[L2952]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND TRUE   sender_s439 == _owner_ERC20[this] || allow_ERC20[this]
[L3457]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3457]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3458]  COND FALSE  !(revert)
[L3461]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3462]              _balances_ERC20[this][sender_s439] := __var_17;
[L3463]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3464]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3464]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3465]  COND FALSE  !(revert)
[L3468]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3469]              _balances_ERC20[this][recipient_s439] := __var_18;
[L3470]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3471]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2952]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L2953]  COND FALSE  !(revert)
[L2964]              __ret_0_ := true;
[L699]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L700]               assume !revert && gas >= 0;
[L5663]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L5790]  RET         call CorralChoice_ZZZ(this);
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND TRUE   choice == 18
[L5659]              gas := gas - 21000;
[L5660]  COND TRUE   gas >= 0
[L5661]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5662]              assume msgvalue_MSG == 0;
[L5663]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s210 && (amount_s210 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s210] + amount_s210 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s210] >= 0) && _balances_ERC20[this][recipient_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L667]               havoc __exception;
[L668]               revert := false;
[L669]   COND FALSE  !(__exception)
[L699]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2938]  COND TRUE   DType[this] == ZZZ
[L2939]  CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L2939]  RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2940]  COND FALSE  !(revert)
[L2951]  COND TRUE   DType[this] == ZZZ
[L2952]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND TRUE   sender_s439 == _owner_ERC20[this] || allow_ERC20[this]
[L3457]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3457]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3458]  COND FALSE  !(revert)
[L3461]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3462]              _balances_ERC20[this][sender_s439] := __var_17;
[L3463]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3464]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3464]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3465]  COND FALSE  !(revert)
[L3468]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3469]              _balances_ERC20[this][recipient_s439] := __var_18;
[L3470]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3471]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2952]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L2953]  COND FALSE  !(revert)
[L2964]              __ret_0_ := true;
[L699]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L700]               assume !revert && gas >= 0;
[L5663]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L5790]  RET         call CorralChoice_ZZZ(this);

Loop:
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND TRUE   choice == 20
[L5647]              gas := gas - 21000;
[L5648]  COND FALSE  !(gas >= 0)
[L5790]  RET         call CorralChoice_ZZZ(this);

[2020-11-25 11:40:50,980 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:40:50,980 INFO  L82        PathProgramCache]: Analyzing trace with hash 843180524, now seen corresponding path program 1 times
[2020-11-25 11:40:50,980 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:40:51,006 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:40:51,649 INFO  L134       CoverageAnalysis]: Checked inductivity of 109 backedges. 62 proven. 3 refuted. 0 times theorem prover too weak. 44 trivial. 0 not checked.
[2020-11-25 11:40:51,649 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 11:40:51,650 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [33] total 33
[2020-11-25 11:40:51,650 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:40:51,650 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 34 interpolants.
[2020-11-25 11:40:51,650 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=107, Invalid=1015, Unknown=0, NotChecked=0, Total=1122
[2020-11-25 11:40:51,650 INFO  L87              Difference]: Start difference. First operand 3411 states and 3796 transitions. cyclomatic complexity: 391 Second operand 34 states.
[2020-11-25 11:40:53,780 WARN  L188               SmtUtils]: Spent 109.00 ms on a formula simplification. DAG size of input: 128 DAG size of output: 123
[2020-11-25 11:40:54,937 WARN  L188               SmtUtils]: Spent 147.00 ms on a formula simplification. DAG size of input: 139 DAG size of output: 134
[2020-11-25 11:41:00,235 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:41:00,235 INFO  L93              Difference]: Finished difference Result 3521 states and 3968 transitions.
[2020-11-25 11:41:00,236 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 29 states. 
[2020-11-25 11:41:00,236 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3521 states and 3968 transitions.
[2020-11-25 11:41:00,242 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:41:00,250 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3521 states to 3521 states and 3968 transitions.
[2020-11-25 11:41:00,250 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 985
[2020-11-25 11:41:00,250 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 985
[2020-11-25 11:41:00,250 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3521 states and 3968 transitions.
[2020-11-25 11:41:00,253 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:41:00,253 INFO  L728         BuchiCegarLoop]: Abstraction has 3521 states and 3968 transitions.
[2020-11-25 11:41:00,256 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3521 states and 3968 transitions.
[2020-11-25 11:41:00,278 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3521 to 3464.
[2020-11-25 11:41:00,278 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3464 states.
[2020-11-25 11:41:00,282 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3464 states to 3464 states and 3899 transitions.
[2020-11-25 11:41:00,282 INFO  L751         BuchiCegarLoop]: Abstraction has 3464 states and 3899 transitions.
[2020-11-25 11:41:00,282 INFO  L631         BuchiCegarLoop]: Abstraction has 3464 states and 3899 transitions.
[2020-11-25 11:41:00,282 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 11:41:00,282 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3464 states and 3899 transitions.
[2020-11-25 11:41:00,286 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:41:00,286 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:41:00,286 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:41:00,287 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:41:00,287 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5780]              assume null == 0;
[L5781]  CALL        call this := FreshRefGenerator__success();
[L2620]              havoc newRef;
[L2621]              assume Alloc[newRef] == false;
[L2622]              Alloc[newRef] := true;
[L2623]              assume newRef != null;
[L5781]  RET         call this := FreshRefGenerator__success();
[L5782]              assume now >= 0;
[L5783]              assume DType[this] == ZZZ;
[L5784]              assume msgvalue_MSG == 0;
[L5785]              gas := gas - 53000;
[L5786]  CALL        call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L1487]              havoc __exception;
[L1488]              revert := false;
[L1489]  COND FALSE  !(__exception)
[L1519]  CALL        call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L3917]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L3921]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L3921]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3922]  COND FALSE  !(revert)
[L3926]              havoc __var_30;
[L3927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L2758]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L2758]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2759]  COND FALSE  !(revert)
[L2762]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L2762]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2763]  COND FALSE  !(revert)
[L2766]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2724]              assume msgsender_MSG != null;
[L2725]              Balance[this] := 0;
[L2726]              _balances_ERC20[this] := zeroRefintArr();
[L2727]              sum__balances0[this] := 0;
[L2728]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2729]              sum__allowances1[this] := 0;
[L2730]              exceptions_ERC20[this] := zeroRefboolArr();
[L2731]              uniswap_ERC20[this] := null;
[L2732]              _owner_ERC20[this] := null;
[L2733]              _totalSupply_ERC20[this] := 0;
[L2734]              allow_ERC20[this] := false;
[L2736]              _owner_ERC20[this] := owner_s125;
[L2737]              allow_ERC20[this] := false;
[L2766]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2767]  COND FALSE  !(revert)
[L3927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3673]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L3673]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3674]  COND FALSE  !(revert)
[L3677]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3648]              assume msgsender_MSG != null;
[L3649]              Balance[this] := 0;
[L3650]              _name_ERC20Detailed[this] := -1905873549;
[L3651]              _symbol_ERC20Detailed[this] := -1905873549;
[L3652]              _decimals_ERC20Detailed[this] := 0;
[L3654]              _name_ERC20Detailed[this] := name_s600;
[L3655]              _symbol_ERC20Detailed[this] := symbol_s600;
[L3656]              _decimals_ERC20Detailed[this] := decimals_s600;
[L3677]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3678]  COND FALSE  !(revert)
[L3931]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3932]  COND FALSE  !(revert)
[L3935]  CALL        call ZZZ_ZZZ_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3875]              assume msgsender_MSG != null;
[L3876]              Balance[this] := 0;
[L3877]              governance_ZZZ[this] := null;
[L3878]              minters_ZZZ[this] := zeroRefboolArr();
[L3881]              havoc __var_29;
[L3882]              governance_ZZZ[this] := __var_29;
[L3935]  RET         call ZZZ_ZZZ_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3936]  COND FALSE  !(revert)
[L1519]  RET         call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L1520]              assume !revert && gas >= 0;
[L5786]  RET         call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L5787]              assume !revert && gas >= 0;
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND TRUE   choice == 18
[L5659]              gas := gas - 21000;
[L5660]  COND TRUE   gas >= 0
[L5661]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5662]              assume msgvalue_MSG == 0;
[L5663]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != recipient_s210 && (amount_s210 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s210] + amount_s210 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s210] >= 0) && _balances_ERC20[this][recipient_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L667]               havoc __exception;
[L668]               revert := false;
[L669]   COND FALSE  !(__exception)
[L699]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2938]  COND TRUE   DType[this] == ZZZ
[L2939]  CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L2939]  RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2940]  COND FALSE  !(revert)
[L2951]  COND TRUE   DType[this] == ZZZ
[L2952]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND TRUE   sender_s439 == _owner_ERC20[this] || allow_ERC20[this]
[L3457]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3457]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3458]  COND FALSE  !(revert)
[L3461]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3462]              _balances_ERC20[this][sender_s439] := __var_17;
[L3463]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3464]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3464]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3465]  COND FALSE  !(revert)
[L3468]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3469]              _balances_ERC20[this][recipient_s439] := __var_18;
[L3470]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3471]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2952]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L2953]  COND FALSE  !(revert)
[L2964]              __ret_0_ := true;
[L699]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L700]               assume !revert && gas >= 0;
[L5663]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L5790]  RET         call CorralChoice_ZZZ(this);
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND TRUE   choice == 18
[L5659]              gas := gas - 21000;
[L5660]  COND TRUE   gas >= 0
[L5661]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5662]              assume msgvalue_MSG == 0;
[L5663]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s210 && (amount_s210 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s210] + amount_s210 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s210] >= 0) && _balances_ERC20[this][recipient_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L667]               havoc __exception;
[L668]               revert := false;
[L669]   COND FALSE  !(__exception)
[L699]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2938]  COND TRUE   DType[this] == ZZZ
[L2939]  CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L2939]  RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2940]  COND FALSE  !(revert)
[L2951]  COND TRUE   DType[this] == ZZZ
[L2952]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND FALSE  !(sender_s439 == _owner_ERC20[this] || allow_ERC20[this])
[L3472]  COND TRUE   exceptions_ERC20[this][recipient_s439]
[L3473]  CALL        call __var_19 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3473]  RET         call __var_19 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3474]  COND FALSE  !(revert)
[L3477]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3478]              _balances_ERC20[this][sender_s439] := __var_19;
[L3479]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3480]  CALL        call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3480]  RET         call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3481]  COND FALSE  !(revert)
[L3484]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3485]              _balances_ERC20[this][recipient_s439] := __var_20;
[L3486]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3487]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2952]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L2953]  COND FALSE  !(revert)
[L2964]              __ret_0_ := true;
[L699]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L700]               assume !revert && gas >= 0;
[L5663]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L5790]  RET         call CorralChoice_ZZZ(this);

Loop:
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND TRUE   choice == 20
[L5647]              gas := gas - 21000;
[L5648]  COND FALSE  !(gas >= 0)
[L5790]  RET         call CorralChoice_ZZZ(this);

[2020-11-25 11:41:00,290 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:41:00,290 INFO  L82        PathProgramCache]: Analyzing trace with hash -944859201, now seen corresponding path program 1 times
[2020-11-25 11:41:00,291 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:41:00,303 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:41:00,426 INFO  L134       CoverageAnalysis]: Checked inductivity of 109 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 109 trivial. 0 not checked.
[2020-11-25 11:41:00,427 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:41:00,427 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-25 11:41:00,427 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:41:00,427 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 11:41:00,427 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-25 11:41:00,427 INFO  L87              Difference]: Start difference. First operand 3464 states and 3899 transitions. cyclomatic complexity: 445 Second operand 12 states.
[2020-11-25 11:41:01,601 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:41:01,601 INFO  L93              Difference]: Finished difference Result 3503 states and 4027 transitions.
[2020-11-25 11:41:01,601 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 11:41:01,601 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3503 states and 4027 transitions.
[2020-11-25 11:41:01,609 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 11:41:01,619 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3503 states to 3503 states and 4027 transitions.
[2020-11-25 11:41:01,619 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 982
[2020-11-25 11:41:01,619 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 982
[2020-11-25 11:41:01,620 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3503 states and 4027 transitions.
[2020-11-25 11:41:01,622 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:41:01,622 INFO  L728         BuchiCegarLoop]: Abstraction has 3503 states and 4027 transitions.
[2020-11-25 11:41:01,625 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3503 states and 4027 transitions.
[2020-11-25 11:41:01,646 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3503 to 3503.
[2020-11-25 11:41:01,646 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3503 states.
[2020-11-25 11:41:01,650 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3503 states to 3503 states and 4027 transitions.
[2020-11-25 11:41:01,650 INFO  L751         BuchiCegarLoop]: Abstraction has 3503 states and 4027 transitions.
[2020-11-25 11:41:01,650 INFO  L631         BuchiCegarLoop]: Abstraction has 3503 states and 4027 transitions.
[2020-11-25 11:41:01,650 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 11:41:01,650 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3503 states and 4027 transitions.
[2020-11-25 11:41:01,654 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 11:41:01,654 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:41:01,654 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:41:01,655 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:41:01,655 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5780]              assume null == 0;
[L5781]  CALL        call this := FreshRefGenerator__success();
[L2620]              havoc newRef;
[L2621]              assume Alloc[newRef] == false;
[L2622]              Alloc[newRef] := true;
[L2623]              assume newRef != null;
[L5781]  RET         call this := FreshRefGenerator__success();
[L5782]              assume now >= 0;
[L5783]              assume DType[this] == ZZZ;
[L5784]              assume msgvalue_MSG == 0;
[L5785]              gas := gas - 53000;
[L5786]  CALL        call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L1487]              havoc __exception;
[L1488]              revert := false;
[L1489]  COND FALSE  !(__exception)
[L1519]  CALL        call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L3917]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L3921]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L3921]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3922]  COND FALSE  !(revert)
[L3926]              havoc __var_30;
[L3927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L2758]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L2758]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2759]  COND FALSE  !(revert)
[L2762]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L2762]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2763]  COND FALSE  !(revert)
[L2766]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2724]              assume msgsender_MSG != null;
[L2725]              Balance[this] := 0;
[L2726]              _balances_ERC20[this] := zeroRefintArr();
[L2727]              sum__balances0[this] := 0;
[L2728]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2729]              sum__allowances1[this] := 0;
[L2730]              exceptions_ERC20[this] := zeroRefboolArr();
[L2731]              uniswap_ERC20[this] := null;
[L2732]              _owner_ERC20[this] := null;
[L2733]              _totalSupply_ERC20[this] := 0;
[L2734]              allow_ERC20[this] := false;
[L2736]              _owner_ERC20[this] := owner_s125;
[L2737]              allow_ERC20[this] := false;
[L2766]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2767]  COND FALSE  !(revert)
[L3927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3673]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L3673]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3674]  COND FALSE  !(revert)
[L3677]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3648]              assume msgsender_MSG != null;
[L3649]              Balance[this] := 0;
[L3650]              _name_ERC20Detailed[this] := -1905873549;
[L3651]              _symbol_ERC20Detailed[this] := -1905873549;
[L3652]              _decimals_ERC20Detailed[this] := 0;
[L3654]              _name_ERC20Detailed[this] := name_s600;
[L3655]              _symbol_ERC20Detailed[this] := symbol_s600;
[L3656]              _decimals_ERC20Detailed[this] := decimals_s600;
[L3677]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3678]  COND FALSE  !(revert)
[L3931]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3932]  COND FALSE  !(revert)
[L3935]  CALL        call ZZZ_ZZZ_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3875]              assume msgsender_MSG != null;
[L3876]              Balance[this] := 0;
[L3877]              governance_ZZZ[this] := null;
[L3878]              minters_ZZZ[this] := zeroRefboolArr();
[L3881]              havoc __var_29;
[L3882]              governance_ZZZ[this] := __var_29;
[L3935]  RET         call ZZZ_ZZZ_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3936]  COND FALSE  !(revert)
[L1519]  RET         call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L1520]              assume !revert && gas >= 0;
[L5786]  RET         call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L5787]              assume !revert && gas >= 0;
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND FALSE  !(choice == 18)
[L5665]  COND FALSE  !(choice == 17)
[L5671]  COND FALSE  !(choice == 16)
[L5678]  COND TRUE   choice == 15
[L5679]              gas := gas - 21000;
[L5680]  COND TRUE   gas >= 0
[L5681]              assume amount_s281 >= 0 && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5682]              assume msgvalue_MSG == 0;
[L5683]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L877]               havoc __exception;
[L878]               revert := false;
[L879]   COND FALSE  !(__exception)
[L909]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3116]  COND TRUE   DType[this] == ZZZ
[L3117]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND TRUE   sender_s439 == _owner_ERC20[this] || allow_ERC20[this]
[L3457]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3457]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3458]  COND FALSE  !(revert)
[L3461]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3462]              _balances_ERC20[this][sender_s439] := __var_17;
[L3463]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3464]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3464]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3465]  COND FALSE  !(revert)
[L3468]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3469]              _balances_ERC20[this][recipient_s439] := __var_18;
[L3470]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3471]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3117]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3118]  COND FALSE  !(revert)
[L3129]  COND FALSE  !(DType[this] == ZZZ)
[L3134]  COND TRUE   DType[this] == ERC20
[L3135]  CALL        call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3135]  RET         call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3136]  COND FALSE  !(revert)
[L3142]  COND TRUE   DType[this] == ZZZ
[L3143]  CALL        call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3143]  RET         call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3144]  COND FALSE  !(revert)
[L3155]  CALL        call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s281][__var_8], amount_s281, -255027035);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3155]  RET         call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s281][__var_8], amount_s281, -255027035);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == ZZZ
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, __var_6, __var_7);
[L3615]              __var_27 := null;
[L3616]  COND FALSE  !(!(owner_s569 != null))
[L3620]              __var_28 := null;
[L3621]  COND FALSE  !(!(spender_s569 != null))
[L3625]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] - _allowances_ERC20[this][owner_s569][spender_s569];
[L3626]              _allowances_ERC20[this][owner_s569][spender_s569] := amount_s569;
[L3627]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] + _allowances_ERC20[this][owner_s569][spender_s569];
[L3628]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, __var_6, __var_7);
[L3161]  COND FALSE  !(revert)
[L3172]              __ret_0_ := true;
[L909]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L910]               assume !revert && gas >= 0;
[L5683]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L5790]  RET         call CorralChoice_ZZZ(this);
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND TRUE   choice == 18
[L5659]              gas := gas - 21000;
[L5660]  COND TRUE   gas >= 0
[L5661]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5662]              assume msgvalue_MSG == 0;
[L5663]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s210 && (amount_s210 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s210] + amount_s210 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s210] >= 0) && _balances_ERC20[this][recipient_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L667]               havoc __exception;
[L668]               revert := false;
[L669]   COND FALSE  !(__exception)
[L699]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2938]  COND TRUE   DType[this] == ZZZ
[L2939]  CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L2939]  RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2940]  COND FALSE  !(revert)
[L2951]  COND TRUE   DType[this] == ZZZ
[L2952]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND TRUE   sender_s439 == _owner_ERC20[this] || allow_ERC20[this]
[L3457]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3457]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3458]  COND FALSE  !(revert)
[L3461]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3462]              _balances_ERC20[this][sender_s439] := __var_17;
[L3463]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3464]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3464]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3465]  COND FALSE  !(revert)
[L3468]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3469]              _balances_ERC20[this][recipient_s439] := __var_18;
[L3470]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3471]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2952]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L2953]  COND FALSE  !(revert)
[L2964]              __ret_0_ := true;
[L699]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L700]               assume !revert && gas >= 0;
[L5663]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L5790]  RET         call CorralChoice_ZZZ(this);

Loop:
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND TRUE   choice == 20
[L5647]              gas := gas - 21000;
[L5648]  COND FALSE  !(gas >= 0)
[L5790]  RET         call CorralChoice_ZZZ(this);

[2020-11-25 11:41:01,658 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:41:01,659 INFO  L82        PathProgramCache]: Analyzing trace with hash 1424803375, now seen corresponding path program 1 times
[2020-11-25 11:41:01,659 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:41:01,671 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:41:01,724 INFO  L134       CoverageAnalysis]: Checked inductivity of 108 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 107 trivial. 0 not checked.
[2020-11-25 11:41:01,724 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:41:01,724 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 11:41:01,724 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:41:01,724 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 11:41:01,724 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 11:41:01,725 INFO  L87              Difference]: Start difference. First operand 3503 states and 4027 transitions. cyclomatic complexity: 544 Second operand 3 states.
[2020-11-25 11:41:01,749 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:41:01,749 INFO  L93              Difference]: Finished difference Result 3521 states and 4047 transitions.
[2020-11-25 11:41:01,749 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 11:41:01,750 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3521 states and 4047 transitions.
[2020-11-25 11:41:01,756 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 11:41:01,764 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3521 states to 3521 states and 4047 transitions.
[2020-11-25 11:41:01,764 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 988
[2020-11-25 11:41:01,765 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 988
[2020-11-25 11:41:01,765 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3521 states and 4047 transitions.
[2020-11-25 11:41:01,767 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:41:01,767 INFO  L728         BuchiCegarLoop]: Abstraction has 3521 states and 4047 transitions.
[2020-11-25 11:41:01,770 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3521 states and 4047 transitions.
[2020-11-25 11:41:01,789 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3521 to 3515.
[2020-11-25 11:41:01,789 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3515 states.
[2020-11-25 11:41:01,795 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3515 states to 3515 states and 4041 transitions.
[2020-11-25 11:41:01,795 INFO  L751         BuchiCegarLoop]: Abstraction has 3515 states and 4041 transitions.
[2020-11-25 11:41:01,795 INFO  L631         BuchiCegarLoop]: Abstraction has 3515 states and 4041 transitions.
[2020-11-25 11:41:01,795 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 11:41:01,795 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3515 states and 4041 transitions.
[2020-11-25 11:41:01,800 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 11:41:01,800 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:41:01,800 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:41:01,801 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:41:01,802 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5780]              assume null == 0;
[L5781]  CALL        call this := FreshRefGenerator__success();
[L2620]              havoc newRef;
[L2621]              assume Alloc[newRef] == false;
[L2622]              Alloc[newRef] := true;
[L2623]              assume newRef != null;
[L5781]  RET         call this := FreshRefGenerator__success();
[L5782]              assume now >= 0;
[L5783]              assume DType[this] == ZZZ;
[L5784]              assume msgvalue_MSG == 0;
[L5785]              gas := gas - 53000;
[L5786]  CALL        call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L1487]              havoc __exception;
[L1488]              revert := false;
[L1489]  COND FALSE  !(__exception)
[L1519]  CALL        call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L3917]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L3921]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L3921]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3922]  COND FALSE  !(revert)
[L3926]              havoc __var_30;
[L3927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L2758]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L2758]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2759]  COND FALSE  !(revert)
[L2762]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L2762]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2763]  COND FALSE  !(revert)
[L2766]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2724]              assume msgsender_MSG != null;
[L2725]              Balance[this] := 0;
[L2726]              _balances_ERC20[this] := zeroRefintArr();
[L2727]              sum__balances0[this] := 0;
[L2728]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2729]              sum__allowances1[this] := 0;
[L2730]              exceptions_ERC20[this] := zeroRefboolArr();
[L2731]              uniswap_ERC20[this] := null;
[L2732]              _owner_ERC20[this] := null;
[L2733]              _totalSupply_ERC20[this] := 0;
[L2734]              allow_ERC20[this] := false;
[L2736]              _owner_ERC20[this] := owner_s125;
[L2737]              allow_ERC20[this] := false;
[L2766]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2767]  COND FALSE  !(revert)
[L3927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3673]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L3673]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3674]  COND FALSE  !(revert)
[L3677]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3648]              assume msgsender_MSG != null;
[L3649]              Balance[this] := 0;
[L3650]              _name_ERC20Detailed[this] := -1905873549;
[L3651]              _symbol_ERC20Detailed[this] := -1905873549;
[L3652]              _decimals_ERC20Detailed[this] := 0;
[L3654]              _name_ERC20Detailed[this] := name_s600;
[L3655]              _symbol_ERC20Detailed[this] := symbol_s600;
[L3656]              _decimals_ERC20Detailed[this] := decimals_s600;
[L3677]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3678]  COND FALSE  !(revert)
[L3931]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3932]  COND FALSE  !(revert)
[L3935]  CALL        call ZZZ_ZZZ_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3875]              assume msgsender_MSG != null;
[L3876]              Balance[this] := 0;
[L3877]              governance_ZZZ[this] := null;
[L3878]              minters_ZZZ[this] := zeroRefboolArr();
[L3881]              havoc __var_29;
[L3882]              governance_ZZZ[this] := __var_29;
[L3935]  RET         call ZZZ_ZZZ_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3936]  COND FALSE  !(revert)
[L1519]  RET         call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L1520]              assume !revert && gas >= 0;
[L5786]  RET         call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L5787]              assume !revert && gas >= 0;
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND FALSE  !(choice == 18)
[L5665]  COND FALSE  !(choice == 17)
[L5671]  COND FALSE  !(choice == 16)
[L5678]  COND TRUE   choice == 15
[L5679]              gas := gas - 21000;
[L5680]  COND TRUE   gas >= 0
[L5681]              assume amount_s281 >= 0 && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5682]              assume msgvalue_MSG == 0;
[L5683]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L877]               havoc __exception;
[L878]               revert := false;
[L879]   COND FALSE  !(__exception)
[L909]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3116]  COND TRUE   DType[this] == ZZZ
[L3117]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND TRUE   sender_s439 == _owner_ERC20[this] || allow_ERC20[this]
[L3457]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3457]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3458]  COND FALSE  !(revert)
[L3461]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3462]              _balances_ERC20[this][sender_s439] := __var_17;
[L3463]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3464]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3464]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3465]  COND FALSE  !(revert)
[L3468]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3469]              _balances_ERC20[this][recipient_s439] := __var_18;
[L3470]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3471]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3117]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3118]  COND FALSE  !(revert)
[L3129]  COND TRUE   DType[this] == ZZZ
[L3130]  CALL        call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3130]  RET         call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  COND FALSE  !(revert)
[L3142]  COND TRUE   DType[this] == ZZZ
[L3143]  CALL        call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3143]  RET         call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3144]  COND FALSE  !(revert)
[L3155]  CALL        call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s281][__var_8], amount_s281, -255027035);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3155]  RET         call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s281][__var_8], amount_s281, -255027035);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == ZZZ
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, __var_6, __var_7);
[L3615]              __var_27 := null;
[L3616]  COND FALSE  !(!(owner_s569 != null))
[L3620]              __var_28 := null;
[L3621]  COND FALSE  !(!(spender_s569 != null))
[L3625]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] - _allowances_ERC20[this][owner_s569][spender_s569];
[L3626]              _allowances_ERC20[this][owner_s569][spender_s569] := amount_s569;
[L3627]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] + _allowances_ERC20[this][owner_s569][spender_s569];
[L3628]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, __var_6, __var_7);
[L3161]  COND FALSE  !(revert)
[L3172]              __ret_0_ := true;
[L909]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L910]               assume !revert && gas >= 0;
[L5683]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L5790]  RET         call CorralChoice_ZZZ(this);
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND TRUE   choice == 18
[L5659]              gas := gas - 21000;
[L5660]  COND TRUE   gas >= 0
[L5661]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5662]              assume msgvalue_MSG == 0;
[L5663]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s210 && (amount_s210 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s210] + amount_s210 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s210] >= 0) && _balances_ERC20[this][recipient_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L667]               havoc __exception;
[L668]               revert := false;
[L669]   COND FALSE  !(__exception)
[L699]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2938]  COND TRUE   DType[this] == ZZZ
[L2939]  CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L2939]  RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2940]  COND FALSE  !(revert)
[L2951]  COND TRUE   DType[this] == ZZZ
[L2952]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND TRUE   sender_s439 == _owner_ERC20[this] || allow_ERC20[this]
[L3457]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3457]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3458]  COND FALSE  !(revert)
[L3461]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3462]              _balances_ERC20[this][sender_s439] := __var_17;
[L3463]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3464]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3464]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3465]  COND FALSE  !(revert)
[L3468]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3469]              _balances_ERC20[this][recipient_s439] := __var_18;
[L3470]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3471]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2952]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L2953]  COND FALSE  !(revert)
[L2964]              __ret_0_ := true;
[L699]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L700]               assume !revert && gas >= 0;
[L5663]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L5790]  RET         call CorralChoice_ZZZ(this);

Loop:
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND TRUE   choice == 18
[L5659]              gas := gas - 21000;
[L5660]  COND TRUE   gas >= 0
[L5661]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5662]              assume msgvalue_MSG == 0;
[L5663]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s210 && (amount_s210 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s210] + amount_s210 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s210] >= 0) && _balances_ERC20[this][recipient_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L667]               havoc __exception;
[L668]               revert := false;
[L669]   COND FALSE  !(__exception)
[L699]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2938]  COND TRUE   DType[this] == ZZZ
[L2939]  CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L2939]  RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2940]  COND FALSE  !(revert)
[L2951]  COND TRUE   DType[this] == ZZZ
[L2952]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND TRUE   sender_s439 == _owner_ERC20[this] || allow_ERC20[this]
[L3457]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3457]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3458]  COND FALSE  !(revert)
[L3461]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3462]              _balances_ERC20[this][sender_s439] := __var_17;
[L3463]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3464]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3464]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3465]  COND FALSE  !(revert)
[L3468]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3469]              _balances_ERC20[this][recipient_s439] := __var_18;
[L3470]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3471]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2952]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L2953]  COND FALSE  !(revert)
[L2964]              __ret_0_ := true;
[L699]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L700]               assume !revert && gas >= 0;
[L5663]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L5790]  RET         call CorralChoice_ZZZ(this);

[2020-11-25 11:41:01,805 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:41:01,806 INFO  L82        PathProgramCache]: Analyzing trace with hash 574857597, now seen corresponding path program 1 times
[2020-11-25 11:41:01,806 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:41:01,825 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:41:02,344 INFO  L134       CoverageAnalysis]: Checked inductivity of 108 backedges. 59 proven. 1 refuted. 0 times theorem prover too weak. 48 trivial. 0 not checked.
[2020-11-25 11:41:02,345 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 11:41:02,345 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [30] total 30
[2020-11-25 11:41:02,346 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:41:02,346 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 30 interpolants.
[2020-11-25 11:41:02,346 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=92, Invalid=778, Unknown=0, NotChecked=0, Total=870
[2020-11-25 11:41:02,347 INFO  L87              Difference]: Start difference. First operand 3515 states and 4041 transitions. cyclomatic complexity: 546 Second operand 30 states.
[2020-11-25 11:41:08,609 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:41:08,609 INFO  L93              Difference]: Finished difference Result 3647 states and 4235 transitions.
[2020-11-25 11:41:08,609 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 11:41:08,609 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3647 states and 4235 transitions.
[2020-11-25 11:41:08,617 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:41:08,625 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3647 states to 3647 states and 4235 transitions.
[2020-11-25 11:41:08,625 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1009
[2020-11-25 11:41:08,626 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1009
[2020-11-25 11:41:08,626 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3647 states and 4235 transitions.
[2020-11-25 11:41:08,629 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:41:08,629 INFO  L728         BuchiCegarLoop]: Abstraction has 3647 states and 4235 transitions.
[2020-11-25 11:41:08,632 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3647 states and 4235 transitions.
[2020-11-25 11:41:08,651 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3647 to 3457.
[2020-11-25 11:41:08,651 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3457 states.
[2020-11-25 11:41:08,654 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3457 states to 3457 states and 3872 transitions.
[2020-11-25 11:41:08,654 INFO  L751         BuchiCegarLoop]: Abstraction has 3457 states and 3872 transitions.
[2020-11-25 11:41:08,654 INFO  L631         BuchiCegarLoop]: Abstraction has 3457 states and 3872 transitions.
[2020-11-25 11:41:08,655 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 11:41:08,655 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3457 states and 3872 transitions.
[2020-11-25 11:41:08,658 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:41:08,658 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:41:08,658 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:41:08,659 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:41:08,660 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L5780]              assume null == 0;
[L5781]  CALL        call this := FreshRefGenerator__success();
[L2620]              havoc newRef;
[L2621]              assume Alloc[newRef] == false;
[L2622]              Alloc[newRef] := true;
[L2623]              assume newRef != null;
[L5781]  RET         call this := FreshRefGenerator__success();
[L5782]              assume now >= 0;
[L5783]              assume DType[this] == ZZZ;
[L5784]              assume msgvalue_MSG == 0;
[L5785]              gas := gas - 53000;
[L5786]  CALL        call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L1487]              havoc __exception;
[L1488]              revert := false;
[L1489]  COND FALSE  !(__exception)
[L1519]  CALL        call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L3917]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L3921]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L3921]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3922]  COND FALSE  !(revert)
[L3926]              havoc __var_30;
[L3927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L2758]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L2758]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2759]  COND FALSE  !(revert)
[L2762]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L2762]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2763]  COND FALSE  !(revert)
[L2766]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2724]              assume msgsender_MSG != null;
[L2725]              Balance[this] := 0;
[L2726]              _balances_ERC20[this] := zeroRefintArr();
[L2727]              sum__balances0[this] := 0;
[L2728]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2729]              sum__allowances1[this] := 0;
[L2730]              exceptions_ERC20[this] := zeroRefboolArr();
[L2731]              uniswap_ERC20[this] := null;
[L2732]              _owner_ERC20[this] := null;
[L2733]              _totalSupply_ERC20[this] := 0;
[L2734]              allow_ERC20[this] := false;
[L2736]              _owner_ERC20[this] := owner_s125;
[L2737]              allow_ERC20[this] := false;
[L2766]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2767]  COND FALSE  !(revert)
[L3927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3673]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L3673]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3674]  COND FALSE  !(revert)
[L3677]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3648]              assume msgsender_MSG != null;
[L3649]              Balance[this] := 0;
[L3650]              _name_ERC20Detailed[this] := -1905873549;
[L3651]              _symbol_ERC20Detailed[this] := -1905873549;
[L3652]              _decimals_ERC20Detailed[this] := 0;
[L3654]              _name_ERC20Detailed[this] := name_s600;
[L3655]              _symbol_ERC20Detailed[this] := symbol_s600;
[L3656]              _decimals_ERC20Detailed[this] := decimals_s600;
[L3677]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3678]  COND FALSE  !(revert)
[L3931]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3932]  COND FALSE  !(revert)
[L3935]  CALL        call ZZZ_ZZZ_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3875]              assume msgsender_MSG != null;
[L3876]              Balance[this] := 0;
[L3877]              governance_ZZZ[this] := null;
[L3878]              minters_ZZZ[this] := zeroRefboolArr();
[L3881]              havoc __var_29;
[L3882]              governance_ZZZ[this] := __var_29;
[L3935]  RET         call ZZZ_ZZZ_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3936]  COND FALSE  !(revert)
[L1519]  RET         call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L1520]              assume !revert && gas >= 0;
[L5786]  RET         call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L5787]              assume !revert && gas >= 0;
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND FALSE  !(choice == 18)
[L5665]  COND FALSE  !(choice == 17)
[L5671]  COND FALSE  !(choice == 16)
[L5678]  COND FALSE  !(choice == 15)
[L5685]  COND FALSE  !(choice == 14)
[L5691]  COND TRUE   choice == 13
[L5692]              gas := gas - 21000;
[L5693]  COND TRUE   gas >= 0
[L5694]              assume msgvalue_MSG == 0;
[L5695]  CALL        call setExceptions~address_ERC20(this, msgsender_MSG, msgvalue_MSG, someAddress_s153);
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L424]   CALL        call setExceptions~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, someAddress_s153);
[L2825]              exceptions_ERC20[this][someAddress_s153] := true;
[L424]   RET         call setExceptions~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, someAddress_s153);
[L425]               assume !revert && gas >= 0;
[L5695]  RET         call setExceptions~address_ERC20(this, msgsender_MSG, msgvalue_MSG, someAddress_s153);
[L5790]  RET         call CorralChoice_ZZZ(this);
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND TRUE   choice == 18
[L5659]              gas := gas - 21000;
[L5660]  COND TRUE   gas >= 0
[L5661]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5662]              assume msgvalue_MSG == 0;
[L5663]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != recipient_s210 && (amount_s210 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s210] + amount_s210 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s210] >= 0) && _balances_ERC20[this][recipient_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L667]               havoc __exception;
[L668]               revert := false;
[L669]   COND FALSE  !(__exception)
[L699]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2938]  COND TRUE   DType[this] == ZZZ
[L2939]  CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L2939]  RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2940]  COND FALSE  !(revert)
[L2951]  COND TRUE   DType[this] == ZZZ
[L2952]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND TRUE   sender_s439 == _owner_ERC20[this] || allow_ERC20[this]
[L3457]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3457]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3458]  COND FALSE  !(revert)
[L3461]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3462]              _balances_ERC20[this][sender_s439] := __var_17;
[L3463]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3464]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3464]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3465]  COND FALSE  !(revert)
[L3468]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3469]              _balances_ERC20[this][recipient_s439] := __var_18;
[L3470]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3471]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2952]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L2953]  COND FALSE  !(revert)
[L2964]              __ret_0_ := true;
[L699]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L700]               assume !revert && gas >= 0;
[L5663]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L5790]  RET         call CorralChoice_ZZZ(this);
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND TRUE   choice == 18
[L5659]              gas := gas - 21000;
[L5660]  COND TRUE   gas >= 0
[L5661]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5662]              assume msgvalue_MSG == 0;
[L5663]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s210 && (amount_s210 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s210] + amount_s210 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s210] >= 0) && _balances_ERC20[this][recipient_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L667]               havoc __exception;
[L668]               revert := false;
[L669]   COND FALSE  !(__exception)
[L699]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2938]  COND TRUE   DType[this] == ZZZ
[L2939]  CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L2939]  RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2940]  COND FALSE  !(revert)
[L2951]  COND TRUE   DType[this] == ZZZ
[L2952]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND FALSE  !(sender_s439 == _owner_ERC20[this] || allow_ERC20[this])
[L3472]  COND TRUE   exceptions_ERC20[this][recipient_s439]
[L3473]  CALL        call __var_19 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3473]  RET         call __var_19 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3474]  COND FALSE  !(revert)
[L3477]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3478]              _balances_ERC20[this][sender_s439] := __var_19;
[L3479]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3480]  CALL        call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3480]  RET         call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3481]  COND FALSE  !(revert)
[L3484]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3485]              _balances_ERC20[this][recipient_s439] := __var_20;
[L3486]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3487]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2952]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L2953]  COND FALSE  !(revert)
[L2964]              __ret_0_ := true;
[L699]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L700]               assume !revert && gas >= 0;
[L5663]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L5790]  RET         call CorralChoice_ZZZ(this);

Loop:
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND TRUE   choice == 18
[L5659]              gas := gas - 21000;
[L5660]  COND TRUE   gas >= 0
[L5661]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5662]              assume msgvalue_MSG == 0;
[L5663]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s210 && (amount_s210 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s210] + amount_s210 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s210] >= 0) && _balances_ERC20[this][recipient_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L667]               havoc __exception;
[L668]               revert := false;
[L669]   COND FALSE  !(__exception)
[L699]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L2938]  COND TRUE   DType[this] == ZZZ
[L2939]  CALL        call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L2939]  RET         call __var_4 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2940]  COND FALSE  !(revert)
[L2951]  COND TRUE   DType[this] == ZZZ
[L2952]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND FALSE  !(sender_s439 == _owner_ERC20[this] || allow_ERC20[this])
[L3472]  COND TRUE   exceptions_ERC20[this][recipient_s439]
[L3473]  CALL        call __var_19 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3473]  RET         call __var_19 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3474]  COND FALSE  !(revert)
[L3477]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3478]              _balances_ERC20[this][sender_s439] := __var_19;
[L3479]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3480]  CALL        call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3480]  RET         call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3481]  COND FALSE  !(revert)
[L3484]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3485]              _balances_ERC20[this][recipient_s439] := __var_20;
[L3486]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3487]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2952]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_4, recipient_s210, amount_s210);
[L2953]  COND FALSE  !(revert)
[L2964]              __ret_0_ := true;
[L699]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L700]               assume !revert && gas >= 0;
[L5663]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s210, amount_s210);
[L5790]  RET         call CorralChoice_ZZZ(this);

[2020-11-25 11:41:08,663 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:41:08,663 INFO  L82        PathProgramCache]: Analyzing trace with hash -463929140, now seen corresponding path program 1 times
[2020-11-25 11:41:08,664 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:41:08,681 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:41:08,806 INFO  L134       CoverageAnalysis]: Checked inductivity of 232 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 232 trivial. 0 not checked.
[2020-11-25 11:41:08,806 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:41:08,806 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 11:41:08,806 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:41:08,806 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 11:41:08,807 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=152, Unknown=0, NotChecked=0, Total=182
[2020-11-25 11:41:08,807 INFO  L87              Difference]: Start difference. First operand 3457 states and 3872 transitions. cyclomatic complexity: 425 Second operand 14 states.
[2020-11-25 11:41:10,295 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:41:10,296 INFO  L93              Difference]: Finished difference Result 2029 states and 2278 transitions.
[2020-11-25 11:41:10,296 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 11:41:10,296 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2029 states and 2278 transitions.
[2020-11-25 11:41:10,299 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 11:41:10,299 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2029 states to 0 states and 0 transitions.
[2020-11-25 11:41:10,299 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 11:41:10,299 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 11:41:10,299 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 11:41:10,299 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:41:10,299 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:41:10,299 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:41:10,299 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:41:10,299 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 11:41:10,299 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 11:41:10,299 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 11:41:10,299 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 11:41:10,302 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 11:41:10 BasicIcfg
[2020-11-25 11:41:10,302 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 11:41:10,303 INFO  L168              Benchmark]: Toolchain (without parser) took 28586.76 ms. Allocated memory was 1.0 GB in the beginning and 2.5 GB in the end (delta: 1.5 GB). Free memory was 935.2 MB in the beginning and 2.3 GB in the end (delta: -1.3 GB). Peak memory consumption was 147.3 MB. Max. memory is 15.3 GB.
[2020-11-25 11:41:10,303 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.22 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 11:41:10,303 INFO  L168              Benchmark]: Boogie Preprocessor took 105.48 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 919.0 MB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
[2020-11-25 11:41:10,304 INFO  L168              Benchmark]: UtopiaSpecLang took 59.66 ms. Allocated memory is still 1.0 GB. Free memory was 919.0 MB in the beginning and 913.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 11:41:10,304 INFO  L168              Benchmark]: Boogie Printer took 18.51 ms. Allocated memory is still 1.0 GB. Free memory was 913.6 MB in the beginning and 908.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 11:41:10,305 INFO  L168              Benchmark]: RCFGBuilder took 815.43 ms. Allocated memory is still 1.0 GB. Free memory was 908.2 MB in the beginning and 763.3 MB in the end (delta: 145.0 MB). Peak memory consumption was 145.0 MB. Max. memory is 15.3 GB.
[2020-11-25 11:41:10,305 INFO  L168              Benchmark]: UtopiaLTL2Aut took 39.52 ms. Allocated memory is still 1.0 GB. Free memory was 763.3 MB in the beginning and 754.3 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 11:41:10,305 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1448.70 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 195.0 MB). Free memory was 754.3 MB in the beginning and 772.5 MB in the end (delta: -18.2 MB). Peak memory consumption was 176.8 MB. Max. memory is 15.3 GB.
[2020-11-25 11:41:10,306 INFO  L168              Benchmark]: BlockEncodingV2 took 208.75 ms. Allocated memory is still 1.2 GB. Free memory was 772.5 MB in the beginning and 694.4 MB in the end (delta: 78.1 MB). Peak memory consumption was 78.1 MB. Max. memory is 15.3 GB.
[2020-11-25 11:41:10,306 INFO  L168              Benchmark]: BuchiAutomizer took 25887.62 ms. Allocated memory was 1.2 GB in the beginning and 2.5 GB in the end (delta: 1.3 GB). Free memory was 694.4 MB in the beginning and 2.3 GB in the end (delta: -1.6 GB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 11:41:10,308 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5338 locations, 9526 edges
  - StatisticsResult: Encoded RCFG
    5174 locations, 9114 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.22 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 105.48 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 919.0 MB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 59.66 ms. Allocated memory is still 1.0 GB. Free memory was 919.0 MB in the beginning and 913.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 18.51 ms. Allocated memory is still 1.0 GB. Free memory was 913.6 MB in the beginning and 908.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 815.43 ms. Allocated memory is still 1.0 GB. Free memory was 908.2 MB in the beginning and 763.3 MB in the end (delta: 145.0 MB). Peak memory consumption was 145.0 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 39.52 ms. Allocated memory is still 1.0 GB. Free memory was 763.3 MB in the beginning and 754.3 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1448.70 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 195.0 MB). Free memory was 754.3 MB in the beginning and 772.5 MB in the end (delta: -18.2 MB). Peak memory consumption was 176.8 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 208.75 ms. Allocated memory is still 1.2 GB. Free memory was 772.5 MB in the beginning and 694.4 MB in the end (delta: 78.1 MB). Peak memory consumption was 78.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 25887.62 ms. Allocated memory was 1.2 GB in the beginning and 2.5 GB in the end (delta: 1.3 GB). Free memory was 694.4 MB in the beginning and 2.3 GB in the end (delta: -1.6 GB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2176 locations, 2942 edges
  - StatisticsResult: BuchiProgram size
    5338 locations, 9526 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 11 terminating modules (11 trivial, 0 deterministic, 0 nondeterministic). 11 modules have a trivial ranking function, the largest among these consists of 34 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 25.8s and 12 iterations.  TraceHistogramMax:3. Analysis of lassos took 2.4s. Construction of modules took 17.4s. BÃ¼chi inclusion checks took 4.9s. Highest rank in rank-based complementation 0. Minimization of det autom 11. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 10 MinimizatonAttempts, 1693 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 3678 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 38052 SDtfs, 37844 SDslu, 76610 SDs, 0 SdLazy, 232392 SolverSat, 5747 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 17.4s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU11 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_ERC200) ==> ( <>(fail_transfer_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
