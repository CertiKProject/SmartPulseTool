This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 11:52:18,851 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 11:52:18,852 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 11:52:18,863 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 11:52:18,863 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 11:52:18,863 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 11:52:18,864 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 11:52:18,866 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 11:52:18,867 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 11:52:18,868 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 11:52:18,868 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 11:52:18,869 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 11:52:18,869 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 11:52:18,870 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 11:52:18,871 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 11:52:18,871 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 11:52:18,872 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 11:52:18,873 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 11:52:18,874 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 11:52:18,876 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 11:52:18,876 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 11:52:18,877 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 11:52:18,878 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 11:52:18,879 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 11:52:18,879 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 11:52:18,879 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 11:52:18,880 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 11:52:18,880 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 11:52:18,880 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 11:52:18,880 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 11:52:18,881 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 11:52:18,881 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 11:52:18,882 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 11:52:18,882 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 11:52:18,883 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 11:52:18,883 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 11:52:18,884 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 11:52:18,884 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 11:52:18,884 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 11:52:18,884 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 11:52:18,885 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 11:52:18,885 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 11:52:18,893 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 11:52:18,893 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 11:52:18,893 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 11:52:18,894 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 11:52:18,894 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 11:52:18,894 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 11:52:18,894 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 11:52:18,894 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 11:52:18,894 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 11:52:18,894 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 11:52:18,894 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 11:52:18,894 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 11:52:18,895 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 11:52:18,895 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 11:52:18,895 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 11:52:18,895 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 11:52:18,895 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 11:52:18,895 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 11:52:18,895 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 11:52:18,895 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 11:52:18,895 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 11:52:18,895 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 11:52:18,896 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 11:52:18,896 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 11:52:18,896 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 11:52:18,896 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 11:52:18,914 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 11:52:18,924 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 11:52:18,926 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 11:52:18,927 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 11:52:18,928 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 11:52:18,928 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-normal.bpl
[2020-11-25 11:52:18,928 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-normal.bpl'
[2020-11-25 11:52:19,018 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 11:52:19,019 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 11:52:19,020 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 11:52:19,020 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 11:52:19,020 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 11:52:19,036 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:19" (1/1) ...
[2020-11-25 11:52:19,038 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:19" (1/1) ...
[2020-11-25 11:52:19,070 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:19" (1/1) ...
[2020-11-25 11:52:19,071 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:19" (1/1) ...
[2020-11-25 11:52:19,095 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:19" (1/1) ...
[2020-11-25 11:52:19,108 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:19" (1/1) ...
[2020-11-25 11:52:19,121 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:19" (1/1) ...
[2020-11-25 11:52:19,133 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 11:52:19,134 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 11:52:19,134 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 11:52:19,136 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 11:52:19,138 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:19" (1/1) ...
[2020-11-25 11:52:19,152 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= _balances_ERC20[this][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _balances_ERC20[this][msg.sender] == old(_balances_ERC20[this][msg.sender]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && name_CabGoldToken[this] == old(name_CabGoldToken[this]) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this]) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this]) && active_CabGoldToken[this] == old(active_CabGoldToken[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]))))
[2020-11-25 11:52:19,157 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= _balances_ERC20[this][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _balances_ERC20[this][msg.sender] == old(_balances_ERC20[this][msg.sender]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && name_CabGoldToken[this] == old(name_CabGoldToken[this]) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this]) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this]) && active_CabGoldToken[this] == old(active_CabGoldToken[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]))))
[2020-11-25 11:52:19,164 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= _balances_ERC20[this][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _balances_ERC20[this][msg.sender] == old(_balances_ERC20[this][msg.sender]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && name_CabGoldToken[this] == old(name_CabGoldToken[this]) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this]) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this]) && active_CabGoldToken[this] == old(active_CabGoldToken[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]))))
[2020-11-25 11:52:19,171 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( p1!=msg.sender && p1!=recipient_s255 ) && msg.sender!=recipient_s255 ) && amount_s255<=_balances_ERC20[this][msg.sender] ) && ( _balances_ERC20[this][recipient_s255] + amount_s255 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && amount_s255>=0 ) && amount_s255<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s255]>=0 ) && _balances_ERC20[this][recipient_s255]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[recipient_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IdentifierExpression[recipient_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],BinaryExpression[COMPLEQ,IdentifierExpression[amount_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IdentifierExpression[amount_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 11:52:19,173 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( __ret_0_==true && _balances_ERC20[this][msg.sender]==( ( old(_balances_ERC20[this][msg.sender]) ) - amount_s255 ) ) && _balances_ERC20[this][recipient_s255]==( ( old(_balances_ERC20[this][recipient_s255]) ) + amount_s255 ) ) && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _allowances_ERC20[this]==( old(_allowances_ERC20[this]) ) ) && _balances_ERC20[this][p1]==( old(_balances_ERC20[this][p1]) ) ) && name_CabGoldToken[this]==( old(name_CabGoldToken[this]) ) ) && symbol_CabGoldToken[this]==( old(symbol_CabGoldToken[this]) ) ) && decimals_CabGoldToken[this]==( old(decimals_CabGoldToken[this]) ) ) && active_CabGoldToken[this]==( old(active_CabGoldToken[this]) ) ) && _minters_MinterRole[this]==( old(_minters_MinterRole[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]],IdentifierExpression[amount_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]],IdentifierExpression[amount_s255,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[active_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[active_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]]
[2020-11-25 11:52:19,179 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= _balances_ERC20[this][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _balances_ERC20[this][msg.sender] == old(_balances_ERC20[this][msg.sender]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && name_CabGoldToken[this] == old(name_CabGoldToken[this]) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this]) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this]) && active_CabGoldToken[this] == old(active_CabGoldToken[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]))))
[2020-11-25 11:52:19,180 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC200) ==> ( <>AP(success_transfer_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 11:52:19,192 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:52:19 PropertyContainer
[2020-11-25 11:52:19,192 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 11:52:19,192 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 11:52:19,192 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 11:52:19,192 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 11:52:19,193 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:19" (1/2) ...
[2020-11-25 11:52:19,194 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 11:52:19,194 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 11:52:19,208 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:52:19" (2/2) ...
[2020-11-25 11:52:19,208 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 11:52:19,209 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 11:52:19,209 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 11:52:19,209 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 11:52:19,209 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:19" (1/2) ...
[2020-11-25 11:52:19,245 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 11:52:19,245 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 11:52:19,245 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 11:52:19,245 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 11:52:19,246 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 11:52:19,246 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 11:52:19,246 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 11:52:19,246 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 11:52:19,246 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 11:52:19,246 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 11:52:19,246 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 11:52:19,246 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 11:52:19,246 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 11:52:19,246 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 11:52:19,246 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 11:52:19,246 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 11:52:19,247 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 11:52:19,247 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 11:52:19,247 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 11:52:19,247 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 11:52:19,247 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 11:52:19,247 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 11:52:19,247 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 11:52:19,247 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 11:52:19,247 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 11:52:19,247 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 11:52:19,247 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 11:52:19,247 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 11:52:19,247 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 11:52:19,248 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 11:52:19,248 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 11:52:19,248 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 11:52:19,248 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 11:52:19,248 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 11:52:19,248 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 11:52:19,248 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 11:52:19,248 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 11:52:19,248 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 11:52:19,248 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 11:52:19,248 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 11:52:19,248 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 11:52:19,248 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 11:52:19,248 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 11:52:19,248 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 11:52:19,248 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 11:52:19,248 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 11:52:19,249 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 11:52:19,249 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 11:52:19,249 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 11:52:19,249 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 11:52:19,249 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 11:52:19,249 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 11:52:19,249 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 11:52:19,249 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 11:52:19,249 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 11:52:19,249 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 11:52:19,249 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 11:52:19,249 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 11:52:19,249 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 11:52:19,249 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 11:52:19,249 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 11:52:19,249 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 11:52:19,249 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 11:52:19,249 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 11:52:19,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 11:52:19,250 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 11:52:19,250 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 11:52:19,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 11:52:19,250 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-25 11:52:19,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-25 11:52:19,250 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 11:52:19,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 11:52:19,250 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken_NoBaseCtor__success
[2020-11-25 11:52:19,250 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken
[2020-11-25 11:52:19,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken
[2020-11-25 11:52:19,250 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CabGoldToken
[2020-11-25 11:52:19,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CabGoldToken
[2020-11-25 11:52:19,250 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CabGoldToken
[2020-11-25 11:52:19,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CabGoldToken
[2020-11-25 11:52:19,250 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CabGoldToken
[2020-11-25 11:52:19,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CabGoldToken
[2020-11-25 11:52:19,251 INFO  L130     BoogieDeclarations]: Found specification of procedure active_CabGoldToken
[2020-11-25 11:52:19,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure active_CabGoldToken
[2020-11-25 11:52:19,251 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 11:52:19,251 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 11:52:19,251 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 11:52:19,251 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 11:52:19,251 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 11:52:19,251 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 11:52:19,251 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 11:52:19,251 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 11:52:19,251 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 11:52:19,251 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 11:52:19,251 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 11:52:19,251 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 11:52:19,251 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 11:52:19,251 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 11:52:19,252 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 11:52:19,252 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 11:52:19,252 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-25 11:52:19,252 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-25 11:52:19,252 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_CabGoldToken
[2020-11-25 11:52:19,252 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 11:52:19,252 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 11:52:19,252 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 11:52:19,252 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 11:52:19,252 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 11:52:19,252 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 11:52:19,252 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:19,252 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:19,252 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:19,252 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:19,253 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:19,253 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 11:52:19,253 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 11:52:19,253 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 11:52:19,253 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 11:52:19,253 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 11:52:19,253 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 11:52:19,253 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 11:52:19,253 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 11:52:19,253 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 11:52:19,253 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 11:52:19,253 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 11:52:19,253 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 11:52:19,254 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 11:52:19,254 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 11:52:19,254 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 11:52:19,254 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 11:52:19,254 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 11:52:19,254 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 11:52:19,254 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:52:19,254 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:52:19,254 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:52:19,254 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:52:19,254 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 11:52:19,254 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 11:52:19,254 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 11:52:19,255 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 11:52:19,255 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 11:52:19,255 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 11:52:19,255 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 11:52:19,255 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 11:52:19,255 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 11:52:19,255 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 11:52:19,255 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 11:52:19,255 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 11:52:19,255 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 11:52:19,255 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 11:52:19,255 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 11:52:19,255 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 11:52:19,255 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 11:52:19,256 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 11:52:19,256 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 11:52:19,256 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 11:52:19,256 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 11:52:19,256 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 11:52:19,256 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 11:52:19,256 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 11:52:19,256 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 11:52:19,256 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 11:52:19,256 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 11:52:19,256 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 11:52:19,256 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 11:52:19,256 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 11:52:19,256 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 11:52:19,256 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 11:52:19,257 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 11:52:19,257 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 11:52:19,257 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken_NoBaseCtor__fail
[2020-11-25 11:52:19,257 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken__success
[2020-11-25 11:52:19,257 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken__fail
[2020-11-25 11:52:19,257 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CabGoldToken__success
[2020-11-25 11:52:19,257 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CabGoldToken__fail
[2020-11-25 11:52:19,257 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CabGoldToken__success
[2020-11-25 11:52:19,257 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CabGoldToken__fail
[2020-11-25 11:52:19,257 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CabGoldToken__success
[2020-11-25 11:52:19,257 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CabGoldToken__fail
[2020-11-25 11:52:19,257 INFO  L130     BoogieDeclarations]: Found specification of procedure active_CabGoldToken__success
[2020-11-25 11:52:19,257 INFO  L130     BoogieDeclarations]: Found specification of procedure active_CabGoldToken__fail
[2020-11-25 11:52:19,257 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 11:52:19,257 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 11:52:19,257 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 11:52:19,258 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 11:52:19,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 11:52:19,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 11:52:19,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 11:52:19,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 11:52:19,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 11:52:19,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 11:52:19,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 11:52:19,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 11:52:19,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:19,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 11:52:19,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:19,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 11:52:19,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:19,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 11:52:19,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:19,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 11:52:19,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 11:52:19,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 11:52:19,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 11:52:19,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 11:52:19,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 11:52:19,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 11:52:19,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 11:52:19,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 11:52:19,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 11:52:19,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 11:52:19,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 11:52:19,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 11:52:19,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 11:52:19,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 11:52:19,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 11:52:19,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 11:52:19,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 11:52:19,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 11:52:19,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 11:52:19,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 11:52:19,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 11:52:19,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 11:52:19,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:52:19,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:52:19,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:52:19,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:52:19,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 11:52:19,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 11:52:19,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 11:52:19,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 11:52:19,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 11:52:19,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 11:52:19,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 11:52:19,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 11:52:19,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 11:52:19,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 11:52:19,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 11:52:19,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 11:52:19,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 11:52:19,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 11:52:19,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 11:52:19,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 11:52:19,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 11:52:19,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 11:52:19,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 11:52:19,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 11:52:19,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 11:52:19,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 11:52:19,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 11:52:19,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 11:52:19,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 11:52:19,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 11:52:19,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 11:52:19,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 11:52:19,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 11:52:19,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 11:52:19,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 11:52:19,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 11:52:19,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 11:52:19,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 11:52:19,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 11:52:19,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 11:52:19,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 11:52:19,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 11:52:19,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 11:52:19,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 11:52:19,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 11:52:19,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 11:52:19,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 11:52:19,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 11:52:19,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 11:52:19,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 11:52:19,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 11:52:19,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 11:52:19,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken_NoBaseCtor__fail
[2020-11-25 11:52:19,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken_NoBaseCtor__success
[2020-11-25 11:52:19,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken__fail
[2020-11-25 11:52:19,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken__success
[2020-11-25 11:52:19,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CabGoldToken__fail
[2020-11-25 11:52:19,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CabGoldToken__success
[2020-11-25 11:52:19,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CabGoldToken__fail
[2020-11-25 11:52:19,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CabGoldToken__success
[2020-11-25 11:52:19,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CabGoldToken__fail
[2020-11-25 11:52:19,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CabGoldToken__success
[2020-11-25 11:52:19,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure active_CabGoldToken__fail
[2020-11-25 11:52:19,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure active_CabGoldToken__success
[2020-11-25 11:52:19,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 11:52:19,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 11:52:19,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 11:52:19,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 11:52:19,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 11:52:19,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 11:52:19,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 11:52:19,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 11:52:19,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 11:52:19,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 11:52:19,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 11:52:19,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 11:52:19,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 11:52:19,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 11:52:19,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 11:52:19,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 11:52:19,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 11:52:19,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 11:52:19,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 11:52:19,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 11:52:19,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-25 11:52:19,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-25 11:52:19,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_CabGoldToken
[2020-11-25 11:52:19,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 11:52:19,265 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 11:52:19,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 11:52:19,544 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:52:19,544 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:52:19,544 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:52:19,817 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:52:20,158 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 11:52:20,158 INFO  L286             CfgBuilder]: Removed 8 assue(true) statements.
[2020-11-25 11:52:20,160 INFO  L202        PluginConnector]: Adding new model CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:52:20 BoogieIcfgContainer
[2020-11-25 11:52:20,161 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:52:19" (2/2) ...
[2020-11-25 11:52:20,161 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 11:52:20,161 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@6a0ba432 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:52:20, skipping insertion in model container
[2020-11-25 11:52:20,161 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 11:52:20,161 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 11:52:20,161 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 11:52:20,162 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 11:52:20,163 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:19" (1/3) ...
[2020-11-25 11:52:20,163 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@399024a1 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:52:20, skipping insertion in model container
[2020-11-25 11:52:20,163 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:52:19" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 11:52:20,196 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:52:20 NWAContainer
[2020-11-25 11:52:20,196 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 11:52:20,197 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 11:52:20,197 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 11:52:20,197 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 11:52:20,198 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:52:20" (3/4) ...
[2020-11-25 11:52:20,199 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@31cc52b5 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:52:20, skipping insertion in model container
[2020-11-25 11:52:20,199 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:52:20" (4/4) ...
[2020-11-25 11:52:20,202 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 11:52:20,206 INFO  L110   BuchiProductObserver]: Initial RCFG 2280 locations, 3354 edges
[2020-11-25 11:52:20,207 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 11:52:20,219 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 11:52:22,014 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 11:52:22,022 INFO  L110   BuchiProductObserver]: BuchiProgram size 5918 locations, 11054 edges
[2020-11-25 11:52:22,022 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:52:22 BoogieIcfgContainer
[2020-11-25 11:52:22,022 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 11:52:22,022 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 11:52:22,023 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 11:52:22,024 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 11:52:22,024 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:52:22" (1/1) ...
[2020-11-25 11:52:22,142 INFO  L313           BlockEncoder]: Initial Icfg 5918 locations, 11054 edges
[2020-11-25 11:52:22,142 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 11:52:22,143 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 11:52:22,143 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 11:52:22,144 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 11:52:22,157 INFO  L70    emoveInfeasibleEdges]: Removed 162 edges and 19 locations because of local infeasibility
[2020-11-25 11:52:22,170 INFO  L70        RemoveSinkStates]: Removed 92 edges and 61 locations by removing sink states
[2020-11-25 11:52:22,185 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 11:52:22,190 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 11:52:22,194 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 11:52:22,195 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 11:52:22,198 INFO  L313           BlockEncoder]: Encoded RCFG 5810 locations, 10759 edges
[2020-11-25 11:52:22,198 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 11:52:22 BasicIcfg
[2020-11-25 11:52:22,199 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 11:52:22,199 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 11:52:22,199 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 11:52:22,201 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 11:52:22,201 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:52:22,201 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:52:19" (1/6) ...
[2020-11-25 11:52:22,203 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@21a62607 and model type CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:52:22, skipping insertion in model container
[2020-11-25 11:52:22,203 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:52:22,203 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:52:19" (2/6) ...
[2020-11-25 11:52:22,203 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@21a62607 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:52:22, skipping insertion in model container
[2020-11-25 11:52:22,203 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:52:22,203 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:52:20" (3/6) ...
[2020-11-25 11:52:22,203 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@21a62607 and model type CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 11:52:22, skipping insertion in model container
[2020-11-25 11:52:22,203 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:52:22,203 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:52:20" (4/6) ...
[2020-11-25 11:52:22,203 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@21a62607 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:52:22, skipping insertion in model container
[2020-11-25 11:52:22,204 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:52:22,204 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:52:22" (5/6) ...
[2020-11-25 11:52:22,204 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@21a62607 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 11:52:22, skipping insertion in model container
[2020-11-25 11:52:22,204 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:52:22,204 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 11:52:22" (6/6) ...
[2020-11-25 11:52:22,205 INFO  L404   chiAutomizerObserver]: Analyzing ICFG CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_transfer-normal.bpl_BEv2
[2020-11-25 11:52:22,238 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 11:52:22,239 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 11:52:22,239 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 11:52:22,239 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 11:52:22,239 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 11:52:22,239 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 11:52:22,239 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 11:52:22,239 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 11:52:22,239 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 11:52:22,291 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5810 states.
[2020-11-25 11:52:22,349 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:22,349 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:22,349 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:22,356 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:22,356 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:22,356 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 11:52:22,356 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5810 states.
[2020-11-25 11:52:22,379 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:22,379 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:22,379 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:22,381 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:22,381 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC200 := false;
[L3]                 call_transfer_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L6462]              assume null == 0;
[L6463]  CALL        call this := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L6463]  RET         call this := FreshRefGenerator__success();
[L6464]              assume now >= 0;
[L6465]              assume DType[this] == CabGoldToken;
[L6466]              assume msgvalue_MSG == 0;
[L6467]              gas := gas - 53000;
[L6468]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4139]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4140]  COND TRUE   revert
[L6468]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6469]              assume !revert && gas >= 0;

Loop:
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND TRUE   choice == 18
[L6339]              gas := gas - 21000;
[L6340]  COND FALSE  !(gas >= 0)
[L6472]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:22,394 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:22,394 INFO  L82        PathProgramCache]: Analyzing trace with hash -635981711, now seen corresponding path program 1 times
[2020-11-25 11:52:22,399 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:22,418 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:22,458 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:52:22,460 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:52:22,461 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 11:52:22,848 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:22,856 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 11:52:22,857 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 11:52:22,858 INFO  L87              Difference]: Start difference. First operand 5810 states. Second operand 3 states.
[2020-11-25 11:52:23,185 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:52:23,185 INFO  L93              Difference]: Finished difference Result 5086 states and 8728 transitions.
[2020-11-25 11:52:23,185 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 11:52:23,186 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5086 states and 8728 transitions.
[2020-11-25 11:52:23,218 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:52:23,267 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5086 states to 5086 states and 8728 transitions.
[2020-11-25 11:52:23,268 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 14
[2020-11-25 11:52:23,273 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1314
[2020-11-25 11:52:23,273 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5086 states and 8728 transitions.
[2020-11-25 11:52:23,295 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:52:23,296 INFO  L728         BuchiCegarLoop]: Abstraction has 5086 states and 8728 transitions.
[2020-11-25 11:52:23,314 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5086 states and 8728 transitions.
[2020-11-25 11:52:23,409 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5086 to 4422.
[2020-11-25 11:52:23,409 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4422 states.
[2020-11-25 11:52:23,420 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4422 states to 4422 states and 7585 transitions.
[2020-11-25 11:52:23,421 INFO  L751         BuchiCegarLoop]: Abstraction has 4422 states and 7585 transitions.
[2020-11-25 11:52:23,421 INFO  L631         BuchiCegarLoop]: Abstraction has 4422 states and 7585 transitions.
[2020-11-25 11:52:23,421 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 11:52:23,421 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4422 states and 7585 transitions.
[2020-11-25 11:52:23,435 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:23,435 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:23,435 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:23,436 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:23,436 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                success_transfer_ERC200 := false;
[L3]                call_transfer_ERC200 := false;
[L3]     CALL       call main();
[L3]                havoc p1;
[L6462]             assume null == 0;
[L6463]  CALL       call this := FreshRefGenerator__success();
[L2551]             havoc newRef;
[L2552]             assume Alloc[newRef] == false;
[L2553]             Alloc[newRef] := true;
[L2554]             assume newRef != null;
[L6463]  RET        call this := FreshRefGenerator__success();
[L6464]             assume now >= 0;
[L6465]             assume DType[this] == CabGoldToken;
[L6466]             assume msgvalue_MSG == 0;
[L6467]             gas := gas - 53000;
[L6468]  CALL       call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  CALL       call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL       call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]             assume msgsender_MSG != null;
[L2735]             Balance[this] := 0;
[L2749]  RET        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND TRUE  revert
[L4139]  RET        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4140]  COND TRUE  revert
[L6468]  RET        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6469]             assume !revert && gas >= 0;

Loop:
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND TRUE   choice == 18
[L6339]              gas := gas - 21000;
[L6340]  COND FALSE  !(gas >= 0)
[L6472]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:23,437 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:23,437 INFO  L82        PathProgramCache]: Analyzing trace with hash -1316040081, now seen corresponding path program 1 times
[2020-11-25 11:52:23,439 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:23,443 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:23,450 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:52:23,450 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:52:23,450 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [2] imperfect sequences [] total 2
[2020-11-25 11:52:23,451 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:23,451 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 11:52:23,451 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 11:52:23,452 INFO  L87              Difference]: Start difference. First operand 4422 states and 7585 transitions. cyclomatic complexity: 3165 Second operand 3 states.
[2020-11-25 11:52:23,589 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:52:23,589 INFO  L93              Difference]: Finished difference Result 4233 states and 5215 transitions.
[2020-11-25 11:52:23,589 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 11:52:23,590 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4233 states and 5215 transitions.
[2020-11-25 11:52:23,603 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:23,620 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4233 states to 4233 states and 5215 transitions.
[2020-11-25 11:52:23,620 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1075
[2020-11-25 11:52:23,621 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1095
[2020-11-25 11:52:23,621 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4233 states and 5215 transitions.
[2020-11-25 11:52:23,625 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:52:23,625 INFO  L728         BuchiCegarLoop]: Abstraction has 4233 states and 5215 transitions.
[2020-11-25 11:52:23,629 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4233 states and 5215 transitions.
[2020-11-25 11:52:23,668 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4233 to 4233.
[2020-11-25 11:52:23,668 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4233 states.
[2020-11-25 11:52:23,675 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4233 states to 4233 states and 5215 transitions.
[2020-11-25 11:52:23,675 INFO  L751         BuchiCegarLoop]: Abstraction has 4233 states and 5215 transitions.
[2020-11-25 11:52:23,675 INFO  L631         BuchiCegarLoop]: Abstraction has 4233 states and 5215 transitions.
[2020-11-25 11:52:23,675 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 11:52:23,675 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4233 states and 5215 transitions.
[2020-11-25 11:52:23,682 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:23,682 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:23,682 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:23,683 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:23,683 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC200 := false;
[L3]                 call_transfer_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L6462]              assume null == 0;
[L6463]  CALL        call this := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L6463]  RET         call this := FreshRefGenerator__success();
[L6464]              assume now >= 0;
[L6465]              assume DType[this] == CabGoldToken;
[L6466]              assume msgvalue_MSG == 0;
[L6467]              gas := gas - 53000;
[L6468]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND TRUE   revert
[L4139]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4140]  COND TRUE   revert
[L6468]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6469]              assume !revert && gas >= 0;
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND TRUE   choice == 16
[L6351]              gas := gas - 21000;
[L6352]  COND TRUE   gas >= 0
[L6353]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6354]              assume msgvalue_MSG == 0;
[L6355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s255) && msgsender_MSG != recipient_s255) && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s255] + amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L418]               havoc __exception;
[L419]               revert := false;
[L420]   COND FALSE  !(__exception)
[L446]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2860]  COND TRUE   DType[this] == CabGoldToken
[L2861]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3245]              __var_4 := null;
[L3246]  COND TRUE   !(sender_s435 != null)
[L3247]              revert := true;
[L2861]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2862]  COND TRUE   revert
[L446]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L447]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - amount_s255) && _balances_ERC20[this][recipient_s255] == old(_balances_ERC20[this][recipient_s255]) + amount_s255) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L3]                 revert := revert_hold;
[L6355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND TRUE   choice == 16
[L6351]              gas := gas - 21000;
[L6352]  COND TRUE   gas >= 0
[L6353]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6354]              assume msgvalue_MSG == 0;
[L6355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s255) && msgsender_MSG != recipient_s255) && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s255] + amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L418]               havoc __exception;
[L419]               revert := false;
[L420]   COND FALSE  !(__exception)
[L446]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2860]  COND TRUE   DType[this] == CabGoldToken
[L2861]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3245]              __var_4 := null;
[L3246]  COND TRUE   !(sender_s435 != null)
[L3247]              revert := true;
[L2861]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2862]  COND TRUE   revert
[L446]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L447]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - amount_s255) && _balances_ERC20[this][recipient_s255] == old(_balances_ERC20[this][recipient_s255]) + amount_s255) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L3]                 revert := revert_hold;
[L6355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:23,686 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:23,686 INFO  L82        PathProgramCache]: Analyzing trace with hash -1669265575, now seen corresponding path program 1 times
[2020-11-25 11:52:23,687 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:23,695 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:23,710 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:52:23,710 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:52:23,710 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 11:52:23,710 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:23,711 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 11:52:23,711 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 11:52:23,711 INFO  L87              Difference]: Start difference. First operand 4233 states and 5215 transitions. cyclomatic complexity: 984 Second operand 3 states.
[2020-11-25 11:52:23,791 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:52:23,791 INFO  L93              Difference]: Finished difference Result 4893 states and 5728 transitions.
[2020-11-25 11:52:23,791 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 11:52:23,791 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4893 states and 5728 transitions.
[2020-11-25 11:52:23,804 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:52:23,820 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4893 states to 4445 states and 5172 transitions.
[2020-11-25 11:52:23,820 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1134
[2020-11-25 11:52:23,821 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1193
[2020-11-25 11:52:23,821 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4445 states and 5172 transitions.
[2020-11-25 11:52:23,825 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:52:23,825 INFO  L728         BuchiCegarLoop]: Abstraction has 4445 states and 5172 transitions.
[2020-11-25 11:52:23,829 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4445 states and 5172 transitions.
[2020-11-25 11:52:23,861 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4445 to 3865.
[2020-11-25 11:52:23,862 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3865 states.
[2020-11-25 11:52:23,866 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3865 states to 3865 states and 4452 transitions.
[2020-11-25 11:52:23,866 INFO  L751         BuchiCegarLoop]: Abstraction has 3865 states and 4452 transitions.
[2020-11-25 11:52:23,866 INFO  L631         BuchiCegarLoop]: Abstraction has 3865 states and 4452 transitions.
[2020-11-25 11:52:23,866 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 11:52:23,866 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3865 states and 4452 transitions.
[2020-11-25 11:52:23,872 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:23,872 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:23,872 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:23,875 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:23,875 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC200 := false;
[L3]                 call_transfer_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L6462]              assume null == 0;
[L6463]  CALL        call this := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L6463]  RET         call this := FreshRefGenerator__success();
[L6464]              assume now >= 0;
[L6465]              assume DType[this] == CabGoldToken;
[L6466]              assume msgvalue_MSG == 0;
[L6467]              gas := gas - 53000;
[L6468]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4139]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4140]  COND FALSE  !(revert)
[L4143]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4143]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4144]  COND FALSE  !(revert)
[L4147]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND FALSE  !(DType[this] == CabGoldToken)
[L3682]  COND TRUE   DType[this] == ERC20Mintable
[L3683]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3683]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3684]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L4147]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4148]  COND FALSE  !(revert)
[L4151]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L3905]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3906]  COND FALSE  !(revert)
[L3909]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L3909]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3910]  COND FALSE  !(revert)
[L3913]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND FALSE  !(DType[this] == CabGoldToken)
[L3682]  COND TRUE   DType[this] == ERC20Mintable
[L3683]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3683]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3684]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L3913]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3914]  COND FALSE  !(revert)
[L3917]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3878]              assume msgsender_MSG != null;
[L3879]              Balance[this] := 0;
[L3917]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L4151]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND FALSE  !(revert)
[L4155]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4003]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  COND FALSE  !(revert)
[L4007]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4007]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]              assume msgsender_MSG != null;
[L3981]              Balance[this] := 0;
[L4011]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4155]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  COND FALSE  !(revert)
[L4159]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4100]              assume msgsender_MSG != null;
[L4101]              Balance[this] := 0;
[L4102]              name_CabGoldToken[this] := -1569364958;
[L4103]              symbol_CabGoldToken[this] := 1094563867;
[L4104]              decimals_CabGoldToken[this] := 18;
[L4105]              active_CabGoldToken[this] := false;
[L4159]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4160]  COND FALSE  !(revert)
[L6468]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6469]              assume !revert && gas >= 0;
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND TRUE   choice == 16
[L6351]              gas := gas - 21000;
[L6352]  COND TRUE   gas >= 0
[L6353]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6354]              assume msgvalue_MSG == 0;
[L6355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s255) && msgsender_MSG != recipient_s255) && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s255] + amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L418]               havoc __exception;
[L419]               revert := false;
[L420]   COND TRUE   __exception
[L421]               __tmp__Balance := Balance;
[L422]               __tmp__DType := DType;
[L423]               __tmp__Alloc := Alloc;
[L424]               __tmp__balance_ADDR := balance_ADDR;
[L425]               __tmp__M_Ref_int := M_Ref_int;
[L426]               __tmp__sum__balances0 := sum__balances0;
[L427]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L428]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L429]               __tmp__sum__allowances1 := sum__allowances1;
[L430]               __tmp__M_Ref_bool := M_Ref_bool;
[L431]               __tmp__sum := sum;
[L432]               __tmp__Length := Length;
[L433]               __tmp__now := now;
[L434]               __tmp___balances_ERC20 := _balances_ERC20;
[L435]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L436]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L437]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L438]               __tmp___minters_MinterRole := _minters_MinterRole;
[L439]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L440]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L441]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L442]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2831]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2832]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3213]              __var_4 := null;
[L3214]  COND TRUE   !(sender_s435 != null)
[L3215]              revert := true;
[L2832]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2833]  COND TRUE   revert
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L444]               assume revert || gas < 0;
[L6355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND TRUE   choice == 16
[L6351]              gas := gas - 21000;
[L6352]  COND TRUE   gas >= 0
[L6353]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6354]              assume msgvalue_MSG == 0;
[L6355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s255) && msgsender_MSG != recipient_s255) && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s255] + amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L418]               havoc __exception;
[L419]               revert := false;
[L420]   COND TRUE   __exception
[L421]               __tmp__Balance := Balance;
[L422]               __tmp__DType := DType;
[L423]               __tmp__Alloc := Alloc;
[L424]               __tmp__balance_ADDR := balance_ADDR;
[L425]               __tmp__M_Ref_int := M_Ref_int;
[L426]               __tmp__sum__balances0 := sum__balances0;
[L427]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L428]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L429]               __tmp__sum__allowances1 := sum__allowances1;
[L430]               __tmp__M_Ref_bool := M_Ref_bool;
[L431]               __tmp__sum := sum;
[L432]               __tmp__Length := Length;
[L433]               __tmp__now := now;
[L434]               __tmp___balances_ERC20 := _balances_ERC20;
[L435]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L436]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L437]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L438]               __tmp___minters_MinterRole := _minters_MinterRole;
[L439]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L440]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L441]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L442]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2831]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2832]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3213]              __var_4 := null;
[L3214]  COND TRUE   !(sender_s435 != null)
[L3215]              revert := true;
[L2832]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2833]  COND TRUE   revert
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L444]               assume revert || gas < 0;
[L6355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:23,880 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:23,880 INFO  L82        PathProgramCache]: Analyzing trace with hash -1555683065, now seen corresponding path program 1 times
[2020-11-25 11:52:23,881 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:23,894 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:24,006 INFO  L134       CoverageAnalysis]: Checked inductivity of 266 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 257 trivial. 0 not checked.
[2020-11-25 11:52:24,006 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 11:52:24,006 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-11-25 11:52:24,007 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:24,007 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 11:52:24,007 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 11:52:24,007 INFO  L87              Difference]: Start difference. First operand 3865 states and 4452 transitions. cyclomatic complexity: 589 Second operand 6 states.
[2020-11-25 11:52:24,096 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:52:24,097 INFO  L93              Difference]: Finished difference Result 3884 states and 4474 transitions.
[2020-11-25 11:52:24,097 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 11:52:24,097 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3884 states and 4474 transitions.
[2020-11-25 11:52:24,106 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:24,118 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3884 states to 3871 states and 4458 transitions.
[2020-11-25 11:52:24,118 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1045
[2020-11-25 11:52:24,119 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1045
[2020-11-25 11:52:24,119 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3871 states and 4458 transitions.
[2020-11-25 11:52:24,122 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:52:24,122 INFO  L728         BuchiCegarLoop]: Abstraction has 3871 states and 4458 transitions.
[2020-11-25 11:52:24,125 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3871 states and 4458 transitions.
[2020-11-25 11:52:24,150 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3871 to 3871.
[2020-11-25 11:52:24,150 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3871 states.
[2020-11-25 11:52:24,154 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3871 states to 3871 states and 4458 transitions.
[2020-11-25 11:52:24,154 INFO  L751         BuchiCegarLoop]: Abstraction has 3871 states and 4458 transitions.
[2020-11-25 11:52:24,154 INFO  L631         BuchiCegarLoop]: Abstraction has 3871 states and 4458 transitions.
[2020-11-25 11:52:24,154 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 11:52:24,154 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3871 states and 4458 transitions.
[2020-11-25 11:52:24,159 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:24,160 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:24,160 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:24,162 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:24,162 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC200 := false;
[L3]                 call_transfer_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L6462]              assume null == 0;
[L6463]  CALL        call this := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L6463]  RET         call this := FreshRefGenerator__success();
[L6464]              assume now >= 0;
[L6465]              assume DType[this] == CabGoldToken;
[L6466]              assume msgvalue_MSG == 0;
[L6467]              gas := gas - 53000;
[L6468]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4139]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4140]  COND FALSE  !(revert)
[L4143]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4143]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4144]  COND FALSE  !(revert)
[L4147]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND FALSE  !(DType[this] == CabGoldToken)
[L3682]  COND FALSE  !(DType[this] == ERC20Mintable)
[L3687]  COND TRUE   DType[this] == MinterRole
[L3688]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3688]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3689]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L4147]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4148]  COND FALSE  !(revert)
[L4151]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L3905]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3906]  COND FALSE  !(revert)
[L3909]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L3909]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3910]  COND FALSE  !(revert)
[L3913]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND FALSE  !(DType[this] == CabGoldToken)
[L3682]  COND TRUE   DType[this] == ERC20Mintable
[L3683]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3683]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3684]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L3913]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3914]  COND FALSE  !(revert)
[L3917]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3878]              assume msgsender_MSG != null;
[L3879]              Balance[this] := 0;
[L3917]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L4151]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND FALSE  !(revert)
[L4155]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4003]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  COND FALSE  !(revert)
[L4007]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4007]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]              assume msgsender_MSG != null;
[L3981]              Balance[this] := 0;
[L4011]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4155]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  COND FALSE  !(revert)
[L4159]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4100]              assume msgsender_MSG != null;
[L4101]              Balance[this] := 0;
[L4102]              name_CabGoldToken[this] := -1569364958;
[L4103]              symbol_CabGoldToken[this] := 1094563867;
[L4104]              decimals_CabGoldToken[this] := 18;
[L4105]              active_CabGoldToken[this] := false;
[L4159]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4160]  COND FALSE  !(revert)
[L6468]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6469]              assume !revert && gas >= 0;
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND TRUE   choice == 16
[L6351]              gas := gas - 21000;
[L6352]  COND TRUE   gas >= 0
[L6353]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6354]              assume msgvalue_MSG == 0;
[L6355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s255) && msgsender_MSG != recipient_s255) && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s255] + amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L418]               havoc __exception;
[L419]               revert := false;
[L420]   COND TRUE   __exception
[L421]               __tmp__Balance := Balance;
[L422]               __tmp__DType := DType;
[L423]               __tmp__Alloc := Alloc;
[L424]               __tmp__balance_ADDR := balance_ADDR;
[L425]               __tmp__M_Ref_int := M_Ref_int;
[L426]               __tmp__sum__balances0 := sum__balances0;
[L427]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L428]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L429]               __tmp__sum__allowances1 := sum__allowances1;
[L430]               __tmp__M_Ref_bool := M_Ref_bool;
[L431]               __tmp__sum := sum;
[L432]               __tmp__Length := Length;
[L433]               __tmp__now := now;
[L434]               __tmp___balances_ERC20 := _balances_ERC20;
[L435]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L436]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L437]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L438]               __tmp___minters_MinterRole := _minters_MinterRole;
[L439]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L440]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L441]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L442]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2831]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2832]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3213]              __var_4 := null;
[L3214]  COND TRUE   !(sender_s435 != null)
[L3215]              revert := true;
[L2832]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2833]  COND TRUE   revert
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L444]               assume revert || gas < 0;
[L6355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND TRUE   choice == 16
[L6351]              gas := gas - 21000;
[L6352]  COND TRUE   gas >= 0
[L6353]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6354]              assume msgvalue_MSG == 0;
[L6355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s255) && msgsender_MSG != recipient_s255) && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s255] + amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L418]               havoc __exception;
[L419]               revert := false;
[L420]   COND TRUE   __exception
[L421]               __tmp__Balance := Balance;
[L422]               __tmp__DType := DType;
[L423]               __tmp__Alloc := Alloc;
[L424]               __tmp__balance_ADDR := balance_ADDR;
[L425]               __tmp__M_Ref_int := M_Ref_int;
[L426]               __tmp__sum__balances0 := sum__balances0;
[L427]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L428]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L429]               __tmp__sum__allowances1 := sum__allowances1;
[L430]               __tmp__M_Ref_bool := M_Ref_bool;
[L431]               __tmp__sum := sum;
[L432]               __tmp__Length := Length;
[L433]               __tmp__now := now;
[L434]               __tmp___balances_ERC20 := _balances_ERC20;
[L435]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L436]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L437]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L438]               __tmp___minters_MinterRole := _minters_MinterRole;
[L439]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L440]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L441]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L442]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2831]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2832]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3213]              __var_4 := null;
[L3214]  COND TRUE   !(sender_s435 != null)
[L3215]              revert := true;
[L2832]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2833]  COND TRUE   revert
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L444]               assume revert || gas < 0;
[L6355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:24,166 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:24,166 INFO  L82        PathProgramCache]: Analyzing trace with hash -467447277, now seen corresponding path program 1 times
[2020-11-25 11:52:24,168 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:24,176 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:24,253 INFO  L134       CoverageAnalysis]: Checked inductivity of 262 backedges. 0 proven. 6 refuted. 0 times theorem prover too weak. 256 trivial. 0 not checked.
[2020-11-25 11:52:24,253 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 11:52:24,253 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-11-25 11:52:24,254 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:24,254 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 11:52:24,254 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 11:52:24,254 INFO  L87              Difference]: Start difference. First operand 3871 states and 4458 transitions. cyclomatic complexity: 589 Second operand 6 states.
[2020-11-25 11:52:24,330 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:52:24,330 INFO  L93              Difference]: Finished difference Result 3890 states and 4480 transitions.
[2020-11-25 11:52:24,330 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 11:52:24,330 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3890 states and 4480 transitions.
[2020-11-25 11:52:24,339 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:24,351 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3890 states to 3877 states and 4464 transitions.
[2020-11-25 11:52:24,352 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1045
[2020-11-25 11:52:24,352 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1045
[2020-11-25 11:52:24,352 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3877 states and 4464 transitions.
[2020-11-25 11:52:24,356 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:52:24,356 INFO  L728         BuchiCegarLoop]: Abstraction has 3877 states and 4464 transitions.
[2020-11-25 11:52:24,360 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3877 states and 4464 transitions.
[2020-11-25 11:52:24,385 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3877 to 3871.
[2020-11-25 11:52:24,385 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3871 states.
[2020-11-25 11:52:24,389 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3871 states to 3871 states and 4458 transitions.
[2020-11-25 11:52:24,390 INFO  L751         BuchiCegarLoop]: Abstraction has 3871 states and 4458 transitions.
[2020-11-25 11:52:24,390 INFO  L631         BuchiCegarLoop]: Abstraction has 3871 states and 4458 transitions.
[2020-11-25 11:52:24,390 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 11:52:24,390 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3871 states and 4458 transitions.
[2020-11-25 11:52:24,395 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:24,395 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:24,395 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:24,397 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:24,397 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC200 := false;
[L3]                 call_transfer_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L6462]              assume null == 0;
[L6463]  CALL        call this := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L6463]  RET         call this := FreshRefGenerator__success();
[L6464]              assume now >= 0;
[L6465]              assume DType[this] == CabGoldToken;
[L6466]              assume msgvalue_MSG == 0;
[L6467]              gas := gas - 53000;
[L6468]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4139]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4140]  COND FALSE  !(revert)
[L4143]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4143]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4144]  COND FALSE  !(revert)
[L4147]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND TRUE   DType[this] == CabGoldToken
[L3678]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3678]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3679]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L4147]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4148]  COND FALSE  !(revert)
[L4151]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L3905]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3906]  COND FALSE  !(revert)
[L3909]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L3909]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3910]  COND FALSE  !(revert)
[L3913]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND FALSE  !(DType[this] == CabGoldToken)
[L3682]  COND TRUE   DType[this] == ERC20Mintable
[L3683]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3683]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3684]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L3913]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3914]  COND FALSE  !(revert)
[L3917]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3878]              assume msgsender_MSG != null;
[L3879]              Balance[this] := 0;
[L3917]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L4151]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND FALSE  !(revert)
[L4155]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4003]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  COND FALSE  !(revert)
[L4007]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4007]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]              assume msgsender_MSG != null;
[L3981]              Balance[this] := 0;
[L4011]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4155]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  COND FALSE  !(revert)
[L4159]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4100]              assume msgsender_MSG != null;
[L4101]              Balance[this] := 0;
[L4102]              name_CabGoldToken[this] := -1569364958;
[L4103]              symbol_CabGoldToken[this] := 1094563867;
[L4104]              decimals_CabGoldToken[this] := 18;
[L4105]              active_CabGoldToken[this] := false;
[L4159]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4160]  COND FALSE  !(revert)
[L6468]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6469]              assume !revert && gas >= 0;
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND TRUE   choice == 16
[L6351]              gas := gas - 21000;
[L6352]  COND TRUE   gas >= 0
[L6353]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6354]              assume msgvalue_MSG == 0;
[L6355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s255) && msgsender_MSG != recipient_s255) && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s255] + amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L418]               havoc __exception;
[L419]               revert := false;
[L420]   COND TRUE   __exception
[L421]               __tmp__Balance := Balance;
[L422]               __tmp__DType := DType;
[L423]               __tmp__Alloc := Alloc;
[L424]               __tmp__balance_ADDR := balance_ADDR;
[L425]               __tmp__M_Ref_int := M_Ref_int;
[L426]               __tmp__sum__balances0 := sum__balances0;
[L427]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L428]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L429]               __tmp__sum__allowances1 := sum__allowances1;
[L430]               __tmp__M_Ref_bool := M_Ref_bool;
[L431]               __tmp__sum := sum;
[L432]               __tmp__Length := Length;
[L433]               __tmp__now := now;
[L434]               __tmp___balances_ERC20 := _balances_ERC20;
[L435]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L436]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L437]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L438]               __tmp___minters_MinterRole := _minters_MinterRole;
[L439]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L440]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L441]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L442]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2831]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2832]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3213]              __var_4 := null;
[L3214]  COND TRUE   !(sender_s435 != null)
[L3215]              revert := true;
[L2832]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2833]  COND TRUE   revert
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L444]               assume revert || gas < 0;
[L6355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND TRUE   choice == 16
[L6351]              gas := gas - 21000;
[L6352]  COND TRUE   gas >= 0
[L6353]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6354]              assume msgvalue_MSG == 0;
[L6355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s255) && msgsender_MSG != recipient_s255) && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s255] + amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L418]               havoc __exception;
[L419]               revert := false;
[L420]   COND TRUE   __exception
[L421]               __tmp__Balance := Balance;
[L422]               __tmp__DType := DType;
[L423]               __tmp__Alloc := Alloc;
[L424]               __tmp__balance_ADDR := balance_ADDR;
[L425]               __tmp__M_Ref_int := M_Ref_int;
[L426]               __tmp__sum__balances0 := sum__balances0;
[L427]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L428]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L429]               __tmp__sum__allowances1 := sum__allowances1;
[L430]               __tmp__M_Ref_bool := M_Ref_bool;
[L431]               __tmp__sum := sum;
[L432]               __tmp__Length := Length;
[L433]               __tmp__now := now;
[L434]               __tmp___balances_ERC20 := _balances_ERC20;
[L435]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L436]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L437]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L438]               __tmp___minters_MinterRole := _minters_MinterRole;
[L439]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L440]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L441]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L442]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2831]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2832]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3213]              __var_4 := null;
[L3214]  COND TRUE   !(sender_s435 != null)
[L3215]              revert := true;
[L2832]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2833]  COND TRUE   revert
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L444]               assume revert || gas < 0;
[L6355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:24,402 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:24,402 INFO  L82        PathProgramCache]: Analyzing trace with hash -131057868, now seen corresponding path program 1 times
[2020-11-25 11:52:24,403 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:24,414 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:24,501 INFO  L134       CoverageAnalysis]: Checked inductivity of 261 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 255 trivial. 0 not checked.
[2020-11-25 11:52:24,501 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:52:24,501 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 11:52:24,501 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:24,501 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 11:52:24,501 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 11:52:24,502 INFO  L87              Difference]: Start difference. First operand 3871 states and 4458 transitions. cyclomatic complexity: 589 Second operand 7 states.
[2020-11-25 11:52:24,583 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:52:24,583 INFO  L93              Difference]: Finished difference Result 3894 states and 4483 transitions.
[2020-11-25 11:52:24,583 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 11:52:24,583 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3894 states and 4483 transitions.
[2020-11-25 11:52:24,591 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:24,601 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3894 states to 3867 states and 4452 transitions.
[2020-11-25 11:52:24,601 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1045
[2020-11-25 11:52:24,601 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1045
[2020-11-25 11:52:24,601 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3867 states and 4452 transitions.
[2020-11-25 11:52:24,604 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:52:24,604 INFO  L728         BuchiCegarLoop]: Abstraction has 3867 states and 4452 transitions.
[2020-11-25 11:52:24,607 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3867 states and 4452 transitions.
[2020-11-25 11:52:24,627 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3867 to 3867.
[2020-11-25 11:52:24,627 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3867 states.
[2020-11-25 11:52:24,631 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3867 states to 3867 states and 4452 transitions.
[2020-11-25 11:52:24,631 INFO  L751         BuchiCegarLoop]: Abstraction has 3867 states and 4452 transitions.
[2020-11-25 11:52:24,631 INFO  L631         BuchiCegarLoop]: Abstraction has 3867 states and 4452 transitions.
[2020-11-25 11:52:24,631 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 11:52:24,631 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3867 states and 4452 transitions.
[2020-11-25 11:52:24,636 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:24,636 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:24,636 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:24,638 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:24,638 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC200 := false;
[L3]                 call_transfer_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L6462]              assume null == 0;
[L6463]  CALL        call this := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L6463]  RET         call this := FreshRefGenerator__success();
[L6464]              assume now >= 0;
[L6465]              assume DType[this] == CabGoldToken;
[L6466]              assume msgvalue_MSG == 0;
[L6467]              gas := gas - 53000;
[L6468]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4139]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4140]  COND FALSE  !(revert)
[L4143]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4143]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4144]  COND FALSE  !(revert)
[L4147]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND TRUE   DType[this] == CabGoldToken
[L3678]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3678]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3679]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L4147]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4148]  COND FALSE  !(revert)
[L4151]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L3905]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3906]  COND FALSE  !(revert)
[L3909]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L3909]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3910]  COND FALSE  !(revert)
[L3913]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND TRUE   DType[this] == CabGoldToken
[L3678]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3678]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3679]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L3913]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3914]  COND FALSE  !(revert)
[L3917]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3878]              assume msgsender_MSG != null;
[L3879]              Balance[this] := 0;
[L3917]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L4151]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND FALSE  !(revert)
[L4155]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4003]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  COND FALSE  !(revert)
[L4007]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4007]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]              assume msgsender_MSG != null;
[L3981]              Balance[this] := 0;
[L4011]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4155]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  COND FALSE  !(revert)
[L4159]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4100]              assume msgsender_MSG != null;
[L4101]              Balance[this] := 0;
[L4102]              name_CabGoldToken[this] := -1569364958;
[L4103]              symbol_CabGoldToken[this] := 1094563867;
[L4104]              decimals_CabGoldToken[this] := 18;
[L4105]              active_CabGoldToken[this] := false;
[L4159]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4160]  COND FALSE  !(revert)
[L6468]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6469]              assume !revert && gas >= 0;
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND TRUE   choice == 16
[L6351]              gas := gas - 21000;
[L6352]  COND TRUE   gas >= 0
[L6353]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6354]              assume msgvalue_MSG == 0;
[L6355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s255) && msgsender_MSG != recipient_s255) && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s255] + amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L418]               havoc __exception;
[L419]               revert := false;
[L420]   COND TRUE   __exception
[L421]               __tmp__Balance := Balance;
[L422]               __tmp__DType := DType;
[L423]               __tmp__Alloc := Alloc;
[L424]               __tmp__balance_ADDR := balance_ADDR;
[L425]               __tmp__M_Ref_int := M_Ref_int;
[L426]               __tmp__sum__balances0 := sum__balances0;
[L427]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L428]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L429]               __tmp__sum__allowances1 := sum__allowances1;
[L430]               __tmp__M_Ref_bool := M_Ref_bool;
[L431]               __tmp__sum := sum;
[L432]               __tmp__Length := Length;
[L433]               __tmp__now := now;
[L434]               __tmp___balances_ERC20 := _balances_ERC20;
[L435]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L436]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L437]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L438]               __tmp___minters_MinterRole := _minters_MinterRole;
[L439]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L440]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L441]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L442]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2831]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2832]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3213]              __var_4 := null;
[L3214]  COND TRUE   !(sender_s435 != null)
[L3215]              revert := true;
[L2832]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2833]  COND TRUE   revert
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L444]               assume revert || gas < 0;
[L6355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND TRUE   choice == 16
[L6351]              gas := gas - 21000;
[L6352]  COND TRUE   gas >= 0
[L6353]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6354]              assume msgvalue_MSG == 0;
[L6355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s255) && msgsender_MSG != recipient_s255) && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s255] + amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L418]               havoc __exception;
[L419]               revert := false;
[L420]   COND TRUE   __exception
[L421]               __tmp__Balance := Balance;
[L422]               __tmp__DType := DType;
[L423]               __tmp__Alloc := Alloc;
[L424]               __tmp__balance_ADDR := balance_ADDR;
[L425]               __tmp__M_Ref_int := M_Ref_int;
[L426]               __tmp__sum__balances0 := sum__balances0;
[L427]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L428]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L429]               __tmp__sum__allowances1 := sum__allowances1;
[L430]               __tmp__M_Ref_bool := M_Ref_bool;
[L431]               __tmp__sum := sum;
[L432]               __tmp__Length := Length;
[L433]               __tmp__now := now;
[L434]               __tmp___balances_ERC20 := _balances_ERC20;
[L435]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L436]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L437]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L438]               __tmp___minters_MinterRole := _minters_MinterRole;
[L439]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L440]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L441]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L442]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2831]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2832]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3213]              __var_4 := null;
[L3214]  COND TRUE   !(sender_s435 != null)
[L3215]              revert := true;
[L2832]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2833]  COND TRUE   revert
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L444]               assume revert || gas < 0;
[L6355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:24,642 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:24,642 INFO  L82        PathProgramCache]: Analyzing trace with hash 390910869, now seen corresponding path program 1 times
[2020-11-25 11:52:24,642 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:24,653 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:52:24,711 INFO  L134       CoverageAnalysis]: Checked inductivity of 265 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 265 trivial. 0 not checked.
[2020-11-25 11:52:24,711 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:52:24,711 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 11:52:24,712 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:52:24,712 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 11:52:24,712 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 11:52:24,712 INFO  L87              Difference]: Start difference. First operand 3867 states and 4452 transitions. cyclomatic complexity: 587 Second operand 6 states.
[2020-11-25 11:52:24,760 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:52:24,761 INFO  L93              Difference]: Finished difference Result 3899 states and 4496 transitions.
[2020-11-25 11:52:24,761 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 11:52:24,761 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3899 states and 4496 transitions.
[2020-11-25 11:52:24,768 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:24,779 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3899 states to 3871 states and 4462 transitions.
[2020-11-25 11:52:24,779 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1047
[2020-11-25 11:52:24,779 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1047
[2020-11-25 11:52:24,780 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3871 states and 4462 transitions.
[2020-11-25 11:52:24,783 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:52:24,783 INFO  L728         BuchiCegarLoop]: Abstraction has 3871 states and 4462 transitions.
[2020-11-25 11:52:24,787 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3871 states and 4462 transitions.
[2020-11-25 11:52:24,812 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3871 to 3871.
[2020-11-25 11:52:24,812 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3871 states.
[2020-11-25 11:52:24,816 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3871 states to 3871 states and 4462 transitions.
[2020-11-25 11:52:24,816 INFO  L751         BuchiCegarLoop]: Abstraction has 3871 states and 4462 transitions.
[2020-11-25 11:52:24,816 INFO  L631         BuchiCegarLoop]: Abstraction has 3871 states and 4462 transitions.
[2020-11-25 11:52:24,816 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 11:52:24,816 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3871 states and 4462 transitions.
[2020-11-25 11:52:24,820 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:52:24,820 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:52:24,820 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:52:24,821 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:52:24,821 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_ERC200 := false;
[L3]                 call_transfer_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L6462]              assume null == 0;
[L6463]  CALL        call this := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L6463]  RET         call this := FreshRefGenerator__success();
[L6464]              assume now >= 0;
[L6465]              assume DType[this] == CabGoldToken;
[L6466]              assume msgvalue_MSG == 0;
[L6467]              gas := gas - 53000;
[L6468]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4139]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4140]  COND FALSE  !(revert)
[L4143]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4143]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4144]  COND FALSE  !(revert)
[L4147]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND TRUE   DType[this] == CabGoldToken
[L3678]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3678]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3679]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L4147]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4148]  COND FALSE  !(revert)
[L4151]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L3905]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3906]  COND FALSE  !(revert)
[L3909]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L3909]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3910]  COND FALSE  !(revert)
[L3913]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND TRUE   DType[this] == CabGoldToken
[L3678]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3678]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3679]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L3913]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3914]  COND FALSE  !(revert)
[L3917]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3878]              assume msgsender_MSG != null;
[L3879]              Balance[this] := 0;
[L3917]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L4151]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND FALSE  !(revert)
[L4155]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4003]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  COND FALSE  !(revert)
[L4007]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4007]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]              assume msgsender_MSG != null;
[L3981]              Balance[this] := 0;
[L4011]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4155]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  COND FALSE  !(revert)
[L4159]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4100]              assume msgsender_MSG != null;
[L4101]              Balance[this] := 0;
[L4102]              name_CabGoldToken[this] := -1569364958;
[L4103]              symbol_CabGoldToken[this] := 1094563867;
[L4104]              decimals_CabGoldToken[this] := 18;
[L4105]              active_CabGoldToken[this] := false;
[L4159]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4160]  COND FALSE  !(revert)
[L6468]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6469]              assume !revert && gas >= 0;
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND TRUE   choice == 16
[L6351]              gas := gas - 21000;
[L6352]  COND TRUE   gas >= 0
[L6353]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6354]              assume msgvalue_MSG == 0;
[L6355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s255) && msgsender_MSG != recipient_s255) && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s255] + amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L418]               havoc __exception;
[L419]               revert := false;
[L420]   COND TRUE   __exception
[L421]               __tmp__Balance := Balance;
[L422]               __tmp__DType := DType;
[L423]               __tmp__Alloc := Alloc;
[L424]               __tmp__balance_ADDR := balance_ADDR;
[L425]               __tmp__M_Ref_int := M_Ref_int;
[L426]               __tmp__sum__balances0 := sum__balances0;
[L427]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L428]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L429]               __tmp__sum__allowances1 := sum__allowances1;
[L430]               __tmp__M_Ref_bool := M_Ref_bool;
[L431]               __tmp__sum := sum;
[L432]               __tmp__Length := Length;
[L433]               __tmp__now := now;
[L434]               __tmp___balances_ERC20 := _balances_ERC20;
[L435]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L436]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L437]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L438]               __tmp___minters_MinterRole := _minters_MinterRole;
[L439]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L440]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L441]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L442]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2831]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2832]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3213]              __var_4 := null;
[L3214]  COND FALSE  !(!(sender_s435 != null))
[L3218]              __var_5 := null;
[L3219]  COND TRUE   !(recipient_s435 != null)
[L3220]              revert := true;
[L2832]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2833]  COND TRUE   revert
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L444]               assume revert || gas < 0;
[L6355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6472]  CALL        call CorralChoice_CabGoldToken(this);
[L6284]              havoc msgsender_MSG;
[L6285]              havoc msgvalue_MSG;
[L6286]              havoc choice;
[L6287]              havoc __ret_0_totalSupply;
[L6288]              havoc account_s236;
[L6289]              havoc __ret_0_balanceOf;
[L6290]              havoc recipient_s255;
[L6291]              havoc amount_s255;
[L6292]              havoc __ret_0_transfer;
[L6293]              havoc owner_s271;
[L6294]              havoc spender_s271;
[L6295]              havoc __ret_0_allowance;
[L6296]              havoc spender_s290;
[L6297]              havoc value_s290;
[L6298]              havoc __ret_0_approve;
[L6299]              havoc sender_s325;
[L6300]              havoc recipient_s325;
[L6301]              havoc amount_s325;
[L6302]              havoc __ret_0_transferFrom;
[L6303]              havoc spender_s352;
[L6304]              havoc addedValue_s352;
[L6305]              havoc __ret_0_increaseAllowance;
[L6306]              havoc spender_s379;
[L6307]              havoc subtractedValue_s379;
[L6308]              havoc __ret_0_decreaseAllowance;
[L6309]              havoc account_s718;
[L6310]              havoc __ret_0_isMinter;
[L6311]              havoc account_s730;
[L6312]              havoc account_s795;
[L6313]              havoc amount_s795;
[L6314]              havoc __ret_0_mint;
[L6315]              havoc amount_s810;
[L6316]              havoc account_s823;
[L6317]              havoc amount_s823;
[L6318]              havoc __ret_0_name;
[L6319]              havoc __ret_0_symbol;
[L6320]              havoc __ret_0_decimals;
[L6321]              havoc __ret_0_active;
[L6322]              havoc tmpNow;
[L6323]              havoc gas;
[L6324]              assume gas > 4000000 && gas <= 8000000;
[L6325]              tmpNow := now;
[L6326]              havoc now;
[L6327]              assume now > tmpNow;
[L6328]              assume msgsender_MSG != null;
[L6329]              assume DType[msgsender_MSG] != SafeMath;
[L6330]              assume DType[msgsender_MSG] != IERC20;
[L6331]              assume DType[msgsender_MSG] != ERC20;
[L6332]              assume DType[msgsender_MSG] != Roles;
[L6333]              assume DType[msgsender_MSG] != MinterRole;
[L6334]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6335]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6336]              assume DType[msgsender_MSG] != CabGoldToken;
[L6337]              Alloc[msgsender_MSG] := true;
[L6338]  COND FALSE  !(choice == 18)
[L6344]  COND FALSE  !(choice == 17)
[L6350]  COND TRUE   choice == 16
[L6351]              gas := gas - 21000;
[L6352]  COND TRUE   gas >= 0
[L6353]              assume amount_s255 >= 0 && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6354]              assume msgvalue_MSG == 0;
[L6355]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s255) && msgsender_MSG != recipient_s255) && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s255] + amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L418]               havoc __exception;
[L419]               revert := false;
[L420]   COND TRUE   __exception
[L421]               __tmp__Balance := Balance;
[L422]               __tmp__DType := DType;
[L423]               __tmp__Alloc := Alloc;
[L424]               __tmp__balance_ADDR := balance_ADDR;
[L425]               __tmp__M_Ref_int := M_Ref_int;
[L426]               __tmp__sum__balances0 := sum__balances0;
[L427]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L428]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L429]               __tmp__sum__allowances1 := sum__allowances1;
[L430]               __tmp__M_Ref_bool := M_Ref_bool;
[L431]               __tmp__sum := sum;
[L432]               __tmp__Length := Length;
[L433]               __tmp__now := now;
[L434]               __tmp___balances_ERC20 := _balances_ERC20;
[L435]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L436]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L437]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L438]               __tmp___minters_MinterRole := _minters_MinterRole;
[L439]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L440]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L441]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L442]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2831]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2832]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3213]              __var_4 := null;
[L3214]  COND FALSE  !(!(sender_s435 != null))
[L3218]              __var_5 := null;
[L3219]  COND TRUE   !(recipient_s435 != null)
[L3220]              revert := true;
[L2832]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2833]  COND TRUE   revert
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L444]               assume revert || gas < 0;
[L6355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L6472]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:52:24,825 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:24,826 INFO  L82        PathProgramCache]: Analyzing trace with hash -1132205046, now seen corresponding path program 1 times
[2020-11-25 11:52:24,826 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:24,841 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 11:52:24,858 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 11:52:24,943 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:24,943 INFO  L82        PathProgramCache]: Analyzing trace with hash -1258966420, now seen corresponding path program 1 times
[2020-11-25 11:52:24,944 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:24,948 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 11:52:24,963 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 11:52:24,979 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:52:24,979 INFO  L82        PathProgramCache]: Analyzing trace with hash 307046261, now seen corresponding path program 1 times
[2020-11-25 11:52:24,980 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:52:24,998 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 11:52:25,022 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.002s / 0.003s total
Resizing node table from 1759 to 3517
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1327 to 2647
[2020-11-25 11:52:25,472 WARN  L188               SmtUtils]: Spent 145.00 ms on a formula simplification that was a NOOP. DAG size: 261
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3137 to 6271
[2020-11-25 11:52:25,648 WARN  L188               SmtUtils]: Spent 165.00 ms on a formula simplification that was a NOOP. DAG size: 209
[2020-11-25 11:52:26,225 WARN  L188               SmtUtils]: Spent 574.00 ms on a formula simplification. DAG size of input: 267 DAG size of output: 255
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3019 to 6037
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3517 to 7027
[2020-11-25 11:52:26,379 WARN  L188               SmtUtils]: Spent 134.00 ms on a formula simplification. DAG size of input: 157 DAG size of output: 153
[2020-11-25 11:52:26,587 WARN  L188               SmtUtils]: Spent 206.00 ms on a formula simplification that was a NOOP. DAG size: 321
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 4027 to 8053
[2020-11-25 11:52:26,720 WARN  L188               SmtUtils]: Spent 122.00 ms on a formula simplification that was a NOOP. DAG size: 258
[2020-11-25 11:52:26,834 WARN  L188               SmtUtils]: Spent 111.00 ms on a formula simplification that was a NOOP. DAG size: 258
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 6037 to 12073
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1759 to 3517
[2020-11-25 11:52:26,894 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 673 to 1327
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 41 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
[2020-11-25 11:52:27,533 WARN  L188               SmtUtils]: Spent 208.00 ms on a formula simplification. DAG size of input: 270 DAG size of output: 256
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #7: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
[2020-11-25 11:52:27,946 WARN  L188               SmtUtils]: Spent 119.00 ms on a formula simplification that was a NOOP. DAG size: 209
[2020-11-25 11:52:28,342 WARN  L188               SmtUtils]: Spent 393.00 ms on a formula simplification. DAG size of input: 266 DAG size of output: 255
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-25 11:52:28,586 WARN  L188               SmtUtils]: Spent 143.00 ms on a formula simplification that was a NOOP. DAG size: 321
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
[2020-11-25 11:52:28,706 WARN  L188               SmtUtils]: Spent 115.00 ms on a formula simplification that was a NOOP. DAG size: 258
[2020-11-25 11:52:29,067 WARN  L188               SmtUtils]: Spent 358.00 ms on a formula simplification. DAG size of input: 391 DAG size of output: 378
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-11-25 11:52:29,204 WARN  L188               SmtUtils]: Spent 128.00 ms on a formula simplification. DAG size of input: 211 DAG size of output: 208
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-25 11:52:29,578 WARN  L188               SmtUtils]: Spent 182.00 ms on a formula simplification. DAG size of input: 319 DAG size of output: 318
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-25 11:52:29,684 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 11:52:29,703 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 11:52:29,712 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 11:52:29 BasicIcfg
[2020-11-25 11:52:29,713 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 11:52:29,713 INFO  L168              Benchmark]: Toolchain (without parser) took 10694.14 ms. Allocated memory was 1.0 GB in the beginning and 2.0 GB in the end (delta: 1.0 GB). Free memory was 929.8 MB in the beginning and 1.4 GB in the end (delta: -486.1 MB). Peak memory consumption was 952.5 MB. Max. memory is 15.3 GB.
[2020-11-25 11:52:29,713 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 11:52:29,714 INFO  L168              Benchmark]: Boogie Preprocessor took 113.60 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 11:52:29,714 INFO  L168              Benchmark]: UtopiaSpecLang took 58.41 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 11:52:29,714 INFO  L168              Benchmark]: Boogie Printer took 16.20 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 902.9 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 11:52:29,714 INFO  L168              Benchmark]: RCFGBuilder took 952.36 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 58.7 MB). Free memory was 902.9 MB in the beginning and 991.9 MB in the end (delta: -89.0 MB). Peak memory consumption was 189.6 MB. Max. memory is 15.3 GB.
[2020-11-25 11:52:29,715 INFO  L168              Benchmark]: UtopiaLTL2Aut took 35.25 ms. Allocated memory is still 1.1 GB. Free memory was 991.9 MB in the beginning and 985.0 MB in the end (delta: 6.9 MB). Peak memory consumption was 6.9 MB. Max. memory is 15.3 GB.
[2020-11-25 11:52:29,715 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1825.64 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 165.7 MB). Free memory was 985.0 MB in the beginning and 937.8 MB in the end (delta: 47.2 MB). Peak memory consumption was 478.5 MB. Max. memory is 15.3 GB.
[2020-11-25 11:52:29,715 INFO  L168              Benchmark]: BlockEncodingV2 took 176.14 ms. Allocated memory is still 1.3 GB. Free memory was 937.8 MB in the beginning and 841.4 MB in the end (delta: 96.4 MB). Peak memory consumption was 96.4 MB. Max. memory is 15.3 GB.
[2020-11-25 11:52:29,716 INFO  L168              Benchmark]: BuchiAutomizer took 7513.74 ms. Allocated memory was 1.3 GB in the beginning and 2.0 GB in the end (delta: 783.3 MB). Free memory was 841.4 MB in the beginning and 1.4 GB in the end (delta: -574.5 MB). Peak memory consumption was 639.7 MB. Max. memory is 15.3 GB.
[2020-11-25 11:52:29,718 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5918 locations, 11054 edges
  - StatisticsResult: Encoded RCFG
    5810 locations, 10759 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 113.60 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 58.41 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 16.20 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 902.9 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 952.36 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 58.7 MB). Free memory was 902.9 MB in the beginning and 991.9 MB in the end (delta: -89.0 MB). Peak memory consumption was 189.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 35.25 ms. Allocated memory is still 1.1 GB. Free memory was 991.9 MB in the beginning and 985.0 MB in the end (delta: 6.9 MB). Peak memory consumption was 6.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1825.64 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 165.7 MB). Free memory was 985.0 MB in the beginning and 937.8 MB in the end (delta: 47.2 MB). Peak memory consumption was 478.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 176.14 ms. Allocated memory is still 1.3 GB. Free memory was 937.8 MB in the beginning and 841.4 MB in the end (delta: 96.4 MB). Peak memory consumption was 96.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 7513.74 ms. Allocated memory was 1.3 GB in the beginning and 2.0 GB in the end (delta: 783.3 MB). Free memory was 841.4 MB in the beginning and 1.4 GB in the end (delta: -574.5 MB). Peak memory consumption was 639.7 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2280 locations, 3354 edges
  - StatisticsResult: BuchiProgram size
    5918 locations, 11054 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.7 modules have a trivial ranking function, the largest among these consists of 7 locations. The remainder module has 3871 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 7.4s and 8 iterations.  TraceHistogramMax:6. Analysis of lassos took 5.7s. Construction of modules took 0.3s. BÃ¼chi inclusion checks took 0.4s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 7 MinimizatonAttempts, 1250 StatesRemovedByMinimization, 3 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 4422 states and ocurred in iteration 1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 32648 SDtfs, 11568 SDslu, 72708 SDs, 0 SdLazy, 5041 SolverSat, 2989 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 0.3s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(1094563885) = (new CabGoldToken)({from : 1094563868});
[L4139]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4139]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4140]  COND FALSE  !(revert)
[L4143]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4143]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4144]  COND FALSE  !(revert)
[L4147]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND TRUE   DType[this] == CabGoldToken
[L3678]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3678]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3679]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L4147]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4148]  COND FALSE  !(revert)
[L4151]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L3905]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3906]  COND FALSE  !(revert)
[L3909]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L3909]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3910]  COND FALSE  !(revert)
[L3913]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3668]              assume msgsender_MSG != null;
[L3669]              Balance[this] := 0;
[L3671]  CALL        call __var_20 := FreshRefGenerator__success();
[L2551]              havoc newRef;
[L2552]              assume Alloc[newRef] == false;
[L2553]              Alloc[newRef] := true;
[L2554]              assume newRef != null;
[L3671]  RET         call __var_20 := FreshRefGenerator__success();
[L3672]  COND FALSE  !(revert)
[L3675]              _minters_MinterRole[this] := __var_20;
[L3677]  COND TRUE   DType[this] == CabGoldToken
[L3678]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3843]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3568]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3622]              __var_19 := null;
[L3623]  COND FALSE  !(!(account_s670 != null))
[L3627]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3568]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3569]  COND FALSE  !(revert)
[L3572]  COND FALSE  !(!!__var_17)
[L3576]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3843]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3844]  COND FALSE  !(revert)
[L3847]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3678]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3679]  COND FALSE  !(revert)
[L3709]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3710]  COND FALSE  !(revert)
[L3913]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3914]  COND FALSE  !(revert)
[L3917]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3878]              assume msgsender_MSG != null;
[L3879]              Balance[this] := 0;
[L3917]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L4151]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4152]  COND FALSE  !(revert)
[L4155]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L4003]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  COND FALSE  !(revert)
[L4007]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2734]              assume msgsender_MSG != null;
[L2735]              Balance[this] := 0;
[L2749]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2750]  COND FALSE  !(revert)
[L2795]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2799]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2771]              assume msgsender_MSG != null;
[L2772]              Balance[this] := 0;
[L2773]              _balances_ERC20[this] := zeroRefintArr();
[L2774]              sum__balances0[this] := 0;
[L2775]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2776]              sum__allowances1[this] := 0;
[L2777]              _totalSupply_ERC20[this] := 0;
[L2799]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2800]  COND FALSE  !(revert)
[L4007]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]              assume msgsender_MSG != null;
[L3981]              Balance[this] := 0;
[L4011]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4155]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4156]  COND FALSE  !(revert)
[L4159]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4100]              assume msgsender_MSG != null;
[L4101]              Balance[this] := 0;
[L4102]              name_CabGoldToken[this] := -1569364958;
[L4103]              symbol_CabGoldToken[this] := 1094563867;
[L4104]              decimals_CabGoldToken[this] := 18;
[L4105]              active_CabGoldToken[this] := false;
[L4159]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4160]  COND FALSE  !(revert)
[L6468]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
ERC20(1094563885).transfer~address~uint256.gas(3979002)({from : 1094563870, recipient : 0, amount : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s255) && msgsender_MSG != recipient_s255) && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s255] + amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L418]               havoc __exception;
[L419]               revert := false;
[L420]   COND TRUE   __exception
[L421]               __tmp__Balance := Balance;
[L422]               __tmp__DType := DType;
[L423]               __tmp__Alloc := Alloc;
[L424]               __tmp__balance_ADDR := balance_ADDR;
[L425]               __tmp__M_Ref_int := M_Ref_int;
[L426]               __tmp__sum__balances0 := sum__balances0;
[L427]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L428]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L429]               __tmp__sum__allowances1 := sum__allowances1;
[L430]               __tmp__M_Ref_bool := M_Ref_bool;
[L431]               __tmp__sum := sum;
[L432]               __tmp__Length := Length;
[L433]               __tmp__now := now;
[L434]               __tmp___balances_ERC20 := _balances_ERC20;
[L435]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L436]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L437]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L438]               __tmp___minters_MinterRole := _minters_MinterRole;
[L439]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L440]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L441]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L442]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2831]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2832]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3213]              __var_4 := null;
[L3214]  COND FALSE  !(!(sender_s435 != null))
[L3218]              __var_5 := null;
[L3219]  COND TRUE   !(recipient_s435 != null)
[L3220]              revert := true;
[L2832]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2833]  COND TRUE   revert
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L444]               assume revert || gas < 0;
[L6355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);

Loop:
ERC20(1094563885).transfer~address~uint256.gas(3979001)({from : 1094563890, recipient : 0, amount : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != recipient_s255) && msgsender_MSG != recipient_s255) && amount_s255 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][recipient_s255] + amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s255 >= 0) && amount_s255 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s255] >= 0) && _balances_ERC20[this][recipient_s255] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_ERC200 := true;
[L3]                 call_transfer_ERC200 := false;
[L3]                 revert := revert_hold;
[L418]               havoc __exception;
[L419]               revert := false;
[L420]   COND TRUE   __exception
[L421]               __tmp__Balance := Balance;
[L422]               __tmp__DType := DType;
[L423]               __tmp__Alloc := Alloc;
[L424]               __tmp__balance_ADDR := balance_ADDR;
[L425]               __tmp__M_Ref_int := M_Ref_int;
[L426]               __tmp__sum__balances0 := sum__balances0;
[L427]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L428]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L429]               __tmp__sum__allowances1 := sum__allowances1;
[L430]               __tmp__M_Ref_bool := M_Ref_bool;
[L431]               __tmp__sum := sum;
[L432]               __tmp__Length := Length;
[L433]               __tmp__now := now;
[L434]               __tmp___balances_ERC20 := _balances_ERC20;
[L435]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L436]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L437]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L438]               __tmp___minters_MinterRole := _minters_MinterRole;
[L439]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L440]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L441]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L442]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L443]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L2831]  COND TRUE   __tmp__DType[this] == CabGoldToken
[L2832]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L3213]              __var_4 := null;
[L3214]  COND FALSE  !(!(sender_s435 != null))
[L3218]              __var_5 := null;
[L3219]  COND TRUE   !(recipient_s435 != null)
[L3220]              revert := true;
[L2832]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s255, amount_s255);
[L2833]  COND TRUE   revert
[L443]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);
[L444]               assume revert || gas < 0;
[L6355]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s255, amount_s255);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
