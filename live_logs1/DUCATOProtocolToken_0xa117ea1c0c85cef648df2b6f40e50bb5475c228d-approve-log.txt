This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 14:25:08,539 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 14:25:08,540 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 14:25:08,551 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 14:25:08,551 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 14:25:08,552 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 14:25:08,553 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 14:25:08,554 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 14:25:08,556 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 14:25:08,556 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 14:25:08,557 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 14:25:08,557 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 14:25:08,558 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 14:25:08,559 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 14:25:08,559 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 14:25:08,560 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 14:25:08,561 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 14:25:08,562 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 14:25:08,563 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 14:25:08,566 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 14:25:08,567 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 14:25:08,568 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 14:25:08,570 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 14:25:08,571 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 14:25:08,571 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 14:25:08,572 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 14:25:08,572 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 14:25:08,573 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 14:25:08,573 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 14:25:08,574 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 14:25:08,574 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 14:25:08,575 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 14:25:08,576 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 14:25:08,576 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 14:25:08,577 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 14:25:08,577 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 14:25:08,578 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 14:25:08,578 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 14:25:08,578 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 14:25:08,579 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 14:25:08,579 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 14:25:08,579 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 14:25:08,587 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 14:25:08,587 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 14:25:08,588 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 14:25:08,588 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 14:25:08,589 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 14:25:08,589 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 14:25:08,589 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 14:25:08,589 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 14:25:08,589 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 14:25:08,589 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 14:25:08,589 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 14:25:08,589 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 14:25:08,590 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 14:25:08,590 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 14:25:08,590 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 14:25:08,590 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 14:25:08,590 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 14:25:08,590 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 14:25:08,590 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 14:25:08,590 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 14:25:08,591 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 14:25:08,591 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 14:25:08,591 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 14:25:08,591 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 14:25:08,591 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 14:25:08,591 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 14:25:08,614 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 14:25:08,627 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 14:25:08,630 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 14:25:08,631 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 14:25:08,632 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 14:25:08,633 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_approve.bpl
[2020-11-25 14:25:08,633 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_approve.bpl'
[2020-11-25 14:25:08,709 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 14:25:08,710 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 14:25:08,711 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 14:25:08,711 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 14:25:08,711 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 14:25:08,727 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:25:08" (1/1) ...
[2020-11-25 14:25:08,729 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:25:08" (1/1) ...
[2020-11-25 14:25:08,755 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:25:08" (1/1) ...
[2020-11-25 14:25:08,755 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:25:08" (1/1) ...
[2020-11-25 14:25:08,772 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:25:08" (1/1) ...
[2020-11-25 14:25:08,781 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:25:08" (1/1) ...
[2020-11-25 14:25:08,787 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:25:08" (1/1) ...
[2020-11-25 14:25:08,795 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 14:25:08,795 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 14:25:08,796 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 14:25:08,798 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 14:25:08,801 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:25:08" (1/1) ...
[2020-11-25 14:25:08,819 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(DUCATOProtocolToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(DUCATOProtocolToken.approve(spender, value), return == true && allowed_DUCATOProtocolToken[this][msg.sender][spender] == value &&  _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this]) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this]) && allowed_DUCATOProtocolToken[this][p1][p2] == old(allowed_DUCATOProtocolToken[this][p1][p2]) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this]) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this]) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this]) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this]) && owner_Owned[this] == old(owner_Owned[this]))))
[2020-11-25 14:25:08,824 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(DUCATOProtocolToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(DUCATOProtocolToken.approve(spender, value), return == true && allowed_DUCATOProtocolToken[this][msg.sender][spender] == value &&  _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this]) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this]) && allowed_DUCATOProtocolToken[this][p1][p2] == old(allowed_DUCATOProtocolToken[this][p1][p2]) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this]) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this]) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this]) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this]) && owner_Owned[this] == old(owner_Owned[this]))))
[2020-11-25 14:25:08,831 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(DUCATOProtocolToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(DUCATOProtocolToken.approve(spender, value), return == true && allowed_DUCATOProtocolToken[this][msg.sender][spender] == value &&  _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this]) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this]) && allowed_DUCATOProtocolToken[this][p1][p2] == old(allowed_DUCATOProtocolToken[this][p1][p2]) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this]) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this]) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this]) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this]) && owner_Owned[this] == old(owner_Owned[this]))))
[2020-11-25 14:25:08,837 INFO  L636   opiaSpecLangObserver]: Parsed ( p1!=msg.sender || p2!=spender_s419 ) to BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_DUCATOProtocolToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[spender_s419,<IMPLEMENTATION_INPARAM,approve~address~uint256_DUCATOProtocolToken>]]]
[2020-11-25 14:25:08,840 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( success_s419==true && allowed_DUCATOProtocolToken[this][msg.sender][spender_s419]==tokens_s419 ) && _totalSupply_DUCATOProtocolToken[this]==( old(_totalSupply_DUCATOProtocolToken[this]) ) ) && balances_DUCATOProtocolToken[this]==( old(balances_DUCATOProtocolToken[this]) ) ) && allowed_DUCATOProtocolToken[this][p1][p2]==( old(allowed_DUCATOProtocolToken[this][p1][p2]) ) ) && symbol_DUCATOProtocolToken[this]==( old(symbol_DUCATOProtocolToken[this]) ) ) && name_DUCATOProtocolToken[this]==( old(name_DUCATOProtocolToken[this]) ) ) && decimals_DUCATOProtocolToken[this]==( old(decimals_DUCATOProtocolToken[this]) ) ) && _stopTrade_DUCATOProtocolToken[this]==( old(_stopTrade_DUCATOProtocolToken[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s419,<IMPLEMENTATION_OUTPARAM,approve~address~uint256_DUCATOProtocolToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_DUCATOProtocolToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_DUCATOProtocolToken>]]],[IdentifierExpression[spender_s419,<IMPLEMENTATION_INPARAM,approve~address~uint256_DUCATOProtocolToken>]]],IdentifierExpression[tokens_s419,<IMPLEMENTATION_INPARAM,approve~address~uint256_DUCATOProtocolToken>]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_DUCATOProtocolToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_DUCATOProtocolToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_DUCATOProtocolToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_DUCATOProtocolToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_DUCATOProtocolToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_DUCATOProtocolToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_DUCATOProtocolToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_DUCATOProtocolToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_DUCATOProtocolToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_DUCATOProtocolToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_DUCATOProtocolToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_DUCATOProtocolToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_stopTrade_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_DUCATOProtocolToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_stopTrade_DUCATOProtocolToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_DUCATOProtocolToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_DUCATOProtocolToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_DUCATOProtocolToken>]]]]]]
[2020-11-25 14:25:08,844 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(DUCATOProtocolToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(DUCATOProtocolToken.approve(spender, value), return == true && allowed_DUCATOProtocolToken[this][msg.sender][spender] == value &&  _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this]) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this]) && allowed_DUCATOProtocolToken[this][p1][p2] == old(allowed_DUCATOProtocolToken[this][p1][p2]) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this]) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this]) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this]) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this]) && owner_Owned[this] == old(owner_Owned[this]))))
[2020-11-25 14:25:08,845 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_approve_DUCATOProtocolToken0) ==> ( <>AP(success_approve_DUCATOProtocolToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 14:25:08,852 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:25:08 PropertyContainer
[2020-11-25 14:25:08,852 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 14:25:08,852 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 14:25:08,852 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 14:25:08,852 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 14:25:08,853 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:25:08" (1/2) ...
[2020-11-25 14:25:08,854 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 14:25:08,854 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 14:25:08,866 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:25:08" (2/2) ...
[2020-11-25 14:25:08,866 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 14:25:08,866 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 14:25:08,866 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 14:25:08,866 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 14:25:08,867 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:25:08" (1/2) ...
[2020-11-25 14:25:08,917 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 14:25:08,917 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:25:08,917 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 14:25:08,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 14:25:08,917 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 14:25:08,918 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 14:25:08,918 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 14:25:08,918 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 14:25:08,918 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 14:25:08,918 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 14:25:08,918 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 14:25:08,918 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 14:25:08,918 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 14:25:08,918 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 14:25:08,918 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 14:25:08,919 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 14:25:08,919 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 14:25:08,919 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 14:25:08,919 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 14:25:08,919 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 14:25:08,919 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 14:25:08,919 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 14:25:08,919 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 14:25:08,919 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 14:25:08,919 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 14:25:08,920 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 14:25:08,920 INFO  L130     BoogieDeclarations]: Found specification of procedure DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success
[2020-11-25 14:25:08,920 INFO  L130     BoogieDeclarations]: Found specification of procedure DUCATOProtocolToken_DUCATOProtocolToken
[2020-11-25 14:25:08,920 INFO  L138     BoogieDeclarations]: Found implementation of procedure DUCATOProtocolToken_DUCATOProtocolToken
[2020-11-25 14:25:08,920 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_DUCATOProtocolToken
[2020-11-25 14:25:08,920 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_DUCATOProtocolToken
[2020-11-25 14:25:08,920 INFO  L130     BoogieDeclarations]: Found specification of procedure stopTrade_DUCATOProtocolToken
[2020-11-25 14:25:08,920 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopTrade_DUCATOProtocolToken
[2020-11-25 14:25:08,920 INFO  L130     BoogieDeclarations]: Found specification of procedure startTrade_DUCATOProtocolToken
[2020-11-25 14:25:08,920 INFO  L138     BoogieDeclarations]: Found implementation of procedure startTrade_DUCATOProtocolToken
[2020-11-25 14:25:08,920 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_DUCATOProtocolToken
[2020-11-25 14:25:08,920 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_DUCATOProtocolToken
[2020-11-25 14:25:08,920 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DUCATOProtocolToken
[2020-11-25 14:25:08,920 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DUCATOProtocolToken
[2020-11-25 14:25:08,921 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_DUCATOProtocolToken
[2020-11-25 14:25:08,921 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_DUCATOProtocolToken
[2020-11-25 14:25:08,921 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DUCATOProtocolToken
[2020-11-25 14:25:08,921 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DUCATOProtocolToken
[2020-11-25 14:25:08,921 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_DUCATOProtocolToken
[2020-11-25 14:25:08,921 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_DUCATOProtocolToken
[2020-11-25 14:25:08,921 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_DUCATOProtocolToken
[2020-11-25 14:25:08,921 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_DUCATOProtocolToken
[2020-11-25 14:25:08,921 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_DUCATOProtocolToken__success
[2020-11-25 14:25:08,921 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_DUCATOProtocolToken
[2020-11-25 14:25:08,921 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_DUCATOProtocolToken
[2020-11-25 14:25:08,921 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DUCATOProtocolToken
[2020-11-25 14:25:08,921 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DUCATOProtocolToken
[2020-11-25 14:25:08,922 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DUCATOProtocolToken
[2020-11-25 14:25:08,922 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DUCATOProtocolToken
[2020-11-25 14:25:08,922 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DUCATOProtocolToken
[2020-11-25 14:25:08,922 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DUCATOProtocolToken
[2020-11-25 14:25:08,922 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 14:25:08,922 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 14:25:08,922 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 14:25:08,922 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 14:25:08,922 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 14:25:08,922 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 14:25:08,922 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 14:25:08,922 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 14:25:08,922 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 14:25:08,922 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 14:25:08,923 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 14:25:08,923 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 14:25:08,923 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DUCATOProtocolToken
[2020-11-25 14:25:08,923 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 14:25:08,923 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 14:25:08,923 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:25:08,923 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 14:25:08,923 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 14:25:08,923 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 14:25:08,923 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 14:25:08,923 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 14:25:08,923 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 14:25:08,924 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 14:25:08,924 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 14:25:08,924 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 14:25:08,924 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 14:25:08,924 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 14:25:08,924 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 14:25:08,924 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 14:25:08,924 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 14:25:08,924 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 14:25:08,924 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 14:25:08,924 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 14:25:08,924 INFO  L130     BoogieDeclarations]: Found specification of procedure DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__fail
[2020-11-25 14:25:08,925 INFO  L130     BoogieDeclarations]: Found specification of procedure DUCATOProtocolToken_DUCATOProtocolToken__success
[2020-11-25 14:25:08,925 INFO  L130     BoogieDeclarations]: Found specification of procedure DUCATOProtocolToken_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,925 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_DUCATOProtocolToken__success
[2020-11-25 14:25:08,925 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,925 INFO  L130     BoogieDeclarations]: Found specification of procedure stopTrade_DUCATOProtocolToken__success
[2020-11-25 14:25:08,925 INFO  L130     BoogieDeclarations]: Found specification of procedure stopTrade_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,925 INFO  L130     BoogieDeclarations]: Found specification of procedure startTrade_DUCATOProtocolToken__success
[2020-11-25 14:25:08,925 INFO  L130     BoogieDeclarations]: Found specification of procedure startTrade_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,925 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_DUCATOProtocolToken__success
[2020-11-25 14:25:08,925 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,925 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DUCATOProtocolToken__success
[2020-11-25 14:25:08,925 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,925 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_DUCATOProtocolToken__success
[2020-11-25 14:25:08,926 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,926 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DUCATOProtocolToken__success
[2020-11-25 14:25:08,926 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,926 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_DUCATOProtocolToken__success
[2020-11-25 14:25:08,926 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,926 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_DUCATOProtocolToken__success
[2020-11-25 14:25:08,926 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,926 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,926 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_DUCATOProtocolToken__success
[2020-11-25 14:25:08,926 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,926 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DUCATOProtocolToken__success
[2020-11-25 14:25:08,926 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,926 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DUCATOProtocolToken__success
[2020-11-25 14:25:08,927 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,927 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DUCATOProtocolToken__success
[2020-11-25 14:25:08,927 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,927 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 14:25:08,927 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 14:25:08,927 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 14:25:08,927 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 14:25:08,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 14:25:08,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 14:25:08,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:25:08,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:25:08,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 14:25:08,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 14:25:08,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 14:25:08,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 14:25:08,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 14:25:08,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 14:25:08,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 14:25:08,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 14:25:08,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 14:25:08,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 14:25:08,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 14:25:08,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 14:25:08,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 14:25:08,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 14:25:08,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 14:25:08,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 14:25:08,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 14:25:08,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 14:25:08,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 14:25:08,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 14:25:08,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 14:25:08,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 14:25:08,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 14:25:08,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 14:25:08,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__fail
[2020-11-25 14:25:08,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success
[2020-11-25 14:25:08,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure DUCATOProtocolToken_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure DUCATOProtocolToken_DUCATOProtocolToken__success
[2020-11-25 14:25:08,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_DUCATOProtocolToken__success
[2020-11-25 14:25:08,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopTrade_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopTrade_DUCATOProtocolToken__success
[2020-11-25 14:25:08,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure startTrade_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure startTrade_DUCATOProtocolToken__success
[2020-11-25 14:25:08,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_DUCATOProtocolToken__success
[2020-11-25 14:25:08,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DUCATOProtocolToken__success
[2020-11-25 14:25:08,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_DUCATOProtocolToken__success
[2020-11-25 14:25:08,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DUCATOProtocolToken__success
[2020-11-25 14:25:08,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_DUCATOProtocolToken__success
[2020-11-25 14:25:08,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_DUCATOProtocolToken__success
[2020-11-25 14:25:08,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_DUCATOProtocolToken__success
[2020-11-25 14:25:08,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_DUCATOProtocolToken__success
[2020-11-25 14:25:08,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DUCATOProtocolToken__success
[2020-11-25 14:25:08,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DUCATOProtocolToken__success
[2020-11-25 14:25:08,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DUCATOProtocolToken__fail
[2020-11-25 14:25:08,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DUCATOProtocolToken__success
[2020-11-25 14:25:08,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 14:25:08,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 14:25:08,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 14:25:08,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 14:25:08,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 14:25:08,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 14:25:08,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 14:25:08,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 14:25:08,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 14:25:08,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 14:25:08,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 14:25:08,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 14:25:08,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 14:25:08,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 14:25:08,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 14:25:08,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 14:25:08,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DUCATOProtocolToken
[2020-11-25 14:25:08,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 14:25:08,935 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 14:25:08,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 14:25:09,248 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:25:09,248 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:25:09,248 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:25:09,344 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:25:09,499 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 14:25:09,499 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 14:25:09,501 INFO  L202        PluginConnector]: Adding new model DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:25:09 BoogieIcfgContainer
[2020-11-25 14:25:09,501 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:25:08" (2/2) ...
[2020-11-25 14:25:09,501 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 14:25:09,502 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@6311bc45 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:25:09, skipping insertion in model container
[2020-11-25 14:25:09,502 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 14:25:09,502 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 14:25:09,502 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 14:25:09,503 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 14:25:09,503 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:25:08" (1/3) ...
[2020-11-25 14:25:09,504 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@408ffe96 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:25:09, skipping insertion in model container
[2020-11-25 14:25:09,504 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:25:08" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 14:25:09,541 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:25:09 NWAContainer
[2020-11-25 14:25:09,541 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 14:25:09,541 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 14:25:09,541 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 14:25:09,542 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 14:25:09,543 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:25:09" (3/4) ...
[2020-11-25 14:25:09,543 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@b1cb25d and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:25:09, skipping insertion in model container
[2020-11-25 14:25:09,544 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:25:09" (4/4) ...
[2020-11-25 14:25:09,546 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 14:25:09,549 INFO  L110   BuchiProductObserver]: Initial RCFG 1246 locations, 1548 edges
[2020-11-25 14:25:09,550 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 14:25:09,559 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 14:25:10,709 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 14:25:10,713 INFO  L110   BuchiProductObserver]: BuchiProgram size 2934 locations, 4986 edges
[2020-11-25 14:25:10,713 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:25:10 BoogieIcfgContainer
[2020-11-25 14:25:10,713 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 14:25:10,713 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 14:25:10,713 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 14:25:10,715 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 14:25:10,715 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:25:10" (1/1) ...
[2020-11-25 14:25:10,778 INFO  L313           BlockEncoder]: Initial Icfg 2934 locations, 4986 edges
[2020-11-25 14:25:10,778 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 14:25:10,779 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 14:25:10,780 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 14:25:10,780 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 14:25:10,795 INFO  L70    emoveInfeasibleEdges]: Removed 57 edges and 13 locations because of local infeasibility
[2020-11-25 14:25:10,806 INFO  L70        RemoveSinkStates]: Removed 8 edges and 5 locations by removing sink states
[2020-11-25 14:25:10,820 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 14:25:10,826 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 14:25:10,829 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 14:25:10,830 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 14:25:10,834 INFO  L313           BlockEncoder]: Encoded RCFG 2896 locations, 4892 edges
[2020-11-25 14:25:10,834 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:25:10 BasicIcfg
[2020-11-25 14:25:10,835 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 14:25:10,835 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 14:25:10,835 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 14:25:10,837 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 14:25:10,838 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:25:10,838 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:25:08" (1/6) ...
[2020-11-25 14:25:10,840 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@51e6d670 and model type DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:25:10, skipping insertion in model container
[2020-11-25 14:25:10,840 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:25:10,840 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:25:08" (2/6) ...
[2020-11-25 14:25:10,840 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@51e6d670 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:25:10, skipping insertion in model container
[2020-11-25 14:25:10,840 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:25:10,840 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:25:09" (3/6) ...
[2020-11-25 14:25:10,840 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@51e6d670 and model type DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:25:10, skipping insertion in model container
[2020-11-25 14:25:10,841 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:25:10,841 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:25:09" (4/6) ...
[2020-11-25 14:25:10,841 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@51e6d670 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:25:10, skipping insertion in model container
[2020-11-25 14:25:10,841 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:25:10,841 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:25:10" (5/6) ...
[2020-11-25 14:25:10,841 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@51e6d670 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:25:10, skipping insertion in model container
[2020-11-25 14:25:10,841 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:25:10,841 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:25:10" (6/6) ...
[2020-11-25 14:25:10,843 INFO  L404   chiAutomizerObserver]: Analyzing ICFG DUCATOProtocolToken_0xa117ea1c0c85cef648df2b6f40e50bb5475c228d_approve.bpl_BEv2
[2020-11-25 14:25:10,882 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 14:25:10,883 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 14:25:10,883 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 14:25:10,883 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 14:25:10,883 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 14:25:10,883 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 14:25:10,883 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 14:25:10,883 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 14:25:10,883 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 14:25:10,915 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2896 states.
[2020-11-25 14:25:10,955 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:25:10,956 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:25:10,956 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:25:10,965 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:25:10,965 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:25:10,965 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 14:25:10,965 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2896 states.
[2020-11-25 14:25:10,979 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:25:10,979 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:25:10,979 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:25:10,981 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:25:10,981 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_DUCATOProtocolToken0 := false;
[L3]                 call_approve_DUCATOProtocolToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3454]              assume null == 0;
[L3455]  CALL        call this := FreshRefGenerator__success();
[L1553]              havoc newRef;
[L1554]              assume Alloc[newRef] == false;
[L1555]              Alloc[newRef] := true;
[L1556]              assume newRef != null;
[L3455]  RET         call this := FreshRefGenerator__success();
[L3456]              assume now >= 0;
[L3457]              assume DType[this] == DUCATOProtocolToken;
[L3458]              assume msgvalue_MSG == 0;
[L3459]              gas := gas - 53000;
[L3460]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L395]               havoc __exception;
[L396]               revert := false;
[L397]   COND FALSE  !(__exception)
[L420]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1674]              assume msgsender_MSG != null;
[L1675]              Balance[this] := 0;
[L1689]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1690]  COND FALSE  !(revert)
[L1850]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1851]  COND TRUE   revert
[L420]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L421]               assume !revert && gas >= 0;
[L3460]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3461]              assume !revert && gas >= 0;

Loop:
[L3464]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3314]              havoc msgsender_MSG;
[L3315]              havoc msgvalue_MSG;
[L3316]              havoc choice;
[L3317]              havoc __ret_0_totalSupply;
[L3318]              havoc tokenOwner_s328;
[L3319]              havoc balance_s328;
[L3320]              havoc tokenOwner_s532;
[L3321]              havoc spender_s532;
[L3322]              havoc remaining_s532;
[L3323]              havoc to_s385;
[L3324]              havoc tokens_s385;
[L3325]              havoc success_s385;
[L3326]              havoc spender_s419;
[L3327]              havoc tokens_s419;
[L3328]              havoc success_s419;
[L3329]              havoc from_s510;
[L3330]              havoc to_s510;
[L3331]              havoc tokens_s510;
[L3332]              havoc success_s510;
[L3333]              havoc __ret_0_owner;
[L3334]              havoc __ret_0_symbol;
[L3335]              havoc __ret_0_name;
[L3336]              havoc __ret_0_decimals;
[L3337]              havoc spender_s582;
[L3338]              havoc tokens_s582;
[L3339]              havoc data_s582;
[L3340]              havoc success_s582;
[L3341]              havoc tokenAddress_s609;
[L3342]              havoc tokens_s609;
[L3343]              havoc success_s609;
[L3344]              havoc tmpNow;
[L3345]              havoc gas;
[L3346]              assume gas > 4000000 && gas <= 8000000;
[L3347]              tmpNow := now;
[L3348]              havoc now;
[L3349]              assume now > tmpNow;
[L3350]              assume msgsender_MSG != null;
[L3351]              assume DType[msgsender_MSG] != SafeMath;
[L3352]              assume DType[msgsender_MSG] != ERC20Interface;
[L3353]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3354]              assume DType[msgsender_MSG] != Owned;
[L3355]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3356]              Alloc[msgsender_MSG] := true;
[L3357]  COND TRUE   choice == 14
[L3358]              gas := gas - 21000;
[L3359]  COND FALSE  !(gas >= 0)
[L3464]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:25:10,994 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:25:10,994 INFO  L82        PathProgramCache]: Analyzing trace with hash 711349408, now seen corresponding path program 1 times
[2020-11-25 14:25:10,998 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:25:11,023 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:25:11,063 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:25:11,065 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:25:11,065 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:25:11,070 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:25:11,209 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:25:11,209 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:25:11,211 INFO  L87              Difference]: Start difference. First operand 2896 states. Second operand 4 states.
[2020-11-25 14:25:11,887 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:25:11,887 INFO  L93              Difference]: Finished difference Result 3140 states and 5084 transitions.
[2020-11-25 14:25:11,887 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:25:11,888 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3140 states and 5084 transitions.
[2020-11-25 14:25:11,913 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 14:25:11,950 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3140 states to 2990 states and 4845 transitions.
[2020-11-25 14:25:11,951 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 15
[2020-11-25 14:25:11,956 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 953
[2020-11-25 14:25:11,957 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2990 states and 4845 transitions.
[2020-11-25 14:25:11,970 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:25:11,971 INFO  L728         BuchiCegarLoop]: Abstraction has 2990 states and 4845 transitions.
[2020-11-25 14:25:11,997 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2990 states and 4845 transitions.
[2020-11-25 14:25:12,054 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2990 to 2202.
[2020-11-25 14:25:12,055 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2202 states.
[2020-11-25 14:25:12,063 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2202 states to 2202 states and 3384 transitions.
[2020-11-25 14:25:12,064 INFO  L751         BuchiCegarLoop]: Abstraction has 2202 states and 3384 transitions.
[2020-11-25 14:25:12,064 INFO  L631         BuchiCegarLoop]: Abstraction has 2202 states and 3384 transitions.
[2020-11-25 14:25:12,064 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 14:25:12,065 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2202 states and 3384 transitions.
[2020-11-25 14:25:12,072 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:25:12,072 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:25:12,073 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:25:12,074 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:25:12,074 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_DUCATOProtocolToken0 := false;
[L3]                 call_approve_DUCATOProtocolToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3454]              assume null == 0;
[L3455]  CALL        call this := FreshRefGenerator__success();
[L1553]              havoc newRef;
[L1554]              assume Alloc[newRef] == false;
[L1555]              Alloc[newRef] := true;
[L1556]              assume newRef != null;
[L3455]  RET         call this := FreshRefGenerator__success();
[L3456]              assume now >= 0;
[L3457]              assume DType[this] == DUCATOProtocolToken;
[L3458]              assume msgvalue_MSG == 0;
[L3459]              gas := gas - 53000;
[L3460]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L395]               havoc __exception;
[L396]               revert := false;
[L397]   COND FALSE  !(__exception)
[L420]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1674]              assume msgsender_MSG != null;
[L1675]              Balance[this] := 0;
[L1689]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1690]  COND FALSE  !(revert)
[L1850]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1851]  COND FALSE  !(revert)
[L1854]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1740]              assume msgsender_MSG != null;
[L1741]              Balance[this] := 0;
[L1742]              owner_Owned[this] := null;
[L1744]              owner_Owned[this] := msgsender_MSG;
[L1757]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1758]  COND FALSE  !(revert)
[L1854]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1855]  COND FALSE  !(revert)
[L1858]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1806]              assume msgsender_MSG != null;
[L1807]              Balance[this] := 0;
[L1808]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1809]              name_DUCATOProtocolToken[this] := 1405682701;
[L1810]              decimals_DUCATOProtocolToken[this] := 0;
[L1811]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1812]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1813]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1814]              sum_balances0[this] := 0;
[L1815]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1816]              sum_allowed1[this] := 0;
[L1818]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1819]              name_DUCATOProtocolToken[this] := -2134480732;
[L1820]              decimals_DUCATOProtocolToken[this] := 18;
[L1821]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1823]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1824]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1825]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1826]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1827]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1858]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1859]  COND FALSE  !(revert)
[L420]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L421]               assume !revert && gas >= 0;
[L3460]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3461]              assume !revert && gas >= 0;

Loop:
[L3464]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3314]              havoc msgsender_MSG;
[L3315]              havoc msgvalue_MSG;
[L3316]              havoc choice;
[L3317]              havoc __ret_0_totalSupply;
[L3318]              havoc tokenOwner_s328;
[L3319]              havoc balance_s328;
[L3320]              havoc tokenOwner_s532;
[L3321]              havoc spender_s532;
[L3322]              havoc remaining_s532;
[L3323]              havoc to_s385;
[L3324]              havoc tokens_s385;
[L3325]              havoc success_s385;
[L3326]              havoc spender_s419;
[L3327]              havoc tokens_s419;
[L3328]              havoc success_s419;
[L3329]              havoc from_s510;
[L3330]              havoc to_s510;
[L3331]              havoc tokens_s510;
[L3332]              havoc success_s510;
[L3333]              havoc __ret_0_owner;
[L3334]              havoc __ret_0_symbol;
[L3335]              havoc __ret_0_name;
[L3336]              havoc __ret_0_decimals;
[L3337]              havoc spender_s582;
[L3338]              havoc tokens_s582;
[L3339]              havoc data_s582;
[L3340]              havoc success_s582;
[L3341]              havoc tokenAddress_s609;
[L3342]              havoc tokens_s609;
[L3343]              havoc success_s609;
[L3344]              havoc tmpNow;
[L3345]              havoc gas;
[L3346]              assume gas > 4000000 && gas <= 8000000;
[L3347]              tmpNow := now;
[L3348]              havoc now;
[L3349]              assume now > tmpNow;
[L3350]              assume msgsender_MSG != null;
[L3351]              assume DType[msgsender_MSG] != SafeMath;
[L3352]              assume DType[msgsender_MSG] != ERC20Interface;
[L3353]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3354]              assume DType[msgsender_MSG] != Owned;
[L3355]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3356]              Alloc[msgsender_MSG] := true;
[L3357]  COND TRUE   choice == 14
[L3358]              gas := gas - 21000;
[L3359]  COND FALSE  !(gas >= 0)
[L3464]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:25:12,077 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:25:12,078 INFO  L82        PathProgramCache]: Analyzing trace with hash 1659504105, now seen corresponding path program 1 times
[2020-11-25 14:25:12,079 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:25:12,087 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:25:12,104 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:25:12,104 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:25:12,105 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:25:12,106 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:25:12,106 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:25:12,106 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:25:12,106 INFO  L87              Difference]: Start difference. First operand 2202 states and 3384 transitions. cyclomatic complexity: 1184 Second operand 4 states.
[2020-11-25 14:25:12,453 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:25:12,453 INFO  L93              Difference]: Finished difference Result 2034 states and 2201 transitions.
[2020-11-25 14:25:12,453 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:25:12,454 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2034 states and 2201 transitions.
[2020-11-25 14:25:12,460 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:25:12,467 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2034 states to 2034 states and 2201 transitions.
[2020-11-25 14:25:12,467 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 597
[2020-11-25 14:25:12,468 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 597
[2020-11-25 14:25:12,468 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2034 states and 2201 transitions.
[2020-11-25 14:25:12,470 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:25:12,470 INFO  L728         BuchiCegarLoop]: Abstraction has 2034 states and 2201 transitions.
[2020-11-25 14:25:12,472 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2034 states and 2201 transitions.
[2020-11-25 14:25:12,485 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2034 to 2034.
[2020-11-25 14:25:12,485 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2034 states.
[2020-11-25 14:25:12,488 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2034 states to 2034 states and 2201 transitions.
[2020-11-25 14:25:12,488 INFO  L751         BuchiCegarLoop]: Abstraction has 2034 states and 2201 transitions.
[2020-11-25 14:25:12,488 INFO  L631         BuchiCegarLoop]: Abstraction has 2034 states and 2201 transitions.
[2020-11-25 14:25:12,488 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 14:25:12,488 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2034 states and 2201 transitions.
[2020-11-25 14:25:12,492 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:25:12,492 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:25:12,492 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:25:12,493 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:25:12,493 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_DUCATOProtocolToken0 := false;
[L3]                 call_approve_DUCATOProtocolToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3454]              assume null == 0;
[L3455]  CALL        call this := FreshRefGenerator__success();
[L1553]              havoc newRef;
[L1554]              assume Alloc[newRef] == false;
[L1555]              Alloc[newRef] := true;
[L1556]              assume newRef != null;
[L3455]  RET         call this := FreshRefGenerator__success();
[L3456]              assume now >= 0;
[L3457]              assume DType[this] == DUCATOProtocolToken;
[L3458]              assume msgvalue_MSG == 0;
[L3459]              gas := gas - 53000;
[L3460]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L395]               havoc __exception;
[L396]               revert := false;
[L397]   COND FALSE  !(__exception)
[L420]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1674]              assume msgsender_MSG != null;
[L1675]              Balance[this] := 0;
[L1689]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1690]  COND FALSE  !(revert)
[L1850]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1851]  COND FALSE  !(revert)
[L1854]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1740]              assume msgsender_MSG != null;
[L1741]              Balance[this] := 0;
[L1742]              owner_Owned[this] := null;
[L1744]              owner_Owned[this] := msgsender_MSG;
[L1757]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1758]  COND FALSE  !(revert)
[L1854]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1855]  COND FALSE  !(revert)
[L1858]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1806]              assume msgsender_MSG != null;
[L1807]              Balance[this] := 0;
[L1808]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1809]              name_DUCATOProtocolToken[this] := 1405682701;
[L1810]              decimals_DUCATOProtocolToken[this] := 0;
[L1811]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1812]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1813]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1814]              sum_balances0[this] := 0;
[L1815]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1816]              sum_allowed1[this] := 0;
[L1818]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1819]              name_DUCATOProtocolToken[this] := -2134480732;
[L1820]              decimals_DUCATOProtocolToken[this] := 18;
[L1821]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1823]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1824]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1825]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1826]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1827]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1858]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1859]  COND FALSE  !(revert)
[L420]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L421]               assume !revert && gas >= 0;
[L3460]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3461]              assume !revert && gas >= 0;
[L3464]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3314]              havoc msgsender_MSG;
[L3315]              havoc msgvalue_MSG;
[L3316]              havoc choice;
[L3317]              havoc __ret_0_totalSupply;
[L3318]              havoc tokenOwner_s328;
[L3319]              havoc balance_s328;
[L3320]              havoc tokenOwner_s532;
[L3321]              havoc spender_s532;
[L3322]              havoc remaining_s532;
[L3323]              havoc to_s385;
[L3324]              havoc tokens_s385;
[L3325]              havoc success_s385;
[L3326]              havoc spender_s419;
[L3327]              havoc tokens_s419;
[L3328]              havoc success_s419;
[L3329]              havoc from_s510;
[L3330]              havoc to_s510;
[L3331]              havoc tokens_s510;
[L3332]              havoc success_s510;
[L3333]              havoc __ret_0_owner;
[L3334]              havoc __ret_0_symbol;
[L3335]              havoc __ret_0_name;
[L3336]              havoc __ret_0_decimals;
[L3337]              havoc spender_s582;
[L3338]              havoc tokens_s582;
[L3339]              havoc data_s582;
[L3340]              havoc success_s582;
[L3341]              havoc tokenAddress_s609;
[L3342]              havoc tokens_s609;
[L3343]              havoc success_s609;
[L3344]              havoc tmpNow;
[L3345]              havoc gas;
[L3346]              assume gas > 4000000 && gas <= 8000000;
[L3347]              tmpNow := now;
[L3348]              havoc now;
[L3349]              assume now > tmpNow;
[L3350]              assume msgsender_MSG != null;
[L3351]              assume DType[msgsender_MSG] != SafeMath;
[L3352]              assume DType[msgsender_MSG] != ERC20Interface;
[L3353]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3354]              assume DType[msgsender_MSG] != Owned;
[L3355]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3356]              Alloc[msgsender_MSG] := true;
[L3357]  COND FALSE  !(choice == 14)
[L3363]  COND FALSE  !(choice == 13)
[L3369]  COND FALSE  !(choice == 12)
[L3375]  COND FALSE  !(choice == 11)
[L3382]  COND TRUE   choice == 10
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume tokens_s419 >= 0 && tokens_s419 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call success_s419 := approve~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s419;
[L3]                 call_approve_DUCATOProtocolToken0 := true;
[L3]                 call_approve_DUCATOProtocolToken0 := false;
[L3]                 revert := revert_hold;
[L725]               havoc __exception;
[L726]               revert := false;
[L727]   COND FALSE  !(__exception)
[L750]   CALL        call success_s419 := approve~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L2034]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L2038]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_DUCATOProtocolToken[this][msgsender_MSG][spender_s419];
[L2039]              allowed_DUCATOProtocolToken[this][msgsender_MSG][spender_s419] := tokens_s419;
[L2040]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_DUCATOProtocolToken[this][msgsender_MSG][spender_s419];
[L2041]              assert { :EventEmitted "Approval_DUCATOProtocolToken" } true;
[L2042]              success_s419 := true;
[L750]   RET         call success_s419 := approve~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L751]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s419 == true && allowed_DUCATOProtocolToken[this][msgsender_MSG][spender_s419] == tokens_s419) && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this])) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this])) && allowed_DUCATOProtocolToken[this][p1][p2] == old(allowed_DUCATOProtocolToken[this][p1][p2])) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this])) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this])) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this])) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L3]                 revert := revert_hold;
[L3387]  RET         call success_s419 := approve~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3464]  RET         call CorralChoice_DUCATOProtocolToken(this);

Loop:
[L3464]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3314]              havoc msgsender_MSG;
[L3315]              havoc msgvalue_MSG;
[L3316]              havoc choice;
[L3317]              havoc __ret_0_totalSupply;
[L3318]              havoc tokenOwner_s328;
[L3319]              havoc balance_s328;
[L3320]              havoc tokenOwner_s532;
[L3321]              havoc spender_s532;
[L3322]              havoc remaining_s532;
[L3323]              havoc to_s385;
[L3324]              havoc tokens_s385;
[L3325]              havoc success_s385;
[L3326]              havoc spender_s419;
[L3327]              havoc tokens_s419;
[L3328]              havoc success_s419;
[L3329]              havoc from_s510;
[L3330]              havoc to_s510;
[L3331]              havoc tokens_s510;
[L3332]              havoc success_s510;
[L3333]              havoc __ret_0_owner;
[L3334]              havoc __ret_0_symbol;
[L3335]              havoc __ret_0_name;
[L3336]              havoc __ret_0_decimals;
[L3337]              havoc spender_s582;
[L3338]              havoc tokens_s582;
[L3339]              havoc data_s582;
[L3340]              havoc success_s582;
[L3341]              havoc tokenAddress_s609;
[L3342]              havoc tokens_s609;
[L3343]              havoc success_s609;
[L3344]              havoc tmpNow;
[L3345]              havoc gas;
[L3346]              assume gas > 4000000 && gas <= 8000000;
[L3347]              tmpNow := now;
[L3348]              havoc now;
[L3349]              assume now > tmpNow;
[L3350]              assume msgsender_MSG != null;
[L3351]              assume DType[msgsender_MSG] != SafeMath;
[L3352]              assume DType[msgsender_MSG] != ERC20Interface;
[L3353]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3354]              assume DType[msgsender_MSG] != Owned;
[L3355]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3356]              Alloc[msgsender_MSG] := true;
[L3357]  COND FALSE  !(choice == 14)
[L3363]  COND FALSE  !(choice == 13)
[L3369]  COND FALSE  !(choice == 12)
[L3375]  COND FALSE  !(choice == 11)
[L3382]  COND TRUE   choice == 10
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume tokens_s419 >= 0 && tokens_s419 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call success_s419 := approve~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s419;
[L3]                 call_approve_DUCATOProtocolToken0 := true;
[L3]                 call_approve_DUCATOProtocolToken0 := false;
[L3]                 revert := revert_hold;
[L725]               havoc __exception;
[L726]               revert := false;
[L727]   COND FALSE  !(__exception)
[L750]   CALL        call success_s419 := approve~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L2034]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L2038]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_DUCATOProtocolToken[this][msgsender_MSG][spender_s419];
[L2039]              allowed_DUCATOProtocolToken[this][msgsender_MSG][spender_s419] := tokens_s419;
[L2040]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_DUCATOProtocolToken[this][msgsender_MSG][spender_s419];
[L2041]              assert { :EventEmitted "Approval_DUCATOProtocolToken" } true;
[L2042]              success_s419 := true;
[L750]   RET         call success_s419 := approve~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L751]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s419 == true && allowed_DUCATOProtocolToken[this][msgsender_MSG][spender_s419] == tokens_s419) && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this])) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this])) && allowed_DUCATOProtocolToken[this][p1][p2] == old(allowed_DUCATOProtocolToken[this][p1][p2])) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this])) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this])) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this])) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L3]                 revert := revert_hold;
[L3387]  RET         call success_s419 := approve~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3464]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:25:12,497 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:25:12,497 INFO  L82        PathProgramCache]: Analyzing trace with hash 208940984, now seen corresponding path program 1 times
[2020-11-25 14:25:12,498 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:25:12,526 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:25:12,663 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:25:12,663 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:25:12,663 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 14:25:12,664 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:25:12,664 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 14:25:12,664 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=131, Unknown=0, NotChecked=0, Total=156
[2020-11-25 14:25:12,664 INFO  L87              Difference]: Start difference. First operand 2034 states and 2201 transitions. cyclomatic complexity: 169 Second operand 13 states.
[2020-11-25 14:25:14,051 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:25:14,051 INFO  L93              Difference]: Finished difference Result 2175 states and 2366 transitions.
[2020-11-25 14:25:14,051 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 14:25:14,051 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2175 states and 2366 transitions.
[2020-11-25 14:25:14,057 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 14:25:14,064 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2175 states to 2175 states and 2366 transitions.
[2020-11-25 14:25:14,064 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 664
[2020-11-25 14:25:14,065 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 664
[2020-11-25 14:25:14,065 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2175 states and 2366 transitions.
[2020-11-25 14:25:14,067 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:25:14,067 INFO  L728         BuchiCegarLoop]: Abstraction has 2175 states and 2366 transitions.
[2020-11-25 14:25:14,069 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2175 states and 2366 transitions.
[2020-11-25 14:25:14,086 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2175 to 2144.
[2020-11-25 14:25:14,086 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2144 states.
[2020-11-25 14:25:14,089 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2144 states to 2144 states and 2326 transitions.
[2020-11-25 14:25:14,089 INFO  L751         BuchiCegarLoop]: Abstraction has 2144 states and 2326 transitions.
[2020-11-25 14:25:14,089 INFO  L631         BuchiCegarLoop]: Abstraction has 2144 states and 2326 transitions.
[2020-11-25 14:25:14,089 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 14:25:14,089 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2144 states and 2326 transitions.
[2020-11-25 14:25:14,093 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:25:14,093 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:25:14,093 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:25:14,094 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:25:14,094 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_DUCATOProtocolToken0 := false;
[L3]                 call_approve_DUCATOProtocolToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3454]              assume null == 0;
[L3455]  CALL        call this := FreshRefGenerator__success();
[L1553]              havoc newRef;
[L1554]              assume Alloc[newRef] == false;
[L1555]              Alloc[newRef] := true;
[L1556]              assume newRef != null;
[L3455]  RET         call this := FreshRefGenerator__success();
[L3456]              assume now >= 0;
[L3457]              assume DType[this] == DUCATOProtocolToken;
[L3458]              assume msgvalue_MSG == 0;
[L3459]              gas := gas - 53000;
[L3460]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L395]               havoc __exception;
[L396]               revert := false;
[L397]   COND FALSE  !(__exception)
[L420]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1674]              assume msgsender_MSG != null;
[L1675]              Balance[this] := 0;
[L1689]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1690]  COND FALSE  !(revert)
[L1850]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1851]  COND FALSE  !(revert)
[L1854]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1740]              assume msgsender_MSG != null;
[L1741]              Balance[this] := 0;
[L1742]              owner_Owned[this] := null;
[L1744]              owner_Owned[this] := msgsender_MSG;
[L1757]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1758]  COND FALSE  !(revert)
[L1854]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1855]  COND FALSE  !(revert)
[L1858]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1806]              assume msgsender_MSG != null;
[L1807]              Balance[this] := 0;
[L1808]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1809]              name_DUCATOProtocolToken[this] := 1405682701;
[L1810]              decimals_DUCATOProtocolToken[this] := 0;
[L1811]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1812]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1813]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1814]              sum_balances0[this] := 0;
[L1815]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1816]              sum_allowed1[this] := 0;
[L1818]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1819]              name_DUCATOProtocolToken[this] := -2134480732;
[L1820]              decimals_DUCATOProtocolToken[this] := 18;
[L1821]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1823]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1824]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1825]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1826]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1827]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1858]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1859]  COND FALSE  !(revert)
[L420]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L421]               assume !revert && gas >= 0;
[L3460]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3461]              assume !revert && gas >= 0;
[L3464]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3314]              havoc msgsender_MSG;
[L3315]              havoc msgvalue_MSG;
[L3316]              havoc choice;
[L3317]              havoc __ret_0_totalSupply;
[L3318]              havoc tokenOwner_s328;
[L3319]              havoc balance_s328;
[L3320]              havoc tokenOwner_s532;
[L3321]              havoc spender_s532;
[L3322]              havoc remaining_s532;
[L3323]              havoc to_s385;
[L3324]              havoc tokens_s385;
[L3325]              havoc success_s385;
[L3326]              havoc spender_s419;
[L3327]              havoc tokens_s419;
[L3328]              havoc success_s419;
[L3329]              havoc from_s510;
[L3330]              havoc to_s510;
[L3331]              havoc tokens_s510;
[L3332]              havoc success_s510;
[L3333]              havoc __ret_0_owner;
[L3334]              havoc __ret_0_symbol;
[L3335]              havoc __ret_0_name;
[L3336]              havoc __ret_0_decimals;
[L3337]              havoc spender_s582;
[L3338]              havoc tokens_s582;
[L3339]              havoc data_s582;
[L3340]              havoc success_s582;
[L3341]              havoc tokenAddress_s609;
[L3342]              havoc tokens_s609;
[L3343]              havoc success_s609;
[L3344]              havoc tmpNow;
[L3345]              havoc gas;
[L3346]              assume gas > 4000000 && gas <= 8000000;
[L3347]              tmpNow := now;
[L3348]              havoc now;
[L3349]              assume now > tmpNow;
[L3350]              assume msgsender_MSG != null;
[L3351]              assume DType[msgsender_MSG] != SafeMath;
[L3352]              assume DType[msgsender_MSG] != ERC20Interface;
[L3353]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3354]              assume DType[msgsender_MSG] != Owned;
[L3355]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3356]              Alloc[msgsender_MSG] := true;
[L3357]  COND FALSE  !(choice == 14)
[L3363]  COND FALSE  !(choice == 13)
[L3369]  COND FALSE  !(choice == 12)
[L3375]  COND FALSE  !(choice == 11)
[L3382]  COND TRUE   choice == 10
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume tokens_s419 >= 0 && tokens_s419 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call success_s419 := approve~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s419;
[L3]                 call_approve_DUCATOProtocolToken0 := true;
[L3]                 call_approve_DUCATOProtocolToken0 := false;
[L3]                 revert := revert_hold;
[L725]               havoc __exception;
[L726]               revert := false;
[L727]   COND TRUE   __exception
[L728]               __tmp__Balance := Balance;
[L729]               __tmp__DType := DType;
[L730]               __tmp__Alloc := Alloc;
[L731]               __tmp__balance_ADDR := balance_ADDR;
[L732]               __tmp__M_Ref_int := M_Ref_int;
[L733]               __tmp__sum_balances0 := sum_balances0;
[L734]               __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L735]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L736]               __tmp__sum_allowed1 := sum_allowed1;
[L737]               __tmp__Length := Length;
[L738]               __tmp__now := now;
[L739]               __tmp__owner_Owned := owner_Owned;
[L740]               __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L741]               __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L742]               __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L743]               __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L744]               __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L745]               __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L746]               __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L747]   CALL        call success_s419 := approve~address~uint256_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L2021]  COND TRUE   !(__tmp___stopTrade_DUCATOProtocolToken[this] != true)
[L2022]              revert := true;
[L747]   RET         call success_s419 := approve~address~uint256_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L748]               assume revert || gas < 0;
[L3387]  RET         call success_s419 := approve~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3464]  RET         call CorralChoice_DUCATOProtocolToken(this);

Loop:
[L3464]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3314]              havoc msgsender_MSG;
[L3315]              havoc msgvalue_MSG;
[L3316]              havoc choice;
[L3317]              havoc __ret_0_totalSupply;
[L3318]              havoc tokenOwner_s328;
[L3319]              havoc balance_s328;
[L3320]              havoc tokenOwner_s532;
[L3321]              havoc spender_s532;
[L3322]              havoc remaining_s532;
[L3323]              havoc to_s385;
[L3324]              havoc tokens_s385;
[L3325]              havoc success_s385;
[L3326]              havoc spender_s419;
[L3327]              havoc tokens_s419;
[L3328]              havoc success_s419;
[L3329]              havoc from_s510;
[L3330]              havoc to_s510;
[L3331]              havoc tokens_s510;
[L3332]              havoc success_s510;
[L3333]              havoc __ret_0_owner;
[L3334]              havoc __ret_0_symbol;
[L3335]              havoc __ret_0_name;
[L3336]              havoc __ret_0_decimals;
[L3337]              havoc spender_s582;
[L3338]              havoc tokens_s582;
[L3339]              havoc data_s582;
[L3340]              havoc success_s582;
[L3341]              havoc tokenAddress_s609;
[L3342]              havoc tokens_s609;
[L3343]              havoc success_s609;
[L3344]              havoc tmpNow;
[L3345]              havoc gas;
[L3346]              assume gas > 4000000 && gas <= 8000000;
[L3347]              tmpNow := now;
[L3348]              havoc now;
[L3349]              assume now > tmpNow;
[L3350]              assume msgsender_MSG != null;
[L3351]              assume DType[msgsender_MSG] != SafeMath;
[L3352]              assume DType[msgsender_MSG] != ERC20Interface;
[L3353]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3354]              assume DType[msgsender_MSG] != Owned;
[L3355]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3356]              Alloc[msgsender_MSG] := true;
[L3357]  COND FALSE  !(choice == 14)
[L3363]  COND FALSE  !(choice == 13)
[L3369]  COND FALSE  !(choice == 12)
[L3375]  COND FALSE  !(choice == 11)
[L3382]  COND TRUE   choice == 10
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume tokens_s419 >= 0 && tokens_s419 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call success_s419 := approve~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s419;
[L3]                 call_approve_DUCATOProtocolToken0 := true;
[L3]                 call_approve_DUCATOProtocolToken0 := false;
[L3]                 revert := revert_hold;
[L725]               havoc __exception;
[L726]               revert := false;
[L727]   COND TRUE   __exception
[L728]               __tmp__Balance := Balance;
[L729]               __tmp__DType := DType;
[L730]               __tmp__Alloc := Alloc;
[L731]               __tmp__balance_ADDR := balance_ADDR;
[L732]               __tmp__M_Ref_int := M_Ref_int;
[L733]               __tmp__sum_balances0 := sum_balances0;
[L734]               __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L735]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L736]               __tmp__sum_allowed1 := sum_allowed1;
[L737]               __tmp__Length := Length;
[L738]               __tmp__now := now;
[L739]               __tmp__owner_Owned := owner_Owned;
[L740]               __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L741]               __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L742]               __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L743]               __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L744]               __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L745]               __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L746]               __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L747]   CALL        call success_s419 := approve~address~uint256_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L2021]  COND TRUE   !(__tmp___stopTrade_DUCATOProtocolToken[this] != true)
[L2022]              revert := true;
[L747]   RET         call success_s419 := approve~address~uint256_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L748]               assume revert || gas < 0;
[L3387]  RET         call success_s419 := approve~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3464]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:25:14,097 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:25:14,097 INFO  L82        PathProgramCache]: Analyzing trace with hash -1841912168, now seen corresponding path program 1 times
[2020-11-25 14:25:14,098 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:25:14,105 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:25:14,161 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:25:14,161 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:25:14,161 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 14:25:14,161 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:25:14,161 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 14:25:14,161 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=19, Invalid=91, Unknown=0, NotChecked=0, Total=110
[2020-11-25 14:25:14,162 INFO  L87              Difference]: Start difference. First operand 2144 states and 2326 transitions. cyclomatic complexity: 186 Second operand 11 states.
[2020-11-25 14:25:15,206 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:25:15,206 INFO  L93              Difference]: Finished difference Result 3629 states and 4076 transitions.
[2020-11-25 14:25:15,206 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 14:25:15,206 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3629 states and 4076 transitions.
[2020-11-25 14:25:15,216 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 20
[2020-11-25 14:25:15,226 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3629 states to 3629 states and 4076 transitions.
[2020-11-25 14:25:15,226 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1148
[2020-11-25 14:25:15,227 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1148
[2020-11-25 14:25:15,227 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3629 states and 4076 transitions.
[2020-11-25 14:25:15,230 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:25:15,230 INFO  L728         BuchiCegarLoop]: Abstraction has 3629 states and 4076 transitions.
[2020-11-25 14:25:15,232 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3629 states and 4076 transitions.
[2020-11-25 14:25:15,265 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3629 to 3112.
[2020-11-25 14:25:15,266 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3112 states.
[2020-11-25 14:25:15,270 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3112 states to 3112 states and 3529 transitions.
[2020-11-25 14:25:15,270 INFO  L751         BuchiCegarLoop]: Abstraction has 3112 states and 3529 transitions.
[2020-11-25 14:25:15,270 INFO  L631         BuchiCegarLoop]: Abstraction has 3112 states and 3529 transitions.
[2020-11-25 14:25:15,270 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 14:25:15,270 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3112 states and 3529 transitions.
[2020-11-25 14:25:15,274 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 14:25:15,274 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:25:15,274 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:25:15,275 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:25:15,275 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_DUCATOProtocolToken0 := false;
[L3]                 call_approve_DUCATOProtocolToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3454]              assume null == 0;
[L3455]  CALL        call this := FreshRefGenerator__success();
[L1553]              havoc newRef;
[L1554]              assume Alloc[newRef] == false;
[L1555]              Alloc[newRef] := true;
[L1556]              assume newRef != null;
[L3455]  RET         call this := FreshRefGenerator__success();
[L3456]              assume now >= 0;
[L3457]              assume DType[this] == DUCATOProtocolToken;
[L3458]              assume msgvalue_MSG == 0;
[L3459]              gas := gas - 53000;
[L3460]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L395]               havoc __exception;
[L396]               revert := false;
[L397]   COND FALSE  !(__exception)
[L420]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1674]              assume msgsender_MSG != null;
[L1675]              Balance[this] := 0;
[L1689]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1690]  COND FALSE  !(revert)
[L1850]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1851]  COND FALSE  !(revert)
[L1854]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1740]              assume msgsender_MSG != null;
[L1741]              Balance[this] := 0;
[L1742]              owner_Owned[this] := null;
[L1744]              owner_Owned[this] := msgsender_MSG;
[L1757]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1758]  COND FALSE  !(revert)
[L1854]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1855]  COND FALSE  !(revert)
[L1858]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1806]              assume msgsender_MSG != null;
[L1807]              Balance[this] := 0;
[L1808]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1809]              name_DUCATOProtocolToken[this] := 1405682701;
[L1810]              decimals_DUCATOProtocolToken[this] := 0;
[L1811]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1812]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1813]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1814]              sum_balances0[this] := 0;
[L1815]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1816]              sum_allowed1[this] := 0;
[L1818]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1819]              name_DUCATOProtocolToken[this] := -2134480732;
[L1820]              decimals_DUCATOProtocolToken[this] := 18;
[L1821]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1823]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1824]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1825]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1826]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1827]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1858]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1859]  COND FALSE  !(revert)
[L420]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L421]               assume !revert && gas >= 0;
[L3460]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3461]              assume !revert && gas >= 0;
[L3464]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3314]              havoc msgsender_MSG;
[L3315]              havoc msgvalue_MSG;
[L3316]              havoc choice;
[L3317]              havoc __ret_0_totalSupply;
[L3318]              havoc tokenOwner_s328;
[L3319]              havoc balance_s328;
[L3320]              havoc tokenOwner_s532;
[L3321]              havoc spender_s532;
[L3322]              havoc remaining_s532;
[L3323]              havoc to_s385;
[L3324]              havoc tokens_s385;
[L3325]              havoc success_s385;
[L3326]              havoc spender_s419;
[L3327]              havoc tokens_s419;
[L3328]              havoc success_s419;
[L3329]              havoc from_s510;
[L3330]              havoc to_s510;
[L3331]              havoc tokens_s510;
[L3332]              havoc success_s510;
[L3333]              havoc __ret_0_owner;
[L3334]              havoc __ret_0_symbol;
[L3335]              havoc __ret_0_name;
[L3336]              havoc __ret_0_decimals;
[L3337]              havoc spender_s582;
[L3338]              havoc tokens_s582;
[L3339]              havoc data_s582;
[L3340]              havoc success_s582;
[L3341]              havoc tokenAddress_s609;
[L3342]              havoc tokens_s609;
[L3343]              havoc success_s609;
[L3344]              havoc tmpNow;
[L3345]              havoc gas;
[L3346]              assume gas > 4000000 && gas <= 8000000;
[L3347]              tmpNow := now;
[L3348]              havoc now;
[L3349]              assume now > tmpNow;
[L3350]              assume msgsender_MSG != null;
[L3351]              assume DType[msgsender_MSG] != SafeMath;
[L3352]              assume DType[msgsender_MSG] != ERC20Interface;
[L3353]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3354]              assume DType[msgsender_MSG] != Owned;
[L3355]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3356]              Alloc[msgsender_MSG] := true;
[L3357]  COND FALSE  !(choice == 14)
[L3363]  COND FALSE  !(choice == 13)
[L3369]  COND FALSE  !(choice == 12)
[L3375]  COND FALSE  !(choice == 11)
[L3382]  COND TRUE   choice == 10
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume tokens_s419 >= 0 && tokens_s419 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call success_s419 := approve~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s419;
[L3]                 call_approve_DUCATOProtocolToken0 := true;
[L3]                 call_approve_DUCATOProtocolToken0 := false;
[L3]                 revert := revert_hold;
[L725]               havoc __exception;
[L726]               revert := false;
[L727]   COND TRUE   __exception
[L728]               __tmp__Balance := Balance;
[L729]               __tmp__DType := DType;
[L730]               __tmp__Alloc := Alloc;
[L731]               __tmp__balance_ADDR := balance_ADDR;
[L732]               __tmp__M_Ref_int := M_Ref_int;
[L733]               __tmp__sum_balances0 := sum_balances0;
[L734]               __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L735]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L736]               __tmp__sum_allowed1 := sum_allowed1;
[L737]               __tmp__Length := Length;
[L738]               __tmp__now := now;
[L739]               __tmp__owner_Owned := owner_Owned;
[L740]               __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L741]               __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L742]               __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L743]               __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L744]               __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L745]               __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L746]               __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L747]   CALL        call success_s419 := approve~address~uint256_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L2021]  COND FALSE  !(!(__tmp___stopTrade_DUCATOProtocolToken[this] != true))
[L2025]              __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] - __tmp__allowed_DUCATOProtocolToken[this][msgsender_MSG][spender_s419];
[L2026]              __tmp__allowed_DUCATOProtocolToken[this][msgsender_MSG][spender_s419] := tokens_s419;
[L2027]              __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] + __tmp__allowed_DUCATOProtocolToken[this][msgsender_MSG][spender_s419];
[L2028]              success_s419 := true;
[L747]   RET         call success_s419 := approve~address~uint256_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L748]               assume revert || gas < 0;
[L3387]  RET         call success_s419 := approve~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3464]  RET         call CorralChoice_DUCATOProtocolToken(this);

Loop:
[L3464]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3314]              havoc msgsender_MSG;
[L3315]              havoc msgvalue_MSG;
[L3316]              havoc choice;
[L3317]              havoc __ret_0_totalSupply;
[L3318]              havoc tokenOwner_s328;
[L3319]              havoc balance_s328;
[L3320]              havoc tokenOwner_s532;
[L3321]              havoc spender_s532;
[L3322]              havoc remaining_s532;
[L3323]              havoc to_s385;
[L3324]              havoc tokens_s385;
[L3325]              havoc success_s385;
[L3326]              havoc spender_s419;
[L3327]              havoc tokens_s419;
[L3328]              havoc success_s419;
[L3329]              havoc from_s510;
[L3330]              havoc to_s510;
[L3331]              havoc tokens_s510;
[L3332]              havoc success_s510;
[L3333]              havoc __ret_0_owner;
[L3334]              havoc __ret_0_symbol;
[L3335]              havoc __ret_0_name;
[L3336]              havoc __ret_0_decimals;
[L3337]              havoc spender_s582;
[L3338]              havoc tokens_s582;
[L3339]              havoc data_s582;
[L3340]              havoc success_s582;
[L3341]              havoc tokenAddress_s609;
[L3342]              havoc tokens_s609;
[L3343]              havoc success_s609;
[L3344]              havoc tmpNow;
[L3345]              havoc gas;
[L3346]              assume gas > 4000000 && gas <= 8000000;
[L3347]              tmpNow := now;
[L3348]              havoc now;
[L3349]              assume now > tmpNow;
[L3350]              assume msgsender_MSG != null;
[L3351]              assume DType[msgsender_MSG] != SafeMath;
[L3352]              assume DType[msgsender_MSG] != ERC20Interface;
[L3353]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3354]              assume DType[msgsender_MSG] != Owned;
[L3355]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3356]              Alloc[msgsender_MSG] := true;
[L3357]  COND FALSE  !(choice == 14)
[L3363]  COND FALSE  !(choice == 13)
[L3369]  COND FALSE  !(choice == 12)
[L3375]  COND FALSE  !(choice == 11)
[L3382]  COND TRUE   choice == 10
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume tokens_s419 >= 0 && tokens_s419 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call success_s419 := approve~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s419;
[L3]                 call_approve_DUCATOProtocolToken0 := true;
[L3]                 call_approve_DUCATOProtocolToken0 := false;
[L3]                 revert := revert_hold;
[L725]               havoc __exception;
[L726]               revert := false;
[L727]   COND TRUE   __exception
[L728]               __tmp__Balance := Balance;
[L729]               __tmp__DType := DType;
[L730]               __tmp__Alloc := Alloc;
[L731]               __tmp__balance_ADDR := balance_ADDR;
[L732]               __tmp__M_Ref_int := M_Ref_int;
[L733]               __tmp__sum_balances0 := sum_balances0;
[L734]               __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L735]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L736]               __tmp__sum_allowed1 := sum_allowed1;
[L737]               __tmp__Length := Length;
[L738]               __tmp__now := now;
[L739]               __tmp__owner_Owned := owner_Owned;
[L740]               __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L741]               __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L742]               __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L743]               __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L744]               __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L745]               __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L746]               __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L747]   CALL        call success_s419 := approve~address~uint256_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L2021]  COND FALSE  !(!(__tmp___stopTrade_DUCATOProtocolToken[this] != true))
[L2025]              __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] - __tmp__allowed_DUCATOProtocolToken[this][msgsender_MSG][spender_s419];
[L2026]              __tmp__allowed_DUCATOProtocolToken[this][msgsender_MSG][spender_s419] := tokens_s419;
[L2027]              __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] + __tmp__allowed_DUCATOProtocolToken[this][msgsender_MSG][spender_s419];
[L2028]              success_s419 := true;
[L747]   RET         call success_s419 := approve~address~uint256_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L748]               assume revert || gas < 0;
[L3387]  RET         call success_s419 := approve~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3464]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:25:15,278 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:25:15,278 INFO  L82        PathProgramCache]: Analyzing trace with hash 362686462, now seen corresponding path program 1 times
[2020-11-25 14:25:15,279 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:25:15,285 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:25:15,306 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:25:15,306 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:25:15,306 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 14:25:15,307 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:25:15,307 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 14:25:15,307 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-11-25 14:25:15,307 INFO  L87              Difference]: Start difference. First operand 3112 states and 3529 transitions. cyclomatic complexity: 425 Second operand 6 states.
[2020-11-25 14:25:15,599 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:25:15,599 INFO  L93              Difference]: Finished difference Result 4178 states and 5062 transitions.
[2020-11-25 14:25:15,599 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 14:25:15,600 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4178 states and 5062 transitions.
[2020-11-25 14:25:15,612 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 44
[2020-11-25 14:25:15,626 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4178 states to 3685 states and 4557 transitions.
[2020-11-25 14:25:15,626 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 966
[2020-11-25 14:25:15,627 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 966
[2020-11-25 14:25:15,627 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3685 states and 4557 transitions.
[2020-11-25 14:25:15,631 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:25:15,631 INFO  L728         BuchiCegarLoop]: Abstraction has 3685 states and 4557 transitions.
[2020-11-25 14:25:15,633 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3685 states and 4557 transitions.
[2020-11-25 14:25:15,660 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3685 to 2865.
[2020-11-25 14:25:15,660 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2865 states.
[2020-11-25 14:25:15,664 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2865 states to 2865 states and 3300 transitions.
[2020-11-25 14:25:15,664 INFO  L751         BuchiCegarLoop]: Abstraction has 2865 states and 3300 transitions.
[2020-11-25 14:25:15,664 INFO  L631         BuchiCegarLoop]: Abstraction has 2865 states and 3300 transitions.
[2020-11-25 14:25:15,664 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 14:25:15,664 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2865 states and 3300 transitions.
[2020-11-25 14:25:15,668 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 14:25:15,668 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:25:15,668 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:25:15,669 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:25:15,669 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_DUCATOProtocolToken0 := false;
[L3]                 call_approve_DUCATOProtocolToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3454]              assume null == 0;
[L3455]  CALL        call this := FreshRefGenerator__success();
[L1553]              havoc newRef;
[L1554]              assume Alloc[newRef] == false;
[L1555]              Alloc[newRef] := true;
[L1556]              assume newRef != null;
[L3455]  RET         call this := FreshRefGenerator__success();
[L3456]              assume now >= 0;
[L3457]              assume DType[this] == DUCATOProtocolToken;
[L3458]              assume msgvalue_MSG == 0;
[L3459]              gas := gas - 53000;
[L3460]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L395]               havoc __exception;
[L396]               revert := false;
[L397]   COND FALSE  !(__exception)
[L420]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1674]              assume msgsender_MSG != null;
[L1675]              Balance[this] := 0;
[L1689]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1690]  COND FALSE  !(revert)
[L1850]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1851]  COND FALSE  !(revert)
[L1854]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1740]              assume msgsender_MSG != null;
[L1741]              Balance[this] := 0;
[L1742]              owner_Owned[this] := null;
[L1744]              owner_Owned[this] := msgsender_MSG;
[L1757]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1758]  COND FALSE  !(revert)
[L1854]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1855]  COND FALSE  !(revert)
[L1858]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1806]              assume msgsender_MSG != null;
[L1807]              Balance[this] := 0;
[L1808]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1809]              name_DUCATOProtocolToken[this] := 1405682701;
[L1810]              decimals_DUCATOProtocolToken[this] := 0;
[L1811]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1812]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1813]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1814]              sum_balances0[this] := 0;
[L1815]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1816]              sum_allowed1[this] := 0;
[L1818]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1819]              name_DUCATOProtocolToken[this] := -2134480732;
[L1820]              decimals_DUCATOProtocolToken[this] := 18;
[L1821]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1823]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1824]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1825]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1826]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1827]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1858]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1859]  COND FALSE  !(revert)
[L420]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L421]               assume !revert && gas >= 0;
[L3460]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3461]              assume !revert && gas >= 0;
[L3464]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3314]              havoc msgsender_MSG;
[L3315]              havoc msgvalue_MSG;
[L3316]              havoc choice;
[L3317]              havoc __ret_0_totalSupply;
[L3318]              havoc tokenOwner_s328;
[L3319]              havoc balance_s328;
[L3320]              havoc tokenOwner_s532;
[L3321]              havoc spender_s532;
[L3322]              havoc remaining_s532;
[L3323]              havoc to_s385;
[L3324]              havoc tokens_s385;
[L3325]              havoc success_s385;
[L3326]              havoc spender_s419;
[L3327]              havoc tokens_s419;
[L3328]              havoc success_s419;
[L3329]              havoc from_s510;
[L3330]              havoc to_s510;
[L3331]              havoc tokens_s510;
[L3332]              havoc success_s510;
[L3333]              havoc __ret_0_owner;
[L3334]              havoc __ret_0_symbol;
[L3335]              havoc __ret_0_name;
[L3336]              havoc __ret_0_decimals;
[L3337]              havoc spender_s582;
[L3338]              havoc tokens_s582;
[L3339]              havoc data_s582;
[L3340]              havoc success_s582;
[L3341]              havoc tokenAddress_s609;
[L3342]              havoc tokens_s609;
[L3343]              havoc success_s609;
[L3344]              havoc tmpNow;
[L3345]              havoc gas;
[L3346]              assume gas > 4000000 && gas <= 8000000;
[L3347]              tmpNow := now;
[L3348]              havoc now;
[L3349]              assume now > tmpNow;
[L3350]              assume msgsender_MSG != null;
[L3351]              assume DType[msgsender_MSG] != SafeMath;
[L3352]              assume DType[msgsender_MSG] != ERC20Interface;
[L3353]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3354]              assume DType[msgsender_MSG] != Owned;
[L3355]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3356]              Alloc[msgsender_MSG] := true;
[L3357]  COND FALSE  !(choice == 14)
[L3363]  COND FALSE  !(choice == 13)
[L3369]  COND FALSE  !(choice == 12)
[L3375]  COND FALSE  !(choice == 11)
[L3382]  COND TRUE   choice == 10
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume tokens_s419 >= 0 && tokens_s419 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call success_s419 := approve~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(p1 != msgsender_MSG || p2 != spender_s419);
[L3]                 revert := revert_hold;
[L725]               havoc __exception;
[L726]               revert := false;
[L727]   COND FALSE  !(__exception)
[L750]   CALL        call success_s419 := approve~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L2034]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L2038]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_DUCATOProtocolToken[this][msgsender_MSG][spender_s419];
[L2039]              allowed_DUCATOProtocolToken[this][msgsender_MSG][spender_s419] := tokens_s419;
[L2040]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_DUCATOProtocolToken[this][msgsender_MSG][spender_s419];
[L2041]              assert { :EventEmitted "Approval_DUCATOProtocolToken" } true;
[L2042]              success_s419 := true;
[L750]   RET         call success_s419 := approve~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L751]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s419 == true && allowed_DUCATOProtocolToken[this][msgsender_MSG][spender_s419] == tokens_s419) && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this])) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this])) && allowed_DUCATOProtocolToken[this][p1][p2] == old(allowed_DUCATOProtocolToken[this][p1][p2])) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this])) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this])) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this])) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L3]                 revert := revert_hold;
[L3387]  RET         call success_s419 := approve~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3464]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3464]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3314]              havoc msgsender_MSG;
[L3315]              havoc msgvalue_MSG;
[L3316]              havoc choice;
[L3317]              havoc __ret_0_totalSupply;
[L3318]              havoc tokenOwner_s328;
[L3319]              havoc balance_s328;
[L3320]              havoc tokenOwner_s532;
[L3321]              havoc spender_s532;
[L3322]              havoc remaining_s532;
[L3323]              havoc to_s385;
[L3324]              havoc tokens_s385;
[L3325]              havoc success_s385;
[L3326]              havoc spender_s419;
[L3327]              havoc tokens_s419;
[L3328]              havoc success_s419;
[L3329]              havoc from_s510;
[L3330]              havoc to_s510;
[L3331]              havoc tokens_s510;
[L3332]              havoc success_s510;
[L3333]              havoc __ret_0_owner;
[L3334]              havoc __ret_0_symbol;
[L3335]              havoc __ret_0_name;
[L3336]              havoc __ret_0_decimals;
[L3337]              havoc spender_s582;
[L3338]              havoc tokens_s582;
[L3339]              havoc data_s582;
[L3340]              havoc success_s582;
[L3341]              havoc tokenAddress_s609;
[L3342]              havoc tokens_s609;
[L3343]              havoc success_s609;
[L3344]              havoc tmpNow;
[L3345]              havoc gas;
[L3346]              assume gas > 4000000 && gas <= 8000000;
[L3347]              tmpNow := now;
[L3348]              havoc now;
[L3349]              assume now > tmpNow;
[L3350]              assume msgsender_MSG != null;
[L3351]              assume DType[msgsender_MSG] != SafeMath;
[L3352]              assume DType[msgsender_MSG] != ERC20Interface;
[L3353]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3354]              assume DType[msgsender_MSG] != Owned;
[L3355]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3356]              Alloc[msgsender_MSG] := true;
[L3357]  COND FALSE  !(choice == 14)
[L3363]  COND FALSE  !(choice == 13)
[L3369]  COND FALSE  !(choice == 12)
[L3375]  COND FALSE  !(choice == 11)
[L3382]  COND TRUE   choice == 10
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume tokens_s419 >= 0 && tokens_s419 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call success_s419 := approve~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s419;
[L3]                 call_approve_DUCATOProtocolToken0 := true;
[L3]                 call_approve_DUCATOProtocolToken0 := false;
[L3]                 revert := revert_hold;
[L725]               havoc __exception;
[L726]               revert := false;
[L727]   COND FALSE  !(__exception)
[L750]   CALL        call success_s419 := approve~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L2034]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L2038]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_DUCATOProtocolToken[this][msgsender_MSG][spender_s419];
[L2039]              allowed_DUCATOProtocolToken[this][msgsender_MSG][spender_s419] := tokens_s419;
[L2040]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_DUCATOProtocolToken[this][msgsender_MSG][spender_s419];
[L2041]              assert { :EventEmitted "Approval_DUCATOProtocolToken" } true;
[L2042]              success_s419 := true;
[L750]   RET         call success_s419 := approve~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L751]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s419 == true && allowed_DUCATOProtocolToken[this][msgsender_MSG][spender_s419] == tokens_s419) && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this])) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this])) && allowed_DUCATOProtocolToken[this][p1][p2] == old(allowed_DUCATOProtocolToken[this][p1][p2])) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this])) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this])) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this])) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L3]                 revert := revert_hold;
[L3387]  RET         call success_s419 := approve~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3464]  RET         call CorralChoice_DUCATOProtocolToken(this);

Loop:
[L3464]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3314]              havoc msgsender_MSG;
[L3315]              havoc msgvalue_MSG;
[L3316]              havoc choice;
[L3317]              havoc __ret_0_totalSupply;
[L3318]              havoc tokenOwner_s328;
[L3319]              havoc balance_s328;
[L3320]              havoc tokenOwner_s532;
[L3321]              havoc spender_s532;
[L3322]              havoc remaining_s532;
[L3323]              havoc to_s385;
[L3324]              havoc tokens_s385;
[L3325]              havoc success_s385;
[L3326]              havoc spender_s419;
[L3327]              havoc tokens_s419;
[L3328]              havoc success_s419;
[L3329]              havoc from_s510;
[L3330]              havoc to_s510;
[L3331]              havoc tokens_s510;
[L3332]              havoc success_s510;
[L3333]              havoc __ret_0_owner;
[L3334]              havoc __ret_0_symbol;
[L3335]              havoc __ret_0_name;
[L3336]              havoc __ret_0_decimals;
[L3337]              havoc spender_s582;
[L3338]              havoc tokens_s582;
[L3339]              havoc data_s582;
[L3340]              havoc success_s582;
[L3341]              havoc tokenAddress_s609;
[L3342]              havoc tokens_s609;
[L3343]              havoc success_s609;
[L3344]              havoc tmpNow;
[L3345]              havoc gas;
[L3346]              assume gas > 4000000 && gas <= 8000000;
[L3347]              tmpNow := now;
[L3348]              havoc now;
[L3349]              assume now > tmpNow;
[L3350]              assume msgsender_MSG != null;
[L3351]              assume DType[msgsender_MSG] != SafeMath;
[L3352]              assume DType[msgsender_MSG] != ERC20Interface;
[L3353]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3354]              assume DType[msgsender_MSG] != Owned;
[L3355]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3356]              Alloc[msgsender_MSG] := true;
[L3357]  COND FALSE  !(choice == 14)
[L3363]  COND FALSE  !(choice == 13)
[L3369]  COND FALSE  !(choice == 12)
[L3375]  COND FALSE  !(choice == 11)
[L3382]  COND TRUE   choice == 10
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume tokens_s419 >= 0 && tokens_s419 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call success_s419 := approve~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(p1 != msgsender_MSG || p2 != spender_s419);
[L3]                 revert := revert_hold;
[L725]               havoc __exception;
[L726]               revert := false;
[L727]   COND FALSE  !(__exception)
[L750]   CALL        call success_s419 := approve~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L2034]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L2038]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_DUCATOProtocolToken[this][msgsender_MSG][spender_s419];
[L2039]              allowed_DUCATOProtocolToken[this][msgsender_MSG][spender_s419] := tokens_s419;
[L2040]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_DUCATOProtocolToken[this][msgsender_MSG][spender_s419];
[L2041]              assert { :EventEmitted "Approval_DUCATOProtocolToken" } true;
[L2042]              success_s419 := true;
[L750]   RET         call success_s419 := approve~address~uint256_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L751]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s419 == true && allowed_DUCATOProtocolToken[this][msgsender_MSG][spender_s419] == tokens_s419) && _totalSupply_DUCATOProtocolToken[this] == old(_totalSupply_DUCATOProtocolToken[this])) && balances_DUCATOProtocolToken[this] == old(balances_DUCATOProtocolToken[this])) && allowed_DUCATOProtocolToken[this][p1][p2] == old(allowed_DUCATOProtocolToken[this][p1][p2])) && symbol_DUCATOProtocolToken[this] == old(symbol_DUCATOProtocolToken[this])) && name_DUCATOProtocolToken[this] == old(name_DUCATOProtocolToken[this])) && decimals_DUCATOProtocolToken[this] == old(decimals_DUCATOProtocolToken[this])) && _stopTrade_DUCATOProtocolToken[this] == old(_stopTrade_DUCATOProtocolToken[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L3]                 revert := revert_hold;
[L3387]  RET         call success_s419 := approve~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3464]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:25:15,672 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:25:15,672 INFO  L82        PathProgramCache]: Analyzing trace with hash -756365393, now seen corresponding path program 1 times
[2020-11-25 14:25:15,673 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:25:15,689 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:25:15,750 INFO  L134       CoverageAnalysis]: Checked inductivity of 59 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 55 trivial. 0 not checked.
[2020-11-25 14:25:15,750 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:25:15,751 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 14:25:15,751 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:25:15,752 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 14:25:15,752 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=29, Unknown=0, NotChecked=0, Total=42
[2020-11-25 14:25:15,752 INFO  L87              Difference]: Start difference. First operand 2865 states and 3300 transitions. cyclomatic complexity: 445 Second operand 7 states.
[2020-11-25 14:25:16,153 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:25:16,153 INFO  L93              Difference]: Finished difference Result 2865 states and 3266 transitions.
[2020-11-25 14:25:16,153 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 14:25:16,153 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2865 states and 3266 transitions.
[2020-11-25 14:25:16,159 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-25 14:25:16,166 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2865 states to 2853 states and 3252 transitions.
[2020-11-25 14:25:16,166 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 798
[2020-11-25 14:25:16,166 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 798
[2020-11-25 14:25:16,166 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2853 states and 3252 transitions.
[2020-11-25 14:25:16,169 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:25:16,169 INFO  L728         BuchiCegarLoop]: Abstraction has 2853 states and 3252 transitions.
[2020-11-25 14:25:16,170 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2853 states and 3252 transitions.
[2020-11-25 14:25:16,181 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2853 to 1673.
[2020-11-25 14:25:16,182 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1673 states.
[2020-11-25 14:25:16,183 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1673 states to 1673 states and 1814 transitions.
[2020-11-25 14:25:16,183 INFO  L751         BuchiCegarLoop]: Abstraction has 1673 states and 1814 transitions.
[2020-11-25 14:25:16,183 INFO  L631         BuchiCegarLoop]: Abstraction has 1673 states and 1814 transitions.
[2020-11-25 14:25:16,183 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 14:25:16,183 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1673 states and 1814 transitions.
[2020-11-25 14:25:16,185 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:25:16,185 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:25:16,185 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:25:16,186 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:25:16,186 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_DUCATOProtocolToken0 := false;
[L3]                 call_approve_DUCATOProtocolToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3454]              assume null == 0;
[L3455]  CALL        call this := FreshRefGenerator__success();
[L1553]              havoc newRef;
[L1554]              assume Alloc[newRef] == false;
[L1555]              Alloc[newRef] := true;
[L1556]              assume newRef != null;
[L3455]  RET         call this := FreshRefGenerator__success();
[L3456]              assume now >= 0;
[L3457]              assume DType[this] == DUCATOProtocolToken;
[L3458]              assume msgvalue_MSG == 0;
[L3459]              gas := gas - 53000;
[L3460]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L395]               havoc __exception;
[L396]               revert := false;
[L397]   COND FALSE  !(__exception)
[L420]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1674]              assume msgsender_MSG != null;
[L1675]              Balance[this] := 0;
[L1689]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1690]  COND FALSE  !(revert)
[L1850]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1851]  COND FALSE  !(revert)
[L1854]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1740]              assume msgsender_MSG != null;
[L1741]              Balance[this] := 0;
[L1742]              owner_Owned[this] := null;
[L1744]              owner_Owned[this] := msgsender_MSG;
[L1757]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1758]  COND FALSE  !(revert)
[L1854]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1855]  COND FALSE  !(revert)
[L1858]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1806]              assume msgsender_MSG != null;
[L1807]              Balance[this] := 0;
[L1808]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1809]              name_DUCATOProtocolToken[this] := 1405682701;
[L1810]              decimals_DUCATOProtocolToken[this] := 0;
[L1811]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1812]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1813]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1814]              sum_balances0[this] := 0;
[L1815]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1816]              sum_allowed1[this] := 0;
[L1818]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1819]              name_DUCATOProtocolToken[this] := -2134480732;
[L1820]              decimals_DUCATOProtocolToken[this] := 18;
[L1821]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1823]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1824]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1825]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1826]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1827]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1858]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1859]  COND FALSE  !(revert)
[L420]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L421]               assume !revert && gas >= 0;
[L3460]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3461]              assume !revert && gas >= 0;
[L3464]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3314]              havoc msgsender_MSG;
[L3315]              havoc msgvalue_MSG;
[L3316]              havoc choice;
[L3317]              havoc __ret_0_totalSupply;
[L3318]              havoc tokenOwner_s328;
[L3319]              havoc balance_s328;
[L3320]              havoc tokenOwner_s532;
[L3321]              havoc spender_s532;
[L3322]              havoc remaining_s532;
[L3323]              havoc to_s385;
[L3324]              havoc tokens_s385;
[L3325]              havoc success_s385;
[L3326]              havoc spender_s419;
[L3327]              havoc tokens_s419;
[L3328]              havoc success_s419;
[L3329]              havoc from_s510;
[L3330]              havoc to_s510;
[L3331]              havoc tokens_s510;
[L3332]              havoc success_s510;
[L3333]              havoc __ret_0_owner;
[L3334]              havoc __ret_0_symbol;
[L3335]              havoc __ret_0_name;
[L3336]              havoc __ret_0_decimals;
[L3337]              havoc spender_s582;
[L3338]              havoc tokens_s582;
[L3339]              havoc data_s582;
[L3340]              havoc success_s582;
[L3341]              havoc tokenAddress_s609;
[L3342]              havoc tokens_s609;
[L3343]              havoc success_s609;
[L3344]              havoc tmpNow;
[L3345]              havoc gas;
[L3346]              assume gas > 4000000 && gas <= 8000000;
[L3347]              tmpNow := now;
[L3348]              havoc now;
[L3349]              assume now > tmpNow;
[L3350]              assume msgsender_MSG != null;
[L3351]              assume DType[msgsender_MSG] != SafeMath;
[L3352]              assume DType[msgsender_MSG] != ERC20Interface;
[L3353]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3354]              assume DType[msgsender_MSG] != Owned;
[L3355]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3356]              Alloc[msgsender_MSG] := true;
[L3357]  COND FALSE  !(choice == 14)
[L3363]  COND FALSE  !(choice == 13)
[L3369]  COND FALSE  !(choice == 12)
[L3375]  COND FALSE  !(choice == 11)
[L3382]  COND FALSE  !(choice == 10)
[L3389]  COND FALSE  !(choice == 9)
[L3396]  COND FALSE  !(choice == 8)
[L3402]  COND FALSE  !(choice == 7)
[L3408]  COND FALSE  !(choice == 6)
[L3414]  COND FALSE  !(choice == 5)
[L3420]  COND TRUE   choice == 4
[L3421]              gas := gas - 21000;
[L3422]  COND TRUE   gas >= 0
[L3423]              assume msgvalue_MSG == 0;
[L3424]  CALL        call stopTrade_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L504]               havoc __exception;
[L505]               revert := false;
[L506]   COND FALSE  !(__exception)
[L529]   CALL        call stopTrade_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3006]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L1905]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1906]  COND FALSE  !(revert)
[L1909]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L1913]              _stopTrade_DUCATOProtocolToken[this] := true;
[L529]   RET         call stopTrade_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L530]               assume !revert && gas >= 0;
[L3424]  RET         call stopTrade_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
[L3464]  RET         call CorralChoice_DUCATOProtocolToken(this);
[L3464]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3314]              havoc msgsender_MSG;
[L3315]              havoc msgvalue_MSG;
[L3316]              havoc choice;
[L3317]              havoc __ret_0_totalSupply;
[L3318]              havoc tokenOwner_s328;
[L3319]              havoc balance_s328;
[L3320]              havoc tokenOwner_s532;
[L3321]              havoc spender_s532;
[L3322]              havoc remaining_s532;
[L3323]              havoc to_s385;
[L3324]              havoc tokens_s385;
[L3325]              havoc success_s385;
[L3326]              havoc spender_s419;
[L3327]              havoc tokens_s419;
[L3328]              havoc success_s419;
[L3329]              havoc from_s510;
[L3330]              havoc to_s510;
[L3331]              havoc tokens_s510;
[L3332]              havoc success_s510;
[L3333]              havoc __ret_0_owner;
[L3334]              havoc __ret_0_symbol;
[L3335]              havoc __ret_0_name;
[L3336]              havoc __ret_0_decimals;
[L3337]              havoc spender_s582;
[L3338]              havoc tokens_s582;
[L3339]              havoc data_s582;
[L3340]              havoc success_s582;
[L3341]              havoc tokenAddress_s609;
[L3342]              havoc tokens_s609;
[L3343]              havoc success_s609;
[L3344]              havoc tmpNow;
[L3345]              havoc gas;
[L3346]              assume gas > 4000000 && gas <= 8000000;
[L3347]              tmpNow := now;
[L3348]              havoc now;
[L3349]              assume now > tmpNow;
[L3350]              assume msgsender_MSG != null;
[L3351]              assume DType[msgsender_MSG] != SafeMath;
[L3352]              assume DType[msgsender_MSG] != ERC20Interface;
[L3353]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3354]              assume DType[msgsender_MSG] != Owned;
[L3355]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3356]              Alloc[msgsender_MSG] := true;
[L3357]  COND FALSE  !(choice == 14)
[L3363]  COND FALSE  !(choice == 13)
[L3369]  COND FALSE  !(choice == 12)
[L3375]  COND FALSE  !(choice == 11)
[L3382]  COND TRUE   choice == 10
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume tokens_s419 >= 0 && tokens_s419 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call success_s419 := approve~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s419;
[L3]                 call_approve_DUCATOProtocolToken0 := true;
[L3]                 call_approve_DUCATOProtocolToken0 := false;
[L3]                 revert := revert_hold;
[L725]               havoc __exception;
[L726]               revert := false;
[L727]   COND TRUE   __exception
[L728]               __tmp__Balance := Balance;
[L729]               __tmp__DType := DType;
[L730]               __tmp__Alloc := Alloc;
[L731]               __tmp__balance_ADDR := balance_ADDR;
[L732]               __tmp__M_Ref_int := M_Ref_int;
[L733]               __tmp__sum_balances0 := sum_balances0;
[L734]               __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L735]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L736]               __tmp__sum_allowed1 := sum_allowed1;
[L737]               __tmp__Length := Length;
[L738]               __tmp__now := now;
[L739]               __tmp__owner_Owned := owner_Owned;
[L740]               __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L741]               __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L742]               __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L743]               __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L744]               __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L745]               __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L746]               __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L747]   CALL        call success_s419 := approve~address~uint256_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L2021]  COND TRUE   !(__tmp___stopTrade_DUCATOProtocolToken[this] != true)
[L2022]              revert := true;
[L747]   RET         call success_s419 := approve~address~uint256_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L748]               assume revert || gas < 0;
[L3387]  RET         call success_s419 := approve~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3464]  RET         call CorralChoice_DUCATOProtocolToken(this);

Loop:
[L3464]  CALL        call CorralChoice_DUCATOProtocolToken(this);
[L3314]              havoc msgsender_MSG;
[L3315]              havoc msgvalue_MSG;
[L3316]              havoc choice;
[L3317]              havoc __ret_0_totalSupply;
[L3318]              havoc tokenOwner_s328;
[L3319]              havoc balance_s328;
[L3320]              havoc tokenOwner_s532;
[L3321]              havoc spender_s532;
[L3322]              havoc remaining_s532;
[L3323]              havoc to_s385;
[L3324]              havoc tokens_s385;
[L3325]              havoc success_s385;
[L3326]              havoc spender_s419;
[L3327]              havoc tokens_s419;
[L3328]              havoc success_s419;
[L3329]              havoc from_s510;
[L3330]              havoc to_s510;
[L3331]              havoc tokens_s510;
[L3332]              havoc success_s510;
[L3333]              havoc __ret_0_owner;
[L3334]              havoc __ret_0_symbol;
[L3335]              havoc __ret_0_name;
[L3336]              havoc __ret_0_decimals;
[L3337]              havoc spender_s582;
[L3338]              havoc tokens_s582;
[L3339]              havoc data_s582;
[L3340]              havoc success_s582;
[L3341]              havoc tokenAddress_s609;
[L3342]              havoc tokens_s609;
[L3343]              havoc success_s609;
[L3344]              havoc tmpNow;
[L3345]              havoc gas;
[L3346]              assume gas > 4000000 && gas <= 8000000;
[L3347]              tmpNow := now;
[L3348]              havoc now;
[L3349]              assume now > tmpNow;
[L3350]              assume msgsender_MSG != null;
[L3351]              assume DType[msgsender_MSG] != SafeMath;
[L3352]              assume DType[msgsender_MSG] != ERC20Interface;
[L3353]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3354]              assume DType[msgsender_MSG] != Owned;
[L3355]              assume DType[msgsender_MSG] != DUCATOProtocolToken;
[L3356]              Alloc[msgsender_MSG] := true;
[L3357]  COND FALSE  !(choice == 14)
[L3363]  COND FALSE  !(choice == 13)
[L3369]  COND FALSE  !(choice == 12)
[L3375]  COND FALSE  !(choice == 11)
[L3382]  COND TRUE   choice == 10
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume tokens_s419 >= 0 && tokens_s419 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call success_s419 := approve~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s419;
[L3]                 call_approve_DUCATOProtocolToken0 := true;
[L3]                 call_approve_DUCATOProtocolToken0 := false;
[L3]                 revert := revert_hold;
[L725]               havoc __exception;
[L726]               revert := false;
[L727]   COND TRUE   __exception
[L728]               __tmp__Balance := Balance;
[L729]               __tmp__DType := DType;
[L730]               __tmp__Alloc := Alloc;
[L731]               __tmp__balance_ADDR := balance_ADDR;
[L732]               __tmp__M_Ref_int := M_Ref_int;
[L733]               __tmp__sum_balances0 := sum_balances0;
[L734]               __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L735]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L736]               __tmp__sum_allowed1 := sum_allowed1;
[L737]               __tmp__Length := Length;
[L738]               __tmp__now := now;
[L739]               __tmp__owner_Owned := owner_Owned;
[L740]               __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L741]               __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L742]               __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L743]               __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L744]               __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L745]               __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L746]               __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L747]   CALL        call success_s419 := approve~address~uint256_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L2021]  COND TRUE   !(__tmp___stopTrade_DUCATOProtocolToken[this] != true)
[L2022]              revert := true;
[L747]   RET         call success_s419 := approve~address~uint256_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L748]               assume revert || gas < 0;
[L3387]  RET         call success_s419 := approve~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L3464]  RET         call CorralChoice_DUCATOProtocolToken(this);

[2020-11-25 14:25:16,189 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:25:16,189 INFO  L82        PathProgramCache]: Analyzing trace with hash 336482887, now seen corresponding path program 1 times
[2020-11-25 14:25:16,190 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:25:16,200 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:25:16,212 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:25:16,296 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:25:16,297 INFO  L82        PathProgramCache]: Analyzing trace with hash -1153872608, now seen corresponding path program 1 times
[2020-11-25 14:25:16,297 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:25:16,301 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:25:16,305 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:25:16,315 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:25:16,315 INFO  L82        PathProgramCache]: Analyzing trace with hash -393323034, now seen corresponding path program 1 times
[2020-11-25 14:25:16,316 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:25:16,330 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:25:16,346 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #6: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #7: 2179 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2179 to 4357
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.002s / 0.003s total
Resizing node table from 5281 to 10559
[2020-11-25 14:25:16,911 WARN  L188               SmtUtils]: Spent 309.00 ms on a formula simplification. DAG size of input: 179 DAG size of output: 179
[2020-11-25 14:25:17,339 WARN  L188               SmtUtils]: Spent 425.00 ms on a formula simplification. DAG size of input: 238 DAG size of output: 224
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 5003 to 9973
Garbage collection #8: 9973 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 9973 to 19937
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3137 to 6271
[2020-11-25 14:25:17,492 WARN  L188               SmtUtils]: Spent 125.00 ms on a formula simplification. DAG size of input: 135 DAG size of output: 129
[2020-11-25 14:25:17,615 WARN  L188               SmtUtils]: Spent 121.00 ms on a formula simplification that was a NOOP. DAG size: 278
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #7: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
[2020-11-25 14:25:17,872 WARN  L188               SmtUtils]: Spent 249.00 ms on a formula simplification. DAG size of input: 221 DAG size of output: 221
[2020-11-25 14:25:17,998 WARN  L188               SmtUtils]: Spent 124.00 ms on a formula simplification that was a NOOP. DAG size: 221
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #7: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-11-25 14:25:18,035 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #6: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #7: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
[2020-11-25 14:25:19,025 WARN  L188               SmtUtils]: Spent 222.00 ms on a formula simplification. DAG size of input: 179 DAG size of output: 179
[2020-11-25 14:25:19,423 WARN  L188               SmtUtils]: Spent 394.00 ms on a formula simplification. DAG size of input: 237 DAG size of output: 224
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #8: 9973 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 9973 to 19937
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-25 14:25:19,657 WARN  L188               SmtUtils]: Spent 131.00 ms on a formula simplification that was a NOOP. DAG size: 278
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-25 14:25:19,898 WARN  L188               SmtUtils]: Spent 235.00 ms on a formula simplification. DAG size of input: 221 DAG size of output: 221
[2020-11-25 14:25:21,095 WARN  L188               SmtUtils]: Spent 1.20 s on a formula simplification. DAG size of input: 566 DAG size of output: 558
Garbage collection #1: 233 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 233 to 463
Garbage collection #2: 463 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 463 to 919
Garbage collection #3: 919 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 919 to 1831
Garbage collection #4: 1831 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1831 to 3659
Garbage collection #5: 3659 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3659 to 7309
Garbage collection #6: 7309 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7309 to 14593
Garbage collection #7: 14593 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 14593 to 29179
Garbage collection #8: 29179 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 29179 to 58337
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
[2020-11-25 14:25:21,343 WARN  L188               SmtUtils]: Spent 134.00 ms on a formula simplification that was a NOOP. DAG size: 292
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
[2020-11-25 14:25:21,726 WARN  L188               SmtUtils]: Spent 306.00 ms on a formula simplification. DAG size of input: 294 DAG size of output: 293
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-25 14:25:21,854 WARN  L188               SmtUtils]: Spent 125.00 ms on a formula simplification that was a NOOP. DAG size: 289
[2020-11-25 14:25:21,866 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:25:21,882 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:25:21,890 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:25:21 BasicIcfg
[2020-11-25 14:25:21,890 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 14:25:21,890 INFO  L168              Benchmark]: Toolchain (without parser) took 13180.48 ms. Allocated memory was 1.0 GB in the beginning and 2.1 GB in the end (delta: 1.1 GB). Free memory was 940.6 MB in the beginning and 1.7 GB in the end (delta: -790.3 MB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
[2020-11-25 14:25:21,890 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.19 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 14:25:21,890 INFO  L168              Benchmark]: Boogie Preprocessor took 84.65 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 14:25:21,891 INFO  L168              Benchmark]: UtopiaSpecLang took 56.63 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 14:25:21,891 INFO  L168              Benchmark]: Boogie Printer took 13.60 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 14:25:21,891 INFO  L168              Benchmark]: RCFGBuilder took 635.60 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 827.8 MB in the end (delta: 91.3 MB). Peak memory consumption was 91.3 MB. Max. memory is 15.3 GB.
[2020-11-25 14:25:21,892 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.99 ms. Allocated memory is still 1.0 GB. Free memory was 827.8 MB in the beginning and 818.7 MB in the end (delta: 9.1 MB). Peak memory consumption was 9.1 MB. Max. memory is 15.3 GB.
[2020-11-25 14:25:21,892 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1172.05 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 215.5 MB). Free memory was 818.7 MB in the beginning and 1.2 GB in the end (delta: -332.1 MB). Peak memory consumption was 194.0 MB. Max. memory is 15.3 GB.
[2020-11-25 14:25:21,892 INFO  L168              Benchmark]: BlockEncodingV2 took 121.29 ms. Allocated memory is still 1.2 GB. Free memory was 1.2 GB in the beginning and 1.1 GB in the end (delta: 46.6 MB). Peak memory consumption was 46.6 MB. Max. memory is 15.3 GB.
[2020-11-25 14:25:21,892 INFO  L168              Benchmark]: BuchiAutomizer took 11054.65 ms. Allocated memory was 1.2 GB in the beginning and 2.1 GB in the end (delta: 856.2 MB). Free memory was 1.1 GB in the beginning and 1.7 GB in the end (delta: -626.6 MB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
[2020-11-25 14:25:21,894 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2934 locations, 4986 edges
  - StatisticsResult: Encoded RCFG
    2896 locations, 4892 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.19 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 84.65 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 56.63 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 13.60 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 635.60 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 827.8 MB in the end (delta: 91.3 MB). Peak memory consumption was 91.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.99 ms. Allocated memory is still 1.0 GB. Free memory was 827.8 MB in the beginning and 818.7 MB in the end (delta: 9.1 MB). Peak memory consumption was 9.1 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1172.05 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 215.5 MB). Free memory was 818.7 MB in the beginning and 1.2 GB in the end (delta: -332.1 MB). Peak memory consumption was 194.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 121.29 ms. Allocated memory is still 1.2 GB. Free memory was 1.2 GB in the beginning and 1.1 GB in the end (delta: 46.6 MB). Peak memory consumption was 46.6 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 11054.65 ms. Allocated memory was 1.2 GB in the beginning and 2.1 GB in the end (delta: 856.2 MB). Free memory was 1.1 GB in the beginning and 1.7 GB in the end (delta: -626.6 MB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1246 locations, 1548 edges
  - StatisticsResult: BuchiProgram size
    2934 locations, 4986 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 6 terminating modules (6 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.6 modules have a trivial ranking function, the largest among these consists of 13 locations. The remainder module has 1673 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 11.0s and 7 iterations.  TraceHistogramMax:2. Analysis of lassos took 6.1s. Construction of modules took 3.1s. BÃ¼chi inclusion checks took 1.1s. Highest rank in rank-based complementation 0. Minimization of det autom 6. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 6 MinimizatonAttempts, 3336 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 3112 states and ocurred in iteration 4.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 15069 SDtfs, 18012 SDslu, 22041 SDs, 0 SdLazy, 38486 SolverSat, 3142 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 3.1s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU6 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(1405682720) = (new DUCATOProtocolToken)({from : 1405682715});
[L395]               havoc __exception;
[L396]               revert := false;
[L397]   COND FALSE  !(__exception)
[L420]   CALL        call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1850]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1689]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1674]              assume msgsender_MSG != null;
[L1675]              Balance[this] := 0;
[L1689]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1690]  COND FALSE  !(revert)
[L1850]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1851]  COND FALSE  !(revert)
[L1854]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1757]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1740]              assume msgsender_MSG != null;
[L1741]              Balance[this] := 0;
[L1742]              owner_Owned[this] := null;
[L1744]              owner_Owned[this] := msgsender_MSG;
[L1757]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1758]  COND FALSE  !(revert)
[L1854]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1855]  COND FALSE  !(revert)
[L1858]  CALL        call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1806]              assume msgsender_MSG != null;
[L1807]              Balance[this] := 0;
[L1808]              symbol_DUCATOProtocolToken[this] := 1405682701;
[L1809]              name_DUCATOProtocolToken[this] := 1405682701;
[L1810]              decimals_DUCATOProtocolToken[this] := 0;
[L1811]              _totalSupply_DUCATOProtocolToken[this] := 0;
[L1812]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1813]              balances_DUCATOProtocolToken[this] := zeroRefintArr();
[L1814]              sum_balances0[this] := 0;
[L1815]              allowed_DUCATOProtocolToken[this] := zeroRefRefintArr();
[L1816]              sum_allowed1[this] := 0;
[L1818]              symbol_DUCATOProtocolToken[this] := -169935380;
[L1819]              name_DUCATOProtocolToken[this] := -2134480732;
[L1820]              decimals_DUCATOProtocolToken[this] := 18;
[L1821]              __var_1 := decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1822]              _totalSupply_DUCATOProtocolToken[this] := 50000000 * (nonlinearPow(10, decimals_DUCATOProtocolToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1823]              _stopTrade_DUCATOProtocolToken[this] := false;
[L1824]              sum_balances0[this] := sum_balances0[this] - balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1825]              balances_DUCATOProtocolToken[this][owner_Owned[this]] := _totalSupply_DUCATOProtocolToken[this];
[L1826]              sum_balances0[this] := sum_balances0[this] + balances_DUCATOProtocolToken[this][owner_Owned[this]];
[L1827]              assert { :EventEmitted "Transfer_DUCATOProtocolToken" } true;
[L1858]  RET         call DUCATOProtocolToken_DUCATOProtocolToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1859]  COND FALSE  !(revert)
[L420]   RET         call DUCATOProtocolToken_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L421]               assume !revert && gas >= 0;
[L3460]  RET         call DUCATOProtocolToken_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
DUCATOProtocolToken(1405682720).stopTrade.gas(3979002)({from : 1405682715});
[L504]               havoc __exception;
[L505]               revert := false;
[L506]   COND FALSE  !(__exception)
[L529]   CALL        call stopTrade_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3006]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L1905]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1906]  COND FALSE  !(revert)
[L1909]  COND FALSE  !(!(_stopTrade_DUCATOProtocolToken[this] != true))
[L1913]              _stopTrade_DUCATOProtocolToken[this] := true;
[L529]   RET         call stopTrade_DUCATOProtocolToken__success(this, msgsender_MSG, msgvalue_MSG);
[L530]               assume !revert && gas >= 0;
[L3424]  RET         call stopTrade_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG);
DUCATOProtocolToken(1405682720).approve~address~uint256.gas(3979003)({from : 1405682711, spender : 1405682704, tokens : 0});
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume p1 != msgsender_MSG || p2 != spender_s419;
[L3]                call_approve_DUCATOProtocolToken0 := true;
[L3]                call_approve_DUCATOProtocolToken0 := false;
[L3]                revert := revert_hold;
[L725]              havoc __exception;
[L726]              revert := false;
[L727]   COND TRUE  __exception
[L728]              __tmp__Balance := Balance;
[L729]              __tmp__DType := DType;
[L730]              __tmp__Alloc := Alloc;
[L731]              __tmp__balance_ADDR := balance_ADDR;
[L732]              __tmp__M_Ref_int := M_Ref_int;
[L733]              __tmp__sum_balances0 := sum_balances0;
[L734]              __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L735]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L736]              __tmp__sum_allowed1 := sum_allowed1;
[L737]              __tmp__Length := Length;
[L738]              __tmp__now := now;
[L739]              __tmp__owner_Owned := owner_Owned;
[L740]              __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L741]              __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L742]              __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L743]              __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L744]              __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L745]              __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L746]              __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L747]   CALL       call success_s419 := approve~address~uint256_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L2021]  COND TRUE  !(__tmp___stopTrade_DUCATOProtocolToken[this] != true)
[L2022]             revert := true;
[L747]   RET        call success_s419 := approve~address~uint256_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L748]              assume revert || gas < 0;
[L3387]  RET        call success_s419 := approve~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);

Loop:
DUCATOProtocolToken(1405682720).approve~address~uint256.gas(3979001)({from : 1405682723, spender : 1405682716, tokens : 0});
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume p1 != msgsender_MSG || p2 != spender_s419;
[L3]                call_approve_DUCATOProtocolToken0 := true;
[L3]                call_approve_DUCATOProtocolToken0 := false;
[L3]                revert := revert_hold;
[L725]              havoc __exception;
[L726]              revert := false;
[L727]   COND TRUE  __exception
[L728]              __tmp__Balance := Balance;
[L729]              __tmp__DType := DType;
[L730]              __tmp__Alloc := Alloc;
[L731]              __tmp__balance_ADDR := balance_ADDR;
[L732]              __tmp__M_Ref_int := M_Ref_int;
[L733]              __tmp__sum_balances0 := sum_balances0;
[L734]              __tmp__alloc_allowed_DUCATOProtocolToken_lvl0 := alloc_allowed_DUCATOProtocolToken_lvl0;
[L735]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L736]              __tmp__sum_allowed1 := sum_allowed1;
[L737]              __tmp__Length := Length;
[L738]              __tmp__now := now;
[L739]              __tmp__owner_Owned := owner_Owned;
[L740]              __tmp__symbol_DUCATOProtocolToken := symbol_DUCATOProtocolToken;
[L741]              __tmp__name_DUCATOProtocolToken := name_DUCATOProtocolToken;
[L742]              __tmp__decimals_DUCATOProtocolToken := decimals_DUCATOProtocolToken;
[L743]              __tmp___totalSupply_DUCATOProtocolToken := _totalSupply_DUCATOProtocolToken;
[L744]              __tmp___stopTrade_DUCATOProtocolToken := _stopTrade_DUCATOProtocolToken;
[L745]              __tmp__balances_DUCATOProtocolToken := balances_DUCATOProtocolToken;
[L746]              __tmp__allowed_DUCATOProtocolToken := allowed_DUCATOProtocolToken;
[L747]   CALL       call success_s419 := approve~address~uint256_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L2021]  COND TRUE  !(__tmp___stopTrade_DUCATOProtocolToken[this] != true)
[L2022]             revert := true;
[L747]   RET        call success_s419 := approve~address~uint256_DUCATOProtocolToken__fail(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);
[L748]              assume revert || gas < 0;
[L3387]  RET        call success_s419 := approve~address~uint256_DUCATOProtocolToken(this, msgsender_MSG, msgvalue_MSG, spender_s419, tokens_s419);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
