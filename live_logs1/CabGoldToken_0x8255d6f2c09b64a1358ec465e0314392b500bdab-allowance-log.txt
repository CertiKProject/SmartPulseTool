This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 11:51:52,550 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 11:51:52,551 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 11:51:52,559 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 11:51:52,559 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 11:51:52,559 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 11:51:52,560 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 11:51:52,561 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 11:51:52,562 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 11:51:52,562 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 11:51:52,563 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 11:51:52,563 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 11:51:52,564 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 11:51:52,564 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 11:51:52,565 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 11:51:52,565 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 11:51:52,565 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 11:51:52,566 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 11:51:52,567 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 11:51:52,568 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 11:51:52,568 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 11:51:52,569 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 11:51:52,570 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 11:51:52,570 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 11:51:52,570 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 11:51:52,571 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 11:51:52,571 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 11:51:52,571 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 11:51:52,572 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 11:51:52,572 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 11:51:52,572 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 11:51:52,572 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 11:51:52,573 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 11:51:52,573 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 11:51:52,574 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 11:51:52,574 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 11:51:52,574 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 11:51:52,574 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 11:51:52,574 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 11:51:52,575 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 11:51:52,575 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 11:51:52,575 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 11:51:52,581 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 11:51:52,581 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 11:51:52,581 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 11:51:52,581 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 11:51:52,581 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 11:51:52,582 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 11:51:52,582 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 11:51:52,582 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 11:51:52,582 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 11:51:52,582 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 11:51:52,582 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 11:51:52,582 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 11:51:52,582 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 11:51:52,582 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 11:51:52,582 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 11:51:52,582 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 11:51:52,582 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 11:51:52,582 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 11:51:52,583 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 11:51:52,583 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 11:51:52,583 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 11:51:52,583 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 11:51:52,583 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 11:51:52,583 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 11:51:52,583 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 11:51:52,583 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 11:51:52,598 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 11:51:52,608 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 11:51:52,611 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 11:51:52,612 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 11:51:52,612 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 11:51:52,612 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_allowance.bpl
[2020-11-25 11:51:52,613 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_allowance.bpl'
[2020-11-25 11:51:52,702 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 11:51:52,703 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 11:51:52,703 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 11:51:52,704 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 11:51:52,704 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 11:51:52,720 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:51:52" (1/1) ...
[2020-11-25 11:51:52,721 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:51:52" (1/1) ...
[2020-11-25 11:51:52,753 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:51:52" (1/1) ...
[2020-11-25 11:51:52,754 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:51:52" (1/1) ...
[2020-11-25 11:51:52,777 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:51:52" (1/1) ...
[2020-11-25 11:51:52,792 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:51:52" (1/1) ...
[2020-11-25 11:51:52,802 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:51:52" (1/1) ...
[2020-11-25 11:51:52,813 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 11:51:52,814 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 11:51:52,814 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 11:51:52,816 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 11:51:52,820 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:51:52" (1/1) ...
[2020-11-25 11:51:52,836 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.allowance(owner, spender), _allowances_ERC20[this][owner][spender] >= 0 && _allowances_ERC20[this][owner][spender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.allowance(owner, spender), return == _allowances_ERC20[this][owner][spender] &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && name_CabGoldToken[this] == old(name_CabGoldToken[this]) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this]) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this]) && active_CabGoldToken[this] == old(active_CabGoldToken[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]))))
[2020-11-25 11:51:52,842 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.allowance(owner, spender), _allowances_ERC20[this][owner][spender] >= 0 && _allowances_ERC20[this][owner][spender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.allowance(owner, spender), return == _allowances_ERC20[this][owner][spender] &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && name_CabGoldToken[this] == old(name_CabGoldToken[this]) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this]) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this]) && active_CabGoldToken[this] == old(active_CabGoldToken[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]))))
[2020-11-25 11:51:52,848 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.allowance(owner, spender), _allowances_ERC20[this][owner][spender] >= 0 && _allowances_ERC20[this][owner][spender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.allowance(owner, spender), return == _allowances_ERC20[this][owner][spender] &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && name_CabGoldToken[this] == old(name_CabGoldToken[this]) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this]) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this]) && active_CabGoldToken[this] == old(active_CabGoldToken[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]))))
[2020-11-25 11:51:52,854 INFO  L636   opiaSpecLangObserver]: Parsed ( _allowances_ERC20[this][owner_s271][spender_s271]>=0 && _allowances_ERC20[this][owner_s271][spender_s271]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],[IdentifierExpression[owner_s271,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],[IdentifierExpression[spender_s271,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],IntegerLiteral[0]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],[IdentifierExpression[owner_s271,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],[IdentifierExpression[spender_s271,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 11:51:52,856 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( __ret_0_==_allowances_ERC20[this][owner_s271][spender_s271] && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this]==( old(_allowances_ERC20[this]) ) ) && name_CabGoldToken[this]==( old(name_CabGoldToken[this]) ) ) && symbol_CabGoldToken[this]==( old(symbol_CabGoldToken[this]) ) ) && decimals_CabGoldToken[this]==( old(decimals_CabGoldToken[this]) ) ) && active_CabGoldToken[this]==( old(active_CabGoldToken[this]) ) ) && _minters_MinterRole[this]==( old(_minters_MinterRole[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,allowance~address~address_ERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],[IdentifierExpression[owner_s271,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],[IdentifierExpression[spender_s271,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[active_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[active_CabGoldToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]]
[2020-11-25 11:51:52,863 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.allowance(owner, spender), _allowances_ERC20[this][owner][spender] >= 0 && _allowances_ERC20[this][owner][spender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.allowance(owner, spender), return == _allowances_ERC20[this][owner][spender] &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && name_CabGoldToken[this] == old(name_CabGoldToken[this]) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this]) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this]) && active_CabGoldToken[this] == old(active_CabGoldToken[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]))))
[2020-11-25 11:51:52,863 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_allowance_ERC200) ==> ( <>AP(success_allowance_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 11:51:52,876 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:51:52 PropertyContainer
[2020-11-25 11:51:52,876 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 11:51:52,876 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 11:51:52,876 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 11:51:52,876 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 11:51:52,877 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:51:52" (1/2) ...
[2020-11-25 11:51:52,877 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 11:51:52,878 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 11:51:52,896 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:51:52" (2/2) ...
[2020-11-25 11:51:52,896 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 11:51:52,896 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 11:51:52,896 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 11:51:52,896 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 11:51:52,897 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:51:52" (1/2) ...
[2020-11-25 11:51:52,952 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 11:51:52,952 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 11:51:52,953 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 11:51:52,953 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 11:51:52,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 11:51:52,953 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 11:51:52,953 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 11:51:52,953 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 11:51:52,953 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 11:51:52,953 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 11:51:52,953 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 11:51:52,954 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 11:51:52,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 11:51:52,954 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 11:51:52,954 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 11:51:52,954 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 11:51:52,954 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 11:51:52,955 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 11:51:52,955 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 11:51:52,955 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 11:51:52,955 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 11:51:52,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 11:51:52,955 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 11:51:52,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 11:51:52,955 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 11:51:52,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 11:51:52,955 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 11:51:52,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 11:51:52,956 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 11:51:52,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 11:51:52,956 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 11:51:52,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 11:51:52,956 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 11:51:52,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 11:51:52,956 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 11:51:52,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 11:51:52,956 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 11:51:52,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 11:51:52,957 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 11:51:52,957 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 11:51:52,957 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 11:51:52,957 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 11:51:52,957 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 11:51:52,957 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 11:51:52,957 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 11:51:52,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 11:51:52,957 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 11:51:52,957 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 11:51:52,957 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 11:51:52,957 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 11:51:52,957 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 11:51:52,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 11:51:52,958 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 11:51:52,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 11:51:52,958 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 11:51:52,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 11:51:52,958 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 11:51:52,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 11:51:52,958 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 11:51:52,958 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 11:51:52,958 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 11:51:52,958 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 11:51:52,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 11:51:52,958 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 11:51:52,959 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 11:51:52,959 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 11:51:52,959 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 11:51:52,959 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 11:51:52,959 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-25 11:51:52,959 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-25 11:51:52,959 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 11:51:52,959 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 11:51:52,959 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken_NoBaseCtor__success
[2020-11-25 11:51:52,959 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken
[2020-11-25 11:51:52,959 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken
[2020-11-25 11:51:52,959 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CabGoldToken
[2020-11-25 11:51:52,960 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CabGoldToken
[2020-11-25 11:51:52,960 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CabGoldToken
[2020-11-25 11:51:52,960 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CabGoldToken
[2020-11-25 11:51:52,960 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CabGoldToken
[2020-11-25 11:51:52,960 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CabGoldToken
[2020-11-25 11:51:52,960 INFO  L130     BoogieDeclarations]: Found specification of procedure active_CabGoldToken
[2020-11-25 11:51:52,960 INFO  L138     BoogieDeclarations]: Found implementation of procedure active_CabGoldToken
[2020-11-25 11:51:52,960 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 11:51:52,960 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 11:51:52,960 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 11:51:52,960 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 11:51:52,960 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 11:51:52,960 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 11:51:52,961 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 11:51:52,961 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 11:51:52,961 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 11:51:52,961 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 11:51:52,961 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 11:51:52,961 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 11:51:52,961 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 11:51:52,961 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 11:51:52,961 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 11:51:52,961 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 11:51:52,961 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-25 11:51:52,961 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-25 11:51:52,961 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_CabGoldToken
[2020-11-25 11:51:52,961 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 11:51:52,962 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 11:51:52,962 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 11:51:52,962 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 11:51:52,962 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 11:51:52,962 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 11:51:52,962 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 11:51:52,962 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 11:51:52,962 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 11:51:52,962 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 11:51:52,962 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 11:51:52,962 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 11:51:52,963 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 11:51:52,963 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 11:51:52,963 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 11:51:52,963 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 11:51:52,963 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 11:51:52,963 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 11:51:52,963 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 11:51:52,963 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 11:51:52,963 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 11:51:52,963 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 11:51:52,964 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 11:51:52,964 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 11:51:52,964 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 11:51:52,964 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 11:51:52,964 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 11:51:52,964 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 11:51:52,964 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 11:51:52,964 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:51:52,964 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:51:52,964 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:51:52,964 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:51:52,965 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 11:51:52,965 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 11:51:52,965 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 11:51:52,965 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 11:51:52,965 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 11:51:52,965 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 11:51:52,965 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 11:51:52,965 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 11:51:52,965 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 11:51:52,965 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 11:51:52,966 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 11:51:52,966 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 11:51:52,966 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 11:51:52,966 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 11:51:52,966 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 11:51:52,966 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 11:51:52,966 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 11:51:52,966 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 11:51:52,966 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 11:51:52,967 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 11:51:52,967 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 11:51:52,967 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 11:51:52,967 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 11:51:52,967 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 11:51:52,967 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 11:51:52,967 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 11:51:52,967 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 11:51:52,967 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 11:51:52,967 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 11:51:52,967 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 11:51:52,968 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 11:51:52,968 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 11:51:52,968 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 11:51:52,968 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 11:51:52,968 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken_NoBaseCtor__fail
[2020-11-25 11:51:52,968 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken__success
[2020-11-25 11:51:52,968 INFO  L130     BoogieDeclarations]: Found specification of procedure CabGoldToken_CabGoldToken__fail
[2020-11-25 11:51:52,968 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CabGoldToken__success
[2020-11-25 11:51:52,968 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CabGoldToken__fail
[2020-11-25 11:51:52,968 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CabGoldToken__success
[2020-11-25 11:51:52,968 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CabGoldToken__fail
[2020-11-25 11:51:52,968 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CabGoldToken__success
[2020-11-25 11:51:52,969 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CabGoldToken__fail
[2020-11-25 11:51:52,969 INFO  L130     BoogieDeclarations]: Found specification of procedure active_CabGoldToken__success
[2020-11-25 11:51:52,969 INFO  L130     BoogieDeclarations]: Found specification of procedure active_CabGoldToken__fail
[2020-11-25 11:51:52,969 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 11:51:52,969 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 11:51:52,969 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 11:51:52,969 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 11:51:52,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 11:51:52,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 11:51:52,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 11:51:52,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 11:51:52,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 11:51:52,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 11:51:52,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 11:51:52,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 11:51:52,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 11:51:52,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 11:51:52,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 11:51:52,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 11:51:52,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 11:51:52,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 11:51:52,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 11:51:52,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 11:51:52,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 11:51:52,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 11:51:52,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 11:51:52,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 11:51:52,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 11:51:52,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 11:51:52,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 11:51:52,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 11:51:52,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 11:51:52,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 11:51:52,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 11:51:52,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 11:51:52,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 11:51:52,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 11:51:52,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 11:51:52,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 11:51:52,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 11:51:52,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 11:51:52,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 11:51:52,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 11:51:52,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 11:51:52,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 11:51:52,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:51:52,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:51:52,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:51:52,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:51:52,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 11:51:52,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 11:51:52,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 11:51:52,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 11:51:52,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 11:51:52,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 11:51:52,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 11:51:52,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 11:51:52,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 11:51:52,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 11:51:52,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 11:51:52,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 11:51:52,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 11:51:52,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 11:51:52,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 11:51:52,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 11:51:52,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 11:51:52,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 11:51:52,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 11:51:52,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 11:51:52,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 11:51:52,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 11:51:52,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 11:51:52,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 11:51:52,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 11:51:52,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 11:51:52,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 11:51:52,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 11:51:52,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 11:51:52,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 11:51:52,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 11:51:52,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 11:51:52,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 11:51:52,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 11:51:52,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 11:51:52,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 11:51:52,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 11:51:52,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 11:51:52,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 11:51:52,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 11:51:52,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 11:51:52,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 11:51:52,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 11:51:52,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 11:51:52,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 11:51:52,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 11:51:52,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 11:51:52,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 11:51:52,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken_NoBaseCtor__fail
[2020-11-25 11:51:52,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken_NoBaseCtor__success
[2020-11-25 11:51:52,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken__fail
[2020-11-25 11:51:52,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure CabGoldToken_CabGoldToken__success
[2020-11-25 11:51:52,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CabGoldToken__fail
[2020-11-25 11:51:52,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CabGoldToken__success
[2020-11-25 11:51:52,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CabGoldToken__fail
[2020-11-25 11:51:52,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CabGoldToken__success
[2020-11-25 11:51:52,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CabGoldToken__fail
[2020-11-25 11:51:52,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CabGoldToken__success
[2020-11-25 11:51:52,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure active_CabGoldToken__fail
[2020-11-25 11:51:52,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure active_CabGoldToken__success
[2020-11-25 11:51:52,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 11:51:52,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 11:51:52,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 11:51:52,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 11:51:52,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 11:51:52,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 11:51:52,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 11:51:52,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 11:51:52,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 11:51:52,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 11:51:52,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 11:51:52,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 11:51:52,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 11:51:52,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 11:51:52,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 11:51:52,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 11:51:52,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 11:51:52,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 11:51:52,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 11:51:52,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 11:51:52,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-25 11:51:52,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-25 11:51:52,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_CabGoldToken
[2020-11-25 11:51:52,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 11:51:52,980 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 11:51:52,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 11:51:53,550 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:51:53,551 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:51:53,551 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:51:53,882 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 11:51:53,882 INFO  L286             CfgBuilder]: Removed 8 assue(true) statements.
[2020-11-25 11:51:53,884 INFO  L202        PluginConnector]: Adding new model CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:51:53 BoogieIcfgContainer
[2020-11-25 11:51:53,884 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:51:52" (2/2) ...
[2020-11-25 11:51:53,884 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 11:51:53,884 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@70c683d3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:51:53, skipping insertion in model container
[2020-11-25 11:51:53,884 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 11:51:53,884 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 11:51:53,884 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 11:51:53,885 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 11:51:53,886 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:51:52" (1/3) ...
[2020-11-25 11:51:53,886 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@9502d6f and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:51:53, skipping insertion in model container
[2020-11-25 11:51:53,886 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:51:52" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 11:51:53,925 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:51:53 NWAContainer
[2020-11-25 11:51:53,925 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 11:51:53,926 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 11:51:53,926 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 11:51:53,927 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 11:51:53,927 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:51:53" (3/4) ...
[2020-11-25 11:51:53,928 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@ee35963 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:51:53, skipping insertion in model container
[2020-11-25 11:51:53,928 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:51:53" (4/4) ...
[2020-11-25 11:51:53,931 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 11:51:53,936 INFO  L110   BuchiProductObserver]: Initial RCFG 2279 locations, 3353 edges
[2020-11-25 11:51:53,936 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 11:51:53,947 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 11:51:55,694 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 11:51:55,702 INFO  L110   BuchiProductObserver]: BuchiProgram size 5916 locations, 11051 edges
[2020-11-25 11:51:55,702 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:51:55 BoogieIcfgContainer
[2020-11-25 11:51:55,702 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 11:51:55,702 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 11:51:55,702 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 11:51:55,704 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 11:51:55,704 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:51:55" (1/1) ...
[2020-11-25 11:51:55,810 INFO  L313           BlockEncoder]: Initial Icfg 5916 locations, 11051 edges
[2020-11-25 11:51:55,810 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 11:51:55,811 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 11:51:55,811 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 11:51:55,811 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 11:51:55,826 INFO  L70    emoveInfeasibleEdges]: Removed 162 edges and 19 locations because of local infeasibility
[2020-11-25 11:51:55,844 INFO  L70        RemoveSinkStates]: Removed 92 edges and 61 locations by removing sink states
[2020-11-25 11:51:55,857 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 11:51:55,861 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 11:51:55,864 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 11:51:55,865 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 11:51:55,868 INFO  L313           BlockEncoder]: Encoded RCFG 5808 locations, 10756 edges
[2020-11-25 11:51:55,868 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 11:51:55 BasicIcfg
[2020-11-25 11:51:55,868 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 11:51:55,868 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 11:51:55,868 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 11:51:55,870 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 11:51:55,871 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:51:55,871 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:51:52" (1/6) ...
[2020-11-25 11:51:55,872 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6a8b548c and model type CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:51:55, skipping insertion in model container
[2020-11-25 11:51:55,872 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:51:55,872 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:51:52" (2/6) ...
[2020-11-25 11:51:55,872 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6a8b548c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:51:55, skipping insertion in model container
[2020-11-25 11:51:55,873 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:51:55,873 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:51:53" (3/6) ...
[2020-11-25 11:51:55,873 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6a8b548c and model type CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 11:51:55, skipping insertion in model container
[2020-11-25 11:51:55,873 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:51:55,873 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:51:53" (4/6) ...
[2020-11-25 11:51:55,873 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6a8b548c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:51:55, skipping insertion in model container
[2020-11-25 11:51:55,873 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:51:55,873 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:51:55" (5/6) ...
[2020-11-25 11:51:55,873 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6a8b548c and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 11:51:55, skipping insertion in model container
[2020-11-25 11:51:55,874 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:51:55,874 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 11:51:55" (6/6) ...
[2020-11-25 11:51:55,874 INFO  L404   chiAutomizerObserver]: Analyzing ICFG CabGoldToken_0x8255d6f2c09b64a1358ec465e0314392b500bdab_allowance.bpl_BEv2
[2020-11-25 11:51:55,904 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 11:51:55,904 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 11:51:55,904 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 11:51:55,904 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 11:51:55,904 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 11:51:55,904 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 11:51:55,904 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 11:51:55,904 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 11:51:55,904 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 11:51:55,945 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5808 states.
[2020-11-25 11:51:56,014 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:51:56,015 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:51:56,015 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:51:56,023 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:51:56,023 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:51:56,024 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 11:51:56,024 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5808 states.
[2020-11-25 11:51:56,048 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:51:56,048 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:51:56,048 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:51:56,049 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:51:56,049 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND TRUE   revert
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND TRUE   choice == 18
[L6338]              gas := gas - 21000;
[L6339]  COND FALSE  !(gas >= 0)
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:51:56,062 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:51:56,062 INFO  L82        PathProgramCache]: Analyzing trace with hash 229732985, now seen corresponding path program 1 times
[2020-11-25 11:51:56,067 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:51:56,086 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:51:56,128 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:51:56,132 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:51:56,133 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 11:51:56,510 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:51:56,519 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 11:51:56,519 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 11:51:56,520 INFO  L87              Difference]: Start difference. First operand 5808 states. Second operand 3 states.
[2020-11-25 11:51:56,803 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:51:56,803 INFO  L93              Difference]: Finished difference Result 3570 states and 4357 transitions.
[2020-11-25 11:51:56,803 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 11:51:56,804 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3570 states and 4357 transitions.
[2020-11-25 11:51:56,824 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:51:56,851 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3570 states to 3570 states and 4357 transitions.
[2020-11-25 11:51:56,852 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 11:51:56,854 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 881
[2020-11-25 11:51:56,854 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3570 states and 4357 transitions.
[2020-11-25 11:51:56,864 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:51:56,864 INFO  L728         BuchiCegarLoop]: Abstraction has 3570 states and 4357 transitions.
[2020-11-25 11:51:56,879 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3570 states and 4357 transitions.
[2020-11-25 11:51:56,941 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3570 to 3570.
[2020-11-25 11:51:56,941 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3570 states.
[2020-11-25 11:51:56,948 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3570 states to 3570 states and 4357 transitions.
[2020-11-25 11:51:56,948 INFO  L751         BuchiCegarLoop]: Abstraction has 3570 states and 4357 transitions.
[2020-11-25 11:51:56,949 INFO  L631         BuchiCegarLoop]: Abstraction has 3570 states and 4357 transitions.
[2020-11-25 11:51:56,949 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 11:51:56,949 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3570 states and 4357 transitions.
[2020-11-25 11:51:56,958 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:51:56,958 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:51:56,958 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:51:56,959 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:51:56,960 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND TRUE   revert
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND TRUE   revert
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND TRUE   choice == 15
[L6357]              gas := gas - 21000;
[L6358]  COND TRUE   gas >= 0
[L6359]              assume msgvalue_MSG == 0;
[L6360]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowances_ERC20[this][owner_s271][spender_s271] >= 0 && _allowances_ERC20[this][owner_s271][spender_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L477]               havoc __exception;
[L478]               revert := false;
[L479]   COND FALSE  !(__exception)
[L505]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L2894]              __ret_0_ := _allowances_ERC20[this][owner_s271][spender_s271];
[L505]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L506]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _allowances_ERC20[this][owner_s271][spender_s271] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L2]                 revert := revert_hold;
[L6360]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND TRUE   choice == 15
[L6357]              gas := gas - 21000;
[L6358]  COND TRUE   gas >= 0
[L6359]              assume msgvalue_MSG == 0;
[L6360]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowances_ERC20[this][owner_s271][spender_s271] >= 0 && _allowances_ERC20[this][owner_s271][spender_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L477]               havoc __exception;
[L478]               revert := false;
[L479]   COND FALSE  !(__exception)
[L505]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L2894]              __ret_0_ := _allowances_ERC20[this][owner_s271][spender_s271];
[L505]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L506]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _allowances_ERC20[this][owner_s271][spender_s271] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L2]                 revert := revert_hold;
[L6360]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:51:56,963 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:51:56,963 INFO  L82        PathProgramCache]: Analyzing trace with hash 1719861904, now seen corresponding path program 1 times
[2020-11-25 11:51:56,965 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:51:56,974 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:51:56,994 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:51:56,994 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:51:56,994 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 11:51:56,996 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:51:56,996 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 11:51:56,996 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 11:51:56,996 INFO  L87              Difference]: Start difference. First operand 3570 states and 4357 transitions. cyclomatic complexity: 789 Second operand 3 states.
[2020-11-25 11:51:57,120 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:51:57,120 INFO  L93              Difference]: Finished difference Result 4896 states and 6009 transitions.
[2020-11-25 11:51:57,120 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 11:51:57,121 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4896 states and 6009 transitions.
[2020-11-25 11:51:57,138 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:51:57,157 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4896 states to 4430 states and 5282 transitions.
[2020-11-25 11:51:57,157 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1120
[2020-11-25 11:51:57,159 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1179
[2020-11-25 11:51:57,159 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4430 states and 5282 transitions.
[2020-11-25 11:51:57,165 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:51:57,166 INFO  L728         BuchiCegarLoop]: Abstraction has 4430 states and 5282 transitions.
[2020-11-25 11:51:57,169 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4430 states and 5282 transitions.
[2020-11-25 11:51:57,208 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4430 to 4046.
[2020-11-25 11:51:57,208 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4046 states.
[2020-11-25 11:51:57,213 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4046 states to 4046 states and 4800 transitions.
[2020-11-25 11:51:57,213 INFO  L751         BuchiCegarLoop]: Abstraction has 4046 states and 4800 transitions.
[2020-11-25 11:51:57,213 INFO  L631         BuchiCegarLoop]: Abstraction has 4046 states and 4800 transitions.
[2020-11-25 11:51:57,214 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 11:51:57,214 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4046 states and 4800 transitions.
[2020-11-25 11:51:57,220 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:51:57,221 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:51:57,221 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:51:57,223 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:51:57,223 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND FALSE  !(DType[this] == CabGoldToken)
[L3681]  COND FALSE  !(DType[this] == ERC20Mintable)
[L3686]  COND TRUE   DType[this] == MinterRole
[L3687]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3687]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3688]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND FALSE  !(DType[this] == CabGoldToken)
[L3681]  COND FALSE  !(DType[this] == ERC20Mintable)
[L3686]  COND TRUE   DType[this] == MinterRole
[L3687]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3687]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3688]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND TRUE   choice == 15
[L6357]              gas := gas - 21000;
[L6358]  COND TRUE   gas >= 0
[L6359]              assume msgvalue_MSG == 0;
[L6360]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowances_ERC20[this][owner_s271][spender_s271] >= 0 && _allowances_ERC20[this][owner_s271][spender_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L477]               havoc __exception;
[L478]               revert := false;
[L479]   COND FALSE  !(__exception)
[L505]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L2894]              __ret_0_ := _allowances_ERC20[this][owner_s271][spender_s271];
[L505]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L506]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _allowances_ERC20[this][owner_s271][spender_s271] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L2]                 revert := revert_hold;
[L6360]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND TRUE   choice == 15
[L6357]              gas := gas - 21000;
[L6358]  COND TRUE   gas >= 0
[L6359]              assume msgvalue_MSG == 0;
[L6360]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowances_ERC20[this][owner_s271][spender_s271] >= 0 && _allowances_ERC20[this][owner_s271][spender_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L477]               havoc __exception;
[L478]               revert := false;
[L479]   COND FALSE  !(__exception)
[L505]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L2894]              __ret_0_ := _allowances_ERC20[this][owner_s271][spender_s271];
[L505]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L506]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _allowances_ERC20[this][owner_s271][spender_s271] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L2]                 revert := revert_hold;
[L6360]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:51:57,228 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:51:57,229 INFO  L82        PathProgramCache]: Analyzing trace with hash 53153116, now seen corresponding path program 1 times
[2020-11-25 11:51:57,230 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:51:57,240 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:51:57,329 INFO  L134       CoverageAnalysis]: Checked inductivity of 267 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 258 trivial. 0 not checked.
[2020-11-25 11:51:57,329 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 11:51:57,330 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-11-25 11:51:57,330 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:51:57,330 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 11:51:57,330 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 11:51:57,331 INFO  L87              Difference]: Start difference. First operand 4046 states and 4800 transitions. cyclomatic complexity: 756 Second operand 6 states.
[2020-11-25 11:51:57,470 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:51:57,470 INFO  L93              Difference]: Finished difference Result 4065 states and 4822 transitions.
[2020-11-25 11:51:57,470 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 11:51:57,470 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4065 states and 4822 transitions.
[2020-11-25 11:51:57,479 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:51:57,493 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4065 states to 4052 states and 4806 transitions.
[2020-11-25 11:51:57,493 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1138
[2020-11-25 11:51:57,494 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1138
[2020-11-25 11:51:57,494 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4052 states and 4806 transitions.
[2020-11-25 11:51:57,497 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:51:57,497 INFO  L728         BuchiCegarLoop]: Abstraction has 4052 states and 4806 transitions.
[2020-11-25 11:51:57,501 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4052 states and 4806 transitions.
[2020-11-25 11:51:57,531 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4052 to 4052.
[2020-11-25 11:51:57,532 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4052 states.
[2020-11-25 11:51:57,537 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4052 states to 4052 states and 4806 transitions.
[2020-11-25 11:51:57,537 INFO  L751         BuchiCegarLoop]: Abstraction has 4052 states and 4806 transitions.
[2020-11-25 11:51:57,537 INFO  L631         BuchiCegarLoop]: Abstraction has 4052 states and 4806 transitions.
[2020-11-25 11:51:57,537 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 11:51:57,537 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4052 states and 4806 transitions.
[2020-11-25 11:51:57,542 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:51:57,542 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:51:57,542 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:51:57,545 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:51:57,545 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND TRUE   choice == 15
[L6357]              gas := gas - 21000;
[L6358]  COND TRUE   gas >= 0
[L6359]              assume msgvalue_MSG == 0;
[L6360]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowances_ERC20[this][owner_s271][spender_s271] >= 0 && _allowances_ERC20[this][owner_s271][spender_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L477]               havoc __exception;
[L478]               revert := false;
[L479]   COND FALSE  !(__exception)
[L505]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L2894]              __ret_0_ := _allowances_ERC20[this][owner_s271][spender_s271];
[L505]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L506]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _allowances_ERC20[this][owner_s271][spender_s271] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L2]                 revert := revert_hold;
[L6360]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND TRUE   choice == 15
[L6357]              gas := gas - 21000;
[L6358]  COND TRUE   gas >= 0
[L6359]              assume msgvalue_MSG == 0;
[L6360]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowances_ERC20[this][owner_s271][spender_s271] >= 0 && _allowances_ERC20[this][owner_s271][spender_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L477]               havoc __exception;
[L478]               revert := false;
[L479]   COND FALSE  !(__exception)
[L505]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L2894]              __ret_0_ := _allowances_ERC20[this][owner_s271][spender_s271];
[L505]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L506]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == _allowances_ERC20[this][owner_s271][spender_s271] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && name_CabGoldToken[this] == old(name_CabGoldToken[this])) && symbol_CabGoldToken[this] == old(symbol_CabGoldToken[this])) && decimals_CabGoldToken[this] == old(decimals_CabGoldToken[this])) && active_CabGoldToken[this] == old(active_CabGoldToken[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this]));
[L2]                 revert := revert_hold;
[L6360]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:51:57,548 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:51:57,549 INFO  L82        PathProgramCache]: Analyzing trace with hash -1137045828, now seen corresponding path program 1 times
[2020-11-25 11:51:57,550 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:51:57,562 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:51:57,620 INFO  L134       CoverageAnalysis]: Checked inductivity of 265 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 265 trivial. 0 not checked.
[2020-11-25 11:51:57,620 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:51:57,620 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 11:51:57,621 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:51:57,621 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 11:51:57,621 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 11:51:57,621 INFO  L87              Difference]: Start difference. First operand 4052 states and 4806 transitions. cyclomatic complexity: 756 Second operand 4 states.
[2020-11-25 11:51:57,661 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:51:57,662 INFO  L93              Difference]: Finished difference Result 4053 states and 4805 transitions.
[2020-11-25 11:51:57,662 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 11:51:57,662 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4053 states and 4805 transitions.
[2020-11-25 11:51:57,671 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:51:57,681 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4053 states to 4043 states and 4795 transitions.
[2020-11-25 11:51:57,682 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1127
[2020-11-25 11:51:57,682 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1127
[2020-11-25 11:51:57,682 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4043 states and 4795 transitions.
[2020-11-25 11:51:57,686 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:51:57,686 INFO  L728         BuchiCegarLoop]: Abstraction has 4043 states and 4795 transitions.
[2020-11-25 11:51:57,689 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4043 states and 4795 transitions.
[2020-11-25 11:51:57,718 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4043 to 4041.
[2020-11-25 11:51:57,718 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4041 states.
[2020-11-25 11:51:57,722 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4041 states to 4041 states and 4793 transitions.
[2020-11-25 11:51:57,722 INFO  L751         BuchiCegarLoop]: Abstraction has 4041 states and 4793 transitions.
[2020-11-25 11:51:57,722 INFO  L631         BuchiCegarLoop]: Abstraction has 4041 states and 4793 transitions.
[2020-11-25 11:51:57,722 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 11:51:57,722 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4041 states and 4793 transitions.
[2020-11-25 11:51:57,727 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:51:57,727 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:51:57,727 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:51:57,729 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:51:57,729 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND FALSE  !(DType[this] == CabGoldToken)
[L3681]  COND FALSE  !(DType[this] == ERC20Mintable)
[L3686]  COND TRUE   DType[this] == MinterRole
[L3687]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3687]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3688]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND TRUE   choice == 15
[L6357]              gas := gas - 21000;
[L6358]  COND TRUE   gas >= 0
[L6359]              assume msgvalue_MSG == 0;
[L6360]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowances_ERC20[this][owner_s271][spender_s271] >= 0 && _allowances_ERC20[this][owner_s271][spender_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L477]               havoc __exception;
[L478]               revert := false;
[L479]   COND TRUE   __exception
[L480]               __tmp__Balance := Balance;
[L481]               __tmp__DType := DType;
[L482]               __tmp__Alloc := Alloc;
[L483]               __tmp__balance_ADDR := balance_ADDR;
[L484]               __tmp__M_Ref_int := M_Ref_int;
[L485]               __tmp__sum__balances0 := sum__balances0;
[L486]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L487]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L488]               __tmp__sum__allowances1 := sum__allowances1;
[L489]               __tmp__M_Ref_bool := M_Ref_bool;
[L490]               __tmp__sum := sum;
[L491]               __tmp__Length := Length;
[L492]               __tmp__now := now;
[L493]               __tmp___balances_ERC20 := _balances_ERC20;
[L494]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L495]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L496]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L497]               __tmp___minters_MinterRole := _minters_MinterRole;
[L498]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L499]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L500]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L501]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L502]   CALL        call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L2888]              __ret_0_ := __tmp___allowances_ERC20[this][owner_s271][spender_s271];
[L502]   RET         call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L503]               assume revert || gas < 0;
[L6360]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND TRUE   choice == 15
[L6357]              gas := gas - 21000;
[L6358]  COND TRUE   gas >= 0
[L6359]              assume msgvalue_MSG == 0;
[L6360]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowances_ERC20[this][owner_s271][spender_s271] >= 0 && _allowances_ERC20[this][owner_s271][spender_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L477]               havoc __exception;
[L478]               revert := false;
[L479]   COND TRUE   __exception
[L480]               __tmp__Balance := Balance;
[L481]               __tmp__DType := DType;
[L482]               __tmp__Alloc := Alloc;
[L483]               __tmp__balance_ADDR := balance_ADDR;
[L484]               __tmp__M_Ref_int := M_Ref_int;
[L485]               __tmp__sum__balances0 := sum__balances0;
[L486]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L487]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L488]               __tmp__sum__allowances1 := sum__allowances1;
[L489]               __tmp__M_Ref_bool := M_Ref_bool;
[L490]               __tmp__sum := sum;
[L491]               __tmp__Length := Length;
[L492]               __tmp__now := now;
[L493]               __tmp___balances_ERC20 := _balances_ERC20;
[L494]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L495]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L496]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L497]               __tmp___minters_MinterRole := _minters_MinterRole;
[L498]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L499]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L500]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L501]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L502]   CALL        call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L2888]              __ret_0_ := __tmp___allowances_ERC20[this][owner_s271][spender_s271];
[L502]   RET         call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L503]               assume revert || gas < 0;
[L6360]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:51:57,733 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:51:57,733 INFO  L82        PathProgramCache]: Analyzing trace with hash 866677709, now seen corresponding path program 1 times
[2020-11-25 11:51:57,733 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:51:57,742 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:51:57,804 INFO  L134       CoverageAnalysis]: Checked inductivity of 261 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 255 trivial. 0 not checked.
[2020-11-25 11:51:57,804 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:51:57,804 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 11:51:57,804 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:51:57,804 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 11:51:57,804 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 11:51:57,805 INFO  L87              Difference]: Start difference. First operand 4041 states and 4793 transitions. cyclomatic complexity: 754 Second operand 7 states.
[2020-11-25 11:51:57,911 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:51:57,911 INFO  L93              Difference]: Finished difference Result 4058 states and 4812 transitions.
[2020-11-25 11:51:57,911 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 11:51:57,911 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4058 states and 4812 transitions.
[2020-11-25 11:51:57,922 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:51:57,935 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4058 states to 4030 states and 4780 transitions.
[2020-11-25 11:51:57,936 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1127
[2020-11-25 11:51:57,936 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1127
[2020-11-25 11:51:57,936 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4030 states and 4780 transitions.
[2020-11-25 11:51:57,940 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:51:57,940 INFO  L728         BuchiCegarLoop]: Abstraction has 4030 states and 4780 transitions.
[2020-11-25 11:51:57,944 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4030 states and 4780 transitions.
[2020-11-25 11:51:57,984 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4030 to 4030.
[2020-11-25 11:51:57,985 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4030 states.
[2020-11-25 11:51:57,991 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4030 states to 4030 states and 4780 transitions.
[2020-11-25 11:51:57,991 INFO  L751         BuchiCegarLoop]: Abstraction has 4030 states and 4780 transitions.
[2020-11-25 11:51:57,991 INFO  L631         BuchiCegarLoop]: Abstraction has 4030 states and 4780 transitions.
[2020-11-25 11:51:57,991 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 11:51:57,991 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4030 states and 4780 transitions.
[2020-11-25 11:51:57,998 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:51:57,998 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:51:57,998 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:51:58,000 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:51:58,000 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND FALSE  !(DType[this] == CabGoldToken)
[L3681]  COND TRUE   DType[this] == ERC20Mintable
[L3682]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3682]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3683]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND FALSE  !(DType[this] == CabGoldToken)
[L3681]  COND TRUE   DType[this] == ERC20Mintable
[L3682]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3682]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3683]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND TRUE   choice == 15
[L6357]              gas := gas - 21000;
[L6358]  COND TRUE   gas >= 0
[L6359]              assume msgvalue_MSG == 0;
[L6360]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowances_ERC20[this][owner_s271][spender_s271] >= 0 && _allowances_ERC20[this][owner_s271][spender_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L477]               havoc __exception;
[L478]               revert := false;
[L479]   COND TRUE   __exception
[L480]               __tmp__Balance := Balance;
[L481]               __tmp__DType := DType;
[L482]               __tmp__Alloc := Alloc;
[L483]               __tmp__balance_ADDR := balance_ADDR;
[L484]               __tmp__M_Ref_int := M_Ref_int;
[L485]               __tmp__sum__balances0 := sum__balances0;
[L486]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L487]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L488]               __tmp__sum__allowances1 := sum__allowances1;
[L489]               __tmp__M_Ref_bool := M_Ref_bool;
[L490]               __tmp__sum := sum;
[L491]               __tmp__Length := Length;
[L492]               __tmp__now := now;
[L493]               __tmp___balances_ERC20 := _balances_ERC20;
[L494]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L495]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L496]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L497]               __tmp___minters_MinterRole := _minters_MinterRole;
[L498]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L499]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L500]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L501]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L502]   CALL        call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L2888]              __ret_0_ := __tmp___allowances_ERC20[this][owner_s271][spender_s271];
[L502]   RET         call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L503]               assume revert || gas < 0;
[L6360]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND TRUE   choice == 15
[L6357]              gas := gas - 21000;
[L6358]  COND TRUE   gas >= 0
[L6359]              assume msgvalue_MSG == 0;
[L6360]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowances_ERC20[this][owner_s271][spender_s271] >= 0 && _allowances_ERC20[this][owner_s271][spender_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L477]               havoc __exception;
[L478]               revert := false;
[L479]   COND TRUE   __exception
[L480]               __tmp__Balance := Balance;
[L481]               __tmp__DType := DType;
[L482]               __tmp__Alloc := Alloc;
[L483]               __tmp__balance_ADDR := balance_ADDR;
[L484]               __tmp__M_Ref_int := M_Ref_int;
[L485]               __tmp__sum__balances0 := sum__balances0;
[L486]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L487]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L488]               __tmp__sum__allowances1 := sum__allowances1;
[L489]               __tmp__M_Ref_bool := M_Ref_bool;
[L490]               __tmp__sum := sum;
[L491]               __tmp__Length := Length;
[L492]               __tmp__now := now;
[L493]               __tmp___balances_ERC20 := _balances_ERC20;
[L494]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L495]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L496]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L497]               __tmp___minters_MinterRole := _minters_MinterRole;
[L498]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L499]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L500]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L501]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L502]   CALL        call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L2888]              __ret_0_ := __tmp___allowances_ERC20[this][owner_s271][spender_s271];
[L502]   RET         call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L503]               assume revert || gas < 0;
[L6360]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:51:58,004 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:51:58,004 INFO  L82        PathProgramCache]: Analyzing trace with hash 14401654, now seen corresponding path program 1 times
[2020-11-25 11:51:58,005 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:51:58,012 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:51:58,074 INFO  L134       CoverageAnalysis]: Checked inductivity of 266 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 257 trivial. 0 not checked.
[2020-11-25 11:51:58,074 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 11:51:58,075 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-11-25 11:51:58,075 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:51:58,075 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 11:51:58,075 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 11:51:58,075 INFO  L87              Difference]: Start difference. First operand 4030 states and 4780 transitions. cyclomatic complexity: 752 Second operand 6 states.
[2020-11-25 11:51:58,148 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:51:58,149 INFO  L93              Difference]: Finished difference Result 4049 states and 4802 transitions.
[2020-11-25 11:51:58,149 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 11:51:58,149 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4049 states and 4802 transitions.
[2020-11-25 11:51:58,157 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:51:58,168 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4049 states to 4036 states and 4786 transitions.
[2020-11-25 11:51:58,168 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1127
[2020-11-25 11:51:58,169 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1127
[2020-11-25 11:51:58,169 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4036 states and 4786 transitions.
[2020-11-25 11:51:58,172 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:51:58,173 INFO  L728         BuchiCegarLoop]: Abstraction has 4036 states and 4786 transitions.
[2020-11-25 11:51:58,176 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4036 states and 4786 transitions.
[2020-11-25 11:51:58,199 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4036 to 4036.
[2020-11-25 11:51:58,199 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4036 states.
[2020-11-25 11:51:58,203 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4036 states to 4036 states and 4786 transitions.
[2020-11-25 11:51:58,203 INFO  L751         BuchiCegarLoop]: Abstraction has 4036 states and 4786 transitions.
[2020-11-25 11:51:58,203 INFO  L631         BuchiCegarLoop]: Abstraction has 4036 states and 4786 transitions.
[2020-11-25 11:51:58,203 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 11:51:58,203 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4036 states and 4786 transitions.
[2020-11-25 11:51:58,208 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:51:58,208 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:51:58,208 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:51:58,209 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:51:58,209 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND FALSE  !(DType[this] == CabGoldToken)
[L3681]  COND TRUE   DType[this] == ERC20Mintable
[L3682]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3682]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3683]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND TRUE   choice == 15
[L6357]              gas := gas - 21000;
[L6358]  COND TRUE   gas >= 0
[L6359]              assume msgvalue_MSG == 0;
[L6360]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowances_ERC20[this][owner_s271][spender_s271] >= 0 && _allowances_ERC20[this][owner_s271][spender_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L477]               havoc __exception;
[L478]               revert := false;
[L479]   COND TRUE   __exception
[L480]               __tmp__Balance := Balance;
[L481]               __tmp__DType := DType;
[L482]               __tmp__Alloc := Alloc;
[L483]               __tmp__balance_ADDR := balance_ADDR;
[L484]               __tmp__M_Ref_int := M_Ref_int;
[L485]               __tmp__sum__balances0 := sum__balances0;
[L486]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L487]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L488]               __tmp__sum__allowances1 := sum__allowances1;
[L489]               __tmp__M_Ref_bool := M_Ref_bool;
[L490]               __tmp__sum := sum;
[L491]               __tmp__Length := Length;
[L492]               __tmp__now := now;
[L493]               __tmp___balances_ERC20 := _balances_ERC20;
[L494]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L495]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L496]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L497]               __tmp___minters_MinterRole := _minters_MinterRole;
[L498]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L499]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L500]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L501]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L502]   CALL        call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L2888]              __ret_0_ := __tmp___allowances_ERC20[this][owner_s271][spender_s271];
[L502]   RET         call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L503]               assume revert || gas < 0;
[L6360]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND TRUE   choice == 15
[L6357]              gas := gas - 21000;
[L6358]  COND TRUE   gas >= 0
[L6359]              assume msgvalue_MSG == 0;
[L6360]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowances_ERC20[this][owner_s271][spender_s271] >= 0 && _allowances_ERC20[this][owner_s271][spender_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L477]               havoc __exception;
[L478]               revert := false;
[L479]   COND TRUE   __exception
[L480]               __tmp__Balance := Balance;
[L481]               __tmp__DType := DType;
[L482]               __tmp__Alloc := Alloc;
[L483]               __tmp__balance_ADDR := balance_ADDR;
[L484]               __tmp__M_Ref_int := M_Ref_int;
[L485]               __tmp__sum__balances0 := sum__balances0;
[L486]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L487]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L488]               __tmp__sum__allowances1 := sum__allowances1;
[L489]               __tmp__M_Ref_bool := M_Ref_bool;
[L490]               __tmp__sum := sum;
[L491]               __tmp__Length := Length;
[L492]               __tmp__now := now;
[L493]               __tmp___balances_ERC20 := _balances_ERC20;
[L494]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L495]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L496]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L497]               __tmp___minters_MinterRole := _minters_MinterRole;
[L498]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L499]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L500]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L501]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L502]   CALL        call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L2888]              __ret_0_ := __tmp___allowances_ERC20[this][owner_s271][spender_s271];
[L502]   RET         call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L503]               assume revert || gas < 0;
[L6360]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:51:58,213 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:51:58,213 INFO  L82        PathProgramCache]: Analyzing trace with hash 2123707147, now seen corresponding path program 1 times
[2020-11-25 11:51:58,214 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:51:58,223 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:51:58,281 INFO  L134       CoverageAnalysis]: Checked inductivity of 261 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 255 trivial. 0 not checked.
[2020-11-25 11:51:58,282 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:51:58,282 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 11:51:58,282 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:51:58,282 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 11:51:58,282 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 11:51:58,282 INFO  L87              Difference]: Start difference. First operand 4036 states and 4786 transitions. cyclomatic complexity: 752 Second operand 7 states.
[2020-11-25 11:51:58,363 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:51:58,363 INFO  L93              Difference]: Finished difference Result 4053 states and 4805 transitions.
[2020-11-25 11:51:58,363 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 11:51:58,363 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4053 states and 4805 transitions.
[2020-11-25 11:51:58,371 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:51:58,380 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4053 states to 4025 states and 4773 transitions.
[2020-11-25 11:51:58,380 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1127
[2020-11-25 11:51:58,380 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1127
[2020-11-25 11:51:58,380 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4025 states and 4773 transitions.
[2020-11-25 11:51:58,383 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:51:58,383 INFO  L728         BuchiCegarLoop]: Abstraction has 4025 states and 4773 transitions.
[2020-11-25 11:51:58,386 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4025 states and 4773 transitions.
[2020-11-25 11:51:58,408 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4025 to 4025.
[2020-11-25 11:51:58,409 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4025 states.
[2020-11-25 11:51:58,413 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4025 states to 4025 states and 4773 transitions.
[2020-11-25 11:51:58,413 INFO  L751         BuchiCegarLoop]: Abstraction has 4025 states and 4773 transitions.
[2020-11-25 11:51:58,413 INFO  L631         BuchiCegarLoop]: Abstraction has 4025 states and 4773 transitions.
[2020-11-25 11:51:58,413 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 11:51:58,413 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4025 states and 4773 transitions.
[2020-11-25 11:51:58,418 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:51:58,419 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:51:58,419 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:51:58,420 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:51:58,420 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L6461]              assume null == 0;
[L6462]  CALL        call this := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L6462]  RET         call this := FreshRefGenerator__success();
[L6463]              assume now >= 0;
[L6464]              assume DType[this] == CabGoldToken;
[L6465]              assume msgvalue_MSG == 0;
[L6466]              gas := gas - 53000;
[L6467]  CALL        call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4138]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4142]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4146]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L4146]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4147]  COND FALSE  !(revert)
[L4150]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L3904]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L3904]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3905]  COND FALSE  !(revert)
[L3908]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L3908]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3909]  COND FALSE  !(revert)
[L3912]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3667]              assume msgsender_MSG != null;
[L3668]              Balance[this] := 0;
[L3670]  CALL        call __var_20 := FreshRefGenerator__success();
[L2550]              havoc newRef;
[L2551]              assume Alloc[newRef] == false;
[L2552]              Alloc[newRef] := true;
[L2553]              assume newRef != null;
[L3670]  RET         call __var_20 := FreshRefGenerator__success();
[L3671]  COND FALSE  !(revert)
[L3674]              _minters_MinterRole[this] := __var_20;
[L3676]  COND TRUE   DType[this] == CabGoldToken
[L3677]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3842]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3567]  CALL        call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3621]              __var_19 := null;
[L3622]  COND FALSE  !(!(account_s670 != null))
[L3626]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s670]][account_s670];
[L3567]  RET         call __var_17 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s622, account_s622);
[L3568]  COND FALSE  !(revert)
[L3571]  COND FALSE  !(!!__var_17)
[L3575]              M_Ref_bool[bearer_Roles.Role[role_s622]][account_s622] := true;
[L3842]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s755);
[L3843]  COND FALSE  !(revert)
[L3846]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L3677]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L3678]  COND FALSE  !(revert)
[L3708]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3709]  COND FALSE  !(revert)
[L3912]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L3913]  COND FALSE  !(revert)
[L3916]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3877]              assume msgsender_MSG != null;
[L3878]              Balance[this] := 0;
[L3916]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4002]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L4002]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4003]  COND FALSE  !(revert)
[L4006]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2748]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2733]              assume msgsender_MSG != null;
[L2734]              Balance[this] := 0;
[L2748]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2749]  COND FALSE  !(revert)
[L2794]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2798]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              Balance[this] := 0;
[L2772]              _balances_ERC20[this] := zeroRefintArr();
[L2773]              sum__balances0[this] := 0;
[L2774]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2775]              sum__allowances1[this] := 0;
[L2776]              _totalSupply_ERC20[this] := 0;
[L2798]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2799]  COND FALSE  !(revert)
[L4006]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  COND FALSE  !(revert)
[L4010]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]              assume msgsender_MSG != null;
[L3980]              Balance[this] := 0;
[L4010]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4011]  COND FALSE  !(revert)
[L4154]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4158]  CALL        call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4099]              assume msgsender_MSG != null;
[L4100]              Balance[this] := 0;
[L4101]              name_CabGoldToken[this] := -1569364958;
[L4102]              symbol_CabGoldToken[this] := 1094563867;
[L4103]              decimals_CabGoldToken[this] := 18;
[L4104]              active_CabGoldToken[this] := false;
[L4158]  RET         call CabGoldToken_CabGoldToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4159]  COND FALSE  !(revert)
[L6467]  RET         call CabGoldToken_CabGoldToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6468]              assume !revert && gas >= 0;
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND TRUE   choice == 15
[L6357]              gas := gas - 21000;
[L6358]  COND TRUE   gas >= 0
[L6359]              assume msgvalue_MSG == 0;
[L6360]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowances_ERC20[this][owner_s271][spender_s271] >= 0 && _allowances_ERC20[this][owner_s271][spender_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L477]               havoc __exception;
[L478]               revert := false;
[L479]   COND TRUE   __exception
[L480]               __tmp__Balance := Balance;
[L481]               __tmp__DType := DType;
[L482]               __tmp__Alloc := Alloc;
[L483]               __tmp__balance_ADDR := balance_ADDR;
[L484]               __tmp__M_Ref_int := M_Ref_int;
[L485]               __tmp__sum__balances0 := sum__balances0;
[L486]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L487]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L488]               __tmp__sum__allowances1 := sum__allowances1;
[L489]               __tmp__M_Ref_bool := M_Ref_bool;
[L490]               __tmp__sum := sum;
[L491]               __tmp__Length := Length;
[L492]               __tmp__now := now;
[L493]               __tmp___balances_ERC20 := _balances_ERC20;
[L494]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L495]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L496]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L497]               __tmp___minters_MinterRole := _minters_MinterRole;
[L498]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L499]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L500]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L501]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L502]   CALL        call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L2888]              __ret_0_ := __tmp___allowances_ERC20[this][owner_s271][spender_s271];
[L502]   RET         call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L503]               assume revert || gas < 0;
[L6360]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

Loop:
[L6471]  CALL        call CorralChoice_CabGoldToken(this);
[L6283]              havoc msgsender_MSG;
[L6284]              havoc msgvalue_MSG;
[L6285]              havoc choice;
[L6286]              havoc __ret_0_totalSupply;
[L6287]              havoc account_s236;
[L6288]              havoc __ret_0_balanceOf;
[L6289]              havoc recipient_s255;
[L6290]              havoc amount_s255;
[L6291]              havoc __ret_0_transfer;
[L6292]              havoc owner_s271;
[L6293]              havoc spender_s271;
[L6294]              havoc __ret_0_allowance;
[L6295]              havoc spender_s290;
[L6296]              havoc value_s290;
[L6297]              havoc __ret_0_approve;
[L6298]              havoc sender_s325;
[L6299]              havoc recipient_s325;
[L6300]              havoc amount_s325;
[L6301]              havoc __ret_0_transferFrom;
[L6302]              havoc spender_s352;
[L6303]              havoc addedValue_s352;
[L6304]              havoc __ret_0_increaseAllowance;
[L6305]              havoc spender_s379;
[L6306]              havoc subtractedValue_s379;
[L6307]              havoc __ret_0_decreaseAllowance;
[L6308]              havoc account_s718;
[L6309]              havoc __ret_0_isMinter;
[L6310]              havoc account_s730;
[L6311]              havoc account_s795;
[L6312]              havoc amount_s795;
[L6313]              havoc __ret_0_mint;
[L6314]              havoc amount_s810;
[L6315]              havoc account_s823;
[L6316]              havoc amount_s823;
[L6317]              havoc __ret_0_name;
[L6318]              havoc __ret_0_symbol;
[L6319]              havoc __ret_0_decimals;
[L6320]              havoc __ret_0_active;
[L6321]              havoc tmpNow;
[L6322]              havoc gas;
[L6323]              assume gas > 4000000 && gas <= 8000000;
[L6324]              tmpNow := now;
[L6325]              havoc now;
[L6326]              assume now > tmpNow;
[L6327]              assume msgsender_MSG != null;
[L6328]              assume DType[msgsender_MSG] != SafeMath;
[L6329]              assume DType[msgsender_MSG] != IERC20;
[L6330]              assume DType[msgsender_MSG] != ERC20;
[L6331]              assume DType[msgsender_MSG] != Roles;
[L6332]              assume DType[msgsender_MSG] != MinterRole;
[L6333]              assume DType[msgsender_MSG] != ERC20Mintable;
[L6334]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6335]              assume DType[msgsender_MSG] != CabGoldToken;
[L6336]              Alloc[msgsender_MSG] := true;
[L6337]  COND FALSE  !(choice == 18)
[L6343]  COND FALSE  !(choice == 17)
[L6349]  COND FALSE  !(choice == 16)
[L6356]  COND TRUE   choice == 15
[L6357]              gas := gas - 21000;
[L6358]  COND TRUE   gas >= 0
[L6359]              assume msgvalue_MSG == 0;
[L6360]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowances_ERC20[this][owner_s271][spender_s271] >= 0 && _allowances_ERC20[this][owner_s271][spender_s271] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L477]               havoc __exception;
[L478]               revert := false;
[L479]   COND TRUE   __exception
[L480]               __tmp__Balance := Balance;
[L481]               __tmp__DType := DType;
[L482]               __tmp__Alloc := Alloc;
[L483]               __tmp__balance_ADDR := balance_ADDR;
[L484]               __tmp__M_Ref_int := M_Ref_int;
[L485]               __tmp__sum__balances0 := sum__balances0;
[L486]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L487]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L488]               __tmp__sum__allowances1 := sum__allowances1;
[L489]               __tmp__M_Ref_bool := M_Ref_bool;
[L490]               __tmp__sum := sum;
[L491]               __tmp__Length := Length;
[L492]               __tmp__now := now;
[L493]               __tmp___balances_ERC20 := _balances_ERC20;
[L494]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L495]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L496]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L497]               __tmp___minters_MinterRole := _minters_MinterRole;
[L498]               __tmp__name_CabGoldToken := name_CabGoldToken;
[L499]               __tmp__symbol_CabGoldToken := symbol_CabGoldToken;
[L500]               __tmp__decimals_CabGoldToken := decimals_CabGoldToken;
[L501]               __tmp__active_CabGoldToken := active_CabGoldToken;
[L502]   CALL        call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L2888]              __ret_0_ := __tmp___allowances_ERC20[this][owner_s271][spender_s271];
[L502]   RET         call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L503]               assume revert || gas < 0;
[L6360]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s271, spender_s271);
[L6471]  RET         call CorralChoice_CabGoldToken(this);

[2020-11-25 11:51:58,424 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:51:58,424 INFO  L82        PathProgramCache]: Analyzing trace with hash -1863126526, now seen corresponding path program 1 times
[2020-11-25 11:51:58,425 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:51:58,448 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:51:58,501 INFO  L134       CoverageAnalysis]: Checked inductivity of 265 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 265 trivial. 0 not checked.
[2020-11-25 11:51:58,501 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:51:58,501 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 11:51:58,501 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:51:58,501 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 11:51:58,502 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 11:51:58,502 INFO  L87              Difference]: Start difference. First operand 4025 states and 4773 transitions. cyclomatic complexity: 750 Second operand 5 states.
[2020-11-25 11:51:58,795 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:51:58,795 INFO  L93              Difference]: Finished difference Result 2441 states and 2788 transitions.
[2020-11-25 11:51:58,795 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 11:51:58,795 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2441 states and 2788 transitions.
[2020-11-25 11:51:58,800 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 11:51:58,800 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2441 states to 0 states and 0 transitions.
[2020-11-25 11:51:58,800 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 11:51:58,800 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 11:51:58,800 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 11:51:58,800 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:51:58,800 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:51:58,800 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:51:58,800 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:51:58,800 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 11:51:58,800 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 11:51:58,800 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 11:51:58,800 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 11:51:58,803 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 11:51:58 BasicIcfg
[2020-11-25 11:51:58,803 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 11:51:58,804 INFO  L168              Benchmark]: Toolchain (without parser) took 6101.36 ms. Allocated memory was 1.0 GB in the beginning and 1.9 GB in the end (delta: 833.6 MB). Free memory was 929.8 MB in the beginning and 1.4 GB in the end (delta: -443.7 MB). Peak memory consumption was 389.9 MB. Max. memory is 15.3 GB.
[2020-11-25 11:51:58,805 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 11:51:58,805 INFO  L168              Benchmark]: Boogie Preprocessor took 110.39 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 11:51:58,805 INFO  L168              Benchmark]: UtopiaSpecLang took 61.89 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 11:51:58,805 INFO  L168              Benchmark]: Boogie Printer took 19.83 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 11:51:58,806 INFO  L168              Benchmark]: RCFGBuilder took 987.85 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 48.2 MB). Free memory was 903.0 MB in the beginning and 988.0 MB in the end (delta: -85.0 MB). Peak memory consumption was 189.9 MB. Max. memory is 15.3 GB.
[2020-11-25 11:51:58,806 INFO  L168              Benchmark]: UtopiaLTL2Aut took 41.29 ms. Allocated memory is still 1.1 GB. Free memory was 988.0 MB in the beginning and 981.4 MB in the end (delta: 6.6 MB). Peak memory consumption was 6.6 MB. Max. memory is 15.3 GB.
[2020-11-25 11:51:58,806 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1776.37 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 176.2 MB). Free memory was 981.4 MB in the beginning and 973.5 MB in the end (delta: 7.9 MB). Peak memory consumption was 520.7 MB. Max. memory is 15.3 GB.
[2020-11-25 11:51:58,807 INFO  L168              Benchmark]: BlockEncodingV2 took 165.89 ms. Allocated memory is still 1.3 GB. Free memory was 973.5 MB in the beginning and 880.1 MB in the end (delta: 93.4 MB). Peak memory consumption was 93.4 MB. Max. memory is 15.3 GB.
[2020-11-25 11:51:58,807 INFO  L168              Benchmark]: BuchiAutomizer took 2935.02 ms. Allocated memory was 1.3 GB in the beginning and 1.9 GB in the end (delta: 609.2 MB). Free memory was 880.1 MB in the beginning and 1.4 GB in the end (delta: -493.4 MB). Peak memory consumption was 115.8 MB. Max. memory is 15.3 GB.
[2020-11-25 11:51:58,809 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5916 locations, 11051 edges
  - StatisticsResult: Encoded RCFG
    5808 locations, 10756 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 110.39 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 61.89 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 19.83 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 987.85 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 48.2 MB). Free memory was 903.0 MB in the beginning and 988.0 MB in the end (delta: -85.0 MB). Peak memory consumption was 189.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 41.29 ms. Allocated memory is still 1.1 GB. Free memory was 988.0 MB in the beginning and 981.4 MB in the end (delta: 6.6 MB). Peak memory consumption was 6.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1776.37 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 176.2 MB). Free memory was 981.4 MB in the beginning and 973.5 MB in the end (delta: 7.9 MB). Peak memory consumption was 520.7 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 165.89 ms. Allocated memory is still 1.3 GB. Free memory was 973.5 MB in the beginning and 880.1 MB in the end (delta: 93.4 MB). Peak memory consumption was 93.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 2935.02 ms. Allocated memory was 1.3 GB in the beginning and 1.9 GB in the end (delta: 609.2 MB). Free memory was 880.1 MB in the beginning and 1.4 GB in the end (delta: -493.4 MB). Peak memory consumption was 115.8 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2279 locations, 3353 edges
  - StatisticsResult: BuchiProgram size
    5916 locations, 11051 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 8 terminating modules (8 trivial, 0 deterministic, 0 nondeterministic). 8 modules have a trivial ranking function, the largest among these consists of 7 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 2.9s and 9 iterations.  TraceHistogramMax:6. Analysis of lassos took 0.9s. Construction of modules took 0.6s. BÃ¼chi inclusion checks took 0.5s. Highest rank in rank-based complementation 0. Minimization of det autom 8. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 7 MinimizatonAttempts, 386 StatesRemovedByMinimization, 2 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 4052 states and ocurred in iteration 3.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 32004 SDtfs, 9599 SDslu, 84814 SDs, 0 SdLazy, 6287 SolverSat, 3160 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 0.6s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU8 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_allowance_ERC200) ==> ( <>(success_allowance_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
