This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 00:12:24,560 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 00:12:24,561 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 00:12:24,569 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 00:12:24,569 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 00:12:24,569 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 00:12:24,570 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 00:12:24,571 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 00:12:24,572 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 00:12:24,572 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 00:12:24,573 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 00:12:24,573 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 00:12:24,574 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 00:12:24,574 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 00:12:24,575 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 00:12:24,576 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 00:12:24,576 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 00:12:24,577 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 00:12:24,579 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 00:12:24,580 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 00:12:24,581 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 00:12:24,582 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 00:12:24,583 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 00:12:24,583 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 00:12:24,583 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 00:12:24,584 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 00:12:24,584 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 00:12:24,585 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 00:12:24,585 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 00:12:24,585 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 00:12:24,585 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 00:12:24,585 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 00:12:24,586 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 00:12:24,586 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 00:12:24,587 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 00:12:24,587 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 00:12:24,587 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 00:12:24,587 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 00:12:24,587 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 00:12:24,588 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 00:12:24,588 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 00:12:24,588 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 00:12:24,594 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 00:12:24,594 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 00:12:24,595 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 00:12:24,595 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 00:12:24,595 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 00:12:24,595 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 00:12:24,595 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 00:12:24,595 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 00:12:24,595 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 00:12:24,595 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 00:12:24,595 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 00:12:24,595 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 00:12:24,595 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 00:12:24,595 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 00:12:24,596 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 00:12:24,596 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 00:12:24,596 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 00:12:24,596 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 00:12:24,596 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 00:12:24,596 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 00:12:24,596 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 00:12:24,596 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 00:12:24,596 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 00:12:24,596 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 00:12:24,596 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 00:12:24,596 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 00:12:24,613 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 00:12:24,624 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 00:12:24,627 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 00:12:24,629 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 00:12:24,629 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 00:12:24,630 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transfer-self.bpl
[2020-11-25 00:12:24,630 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transfer-self.bpl'
[2020-11-25 00:12:24,716 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 00:12:24,717 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 00:12:24,717 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 00:12:24,717 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 00:12:24,717 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 00:12:24,733 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:12:24" (1/1) ...
[2020-11-25 00:12:24,735 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:12:24" (1/1) ...
[2020-11-25 00:12:24,764 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:12:24" (1/1) ...
[2020-11-25 00:12:24,765 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:12:24" (1/1) ...
[2020-11-25 00:12:24,783 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:12:24" (1/1) ...
[2020-11-25 00:12:24,792 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:12:24" (1/1) ...
[2020-11-25 00:12:24,798 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:12:24" (1/1) ...
[2020-11-25 00:12:24,807 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 00:12:24,807 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 00:12:24,807 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 00:12:24,809 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 00:12:24,813 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:12:24" (1/1) ...
[2020-11-25 00:12:24,831 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(BazToken.transfer(to, value), msg.sender == to && value <= balances_BazToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BazToken[this][to] >= 0 && balances_BazToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BazToken[this][msg.sender] >= 0 &&  balances_BazToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BazToken.transfer(to, value), return == true && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this]) && balances_BazToken[this] == old(balances_BazToken[this]) && allowed_BazToken[this] == old(allowed_BazToken[this]) && symbol_BazToken[this] == old(symbol_BazToken[this]) && name_BazToken[this] == old(name_BazToken[this]) && decimals_BazToken[this] == old(decimals_BazToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 00:12:24,837 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(BazToken.transfer(to, value), msg.sender == to && value <= balances_BazToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BazToken[this][to] >= 0 && balances_BazToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BazToken[this][msg.sender] >= 0 &&  balances_BazToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BazToken.transfer(to, value), return == true && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this]) && balances_BazToken[this] == old(balances_BazToken[this]) && allowed_BazToken[this] == old(allowed_BazToken[this]) && symbol_BazToken[this] == old(symbol_BazToken[this]) && name_BazToken[this] == old(name_BazToken[this]) && decimals_BazToken[this] == old(decimals_BazToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 00:12:24,844 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(BazToken.transfer(to, value), msg.sender == to && value <= balances_BazToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BazToken[this][to] >= 0 && balances_BazToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BazToken[this][msg.sender] >= 0 &&  balances_BazToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BazToken.transfer(to, value), return == true && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this]) && balances_BazToken[this] == old(balances_BazToken[this]) && allowed_BazToken[this] == old(allowed_BazToken[this]) && symbol_BazToken[this] == old(symbol_BazToken[this]) && name_BazToken[this] == old(name_BazToken[this]) && decimals_BazToken[this] == old(decimals_BazToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 00:12:24,851 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s371 && tokens_s371<=balances_BazToken[this][msg.sender] ) && tokens_s371>=0 ) && tokens_s371<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BazToken[this][to_s371]>=0 ) && balances_BazToken[this][to_s371]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BazToken[this][msg.sender]>=0 ) && balances_BazToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>],IdentifierExpression[to_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>]]],[IdentifierExpression[to_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>]]],[IdentifierExpression[to_s371,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 00:12:24,853 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( success_s371==true && _totalSupply_BazToken[this]==( old(_totalSupply_BazToken[this]) ) ) && balances_BazToken[this]==( old(balances_BazToken[this]) ) ) && allowed_BazToken[this]==( old(allowed_BazToken[this]) ) ) && symbol_BazToken[this]==( old(symbol_BazToken[this]) ) ) && name_BazToken[this]==( old(name_BazToken[this]) ) ) && decimals_BazToken[this]==( old(decimals_BazToken[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s371,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_BazToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BazToken>]]]]]]
[2020-11-25 00:12:24,858 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(BazToken.transfer(to, value), msg.sender == to && value <= balances_BazToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BazToken[this][to] >= 0 && balances_BazToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BazToken[this][msg.sender] >= 0 &&  balances_BazToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BazToken.transfer(to, value), return == true && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this]) && balances_BazToken[this] == old(balances_BazToken[this]) && allowed_BazToken[this] == old(allowed_BazToken[this]) && symbol_BazToken[this] == old(symbol_BazToken[this]) && name_BazToken[this] == old(name_BazToken[this]) && decimals_BazToken[this] == old(decimals_BazToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 00:12:24,858 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_BazToken0) ==> ( <>AP(success_transfer_BazToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 00:12:24,865 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:12:24 PropertyContainer
[2020-11-25 00:12:24,866 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 00:12:24,866 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 00:12:24,866 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 00:12:24,866 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 00:12:24,867 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:12:24" (1/2) ...
[2020-11-25 00:12:24,867 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 00:12:24,867 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 00:12:24,880 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:12:24" (2/2) ...
[2020-11-25 00:12:24,880 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 00:12:24,880 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 00:12:24,881 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 00:12:24,881 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 00:12:24,881 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:12:24" (1/2) ...
[2020-11-25 00:12:24,931 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 00:12:24,931 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 00:12:24,931 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 00:12:24,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 00:12:24,932 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 00:12:24,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 00:12:24,932 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 00:12:24,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 00:12:24,932 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 00:12:24,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 00:12:24,932 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 00:12:24,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 00:12:24,932 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 00:12:24,932 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 00:12:24,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 00:12:24,933 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 00:12:24,933 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 00:12:24,933 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 00:12:24,933 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 00:12:24,933 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 00:12:24,933 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 00:12:24,933 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 00:12:24,933 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 00:12:24,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 00:12:24,934 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 00:12:24,934 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 00:12:24,934 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 00:12:24,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 00:12:24,934 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 00:12:24,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 00:12:24,934 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 00:12:24,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 00:12:24,934 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 00:12:24,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 00:12:24,934 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 00:12:24,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 00:12:24,935 INFO  L130     BoogieDeclarations]: Found specification of procedure BazToken_BazToken_NoBaseCtor__success
[2020-11-25 00:12:24,935 INFO  L130     BoogieDeclarations]: Found specification of procedure BazToken_BazToken
[2020-11-25 00:12:24,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure BazToken_BazToken
[2020-11-25 00:12:24,935 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BazToken
[2020-11-25 00:12:24,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BazToken
[2020-11-25 00:12:24,935 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BazToken
[2020-11-25 00:12:24,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BazToken
[2020-11-25 00:12:24,935 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BazToken
[2020-11-25 00:12:24,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BazToken
[2020-11-25 00:12:24,935 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_BazToken
[2020-11-25 00:12:24,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_BazToken
[2020-11-25 00:12:24,935 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BazToken
[2020-11-25 00:12:24,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BazToken
[2020-11-25 00:12:24,935 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_BazToken
[2020-11-25 00:12:24,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_BazToken
[2020-11-25 00:12:24,936 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_BazToken
[2020-11-25 00:12:24,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_BazToken
[2020-11-25 00:12:24,936 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_BazToken__success
[2020-11-25 00:12:24,936 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_BazToken
[2020-11-25 00:12:24,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_BazToken
[2020-11-25 00:12:24,936 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_BazToken
[2020-11-25 00:12:24,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_BazToken
[2020-11-25 00:12:24,936 INFO  L130     BoogieDeclarations]: Found specification of procedure name_BazToken
[2020-11-25 00:12:24,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_BazToken
[2020-11-25 00:12:24,936 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_BazToken
[2020-11-25 00:12:24,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_BazToken
[2020-11-25 00:12:24,937 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_BazToken
[2020-11-25 00:12:24,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_BazToken
[2020-11-25 00:12:24,937 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 00:12:24,937 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 00:12:24,937 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 00:12:24,937 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 00:12:24,937 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 00:12:24,937 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 00:12:24,937 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 00:12:24,938 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 00:12:24,938 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 00:12:24,938 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 00:12:24,938 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 00:12:24,938 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 00:12:24,938 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BazToken
[2020-11-25 00:12:24,938 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 00:12:24,938 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 00:12:24,938 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 00:12:24,939 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 00:12:24,939 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 00:12:24,939 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 00:12:24,939 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 00:12:24,939 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 00:12:24,939 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 00:12:24,939 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 00:12:24,939 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 00:12:24,939 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 00:12:24,939 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 00:12:24,940 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 00:12:24,940 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 00:12:24,940 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 00:12:24,940 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 00:12:24,940 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 00:12:24,940 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 00:12:24,940 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 00:12:24,940 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 00:12:24,940 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 00:12:24,940 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 00:12:24,940 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 00:12:24,941 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 00:12:24,941 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 00:12:24,941 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 00:12:24,941 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 00:12:24,941 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 00:12:24,941 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 00:12:24,941 INFO  L130     BoogieDeclarations]: Found specification of procedure BazToken_BazToken_NoBaseCtor__fail
[2020-11-25 00:12:24,941 INFO  L130     BoogieDeclarations]: Found specification of procedure BazToken_BazToken__success
[2020-11-25 00:12:24,941 INFO  L130     BoogieDeclarations]: Found specification of procedure BazToken_BazToken__fail
[2020-11-25 00:12:24,941 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BazToken__success
[2020-11-25 00:12:24,942 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BazToken__fail
[2020-11-25 00:12:24,942 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BazToken__success
[2020-11-25 00:12:24,942 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BazToken__fail
[2020-11-25 00:12:24,942 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BazToken__success
[2020-11-25 00:12:24,942 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BazToken__fail
[2020-11-25 00:12:24,942 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_BazToken__success
[2020-11-25 00:12:24,942 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_BazToken__fail
[2020-11-25 00:12:24,943 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BazToken__success
[2020-11-25 00:12:24,943 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BazToken__fail
[2020-11-25 00:12:24,943 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_BazToken__success
[2020-11-25 00:12:24,943 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_BazToken__fail
[2020-11-25 00:12:24,943 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_BazToken__success
[2020-11-25 00:12:24,943 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_BazToken__fail
[2020-11-25 00:12:24,943 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_BazToken__fail
[2020-11-25 00:12:24,943 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_BazToken__success
[2020-11-25 00:12:24,943 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_BazToken__fail
[2020-11-25 00:12:24,944 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_BazToken__success
[2020-11-25 00:12:24,944 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_BazToken__fail
[2020-11-25 00:12:24,944 INFO  L130     BoogieDeclarations]: Found specification of procedure name_BazToken__success
[2020-11-25 00:12:24,944 INFO  L130     BoogieDeclarations]: Found specification of procedure name_BazToken__fail
[2020-11-25 00:12:24,944 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_BazToken__success
[2020-11-25 00:12:24,944 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_BazToken__fail
[2020-11-25 00:12:24,944 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_BazToken__success
[2020-11-25 00:12:24,945 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_BazToken__fail
[2020-11-25 00:12:24,945 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 00:12:24,945 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 00:12:24,945 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 00:12:24,945 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 00:12:24,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 00:12:24,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 00:12:24,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 00:12:24,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 00:12:24,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 00:12:24,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 00:12:24,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 00:12:24,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 00:12:24,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 00:12:24,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 00:12:24,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 00:12:24,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 00:12:24,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 00:12:24,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 00:12:24,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 00:12:24,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 00:12:24,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 00:12:24,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 00:12:24,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 00:12:24,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 00:12:24,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 00:12:24,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 00:12:24,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 00:12:24,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 00:12:24,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 00:12:24,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 00:12:24,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 00:12:24,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 00:12:24,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 00:12:24,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 00:12:24,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 00:12:24,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 00:12:24,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 00:12:24,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 00:12:24,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure BazToken_BazToken_NoBaseCtor__fail
[2020-11-25 00:12:24,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure BazToken_BazToken_NoBaseCtor__success
[2020-11-25 00:12:24,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure BazToken_BazToken__fail
[2020-11-25 00:12:24,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure BazToken_BazToken__success
[2020-11-25 00:12:24,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BazToken__fail
[2020-11-25 00:12:24,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BazToken__success
[2020-11-25 00:12:24,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BazToken__fail
[2020-11-25 00:12:24,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BazToken__success
[2020-11-25 00:12:24,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BazToken__fail
[2020-11-25 00:12:24,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BazToken__success
[2020-11-25 00:12:24,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_BazToken__fail
[2020-11-25 00:12:24,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_BazToken__success
[2020-11-25 00:12:24,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BazToken__fail
[2020-11-25 00:12:24,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BazToken__success
[2020-11-25 00:12:24,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_BazToken__fail
[2020-11-25 00:12:24,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_BazToken__success
[2020-11-25 00:12:24,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_BazToken__fail
[2020-11-25 00:12:24,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_BazToken__success
[2020-11-25 00:12:24,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_BazToken__fail
[2020-11-25 00:12:24,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_BazToken__success
[2020-11-25 00:12:24,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_BazToken__fail
[2020-11-25 00:12:24,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_BazToken__success
[2020-11-25 00:12:24,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_BazToken__fail
[2020-11-25 00:12:24,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_BazToken__success
[2020-11-25 00:12:24,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_BazToken__fail
[2020-11-25 00:12:24,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_BazToken__success
[2020-11-25 00:12:24,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_BazToken__fail
[2020-11-25 00:12:24,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_BazToken__success
[2020-11-25 00:12:24,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_BazToken__fail
[2020-11-25 00:12:24,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_BazToken__success
[2020-11-25 00:12:24,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 00:12:24,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 00:12:24,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 00:12:24,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 00:12:24,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 00:12:24,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 00:12:24,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 00:12:24,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 00:12:24,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 00:12:24,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 00:12:24,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 00:12:24,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 00:12:24,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 00:12:24,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 00:12:24,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 00:12:24,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 00:12:24,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BazToken
[2020-11-25 00:12:24,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 00:12:24,953 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 00:12:24,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 00:12:25,177 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 00:12:25,177 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 00:12:25,178 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 00:12:25,640 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 00:12:25,641 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 00:12:25,643 INFO  L202        PluginConnector]: Adding new model BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:12:25 BoogieIcfgContainer
[2020-11-25 00:12:25,643 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:12:24" (2/2) ...
[2020-11-25 00:12:25,643 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 00:12:25,643 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@6aa83d70 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:12:25, skipping insertion in model container
[2020-11-25 00:12:25,643 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 00:12:25,644 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 00:12:25,644 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 00:12:25,645 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 00:12:25,645 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:12:24" (1/3) ...
[2020-11-25 00:12:25,646 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@78855795 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:12:25, skipping insertion in model container
[2020-11-25 00:12:25,646 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:12:24" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 00:12:25,685 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:12:25 NWAContainer
[2020-11-25 00:12:25,685 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 00:12:25,685 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 00:12:25,685 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 00:12:25,686 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 00:12:25,687 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:12:25" (3/4) ...
[2020-11-25 00:12:25,688 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@730f58c6 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:12:25, skipping insertion in model container
[2020-11-25 00:12:25,688 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:12:25" (4/4) ...
[2020-11-25 00:12:25,691 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 00:12:25,695 INFO  L110   BuchiProductObserver]: Initial RCFG 1563 locations, 1975 edges
[2020-11-25 00:12:25,696 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 00:12:25,709 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 00:12:27,110 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 00:12:27,114 INFO  L110   BuchiProductObserver]: BuchiProgram size 3718 locations, 6399 edges
[2020-11-25 00:12:27,115 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:12:27 BoogieIcfgContainer
[2020-11-25 00:12:27,115 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 00:12:27,115 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 00:12:27,115 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 00:12:27,116 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 00:12:27,117 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:12:27" (1/1) ...
[2020-11-25 00:12:27,195 INFO  L313           BlockEncoder]: Initial Icfg 3718 locations, 6399 edges
[2020-11-25 00:12:27,195 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 00:12:27,196 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 00:12:27,196 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 00:12:27,196 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 00:12:27,209 INFO  L70    emoveInfeasibleEdges]: Removed 90 edges and 13 locations because of local infeasibility
[2020-11-25 00:12:27,218 INFO  L70        RemoveSinkStates]: Removed 38 edges and 25 locations by removing sink states
[2020-11-25 00:12:27,231 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 00:12:27,235 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 00:12:27,238 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 00:12:27,239 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 00:12:27,243 INFO  L313           BlockEncoder]: Encoded RCFG 3658 locations, 6239 edges
[2020-11-25 00:12:27,244 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:12:27 BasicIcfg
[2020-11-25 00:12:27,244 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 00:12:27,244 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 00:12:27,244 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 00:12:27,246 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 00:12:27,247 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:12:27,247 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:12:24" (1/6) ...
[2020-11-25 00:12:27,249 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@54af69b4 and model type BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:12:27, skipping insertion in model container
[2020-11-25 00:12:27,249 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:12:27,249 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:12:24" (2/6) ...
[2020-11-25 00:12:27,249 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@54af69b4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:12:27, skipping insertion in model container
[2020-11-25 00:12:27,249 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:12:27,249 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:12:25" (3/6) ...
[2020-11-25 00:12:27,250 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@54af69b4 and model type BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:12:27, skipping insertion in model container
[2020-11-25 00:12:27,250 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:12:27,250 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:12:25" (4/6) ...
[2020-11-25 00:12:27,250 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@54af69b4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:12:27, skipping insertion in model container
[2020-11-25 00:12:27,250 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:12:27,250 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:12:27" (5/6) ...
[2020-11-25 00:12:27,250 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@54af69b4 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 12:12:27, skipping insertion in model container
[2020-11-25 00:12:27,250 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:12:27,250 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:12:27" (6/6) ...
[2020-11-25 00:12:27,251 INFO  L404   chiAutomizerObserver]: Analyzing ICFG BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transfer-self.bpl_BEv2
[2020-11-25 00:12:27,298 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 00:12:27,299 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 00:12:27,299 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 00:12:27,299 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 00:12:27,299 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 00:12:27,299 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 00:12:27,299 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 00:12:27,299 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 00:12:27,299 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 00:12:27,338 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3658 states.
[2020-11-25 00:12:27,394 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:12:27,394 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:12:27,394 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:12:27,405 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:12:27,405 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:12:27,405 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 00:12:27,405 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3658 states.
[2020-11-25 00:12:27,428 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:12:27,429 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:12:27,429 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:12:27,431 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:12:27,431 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BazToken0 := false;
[L2]                 call_transfer_BazToken0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == BazToken;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND TRUE   revert
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND TRUE   revert
[L793]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;

Loop:
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND TRUE   choice == 20
[L4110]              gas := gas - 21000;
[L4111]  COND FALSE  !(gas >= 0)
[L4260]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:12:27,449 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:12:27,449 INFO  L82        PathProgramCache]: Analyzing trace with hash 927553735, now seen corresponding path program 1 times
[2020-11-25 00:12:27,454 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:12:27,480 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:12:27,518 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 00:12:27,520 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:12:27,521 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 00:12:27,524 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:12:27,710 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 00:12:27,711 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 00:12:27,713 INFO  L87              Difference]: Start difference. First operand 3658 states. Second operand 3 states.
[2020-11-25 00:12:27,915 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:12:27,915 INFO  L93              Difference]: Finished difference Result 2514 states and 2743 transitions.
[2020-11-25 00:12:27,915 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 00:12:27,917 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2514 states and 2743 transitions.
[2020-11-25 00:12:27,936 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:12:27,959 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2514 states to 2514 states and 2743 transitions.
[2020-11-25 00:12:27,960 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 00:12:27,963 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 858
[2020-11-25 00:12:27,963 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2514 states and 2743 transitions.
[2020-11-25 00:12:27,971 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:12:27,971 INFO  L728         BuchiCegarLoop]: Abstraction has 2514 states and 2743 transitions.
[2020-11-25 00:12:27,988 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2514 states and 2743 transitions.
[2020-11-25 00:12:28,034 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2514 to 2514.
[2020-11-25 00:12:28,035 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2514 states.
[2020-11-25 00:12:28,042 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2514 states to 2514 states and 2743 transitions.
[2020-11-25 00:12:28,043 INFO  L751         BuchiCegarLoop]: Abstraction has 2514 states and 2743 transitions.
[2020-11-25 00:12:28,043 INFO  L631         BuchiCegarLoop]: Abstraction has 2514 states and 2743 transitions.
[2020-11-25 00:12:28,043 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 00:12:28,043 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2514 states and 2743 transitions.
[2020-11-25 00:12:28,051 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:12:28,051 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:12:28,051 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:12:28,054 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:12:28,054 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BazToken0 := false;
[L2]                 call_transfer_BazToken0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == BazToken;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND TRUE   revert
[L793]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_BazToken[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s371] >= 0) && balances_BazToken[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][msgsender_MSG] >= 0) && balances_BazToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BazToken0 := true;
[L2]                 call_transfer_BazToken0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2355]  COND TRUE   DType[this] == BazToken
[L2356]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L1994]  COND TRUE   !(b_s45 <= a_s45)
[L1995]              revert := true;
[L2356]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L2357]  COND TRUE   revert
[L957]   RET         call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s371 == true && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this])) && balances_BazToken[this] == old(balances_BazToken[this])) && allowed_BazToken[this] == old(allowed_BazToken[this])) && symbol_BazToken[this] == old(symbol_BazToken[this])) && name_BazToken[this] == old(name_BazToken[this])) && decimals_BazToken[this] == old(decimals_BazToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4164]  RET         call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_BazToken(this);

Loop:
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_BazToken[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s371] >= 0) && balances_BazToken[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][msgsender_MSG] >= 0) && balances_BazToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BazToken0 := true;
[L2]                 call_transfer_BazToken0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2355]  COND TRUE   DType[this] == BazToken
[L2356]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L1994]  COND TRUE   !(b_s45 <= a_s45)
[L1995]              revert := true;
[L2356]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L2357]  COND TRUE   revert
[L957]   RET         call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s371 == true && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this])) && balances_BazToken[this] == old(balances_BazToken[this])) && allowed_BazToken[this] == old(allowed_BazToken[this])) && symbol_BazToken[this] == old(symbol_BazToken[this])) && name_BazToken[this] == old(name_BazToken[this])) && decimals_BazToken[this] == old(decimals_BazToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4164]  RET         call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:12:28,059 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:12:28,059 INFO  L82        PathProgramCache]: Analyzing trace with hash -442168778, now seen corresponding path program 1 times
[2020-11-25 00:12:28,060 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:12:28,072 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:12:28,098 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 00:12:28,099 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:12:28,099 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 00:12:28,100 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:12:28,101 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 00:12:28,101 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 00:12:28,101 INFO  L87              Difference]: Start difference. First operand 2514 states and 2743 transitions. cyclomatic complexity: 231 Second operand 4 states.
[2020-11-25 00:12:28,487 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:12:28,488 INFO  L93              Difference]: Finished difference Result 3734 states and 4235 transitions.
[2020-11-25 00:12:28,488 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 00:12:28,488 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3734 states and 4235 transitions.
[2020-11-25 00:12:28,504 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 00:12:28,522 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3734 states to 3614 states and 4107 transitions.
[2020-11-25 00:12:28,523 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1180
[2020-11-25 00:12:28,524 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1190
[2020-11-25 00:12:28,524 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3614 states and 4107 transitions.
[2020-11-25 00:12:28,530 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:12:28,530 INFO  L728         BuchiCegarLoop]: Abstraction has 3614 states and 4107 transitions.
[2020-11-25 00:12:28,533 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3614 states and 4107 transitions.
[2020-11-25 00:12:28,560 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3614 to 2550.
[2020-11-25 00:12:28,560 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2550 states.
[2020-11-25 00:12:28,565 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2550 states to 2550 states and 2735 transitions.
[2020-11-25 00:12:28,565 INFO  L751         BuchiCegarLoop]: Abstraction has 2550 states and 2735 transitions.
[2020-11-25 00:12:28,565 INFO  L631         BuchiCegarLoop]: Abstraction has 2550 states and 2735 transitions.
[2020-11-25 00:12:28,565 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 00:12:28,565 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2550 states and 2735 transitions.
[2020-11-25 00:12:28,570 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:12:28,570 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:12:28,570 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:12:28,572 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:12:28,572 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BazToken0 := false;
[L2]                 call_transfer_BazToken0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == BazToken;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2133]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2117]              owner_Owned[this] := null;
[L2118]              newOwner_Owned[this] := null;
[L2120]              owner_Owned[this] := msgsender_MSG;
[L2133]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  COND FALSE  !(revert)
[L2279]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1959]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1944]              assume msgsender_MSG != null;
[L1945]              Balance[this] := 0;
[L1959]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  COND FALSE  !(revert)
[L2283]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2232]              assume msgsender_MSG != null;
[L2233]              Balance[this] := 0;
[L2234]              symbol_BazToken[this] := -428571439;
[L2235]              name_BazToken[this] := -428571439;
[L2236]              decimals_BazToken[this] := 0;
[L2237]              _totalSupply_BazToken[this] := 0;
[L2238]              balances_BazToken[this] := zeroRefintArr();
[L2239]              sum_balances0[this] := 0;
[L2240]              allowed_BazToken[this] := zeroRefRefintArr();
[L2241]              sum_allowed1[this] := 0;
[L2243]              symbol_BazToken[this] := 1231671027;
[L2244]              name_BazToken[this] := 1319453082;
[L2245]              decimals_BazToken[this] := 18;
[L2246]              _totalSupply_BazToken[this] := 2500000000000000000000000;
[L2247]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2248]              balances_BazToken[this][-213091748074002454629334339881517515996861043291] := _totalSupply_BazToken[this];
[L2249]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2250]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2287]  RET         call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  COND FALSE  !(revert)
[L793]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_BazToken[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s371] >= 0) && balances_BazToken[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][msgsender_MSG] >= 0) && balances_BazToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BazToken0 := true;
[L2]                 call_transfer_BazToken0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND TRUE   __exception
[L935]               __tmp__Balance := Balance;
[L936]               __tmp__DType := DType;
[L937]               __tmp__Alloc := Alloc;
[L938]               __tmp__balance_ADDR := balance_ADDR;
[L939]               __tmp__M_Ref_int := M_Ref_int;
[L940]               __tmp__sum_balances0 := sum_balances0;
[L941]               __tmp__alloc_allowed_BazToken_lvl0 := alloc_allowed_BazToken_lvl0;
[L942]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L943]               __tmp__sum_allowed1 := sum_allowed1;
[L944]               __tmp__Length := Length;
[L945]               __tmp__now := now;
[L946]               __tmp__owner_Owned := owner_Owned;
[L947]               __tmp__newOwner_Owned := newOwner_Owned;
[L948]               __tmp__symbol_BazToken := symbol_BazToken;
[L949]               __tmp__name_BazToken := name_BazToken;
[L950]               __tmp__decimals_BazToken := decimals_BazToken;
[L951]               __tmp___totalSupply_BazToken := _totalSupply_BazToken;
[L952]               __tmp__balances_BazToken := balances_BazToken;
[L953]               __tmp__allowed_BazToken := allowed_BazToken;
[L954]   CALL        call success_s371 := transfer~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2325]  COND TRUE   __tmp__DType[this] == BazToken
[L2326]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][msgsender_MSG], tokens_s371);
[L1985]  COND TRUE   !(b_s45 <= a_s45)
[L1986]              revert := true;
[L2326]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][msgsender_MSG], tokens_s371);
[L2327]  COND TRUE   revert
[L954]   RET         call success_s371 := transfer~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L955]               assume revert || gas < 0;
[L4164]  RET         call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_BazToken(this);

Loop:
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_BazToken[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s371] >= 0) && balances_BazToken[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][msgsender_MSG] >= 0) && balances_BazToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BazToken0 := true;
[L2]                 call_transfer_BazToken0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND TRUE   __exception
[L935]               __tmp__Balance := Balance;
[L936]               __tmp__DType := DType;
[L937]               __tmp__Alloc := Alloc;
[L938]               __tmp__balance_ADDR := balance_ADDR;
[L939]               __tmp__M_Ref_int := M_Ref_int;
[L940]               __tmp__sum_balances0 := sum_balances0;
[L941]               __tmp__alloc_allowed_BazToken_lvl0 := alloc_allowed_BazToken_lvl0;
[L942]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L943]               __tmp__sum_allowed1 := sum_allowed1;
[L944]               __tmp__Length := Length;
[L945]               __tmp__now := now;
[L946]               __tmp__owner_Owned := owner_Owned;
[L947]               __tmp__newOwner_Owned := newOwner_Owned;
[L948]               __tmp__symbol_BazToken := symbol_BazToken;
[L949]               __tmp__name_BazToken := name_BazToken;
[L950]               __tmp__decimals_BazToken := decimals_BazToken;
[L951]               __tmp___totalSupply_BazToken := _totalSupply_BazToken;
[L952]               __tmp__balances_BazToken := balances_BazToken;
[L953]               __tmp__allowed_BazToken := allowed_BazToken;
[L954]   CALL        call success_s371 := transfer~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2325]  COND TRUE   __tmp__DType[this] == BazToken
[L2326]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][msgsender_MSG], tokens_s371);
[L1985]  COND TRUE   !(b_s45 <= a_s45)
[L1986]              revert := true;
[L2326]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][msgsender_MSG], tokens_s371);
[L2327]  COND TRUE   revert
[L954]   RET         call success_s371 := transfer~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L955]               assume revert || gas < 0;
[L4164]  RET         call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:12:28,576 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:12:28,576 INFO  L82        PathProgramCache]: Analyzing trace with hash 1693216585, now seen corresponding path program 1 times
[2020-11-25 00:12:28,577 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:12:28,589 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:12:28,665 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 00:12:28,665 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:12:28,665 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 00:12:28,665 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:12:28,665 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 00:12:28,666 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 00:12:28,666 INFO  L87              Difference]: Start difference. First operand 2550 states and 2735 transitions. cyclomatic complexity: 187 Second operand 7 states.
[2020-11-25 00:12:29,555 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:12:29,556 INFO  L93              Difference]: Finished difference Result 2758 states and 2961 transitions.
[2020-11-25 00:12:29,557 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 00:12:29,557 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2758 states and 2961 transitions.
[2020-11-25 00:12:29,567 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:12:29,578 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2758 states to 2758 states and 2961 transitions.
[2020-11-25 00:12:29,578 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 958
[2020-11-25 00:12:29,579 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 958
[2020-11-25 00:12:29,579 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2758 states and 2961 transitions.
[2020-11-25 00:12:29,582 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:12:29,582 INFO  L728         BuchiCegarLoop]: Abstraction has 2758 states and 2961 transitions.
[2020-11-25 00:12:29,585 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2758 states and 2961 transitions.
[2020-11-25 00:12:29,616 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2758 to 2606.
[2020-11-25 00:12:29,617 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2606 states.
[2020-11-25 00:12:29,621 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2606 states to 2606 states and 2799 transitions.
[2020-11-25 00:12:29,621 INFO  L751         BuchiCegarLoop]: Abstraction has 2606 states and 2799 transitions.
[2020-11-25 00:12:29,621 INFO  L631         BuchiCegarLoop]: Abstraction has 2606 states and 2799 transitions.
[2020-11-25 00:12:29,621 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 00:12:29,621 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2606 states and 2799 transitions.
[2020-11-25 00:12:29,628 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:12:29,628 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:12:29,628 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:12:29,630 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:12:29,630 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BazToken0 := false;
[L2]                 call_transfer_BazToken0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == BazToken;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2133]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2117]              owner_Owned[this] := null;
[L2118]              newOwner_Owned[this] := null;
[L2120]              owner_Owned[this] := msgsender_MSG;
[L2133]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  COND FALSE  !(revert)
[L2279]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1959]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1944]              assume msgsender_MSG != null;
[L1945]              Balance[this] := 0;
[L1959]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  COND FALSE  !(revert)
[L2283]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2232]              assume msgsender_MSG != null;
[L2233]              Balance[this] := 0;
[L2234]              symbol_BazToken[this] := -428571439;
[L2235]              name_BazToken[this] := -428571439;
[L2236]              decimals_BazToken[this] := 0;
[L2237]              _totalSupply_BazToken[this] := 0;
[L2238]              balances_BazToken[this] := zeroRefintArr();
[L2239]              sum_balances0[this] := 0;
[L2240]              allowed_BazToken[this] := zeroRefRefintArr();
[L2241]              sum_allowed1[this] := 0;
[L2243]              symbol_BazToken[this] := 1231671027;
[L2244]              name_BazToken[this] := 1319453082;
[L2245]              decimals_BazToken[this] := 18;
[L2246]              _totalSupply_BazToken[this] := 2500000000000000000000000;
[L2247]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2248]              balances_BazToken[this][-213091748074002454629334339881517515996861043291] := _totalSupply_BazToken[this];
[L2249]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2250]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2287]  RET         call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  COND FALSE  !(revert)
[L793]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_BazToken[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s371] >= 0) && balances_BazToken[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][msgsender_MSG] >= 0) && balances_BazToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BazToken0 := true;
[L2]                 call_transfer_BazToken0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2355]  COND TRUE   DType[this] == BazToken
[L2356]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2356]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L2357]  COND FALSE  !(revert)
[L2363]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][msgsender_MSG];
[L2364]              balances_BazToken[this][msgsender_MSG] := __var_3;
[L2365]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][msgsender_MSG];
[L2366]  COND TRUE   DType[this] == BazToken
[L2367]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2367]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L2368]  COND FALSE  !(revert)
[L2374]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s371];
[L2375]              balances_BazToken[this][to_s371] := __var_4;
[L2376]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s371];
[L2377]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2378]              success_s371 := true;
[L957]   RET         call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s371 == true && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this])) && balances_BazToken[this] == old(balances_BazToken[this])) && allowed_BazToken[this] == old(allowed_BazToken[this])) && symbol_BazToken[this] == old(symbol_BazToken[this])) && name_BazToken[this] == old(name_BazToken[this])) && decimals_BazToken[this] == old(decimals_BazToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4164]  RET         call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_BazToken(this);

Loop:
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_BazToken[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s371] >= 0) && balances_BazToken[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][msgsender_MSG] >= 0) && balances_BazToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BazToken0 := true;
[L2]                 call_transfer_BazToken0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2355]  COND TRUE   DType[this] == BazToken
[L2356]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2356]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L2357]  COND FALSE  !(revert)
[L2363]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][msgsender_MSG];
[L2364]              balances_BazToken[this][msgsender_MSG] := __var_3;
[L2365]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][msgsender_MSG];
[L2366]  COND TRUE   DType[this] == BazToken
[L2367]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2367]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L2368]  COND FALSE  !(revert)
[L2374]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s371];
[L2375]              balances_BazToken[this][to_s371] := __var_4;
[L2376]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s371];
[L2377]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2378]              success_s371 := true;
[L957]   RET         call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s371 == true && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this])) && balances_BazToken[this] == old(balances_BazToken[this])) && allowed_BazToken[this] == old(allowed_BazToken[this])) && symbol_BazToken[this] == old(symbol_BazToken[this])) && name_BazToken[this] == old(name_BazToken[this])) && decimals_BazToken[this] == old(decimals_BazToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4164]  RET         call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:12:29,633 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:12:29,633 INFO  L82        PathProgramCache]: Analyzing trace with hash -220193752, now seen corresponding path program 1 times
[2020-11-25 00:12:29,634 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:12:29,677 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:12:30,201 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 00:12:30,201 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:12:30,201 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [21] imperfect sequences [] total 21
[2020-11-25 00:12:30,202 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:12:30,202 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-25 00:12:30,202 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=50, Invalid=412, Unknown=0, NotChecked=0, Total=462
[2020-11-25 00:12:30,202 INFO  L87              Difference]: Start difference. First operand 2606 states and 2799 transitions. cyclomatic complexity: 195 Second operand 22 states.
[2020-11-25 00:12:35,218 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:12:35,218 INFO  L93              Difference]: Finished difference Result 2685 states and 2904 transitions.
[2020-11-25 00:12:35,218 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 23 states. 
[2020-11-25 00:12:35,218 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2685 states and 2904 transitions.
[2020-11-25 00:12:35,224 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 00:12:35,233 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2685 states to 2685 states and 2904 transitions.
[2020-11-25 00:12:35,233 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 920
[2020-11-25 00:12:35,234 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 920
[2020-11-25 00:12:35,234 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2685 states and 2904 transitions.
[2020-11-25 00:12:35,237 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:12:35,237 INFO  L728         BuchiCegarLoop]: Abstraction has 2685 states and 2904 transitions.
[2020-11-25 00:12:35,240 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2685 states and 2904 transitions.
[2020-11-25 00:12:35,257 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2685 to 2670.
[2020-11-25 00:12:35,257 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2670 states.
[2020-11-25 00:12:35,260 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2670 states to 2670 states and 2873 transitions.
[2020-11-25 00:12:35,260 INFO  L751         BuchiCegarLoop]: Abstraction has 2670 states and 2873 transitions.
[2020-11-25 00:12:35,260 INFO  L631         BuchiCegarLoop]: Abstraction has 2670 states and 2873 transitions.
[2020-11-25 00:12:35,261 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 00:12:35,261 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2670 states and 2873 transitions.
[2020-11-25 00:12:35,263 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:12:35,264 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:12:35,264 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:12:35,265 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:12:35,265 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BazToken0 := false;
[L2]                 call_transfer_BazToken0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == BazToken;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2133]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2117]              owner_Owned[this] := null;
[L2118]              newOwner_Owned[this] := null;
[L2120]              owner_Owned[this] := msgsender_MSG;
[L2133]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  COND FALSE  !(revert)
[L2279]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1959]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1944]              assume msgsender_MSG != null;
[L1945]              Balance[this] := 0;
[L1959]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  COND FALSE  !(revert)
[L2283]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2232]              assume msgsender_MSG != null;
[L2233]              Balance[this] := 0;
[L2234]              symbol_BazToken[this] := -428571439;
[L2235]              name_BazToken[this] := -428571439;
[L2236]              decimals_BazToken[this] := 0;
[L2237]              _totalSupply_BazToken[this] := 0;
[L2238]              balances_BazToken[this] := zeroRefintArr();
[L2239]              sum_balances0[this] := 0;
[L2240]              allowed_BazToken[this] := zeroRefRefintArr();
[L2241]              sum_allowed1[this] := 0;
[L2243]              symbol_BazToken[this] := 1231671027;
[L2244]              name_BazToken[this] := 1319453082;
[L2245]              decimals_BazToken[this] := 18;
[L2246]              _totalSupply_BazToken[this] := 2500000000000000000000000;
[L2247]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2248]              balances_BazToken[this][-213091748074002454629334339881517515996861043291] := _totalSupply_BazToken[this];
[L2249]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2250]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2287]  RET         call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  COND FALSE  !(revert)
[L793]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_BazToken[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s371] >= 0) && balances_BazToken[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][msgsender_MSG] >= 0) && balances_BazToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BazToken0 := true;
[L2]                 call_transfer_BazToken0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND TRUE   __exception
[L935]               __tmp__Balance := Balance;
[L936]               __tmp__DType := DType;
[L937]               __tmp__Alloc := Alloc;
[L938]               __tmp__balance_ADDR := balance_ADDR;
[L939]               __tmp__M_Ref_int := M_Ref_int;
[L940]               __tmp__sum_balances0 := sum_balances0;
[L941]               __tmp__alloc_allowed_BazToken_lvl0 := alloc_allowed_BazToken_lvl0;
[L942]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L943]               __tmp__sum_allowed1 := sum_allowed1;
[L944]               __tmp__Length := Length;
[L945]               __tmp__now := now;
[L946]               __tmp__owner_Owned := owner_Owned;
[L947]               __tmp__newOwner_Owned := newOwner_Owned;
[L948]               __tmp__symbol_BazToken := symbol_BazToken;
[L949]               __tmp__name_BazToken := name_BazToken;
[L950]               __tmp__decimals_BazToken := decimals_BazToken;
[L951]               __tmp___totalSupply_BazToken := _totalSupply_BazToken;
[L952]               __tmp__balances_BazToken := balances_BazToken;
[L953]               __tmp__allowed_BazToken := allowed_BazToken;
[L954]   CALL        call success_s371 := transfer~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2325]  COND TRUE   __tmp__DType[this] == BazToken
[L2326]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][msgsender_MSG], tokens_s371);
[L1985]  COND FALSE  !(!(b_s45 <= a_s45))
[L1989]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2326]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][msgsender_MSG], tokens_s371);
[L2327]  COND FALSE  !(revert)
[L2333]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BazToken[this][msgsender_MSG];
[L2334]              __tmp__balances_BazToken[this][msgsender_MSG] := __var_3;
[L2335]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BazToken[this][msgsender_MSG];
[L2336]  COND TRUE   __tmp__DType[this] == BazToken
[L2337]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][to_s371], tokens_s371);
[L1967]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1968]  COND TRUE   !(c_s23 >= a_s23)
[L1969]              revert := true;
[L2337]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][to_s371], tokens_s371);
[L2338]  COND TRUE   revert
[L954]   RET         call success_s371 := transfer~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L955]               assume revert || gas < 0;
[L4164]  RET         call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_BazToken(this);

Loop:
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_BazToken[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s371] >= 0) && balances_BazToken[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][msgsender_MSG] >= 0) && balances_BazToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BazToken0 := true;
[L2]                 call_transfer_BazToken0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND TRUE   __exception
[L935]               __tmp__Balance := Balance;
[L936]               __tmp__DType := DType;
[L937]               __tmp__Alloc := Alloc;
[L938]               __tmp__balance_ADDR := balance_ADDR;
[L939]               __tmp__M_Ref_int := M_Ref_int;
[L940]               __tmp__sum_balances0 := sum_balances0;
[L941]               __tmp__alloc_allowed_BazToken_lvl0 := alloc_allowed_BazToken_lvl0;
[L942]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L943]               __tmp__sum_allowed1 := sum_allowed1;
[L944]               __tmp__Length := Length;
[L945]               __tmp__now := now;
[L946]               __tmp__owner_Owned := owner_Owned;
[L947]               __tmp__newOwner_Owned := newOwner_Owned;
[L948]               __tmp__symbol_BazToken := symbol_BazToken;
[L949]               __tmp__name_BazToken := name_BazToken;
[L950]               __tmp__decimals_BazToken := decimals_BazToken;
[L951]               __tmp___totalSupply_BazToken := _totalSupply_BazToken;
[L952]               __tmp__balances_BazToken := balances_BazToken;
[L953]               __tmp__allowed_BazToken := allowed_BazToken;
[L954]   CALL        call success_s371 := transfer~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2325]  COND TRUE   __tmp__DType[this] == BazToken
[L2326]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][msgsender_MSG], tokens_s371);
[L1985]  COND FALSE  !(!(b_s45 <= a_s45))
[L1989]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2326]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][msgsender_MSG], tokens_s371);
[L2327]  COND FALSE  !(revert)
[L2333]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BazToken[this][msgsender_MSG];
[L2334]              __tmp__balances_BazToken[this][msgsender_MSG] := __var_3;
[L2335]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BazToken[this][msgsender_MSG];
[L2336]  COND TRUE   __tmp__DType[this] == BazToken
[L2337]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][to_s371], tokens_s371);
[L1967]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1968]  COND TRUE   !(c_s23 >= a_s23)
[L1969]              revert := true;
[L2337]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][to_s371], tokens_s371);
[L2338]  COND TRUE   revert
[L954]   RET         call success_s371 := transfer~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L955]               assume revert || gas < 0;
[L4164]  RET         call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:12:35,268 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:12:35,269 INFO  L82        PathProgramCache]: Analyzing trace with hash 1101720772, now seen corresponding path program 1 times
[2020-11-25 00:12:35,269 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:12:35,278 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:12:35,401 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 00:12:35,401 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:12:35,401 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [21] imperfect sequences [] total 21
[2020-11-25 00:12:35,402 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:12:35,402 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-25 00:12:35,402 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=45, Invalid=417, Unknown=0, NotChecked=0, Total=462
[2020-11-25 00:12:35,402 INFO  L87              Difference]: Start difference. First operand 2670 states and 2873 transitions. cyclomatic complexity: 207 Second operand 22 states.
[2020-11-25 00:12:38,604 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:12:38,604 INFO  L93              Difference]: Finished difference Result 2828 states and 3072 transitions.
[2020-11-25 00:12:38,604 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-11-25 00:12:38,604 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2828 states and 3072 transitions.
[2020-11-25 00:12:38,609 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 00:12:38,616 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2828 states to 2828 states and 3072 transitions.
[2020-11-25 00:12:38,616 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 992
[2020-11-25 00:12:38,616 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 992
[2020-11-25 00:12:38,616 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2828 states and 3072 transitions.
[2020-11-25 00:12:38,618 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:12:38,618 INFO  L728         BuchiCegarLoop]: Abstraction has 2828 states and 3072 transitions.
[2020-11-25 00:12:38,620 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2828 states and 3072 transitions.
[2020-11-25 00:12:38,635 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2828 to 2676.
[2020-11-25 00:12:38,635 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2676 states.
[2020-11-25 00:12:38,637 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2676 states to 2676 states and 2880 transitions.
[2020-11-25 00:12:38,638 INFO  L751         BuchiCegarLoop]: Abstraction has 2676 states and 2880 transitions.
[2020-11-25 00:12:38,638 INFO  L631         BuchiCegarLoop]: Abstraction has 2676 states and 2880 transitions.
[2020-11-25 00:12:38,638 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 00:12:38,638 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2676 states and 2880 transitions.
[2020-11-25 00:12:38,640 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:12:38,640 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:12:38,640 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:12:38,641 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:12:38,641 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BazToken0 := false;
[L2]                 call_transfer_BazToken0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == BazToken;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2133]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2117]              owner_Owned[this] := null;
[L2118]              newOwner_Owned[this] := null;
[L2120]              owner_Owned[this] := msgsender_MSG;
[L2133]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  COND FALSE  !(revert)
[L2279]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1959]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1944]              assume msgsender_MSG != null;
[L1945]              Balance[this] := 0;
[L1959]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  COND FALSE  !(revert)
[L2283]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2232]              assume msgsender_MSG != null;
[L2233]              Balance[this] := 0;
[L2234]              symbol_BazToken[this] := -428571439;
[L2235]              name_BazToken[this] := -428571439;
[L2236]              decimals_BazToken[this] := 0;
[L2237]              _totalSupply_BazToken[this] := 0;
[L2238]              balances_BazToken[this] := zeroRefintArr();
[L2239]              sum_balances0[this] := 0;
[L2240]              allowed_BazToken[this] := zeroRefRefintArr();
[L2241]              sum_allowed1[this] := 0;
[L2243]              symbol_BazToken[this] := 1231671027;
[L2244]              name_BazToken[this] := 1319453082;
[L2245]              decimals_BazToken[this] := 18;
[L2246]              _totalSupply_BazToken[this] := 2500000000000000000000000;
[L2247]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2248]              balances_BazToken[this][-213091748074002454629334339881517515996861043291] := _totalSupply_BazToken[this];
[L2249]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2250]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2287]  RET         call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  COND FALSE  !(revert)
[L793]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_BazToken[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s371] >= 0) && balances_BazToken[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][msgsender_MSG] >= 0) && balances_BazToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BazToken0 := true;
[L2]                 call_transfer_BazToken0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND TRUE   __exception
[L935]               __tmp__Balance := Balance;
[L936]               __tmp__DType := DType;
[L937]               __tmp__Alloc := Alloc;
[L938]               __tmp__balance_ADDR := balance_ADDR;
[L939]               __tmp__M_Ref_int := M_Ref_int;
[L940]               __tmp__sum_balances0 := sum_balances0;
[L941]               __tmp__alloc_allowed_BazToken_lvl0 := alloc_allowed_BazToken_lvl0;
[L942]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L943]               __tmp__sum_allowed1 := sum_allowed1;
[L944]               __tmp__Length := Length;
[L945]               __tmp__now := now;
[L946]               __tmp__owner_Owned := owner_Owned;
[L947]               __tmp__newOwner_Owned := newOwner_Owned;
[L948]               __tmp__symbol_BazToken := symbol_BazToken;
[L949]               __tmp__name_BazToken := name_BazToken;
[L950]               __tmp__decimals_BazToken := decimals_BazToken;
[L951]               __tmp___totalSupply_BazToken := _totalSupply_BazToken;
[L952]               __tmp__balances_BazToken := balances_BazToken;
[L953]               __tmp__allowed_BazToken := allowed_BazToken;
[L954]   CALL        call success_s371 := transfer~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2325]  COND TRUE   __tmp__DType[this] == BazToken
[L2326]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][msgsender_MSG], tokens_s371);
[L1985]  COND FALSE  !(!(b_s45 <= a_s45))
[L1989]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2326]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][msgsender_MSG], tokens_s371);
[L2327]  COND FALSE  !(revert)
[L2333]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BazToken[this][msgsender_MSG];
[L2334]              __tmp__balances_BazToken[this][msgsender_MSG] := __var_3;
[L2335]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BazToken[this][msgsender_MSG];
[L2336]  COND TRUE   __tmp__DType[this] == BazToken
[L2337]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][to_s371], tokens_s371);
[L1967]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1968]  COND FALSE  !(!(c_s23 >= a_s23))
[L2337]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][to_s371], tokens_s371);
[L2338]  COND FALSE  !(revert)
[L2344]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BazToken[this][to_s371];
[L2345]              __tmp__balances_BazToken[this][to_s371] := __var_4;
[L2346]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BazToken[this][to_s371];
[L2347]              success_s371 := true;
[L954]   RET         call success_s371 := transfer~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L955]               assume revert || gas < 0;
[L4164]  RET         call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_BazToken(this);

Loop:
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND TRUE   choice == 20
[L4110]              gas := gas - 21000;
[L4111]  COND FALSE  !(gas >= 0)
[L4260]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:12:38,644 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:12:38,644 INFO  L82        PathProgramCache]: Analyzing trace with hash 1064192557, now seen corresponding path program 1 times
[2020-11-25 00:12:38,644 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:12:38,651 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:12:38,673 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 00:12:38,673 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:12:38,673 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 00:12:38,674 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:12:38,674 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 00:12:38,674 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-11-25 00:12:38,674 INFO  L87              Difference]: Start difference. First operand 2676 states and 2880 transitions. cyclomatic complexity: 208 Second operand 6 states.
[2020-11-25 00:12:39,022 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:12:39,022 INFO  L93              Difference]: Finished difference Result 3468 states and 3829 transitions.
[2020-11-25 00:12:39,022 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 00:12:39,022 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3468 states and 3829 transitions.
[2020-11-25 00:12:39,029 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 00:12:39,036 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3468 states to 2659 states and 3017 transitions.
[2020-11-25 00:12:39,036 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 747
[2020-11-25 00:12:39,037 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 747
[2020-11-25 00:12:39,037 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2659 states and 3017 transitions.
[2020-11-25 00:12:39,039 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:12:39,039 INFO  L728         BuchiCegarLoop]: Abstraction has 2659 states and 3017 transitions.
[2020-11-25 00:12:39,042 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2659 states and 3017 transitions.
[2020-11-25 00:12:39,053 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2659 to 1905.
[2020-11-25 00:12:39,053 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1905 states.
[2020-11-25 00:12:39,055 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1905 states to 1905 states and 2058 transitions.
[2020-11-25 00:12:39,055 INFO  L751         BuchiCegarLoop]: Abstraction has 1905 states and 2058 transitions.
[2020-11-25 00:12:39,055 INFO  L631         BuchiCegarLoop]: Abstraction has 1905 states and 2058 transitions.
[2020-11-25 00:12:39,055 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 00:12:39,055 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1905 states and 2058 transitions.
[2020-11-25 00:12:39,057 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:12:39,058 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:12:39,058 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:12:39,059 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:12:39,059 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BazToken0 := false;
[L2]                 call_transfer_BazToken0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == BazToken;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2133]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2117]              owner_Owned[this] := null;
[L2118]              newOwner_Owned[this] := null;
[L2120]              owner_Owned[this] := msgsender_MSG;
[L2133]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  COND FALSE  !(revert)
[L2279]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1959]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1944]              assume msgsender_MSG != null;
[L1945]              Balance[this] := 0;
[L1959]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  COND FALSE  !(revert)
[L2283]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2232]              assume msgsender_MSG != null;
[L2233]              Balance[this] := 0;
[L2234]              symbol_BazToken[this] := -428571439;
[L2235]              name_BazToken[this] := -428571439;
[L2236]              decimals_BazToken[this] := 0;
[L2237]              _totalSupply_BazToken[this] := 0;
[L2238]              balances_BazToken[this] := zeroRefintArr();
[L2239]              sum_balances0[this] := 0;
[L2240]              allowed_BazToken[this] := zeroRefRefintArr();
[L2241]              sum_allowed1[this] := 0;
[L2243]              symbol_BazToken[this] := 1231671027;
[L2244]              name_BazToken[this] := 1319453082;
[L2245]              decimals_BazToken[this] := 18;
[L2246]              _totalSupply_BazToken[this] := 2500000000000000000000000;
[L2247]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2248]              balances_BazToken[this][-213091748074002454629334339881517515996861043291] := _totalSupply_BazToken[this];
[L2249]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2250]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2287]  RET         call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  COND FALSE  !(revert)
[L793]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_BazToken[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s371] >= 0) && balances_BazToken[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][msgsender_MSG] >= 0) && balances_BazToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2355]  COND TRUE   DType[this] == BazToken
[L2356]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2356]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L2357]  COND FALSE  !(revert)
[L2363]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][msgsender_MSG];
[L2364]              balances_BazToken[this][msgsender_MSG] := __var_3;
[L2365]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][msgsender_MSG];
[L2366]  COND TRUE   DType[this] == BazToken
[L2367]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2367]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L2368]  COND FALSE  !(revert)
[L2374]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s371];
[L2375]              balances_BazToken[this][to_s371] := __var_4;
[L2376]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s371];
[L2377]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2378]              success_s371 := true;
[L957]   RET         call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s371 == true && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this])) && balances_BazToken[this] == old(balances_BazToken[this])) && allowed_BazToken[this] == old(allowed_BazToken[this])) && symbol_BazToken[this] == old(symbol_BazToken[this])) && name_BazToken[this] == old(name_BazToken[this])) && decimals_BazToken[this] == old(decimals_BazToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4164]  RET         call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_BazToken(this);
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_BazToken[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s371] >= 0) && balances_BazToken[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][msgsender_MSG] >= 0) && balances_BazToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BazToken0 := true;
[L2]                 call_transfer_BazToken0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2355]  COND TRUE   DType[this] == BazToken
[L2356]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2356]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L2357]  COND FALSE  !(revert)
[L2363]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][msgsender_MSG];
[L2364]              balances_BazToken[this][msgsender_MSG] := __var_3;
[L2365]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][msgsender_MSG];
[L2366]  COND TRUE   DType[this] == BazToken
[L2367]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2367]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L2368]  COND FALSE  !(revert)
[L2374]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s371];
[L2375]              balances_BazToken[this][to_s371] := __var_4;
[L2376]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s371];
[L2377]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2378]              success_s371 := true;
[L957]   RET         call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s371 == true && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this])) && balances_BazToken[this] == old(balances_BazToken[this])) && allowed_BazToken[this] == old(allowed_BazToken[this])) && symbol_BazToken[this] == old(symbol_BazToken[this])) && name_BazToken[this] == old(name_BazToken[this])) && decimals_BazToken[this] == old(decimals_BazToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4164]  RET         call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_BazToken(this);

Loop:
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_BazToken[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s371] >= 0) && balances_BazToken[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][msgsender_MSG] >= 0) && balances_BazToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BazToken0 := true;
[L2]                 call_transfer_BazToken0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2355]  COND TRUE   DType[this] == BazToken
[L2356]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2356]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L2357]  COND FALSE  !(revert)
[L2363]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][msgsender_MSG];
[L2364]              balances_BazToken[this][msgsender_MSG] := __var_3;
[L2365]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][msgsender_MSG];
[L2366]  COND TRUE   DType[this] == BazToken
[L2367]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2367]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L2368]  COND FALSE  !(revert)
[L2374]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s371];
[L2375]              balances_BazToken[this][to_s371] := __var_4;
[L2376]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s371];
[L2377]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2378]              success_s371 := true;
[L957]   RET         call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s371 == true && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this])) && balances_BazToken[this] == old(balances_BazToken[this])) && allowed_BazToken[this] == old(allowed_BazToken[this])) && symbol_BazToken[this] == old(symbol_BazToken[this])) && name_BazToken[this] == old(name_BazToken[this])) && decimals_BazToken[this] == old(decimals_BazToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4164]  RET         call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:12:39,062 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:12:39,063 INFO  L82        PathProgramCache]: Analyzing trace with hash -724740190, now seen corresponding path program 1 times
[2020-11-25 00:12:39,063 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:12:39,137 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:12:39,693 INFO  L134       CoverageAnalysis]: Checked inductivity of 77 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 76 trivial. 0 not checked.
[2020-11-25 00:12:39,693 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:12:39,693 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [27] total 27
[2020-11-25 00:12:39,693 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:12:39,693 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-11-25 00:12:39,694 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=78, Invalid=678, Unknown=0, NotChecked=0, Total=756
[2020-11-25 00:12:39,694 INFO  L87              Difference]: Start difference. First operand 1905 states and 2058 transitions. cyclomatic complexity: 156 Second operand 28 states.
[2020-11-25 00:12:42,018 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:12:42,019 INFO  L93              Difference]: Finished difference Result 1946 states and 2123 transitions.
[2020-11-25 00:12:42,019 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 00:12:42,019 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1946 states and 2123 transitions.
[2020-11-25 00:12:42,022 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 00:12:42,027 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1946 states to 1946 states and 2123 transitions.
[2020-11-25 00:12:42,027 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 598
[2020-11-25 00:12:42,027 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 598
[2020-11-25 00:12:42,028 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1946 states and 2123 transitions.
[2020-11-25 00:12:42,029 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:12:42,029 INFO  L728         BuchiCegarLoop]: Abstraction has 1946 states and 2123 transitions.
[2020-11-25 00:12:42,031 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1946 states and 2123 transitions.
[2020-11-25 00:12:42,041 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1946 to 1937.
[2020-11-25 00:12:42,041 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1937 states.
[2020-11-25 00:12:42,043 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1937 states to 1937 states and 2101 transitions.
[2020-11-25 00:12:42,043 INFO  L751         BuchiCegarLoop]: Abstraction has 1937 states and 2101 transitions.
[2020-11-25 00:12:42,043 INFO  L631         BuchiCegarLoop]: Abstraction has 1937 states and 2101 transitions.
[2020-11-25 00:12:42,043 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 00:12:42,043 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1937 states and 2101 transitions.
[2020-11-25 00:12:42,045 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:12:42,045 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:12:42,045 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:12:42,046 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:12:42,046 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BazToken0 := false;
[L2]                 call_transfer_BazToken0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == BazToken;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2133]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2117]              owner_Owned[this] := null;
[L2118]              newOwner_Owned[this] := null;
[L2120]              owner_Owned[this] := msgsender_MSG;
[L2133]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  COND FALSE  !(revert)
[L2279]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1959]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1944]              assume msgsender_MSG != null;
[L1945]              Balance[this] := 0;
[L1959]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  COND FALSE  !(revert)
[L2283]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2232]              assume msgsender_MSG != null;
[L2233]              Balance[this] := 0;
[L2234]              symbol_BazToken[this] := -428571439;
[L2235]              name_BazToken[this] := -428571439;
[L2236]              decimals_BazToken[this] := 0;
[L2237]              _totalSupply_BazToken[this] := 0;
[L2238]              balances_BazToken[this] := zeroRefintArr();
[L2239]              sum_balances0[this] := 0;
[L2240]              allowed_BazToken[this] := zeroRefRefintArr();
[L2241]              sum_allowed1[this] := 0;
[L2243]              symbol_BazToken[this] := 1231671027;
[L2244]              name_BazToken[this] := 1319453082;
[L2245]              decimals_BazToken[this] := 18;
[L2246]              _totalSupply_BazToken[this] := 2500000000000000000000000;
[L2247]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2248]              balances_BazToken[this][-213091748074002454629334339881517515996861043291] := _totalSupply_BazToken[this];
[L2249]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2250]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2287]  RET         call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  COND FALSE  !(revert)
[L793]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_BazToken[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s371] >= 0) && balances_BazToken[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][msgsender_MSG] >= 0) && balances_BazToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2355]  COND TRUE   DType[this] == BazToken
[L2356]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2356]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L2357]  COND FALSE  !(revert)
[L2363]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][msgsender_MSG];
[L2364]              balances_BazToken[this][msgsender_MSG] := __var_3;
[L2365]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][msgsender_MSG];
[L2366]  COND TRUE   DType[this] == BazToken
[L2367]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2367]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L2368]  COND FALSE  !(revert)
[L2374]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s371];
[L2375]              balances_BazToken[this][to_s371] := __var_4;
[L2376]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s371];
[L2377]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2378]              success_s371 := true;
[L957]   RET         call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s371 == true && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this])) && balances_BazToken[this] == old(balances_BazToken[this])) && allowed_BazToken[this] == old(allowed_BazToken[this])) && symbol_BazToken[this] == old(symbol_BazToken[this])) && name_BazToken[this] == old(name_BazToken[this])) && decimals_BazToken[this] == old(decimals_BazToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4164]  RET         call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_BazToken(this);
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_BazToken[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s371] >= 0) && balances_BazToken[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][msgsender_MSG] >= 0) && balances_BazToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BazToken0 := true;
[L2]                 call_transfer_BazToken0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND TRUE   __exception
[L935]               __tmp__Balance := Balance;
[L936]               __tmp__DType := DType;
[L937]               __tmp__Alloc := Alloc;
[L938]               __tmp__balance_ADDR := balance_ADDR;
[L939]               __tmp__M_Ref_int := M_Ref_int;
[L940]               __tmp__sum_balances0 := sum_balances0;
[L941]               __tmp__alloc_allowed_BazToken_lvl0 := alloc_allowed_BazToken_lvl0;
[L942]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L943]               __tmp__sum_allowed1 := sum_allowed1;
[L944]               __tmp__Length := Length;
[L945]               __tmp__now := now;
[L946]               __tmp__owner_Owned := owner_Owned;
[L947]               __tmp__newOwner_Owned := newOwner_Owned;
[L948]               __tmp__symbol_BazToken := symbol_BazToken;
[L949]               __tmp__name_BazToken := name_BazToken;
[L950]               __tmp__decimals_BazToken := decimals_BazToken;
[L951]               __tmp___totalSupply_BazToken := _totalSupply_BazToken;
[L952]               __tmp__balances_BazToken := balances_BazToken;
[L953]               __tmp__allowed_BazToken := allowed_BazToken;
[L954]   CALL        call success_s371 := transfer~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2325]  COND TRUE   __tmp__DType[this] == BazToken
[L2326]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][msgsender_MSG], tokens_s371);
[L1985]  COND FALSE  !(!(b_s45 <= a_s45))
[L1989]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2326]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][msgsender_MSG], tokens_s371);
[L2327]  COND FALSE  !(revert)
[L2333]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BazToken[this][msgsender_MSG];
[L2334]              __tmp__balances_BazToken[this][msgsender_MSG] := __var_3;
[L2335]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BazToken[this][msgsender_MSG];
[L2336]  COND TRUE   __tmp__DType[this] == BazToken
[L2337]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][to_s371], tokens_s371);
[L1967]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1968]  COND TRUE   !(c_s23 >= a_s23)
[L1969]              revert := true;
[L2337]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][to_s371], tokens_s371);
[L2338]  COND TRUE   revert
[L954]   RET         call success_s371 := transfer~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L955]               assume revert || gas < 0;
[L4164]  RET         call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_BazToken(this);

Loop:
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_BazToken[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s371] >= 0) && balances_BazToken[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][msgsender_MSG] >= 0) && balances_BazToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BazToken0 := true;
[L2]                 call_transfer_BazToken0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND TRUE   __exception
[L935]               __tmp__Balance := Balance;
[L936]               __tmp__DType := DType;
[L937]               __tmp__Alloc := Alloc;
[L938]               __tmp__balance_ADDR := balance_ADDR;
[L939]               __tmp__M_Ref_int := M_Ref_int;
[L940]               __tmp__sum_balances0 := sum_balances0;
[L941]               __tmp__alloc_allowed_BazToken_lvl0 := alloc_allowed_BazToken_lvl0;
[L942]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L943]               __tmp__sum_allowed1 := sum_allowed1;
[L944]               __tmp__Length := Length;
[L945]               __tmp__now := now;
[L946]               __tmp__owner_Owned := owner_Owned;
[L947]               __tmp__newOwner_Owned := newOwner_Owned;
[L948]               __tmp__symbol_BazToken := symbol_BazToken;
[L949]               __tmp__name_BazToken := name_BazToken;
[L950]               __tmp__decimals_BazToken := decimals_BazToken;
[L951]               __tmp___totalSupply_BazToken := _totalSupply_BazToken;
[L952]               __tmp__balances_BazToken := balances_BazToken;
[L953]               __tmp__allowed_BazToken := allowed_BazToken;
[L954]   CALL        call success_s371 := transfer~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2325]  COND TRUE   __tmp__DType[this] == BazToken
[L2326]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][msgsender_MSG], tokens_s371);
[L1985]  COND FALSE  !(!(b_s45 <= a_s45))
[L1989]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2326]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][msgsender_MSG], tokens_s371);
[L2327]  COND FALSE  !(revert)
[L2333]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BazToken[this][msgsender_MSG];
[L2334]              __tmp__balances_BazToken[this][msgsender_MSG] := __var_3;
[L2335]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BazToken[this][msgsender_MSG];
[L2336]  COND TRUE   __tmp__DType[this] == BazToken
[L2337]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][to_s371], tokens_s371);
[L1967]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1968]  COND TRUE   !(c_s23 >= a_s23)
[L1969]              revert := true;
[L2337]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][to_s371], tokens_s371);
[L2338]  COND TRUE   revert
[L954]   RET         call success_s371 := transfer~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L955]               assume revert || gas < 0;
[L4164]  RET         call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:12:42,050 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:12:42,050 INFO  L82        PathProgramCache]: Analyzing trace with hash 1969463562, now seen corresponding path program 1 times
[2020-11-25 00:12:42,051 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:12:42,063 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:12:42,141 INFO  L134       CoverageAnalysis]: Checked inductivity of 77 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 77 trivial. 0 not checked.
[2020-11-25 00:12:42,141 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:12:42,141 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 00:12:42,141 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:12:42,141 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 00:12:42,141 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=108, Unknown=0, NotChecked=0, Total=132
[2020-11-25 00:12:42,142 INFO  L87              Difference]: Start difference. First operand 1937 states and 2101 transitions. cyclomatic complexity: 169 Second operand 12 states.
[2020-11-25 00:12:42,774 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:12:42,774 INFO  L93              Difference]: Finished difference Result 1987 states and 2162 transitions.
[2020-11-25 00:12:42,775 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 00:12:42,775 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1987 states and 2162 transitions.
[2020-11-25 00:12:42,778 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:12:42,782 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1987 states to 1947 states and 2120 transitions.
[2020-11-25 00:12:42,782 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 616
[2020-11-25 00:12:42,783 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 616
[2020-11-25 00:12:42,783 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1947 states and 2120 transitions.
[2020-11-25 00:12:42,784 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:12:42,784 INFO  L728         BuchiCegarLoop]: Abstraction has 1947 states and 2120 transitions.
[2020-11-25 00:12:42,786 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1947 states and 2120 transitions.
[2020-11-25 00:12:42,794 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1947 to 1861.
[2020-11-25 00:12:42,794 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1861 states.
[2020-11-25 00:12:42,796 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1861 states to 1861 states and 2012 transitions.
[2020-11-25 00:12:42,796 INFO  L751         BuchiCegarLoop]: Abstraction has 1861 states and 2012 transitions.
[2020-11-25 00:12:42,796 INFO  L631         BuchiCegarLoop]: Abstraction has 1861 states and 2012 transitions.
[2020-11-25 00:12:42,796 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 00:12:42,796 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1861 states and 2012 transitions.
[2020-11-25 00:12:42,798 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:12:42,798 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:12:42,798 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:12:42,799 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:12:42,799 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BazToken0 := false;
[L2]                 call_transfer_BazToken0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == BazToken;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2133]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2117]              owner_Owned[this] := null;
[L2118]              newOwner_Owned[this] := null;
[L2120]              owner_Owned[this] := msgsender_MSG;
[L2133]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  COND FALSE  !(revert)
[L2279]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1959]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1944]              assume msgsender_MSG != null;
[L1945]              Balance[this] := 0;
[L1959]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  COND FALSE  !(revert)
[L2283]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2232]              assume msgsender_MSG != null;
[L2233]              Balance[this] := 0;
[L2234]              symbol_BazToken[this] := -428571439;
[L2235]              name_BazToken[this] := -428571439;
[L2236]              decimals_BazToken[this] := 0;
[L2237]              _totalSupply_BazToken[this] := 0;
[L2238]              balances_BazToken[this] := zeroRefintArr();
[L2239]              sum_balances0[this] := 0;
[L2240]              allowed_BazToken[this] := zeroRefRefintArr();
[L2241]              sum_allowed1[this] := 0;
[L2243]              symbol_BazToken[this] := 1231671027;
[L2244]              name_BazToken[this] := 1319453082;
[L2245]              decimals_BazToken[this] := 18;
[L2246]              _totalSupply_BazToken[this] := 2500000000000000000000000;
[L2247]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2248]              balances_BazToken[this][-213091748074002454629334339881517515996861043291] := _totalSupply_BazToken[this];
[L2249]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2250]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2287]  RET         call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  COND FALSE  !(revert)
[L793]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND FALSE  !(choice == 13)
[L4166]  COND FALSE  !(choice == 12)
[L4173]  COND TRUE   choice == 11
[L4174]              gas := gas - 21000;
[L4175]  COND TRUE   gas >= 0
[L4176]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4177]              assume msgvalue_MSG == 0;
[L4178]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1046]              havoc __exception;
[L1047]              revert := false;
[L1048]  COND FALSE  !(__exception)
[L1071]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2448]  COND TRUE   DType[this] == BazToken
[L2449]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2449]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2450]  COND FALSE  !(revert)
[L2456]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2457]              balances_BazToken[this][from_s458] := __var_5;
[L2458]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2459]  COND TRUE   DType[this] == BazToken
[L2460]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2460]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2461]  COND FALSE  !(revert)
[L2467]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2468]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2469]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2470]  COND TRUE   DType[this] == BazToken
[L2471]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2471]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2472]  COND FALSE  !(revert)
[L2478]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2479]              balances_BazToken[this][to_s458] := __var_7;
[L2480]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2481]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2482]              success_s458 := true;
[L1071]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1072]              assume !revert && gas >= 0;
[L4178]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4260]  RET         call CorralChoice_BazToken(this);
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_BazToken[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s371] >= 0) && balances_BazToken[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][msgsender_MSG] >= 0) && balances_BazToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BazToken0 := true;
[L2]                 call_transfer_BazToken0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2355]  COND TRUE   DType[this] == BazToken
[L2356]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2356]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L2357]  COND FALSE  !(revert)
[L2363]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][msgsender_MSG];
[L2364]              balances_BazToken[this][msgsender_MSG] := __var_3;
[L2365]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][msgsender_MSG];
[L2366]  COND TRUE   DType[this] == BazToken
[L2367]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2367]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L2368]  COND FALSE  !(revert)
[L2374]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s371];
[L2375]              balances_BazToken[this][to_s371] := __var_4;
[L2376]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s371];
[L2377]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2378]              success_s371 := true;
[L957]   RET         call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s371 == true && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this])) && balances_BazToken[this] == old(balances_BazToken[this])) && allowed_BazToken[this] == old(allowed_BazToken[this])) && symbol_BazToken[this] == old(symbol_BazToken[this])) && name_BazToken[this] == old(name_BazToken[this])) && decimals_BazToken[this] == old(decimals_BazToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4164]  RET         call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_BazToken(this);

Loop:
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND TRUE   choice == 20
[L4110]              gas := gas - 21000;
[L4111]  COND FALSE  !(gas >= 0)
[L4260]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:12:42,802 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:12:42,802 INFO  L82        PathProgramCache]: Analyzing trace with hash -1163799075, now seen corresponding path program 1 times
[2020-11-25 00:12:42,803 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:12:42,858 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:12:43,590 WARN  L188               SmtUtils]: Spent 234.00 ms on a formula simplification. DAG size of input: 148 DAG size of output: 78
[2020-11-25 00:12:44,440 WARN  L188               SmtUtils]: Spent 434.00 ms on a formula simplification. DAG size of input: 284 DAG size of output: 86
[2020-11-25 00:12:44,721 WARN  L188               SmtUtils]: Spent 204.00 ms on a formula simplification. DAG size of input: 175 DAG size of output: 73
[2020-11-25 00:12:45,660 WARN  L188               SmtUtils]: Spent 189.00 ms on a formula simplification. DAG size of input: 193 DAG size of output: 70
[2020-11-25 00:12:46,076 WARN  L188               SmtUtils]: Spent 103.00 ms on a formula simplification. DAG size of input: 127 DAG size of output: 50
[2020-11-25 00:12:46,648 INFO  L134       CoverageAnalysis]: Checked inductivity of 72 backedges. 1 proven. 70 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 00:12:46,648 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:12:46,648 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [38] total 38
[2020-11-25 00:12:46,648 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:12:46,648 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 39 interpolants.
[2020-11-25 00:12:46,649 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=106, Invalid=1376, Unknown=0, NotChecked=0, Total=1482
[2020-11-25 00:12:46,649 INFO  L87              Difference]: Start difference. First operand 1861 states and 2012 transitions. cyclomatic complexity: 155 Second operand 39 states.
[2020-11-25 00:12:50,763 WARN  L188               SmtUtils]: Spent 122.00 ms on a formula simplification. DAG size of input: 93 DAG size of output: 85
[2020-11-25 00:12:51,162 WARN  L188               SmtUtils]: Spent 108.00 ms on a formula simplification. DAG size of input: 72 DAG size of output: 66
[2020-11-25 00:12:56,441 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:12:56,441 INFO  L93              Difference]: Finished difference Result 2111 states and 2372 transitions.
[2020-11-25 00:12:56,441 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 40 states. 
[2020-11-25 00:12:56,441 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2111 states and 2372 transitions.
[2020-11-25 00:12:56,445 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:12:56,450 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2111 states to 2111 states and 2372 transitions.
[2020-11-25 00:12:56,450 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 696
[2020-11-25 00:12:56,451 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 696
[2020-11-25 00:12:56,451 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2111 states and 2372 transitions.
[2020-11-25 00:12:56,452 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:12:56,452 INFO  L728         BuchiCegarLoop]: Abstraction has 2111 states and 2372 transitions.
[2020-11-25 00:12:56,454 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2111 states and 2372 transitions.
[2020-11-25 00:12:56,464 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2111 to 2088.
[2020-11-25 00:12:56,464 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2088 states.
[2020-11-25 00:12:56,466 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2088 states to 2088 states and 2335 transitions.
[2020-11-25 00:12:56,466 INFO  L751         BuchiCegarLoop]: Abstraction has 2088 states and 2335 transitions.
[2020-11-25 00:12:56,466 INFO  L631         BuchiCegarLoop]: Abstraction has 2088 states and 2335 transitions.
[2020-11-25 00:12:56,466 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 00:12:56,466 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2088 states and 2335 transitions.
[2020-11-25 00:12:56,469 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:12:56,469 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:12:56,469 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:12:56,470 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:12:56,470 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BazToken0 := false;
[L2]                 call_transfer_BazToken0 := false;
[L2]     CALL        call main();
[L4250]              assume null == 0;
[L4251]  CALL        call this := FreshRefGenerator__success();
[L1927]              havoc newRef;
[L1928]              assume Alloc[newRef] == false;
[L1929]              Alloc[newRef] := true;
[L1930]              assume newRef != null;
[L4251]  RET         call this := FreshRefGenerator__success();
[L4252]              assume now >= 0;
[L4253]              assume DType[this] == BazToken;
[L4254]              assume msgvalue_MSG == 0;
[L4255]              gas := gas - 53000;
[L4256]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2063]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2048]              assume msgsender_MSG != null;
[L2049]              Balance[this] := 0;
[L2063]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  COND FALSE  !(revert)
[L2275]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2133]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2117]              owner_Owned[this] := null;
[L2118]              newOwner_Owned[this] := null;
[L2120]              owner_Owned[this] := msgsender_MSG;
[L2133]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  COND FALSE  !(revert)
[L2279]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1959]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1944]              assume msgsender_MSG != null;
[L1945]              Balance[this] := 0;
[L1959]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  COND FALSE  !(revert)
[L2283]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2232]              assume msgsender_MSG != null;
[L2233]              Balance[this] := 0;
[L2234]              symbol_BazToken[this] := -428571439;
[L2235]              name_BazToken[this] := -428571439;
[L2236]              decimals_BazToken[this] := 0;
[L2237]              _totalSupply_BazToken[this] := 0;
[L2238]              balances_BazToken[this] := zeroRefintArr();
[L2239]              sum_balances0[this] := 0;
[L2240]              allowed_BazToken[this] := zeroRefRefintArr();
[L2241]              sum_allowed1[this] := 0;
[L2243]              symbol_BazToken[this] := 1231671027;
[L2244]              name_BazToken[this] := 1319453082;
[L2245]              decimals_BazToken[this] := 18;
[L2246]              _totalSupply_BazToken[this] := 2500000000000000000000000;
[L2247]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2248]              balances_BazToken[this][-213091748074002454629334339881517515996861043291] := _totalSupply_BazToken[this];
[L2249]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2250]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2287]  RET         call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2288]  COND FALSE  !(revert)
[L793]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L794]               assume !revert && gas >= 0;
[L4256]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4257]              assume !revert && gas >= 0;
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND FALSE  !(choice == 13)
[L4166]  COND FALSE  !(choice == 12)
[L4173]  COND FALSE  !(choice == 11)
[L4180]  COND FALSE  !(choice == 10)
[L4186]  COND FALSE  !(choice == 9)
[L4192]  COND FALSE  !(choice == 8)
[L4198]  COND FALSE  !(choice == 7)
[L4204]  COND FALSE  !(choice == 6)
[L4210]  COND FALSE  !(choice == 5)
[L4216]  COND FALSE  !(choice == 4)
[L4222]  COND FALSE  !(choice == 3)
[L4228]  COND FALSE  !(choice == 2)
[L4235]  COND TRUE   choice == 1
[L4236]              gas := gas - 21000;
[L4237]  COND TRUE   gas >= 0
[L4238]              assume tokens_s544 >= 0 && tokens_s544 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4239]              assume msgvalue_MSG == 0;
[L4240]  CALL        call success_s544 := transferAnyERC20Token~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s544, tokens_s544);
[L1215]              havoc __exception;
[L1216]              revert := false;
[L1217]  COND FALSE  !(__exception)
[L1240]  CALL        call success_s544 := transferAnyERC20Token~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s544, tokens_s544);
[L2583]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3649]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L2583]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2584]  COND FALSE  !(revert)
[L2587]              assume DType[tokenAddress_s544] == ERC20Interface || DType[tokenAddress_s544] == BazToken;
[L2588]              __var_12 := tokenAddress_s544;
[L2589]  COND TRUE   DType[__var_12] == BazToken
[L2590]  CALL        call __var_11 := transfer~address~uint256_BazToken__success(__var_12, this, __var_13, owner_Owned[this], tokens_s544);
[L2355]  COND TRUE   DType[this] == BazToken
[L2356]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2356]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L2357]  COND FALSE  !(revert)
[L2363]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][msgsender_MSG];
[L2364]              balances_BazToken[this][msgsender_MSG] := __var_3;
[L2365]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][msgsender_MSG];
[L2366]  COND TRUE   DType[this] == BazToken
[L2367]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2367]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L2368]  COND FALSE  !(revert)
[L2374]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s371];
[L2375]              balances_BazToken[this][to_s371] := __var_4;
[L2376]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s371];
[L2377]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2378]              success_s371 := true;
[L2590]  RET         call __var_11 := transfer~address~uint256_BazToken__success(__var_12, this, __var_13, owner_Owned[this], tokens_s544);
[L2591]  COND FALSE  !(revert)
[L2599]              success_s544 := __var_11;
[L1240]  RET         call success_s544 := transferAnyERC20Token~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s544, tokens_s544);
[L1241]              assume !revert && gas >= 0;
[L4240]  RET         call success_s544 := transferAnyERC20Token~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s544, tokens_s544);
[L4260]  RET         call CorralChoice_BazToken(this);
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_BazToken[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s371] >= 0) && balances_BazToken[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][msgsender_MSG] >= 0) && balances_BazToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BazToken0 := true;
[L2]                 call_transfer_BazToken0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2355]  COND TRUE   DType[this] == BazToken
[L2356]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2356]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L2357]  COND FALSE  !(revert)
[L2363]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][msgsender_MSG];
[L2364]              balances_BazToken[this][msgsender_MSG] := __var_3;
[L2365]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][msgsender_MSG];
[L2366]  COND TRUE   DType[this] == BazToken
[L2367]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2367]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L2368]  COND FALSE  !(revert)
[L2374]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s371];
[L2375]              balances_BazToken[this][to_s371] := __var_4;
[L2376]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s371];
[L2377]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2378]              success_s371 := true;
[L957]   RET         call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s371 == true && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this])) && balances_BazToken[this] == old(balances_BazToken[this])) && allowed_BazToken[this] == old(allowed_BazToken[this])) && symbol_BazToken[this] == old(symbol_BazToken[this])) && name_BazToken[this] == old(name_BazToken[this])) && decimals_BazToken[this] == old(decimals_BazToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4164]  RET         call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_BazToken(this);

Loop:
[L4260]  CALL        call CorralChoice_BazToken(this);
[L4051]              havoc msgsender_MSG;
[L4052]              havoc msgvalue_MSG;
[L4053]              havoc choice;
[L4054]              havoc a_s23;
[L4055]              havoc b_s23;
[L4056]              havoc c_s23;
[L4057]              havoc a_s45;
[L4058]              havoc b_s45;
[L4059]              havoc c_s45;
[L4060]              havoc a_s73;
[L4061]              havoc b_s73;
[L4062]              havoc c_s73;
[L4063]              havoc a_s95;
[L4064]              havoc b_s95;
[L4065]              havoc c_s95;
[L4066]              havoc __ret_0_totalSupply;
[L4067]              havoc tokenOwner_s328;
[L4068]              havoc balance_s328;
[L4069]              havoc tokenOwner_s474;
[L4070]              havoc spender_s474;
[L4071]              havoc remaining_s474;
[L4072]              havoc to_s371;
[L4073]              havoc tokens_s371;
[L4074]              havoc success_s371;
[L4075]              havoc spender_s399;
[L4076]              havoc tokens_s399;
[L4077]              havoc success_s399;
[L4078]              havoc from_s458;
[L4079]              havoc to_s458;
[L4080]              havoc tokens_s458;
[L4081]              havoc success_s458;
[L4082]              havoc __ret_0_owner;
[L4083]              havoc __ret_0_newOwner;
[L4084]              havoc _newOwner_s217;
[L4085]              havoc __ret_0_symbol;
[L4086]              havoc __ret_0_name;
[L4087]              havoc __ret_0_decimals;
[L4088]              havoc __ret_0__totalSupply;
[L4089]              havoc spender_s517;
[L4090]              havoc tokens_s517;
[L4091]              havoc data_s517;
[L4092]              havoc success_s517;
[L4093]              havoc tokenAddress_s544;
[L4094]              havoc tokens_s544;
[L4095]              havoc success_s544;
[L4096]              havoc tmpNow;
[L4097]              havoc gas;
[L4098]              assume gas > 4000000 && gas <= 8000000;
[L4099]              tmpNow := now;
[L4100]              havoc now;
[L4101]              assume now > tmpNow;
[L4102]              assume msgsender_MSG != null;
[L4103]              assume DType[msgsender_MSG] != SafeMath;
[L4104]              assume DType[msgsender_MSG] != ERC20Interface;
[L4105]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4106]              assume DType[msgsender_MSG] != Owned;
[L4107]              assume DType[msgsender_MSG] != BazToken;
[L4108]              Alloc[msgsender_MSG] := true;
[L4109]  COND FALSE  !(choice == 20)
[L4117]  COND FALSE  !(choice == 19)
[L4125]  COND FALSE  !(choice == 18)
[L4133]  COND FALSE  !(choice == 17)
[L4141]  COND FALSE  !(choice == 16)
[L4147]  COND FALSE  !(choice == 15)
[L4153]  COND FALSE  !(choice == 14)
[L4159]  COND TRUE   choice == 13
[L4160]              gas := gas - 21000;
[L4161]  COND TRUE   gas >= 0
[L4162]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4163]              assume msgvalue_MSG == 0;
[L4164]  CALL        call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s371 && tokens_s371 <= balances_BazToken[this][msgsender_MSG]) && tokens_s371 >= 0) && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s371] >= 0) && balances_BazToken[this][to_s371] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][msgsender_MSG] >= 0) && balances_BazToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BazToken0 := true;
[L2]                 call_transfer_BazToken0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2355]  COND TRUE   DType[this] == BazToken
[L2356]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L1994]  COND FALSE  !(!(b_s45 <= a_s45))
[L1998]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2356]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L2357]  COND FALSE  !(revert)
[L2363]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][msgsender_MSG];
[L2364]              balances_BazToken[this][msgsender_MSG] := __var_3;
[L2365]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][msgsender_MSG];
[L2366]  COND TRUE   DType[this] == BazToken
[L2367]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L1976]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1977]  COND FALSE  !(!(c_s23 >= a_s23))
[L2367]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L2368]  COND FALSE  !(revert)
[L2374]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s371];
[L2375]              balances_BazToken[this][to_s371] := __var_4;
[L2376]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s371];
[L2377]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2378]              success_s371 := true;
[L957]   RET         call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s371 == true && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this])) && balances_BazToken[this] == old(balances_BazToken[this])) && allowed_BazToken[this] == old(allowed_BazToken[this])) && symbol_BazToken[this] == old(symbol_BazToken[this])) && name_BazToken[this] == old(name_BazToken[this])) && decimals_BazToken[this] == old(decimals_BazToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4164]  RET         call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4260]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:12:56,473 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:12:56,473 INFO  L82        PathProgramCache]: Analyzing trace with hash -439758381, now seen corresponding path program 1 times
[2020-11-25 00:12:56,474 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:12:56,513 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:12:57,348 WARN  L188               SmtUtils]: Spent 123.00 ms on a formula simplification. DAG size of input: 113 DAG size of output: 62
[2020-11-25 00:12:57,972 INFO  L134       CoverageAnalysis]: Checked inductivity of 68 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 67 trivial. 0 not checked.
[2020-11-25 00:12:57,972 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:12:57,972 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [41] total 41
[2020-11-25 00:12:57,972 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:12:57,973 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 41 interpolants.
[2020-11-25 00:12:57,973 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=152, Invalid=1488, Unknown=0, NotChecked=0, Total=1640
[2020-11-25 00:12:57,973 INFO  L87              Difference]: Start difference. First operand 2088 states and 2335 transitions. cyclomatic complexity: 256 Second operand 41 states.
[2020-11-25 00:13:00,911 WARN  L188               SmtUtils]: Spent 271.00 ms on a formula simplification. DAG size of input: 131 DAG size of output: 107
[2020-11-25 00:13:01,292 WARN  L188               SmtUtils]: Spent 315.00 ms on a formula simplification. DAG size of input: 132 DAG size of output: 108
[2020-11-25 00:13:01,665 WARN  L188               SmtUtils]: Spent 301.00 ms on a formula simplification. DAG size of input: 139 DAG size of output: 115
[2020-11-25 00:13:02,601 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:13:02,601 INFO  L93              Difference]: Finished difference Result 1066 states and 1195 transitions.
[2020-11-25 00:13:02,601 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 39 states. 
[2020-11-25 00:13:02,601 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1066 states and 1195 transitions.
[2020-11-25 00:13:02,603 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 00:13:02,603 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1066 states to 0 states and 0 transitions.
[2020-11-25 00:13:02,603 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 00:13:02,603 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 00:13:02,603 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 00:13:02,603 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:13:02,603 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 00:13:02,603 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 00:13:02,603 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 00:13:02,603 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 00:13:02,603 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 00:13:02,604 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 00:13:02,604 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 00:13:02,606 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:13:02 BasicIcfg
[2020-11-25 00:13:02,606 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 00:13:02,607 INFO  L168              Benchmark]: Toolchain (without parser) took 37890.56 ms. Allocated memory was 1.0 GB in the beginning and 3.0 GB in the end (delta: 1.9 GB). Free memory was 935.2 MB in the beginning and 2.4 GB in the end (delta: -1.5 GB). Peak memory consumption was 448.3 MB. Max. memory is 15.3 GB.
[2020-11-25 00:13:02,607 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.19 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 00:13:02,607 INFO  L168              Benchmark]: Boogie Preprocessor took 89.69 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 00:13:02,608 INFO  L168              Benchmark]: UtopiaSpecLang took 58.51 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 00:13:02,608 INFO  L168              Benchmark]: Boogie Printer took 14.32 ms. Allocated memory is still 1.0 GB. Free memory is still 919.1 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 00:13:02,608 INFO  L168              Benchmark]: RCFGBuilder took 762.91 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 806.0 MB in the end (delta: 113.1 MB). Peak memory consumption was 113.1 MB. Max. memory is 15.3 GB.
[2020-11-25 00:13:02,608 INFO  L168              Benchmark]: UtopiaLTL2Aut took 41.38 ms. Allocated memory is still 1.0 GB. Free memory was 806.0 MB in the beginning and 802.4 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 00:13:02,609 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1429.76 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 200.3 MB). Free memory was 802.4 MB in the beginning and 1.0 GB in the end (delta: -210.0 MB). Peak memory consumption was 180.9 MB. Max. memory is 15.3 GB.
[2020-11-25 00:13:02,609 INFO  L168              Benchmark]: BlockEncodingV2 took 128.90 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 947.3 MB in the end (delta: 65.1 MB). Peak memory consumption was 65.1 MB. Max. memory is 15.3 GB.
[2020-11-25 00:13:02,609 INFO  L168              Benchmark]: BuchiAutomizer took 35362.30 ms. Allocated memory was 1.2 GB in the beginning and 3.0 GB in the end (delta: 1.7 GB). Free memory was 942.7 MB in the beginning and 2.4 GB in the end (delta: -1.5 GB). Peak memory consumption was 255.5 MB. Max. memory is 15.3 GB.
[2020-11-25 00:13:02,612 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3718 locations, 6399 edges
  - StatisticsResult: Encoded RCFG
    3658 locations, 6239 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.19 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 89.69 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 58.51 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 14.32 ms. Allocated memory is still 1.0 GB. Free memory is still 919.1 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 762.91 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 806.0 MB in the end (delta: 113.1 MB). Peak memory consumption was 113.1 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 41.38 ms. Allocated memory is still 1.0 GB. Free memory was 806.0 MB in the beginning and 802.4 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1429.76 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 200.3 MB). Free memory was 802.4 MB in the beginning and 1.0 GB in the end (delta: -210.0 MB). Peak memory consumption was 180.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 128.90 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 947.3 MB in the end (delta: 65.1 MB). Peak memory consumption was 65.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 35362.30 ms. Allocated memory was 1.2 GB in the beginning and 3.0 GB in the end (delta: 1.7 GB). Free memory was 942.7 MB in the beginning and 2.4 GB in the end (delta: -1.5 GB). Peak memory consumption was 255.5 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1563 locations, 1975 edges
  - StatisticsResult: BuchiProgram size
    3718 locations, 6399 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 10 terminating modules (10 trivial, 0 deterministic, 0 nondeterministic). 10 modules have a trivial ranking function, the largest among these consists of 41 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 35.3s and 11 iterations.  TraceHistogramMax:2. Analysis of lassos took 7.0s. Construction of modules took 20.8s. BÃ¼chi inclusion checks took 6.7s. Highest rank in rank-based complementation 0. Minimization of det autom 10. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 9 MinimizatonAttempts, 2255 StatesRemovedByMinimization, 8 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 2676 states and ocurred in iteration 5.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 23286 SDtfs, 38708 SDslu, 91815 SDs, 0 SdLazy, 146225 SolverSat, 6753 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 20.8s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU10 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_(success_transfer_BazToken0)azToken0) ==> ( <>(success_transfer_BazToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
