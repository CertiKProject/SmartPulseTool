This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 20:09:04,665 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 20:09:04,666 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 20:09:04,677 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 20:09:04,677 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 20:09:04,678 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 20:09:04,679 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 20:09:04,681 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 20:09:04,682 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 20:09:04,683 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 20:09:04,684 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 20:09:04,684 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 20:09:04,685 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 20:09:04,686 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 20:09:04,687 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 20:09:04,687 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 20:09:04,688 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 20:09:04,689 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 20:09:04,691 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 20:09:04,692 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 20:09:04,693 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 20:09:04,694 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 20:09:04,695 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 20:09:04,695 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 20:09:04,696 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 20:09:04,696 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 20:09:04,696 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 20:09:04,697 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 20:09:04,697 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 20:09:04,697 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 20:09:04,698 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 20:09:04,698 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 20:09:04,699 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 20:09:04,700 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 20:09:04,701 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 20:09:04,701 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 20:09:04,701 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 20:09:04,702 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 20:09:04,702 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 20:09:04,703 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 20:09:04,703 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 20:09:04,704 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 20:09:04,715 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 20:09:04,715 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 20:09:04,716 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 20:09:04,716 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 20:09:04,716 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 20:09:04,716 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 20:09:04,717 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 20:09:04,717 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 20:09:04,717 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 20:09:04,717 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 20:09:04,717 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 20:09:04,717 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 20:09:04,717 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 20:09:04,717 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 20:09:04,718 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 20:09:04,718 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 20:09:04,718 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 20:09:04,718 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 20:09:04,718 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 20:09:04,718 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 20:09:04,718 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 20:09:04,718 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 20:09:04,718 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 20:09:04,718 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 20:09:04,719 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 20:09:04,719 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 20:09:04,744 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 20:09:04,762 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 20:09:04,765 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 20:09:04,766 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 20:09:04,767 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 20:09:04,767 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_transfer-fail.bpl
[2020-11-24 20:09:04,767 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_transfer-fail.bpl'
[2020-11-24 20:09:04,868 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 20:09:04,869 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 20:09:04,870 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 20:09:04,870 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 20:09:04,870 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 20:09:04,887 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:09:04" (1/1) ...
[2020-11-24 20:09:04,889 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:09:04" (1/1) ...
[2020-11-24 20:09:04,932 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:09:04" (1/1) ...
[2020-11-24 20:09:04,933 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:09:04" (1/1) ...
[2020-11-24 20:09:04,960 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:09:04" (1/1) ...
[2020-11-24 20:09:04,973 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:09:04" (1/1) ...
[2020-11-24 20:09:04,984 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:09:04" (1/1) ...
[2020-11-24 20:09:04,995 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 20:09:04,996 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 20:09:04,996 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 20:09:04,998 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 20:09:05,002 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:09:04" (1/1) ...
[2020-11-24 20:09:05,020 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-24 20:09:05,026 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-24 20:09:05,033 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-24 20:09:05,040 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender!=recipient_s277 && ( amount_s277>_balances_ERC20[this][msg.sender] || ( _balances_ERC20[this][recipient_s277] + amount_s277 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && amount_s277>=0 ) && amount_s277<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s277]>=0 ) && _balances_ERC20[this][recipient_s277]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IdentifierExpression[recipient_s277,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[amount_s277,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s277,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IdentifierExpression[amount_s277,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s277,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s277,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s277,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s277,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 20:09:05,047 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-24 20:09:05,047 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC200) ==> ( <>AP(fail_transfer_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-24 20:09:05,058 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:09:05 PropertyContainer
[2020-11-24 20:09:05,058 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 20:09:05,059 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 20:09:05,059 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 20:09:05,059 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 20:09:05,060 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:09:04" (1/2) ...
[2020-11-24 20:09:05,060 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 20:09:05,060 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 20:09:05,079 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:09:05" (2/2) ...
[2020-11-24 20:09:05,080 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 20:09:05,080 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 20:09:05,080 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 20:09:05,080 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 20:09:05,081 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:09:04" (1/2) ...
[2020-11-24 20:09:05,135 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 20:09:05,135 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:09:05,136 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 20:09:05,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 20:09:05,136 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:09:05,136 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-24 20:09:05,136 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:09:05,136 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-24 20:09:05,136 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-24 20:09:05,136 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-24 20:09:05,136 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-24 20:09:05,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-24 20:09:05,137 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-24 20:09:05,137 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-24 20:09:05,137 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-24 20:09:05,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-24 20:09:05,137 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-24 20:09:05,137 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-24 20:09:05,137 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-24 20:09:05,137 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-24 20:09:05,138 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-24 20:09:05,138 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-24 20:09:05,138 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 20:09:05,138 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 20:09:05,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 20:09:05,138 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-24 20:09:05,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-24 20:09:05,138 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-24 20:09:05,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-24 20:09:05,139 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-24 20:09:05,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-24 20:09:05,139 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 20:09:05,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-24 20:09:05,139 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 20:09:05,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-24 20:09:05,139 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 20:09:05,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 20:09:05,139 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-24 20:09:05,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-24 20:09:05,140 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-24 20:09:05,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-24 20:09:05,140 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-24 20:09:05,140 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-24 20:09:05,140 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-24 20:09:05,140 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-24 20:09:05,140 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-24 20:09:05,140 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-24 20:09:05,140 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-24 20:09:05,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-24 20:09:05,140 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-24 20:09:05,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-24 20:09:05,141 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-24 20:09:05,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-24 20:09:05,141 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-24 20:09:05,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-24 20:09:05,141 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-24 20:09:05,141 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-24 20:09:05,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-24 20:09:05,141 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-24 20:09:05,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-24 20:09:05,142 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-24 20:09:05,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-24 20:09:05,142 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-24 20:09:05,142 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient
[2020-11-24 20:09:05,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient
[2020-11-24 20:09:05,142 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_tokenRecipient
[2020-11-24 20:09:05,142 INFO  L130     BoogieDeclarations]: Found specification of procedure KeepToken_KeepToken_NoBaseCtor__success
[2020-11-24 20:09:05,142 INFO  L130     BoogieDeclarations]: Found specification of procedure KeepToken_KeepToken
[2020-11-24 20:09:05,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure KeepToken_KeepToken
[2020-11-24 20:09:05,143 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_KeepToken
[2020-11-24 20:09:05,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_KeepToken
[2020-11-24 20:09:05,143 INFO  L130     BoogieDeclarations]: Found specification of procedure NAME_KeepToken
[2020-11-24 20:09:05,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure NAME_KeepToken
[2020-11-24 20:09:05,143 INFO  L130     BoogieDeclarations]: Found specification of procedure SYMBOL_KeepToken
[2020-11-24 20:09:05,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure SYMBOL_KeepToken
[2020-11-24 20:09:05,143 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_KeepToken
[2020-11-24 20:09:05,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_KeepToken
[2020-11-24 20:09:05,143 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_KeepToken
[2020-11-24 20:09:05,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_KeepToken
[2020-11-24 20:09:05,144 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 20:09:05,144 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 20:09:05,144 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 20:09:05,144 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 20:09:05,144 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 20:09:05,144 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-24 20:09:05,144 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-24 20:09:05,144 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-24 20:09:05,144 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-24 20:09:05,144 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 20:09:05,144 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 20:09:05,145 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-24 20:09:05,145 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-24 20:09:05,145 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-24 20:09:05,145 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-24 20:09:05,145 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_tokenRecipient
[2020-11-24 20:09:05,145 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_tokenRecipient
[2020-11-24 20:09:05,145 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_KeepToken
[2020-11-24 20:09:05,145 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 20:09:05,145 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 20:09:05,145 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:09:05,145 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 20:09:05,145 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 20:09:05,145 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:09:05,145 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-24 20:09:05,146 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:09:05,146 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-24 20:09:05,146 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-24 20:09:05,146 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-24 20:09:05,146 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-24 20:09:05,146 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-24 20:09:05,146 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-24 20:09:05,146 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-24 20:09:05,146 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-24 20:09:05,146 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-24 20:09:05,146 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 20:09:05,146 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 20:09:05,146 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 20:09:05,147 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-24 20:09:05,147 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-24 20:09:05,147 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-24 20:09:05,147 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-24 20:09:05,147 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-24 20:09:05,147 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-24 20:09:05,147 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-24 20:09:05,147 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-24 20:09:05,147 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-24 20:09:05,147 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-24 20:09:05,147 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-24 20:09:05,147 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-24 20:09:05,147 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:09:05,148 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:09:05,148 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:09:05,148 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:09:05,148 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-24 20:09:05,148 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-24 20:09:05,148 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-24 20:09:05,148 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-24 20:09:05,148 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-24 20:09:05,148 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-24 20:09:05,148 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-24 20:09:05,148 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-24 20:09:05,148 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-24 20:09:05,149 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-24 20:09:05,149 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-24 20:09:05,149 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-24 20:09:05,149 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-24 20:09:05,149 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-24 20:09:05,149 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-24 20:09:05,149 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-24 20:09:05,149 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-24 20:09:05,149 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-24 20:09:05,150 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-24 20:09:05,150 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-24 20:09:05,150 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-24 20:09:05,150 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-24 20:09:05,150 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__success
[2020-11-24 20:09:05,150 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__fail
[2020-11-24 20:09:05,150 INFO  L130     BoogieDeclarations]: Found specification of procedure KeepToken_KeepToken_NoBaseCtor__fail
[2020-11-24 20:09:05,150 INFO  L130     BoogieDeclarations]: Found specification of procedure KeepToken_KeepToken__success
[2020-11-24 20:09:05,150 INFO  L130     BoogieDeclarations]: Found specification of procedure KeepToken_KeepToken__fail
[2020-11-24 20:09:05,150 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_KeepToken__success
[2020-11-24 20:09:05,150 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_KeepToken__fail
[2020-11-24 20:09:05,151 INFO  L130     BoogieDeclarations]: Found specification of procedure NAME_KeepToken__success
[2020-11-24 20:09:05,151 INFO  L130     BoogieDeclarations]: Found specification of procedure NAME_KeepToken__fail
[2020-11-24 20:09:05,151 INFO  L130     BoogieDeclarations]: Found specification of procedure SYMBOL_KeepToken__success
[2020-11-24 20:09:05,151 INFO  L130     BoogieDeclarations]: Found specification of procedure SYMBOL_KeepToken__fail
[2020-11-24 20:09:05,151 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_KeepToken__success
[2020-11-24 20:09:05,151 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_KeepToken__fail
[2020-11-24 20:09:05,151 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_KeepToken__success
[2020-11-24 20:09:05,151 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_KeepToken__fail
[2020-11-24 20:09:05,151 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 20:09:05,151 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 20:09:05,152 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 20:09:05,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 20:09:05,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 20:09:05,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:09:05,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:09:05,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 20:09:05,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 20:09:05,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:09:05,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:09:05,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-24 20:09:05,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-24 20:09:05,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:09:05,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:09:05,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-24 20:09:05,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-24 20:09:05,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-24 20:09:05,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-24 20:09:05,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-24 20:09:05,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-24 20:09:05,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-24 20:09:05,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-24 20:09:05,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-24 20:09:05,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-24 20:09:05,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-24 20:09:05,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-24 20:09:05,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-24 20:09:05,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-24 20:09:05,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 20:09:05,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 20:09:05,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 20:09:05,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 20:09:05,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-24 20:09:05,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-24 20:09:05,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-24 20:09:05,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-24 20:09:05,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-24 20:09:05,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-24 20:09:05,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-24 20:09:05,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-24 20:09:05,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-24 20:09:05,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-24 20:09:05,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-24 20:09:05,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-24 20:09:05,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:09:05,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:09:05,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:09:05,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:09:05,156 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-24 20:09:05,156 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-24 20:09:05,156 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-24 20:09:05,156 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-24 20:09:05,156 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-24 20:09:05,156 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-24 20:09:05,156 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-24 20:09:05,156 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-24 20:09:05,156 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-24 20:09:05,156 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-24 20:09:05,156 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-24 20:09:05,156 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-24 20:09:05,157 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-24 20:09:05,157 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-24 20:09:05,157 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-24 20:09:05,157 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-24 20:09:05,157 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-24 20:09:05,157 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-24 20:09:05,157 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-24 20:09:05,157 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-24 20:09:05,157 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-24 20:09:05,157 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-24 20:09:05,157 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-24 20:09:05,157 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-24 20:09:05,158 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-24 20:09:05,158 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-24 20:09:05,158 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-24 20:09:05,158 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-24 20:09:05,158 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-24 20:09:05,158 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-24 20:09:05,158 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__fail
[2020-11-24 20:09:05,158 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__success
[2020-11-24 20:09:05,158 INFO  L138     BoogieDeclarations]: Found implementation of procedure KeepToken_KeepToken_NoBaseCtor__fail
[2020-11-24 20:09:05,158 INFO  L138     BoogieDeclarations]: Found implementation of procedure KeepToken_KeepToken_NoBaseCtor__success
[2020-11-24 20:09:05,158 INFO  L138     BoogieDeclarations]: Found implementation of procedure KeepToken_KeepToken__fail
[2020-11-24 20:09:05,158 INFO  L138     BoogieDeclarations]: Found implementation of procedure KeepToken_KeepToken__success
[2020-11-24 20:09:05,159 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_KeepToken__fail
[2020-11-24 20:09:05,159 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_KeepToken__success
[2020-11-24 20:09:05,159 INFO  L138     BoogieDeclarations]: Found implementation of procedure NAME_KeepToken__fail
[2020-11-24 20:09:05,159 INFO  L138     BoogieDeclarations]: Found implementation of procedure NAME_KeepToken__success
[2020-11-24 20:09:05,159 INFO  L138     BoogieDeclarations]: Found implementation of procedure SYMBOL_KeepToken__fail
[2020-11-24 20:09:05,159 INFO  L138     BoogieDeclarations]: Found implementation of procedure SYMBOL_KeepToken__success
[2020-11-24 20:09:05,159 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_KeepToken__fail
[2020-11-24 20:09:05,159 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_KeepToken__success
[2020-11-24 20:09:05,159 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_KeepToken__fail
[2020-11-24 20:09:05,159 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_KeepToken__success
[2020-11-24 20:09:05,159 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 20:09:05,160 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 20:09:05,160 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 20:09:05,160 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 20:09:05,160 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 20:09:05,160 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 20:09:05,160 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 20:09:05,160 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 20:09:05,160 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-24 20:09:05,160 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-24 20:09:05,160 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-24 20:09:05,161 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-24 20:09:05,161 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 20:09:05,161 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 20:09:05,161 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-24 20:09:05,161 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-24 20:09:05,161 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-24 20:09:05,161 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-24 20:09:05,161 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_tokenRecipient
[2020-11-24 20:09:05,161 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_tokenRecipient
[2020-11-24 20:09:05,162 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_KeepToken
[2020-11-24 20:09:05,162 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 20:09:05,162 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 20:09:05,162 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 20:09:05,446 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:09:05,446 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:09:06,008 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 20:09:06,008 INFO  L286             CfgBuilder]: Removed 8 assue(true) statements.
[2020-11-24 20:09:06,010 INFO  L202        PluginConnector]: Adding new model KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:09:06 BoogieIcfgContainer
[2020-11-24 20:09:06,010 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:09:05" (2/2) ...
[2020-11-24 20:09:06,010 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 20:09:06,011 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@61ae1b5c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:09:06, skipping insertion in model container
[2020-11-24 20:09:06,011 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 20:09:06,011 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 20:09:06,011 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 20:09:06,012 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 20:09:06,012 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:09:04" (1/3) ...
[2020-11-24 20:09:06,013 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@5d927251 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:09:06, skipping insertion in model container
[2020-11-24 20:09:06,013 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:09:05" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 20:09:06,050 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:09:06 NWAContainer
[2020-11-24 20:09:06,050 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 20:09:06,050 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 20:09:06,050 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 20:09:06,051 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 20:09:06,052 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:09:06" (3/4) ...
[2020-11-24 20:09:06,052 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@22736271 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:09:06, skipping insertion in model container
[2020-11-24 20:09:06,052 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:09:06" (4/4) ...
[2020-11-24 20:09:06,056 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 20:09:06,061 INFO  L110   BuchiProductObserver]: Initial RCFG 2282 locations, 3331 edges
[2020-11-24 20:09:06,061 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 20:09:06,073 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 20:09:07,686 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 20:09:07,693 INFO  L110   BuchiProductObserver]: BuchiProgram size 5868 locations, 10888 edges
[2020-11-24 20:09:07,693 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:09:07 BoogieIcfgContainer
[2020-11-24 20:09:07,693 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 20:09:07,694 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 20:09:07,694 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 20:09:07,695 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 20:09:07,695 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:09:07" (1/1) ...
[2020-11-24 20:09:07,807 INFO  L313           BlockEncoder]: Initial Icfg 5868 locations, 10888 edges
[2020-11-24 20:09:07,808 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 20:09:07,808 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 20:09:07,808 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 20:09:07,809 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 20:09:07,822 INFO  L70    emoveInfeasibleEdges]: Removed 207 edges and 20 locations because of local infeasibility
[2020-11-24 20:09:07,834 INFO  L70        RemoveSinkStates]: Removed 234 edges and 140 locations by removing sink states
[2020-11-24 20:09:07,849 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 20:09:07,852 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 20:09:07,856 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 20:09:07,857 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 20:09:07,859 INFO  L313           BlockEncoder]: Encoded RCFG 5684 locations, 10412 edges
[2020-11-24 20:09:07,860 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:09:07 BasicIcfg
[2020-11-24 20:09:07,860 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 20:09:07,860 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 20:09:07,860 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 20:09:07,862 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 20:09:07,862 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:09:07,862 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:09:04" (1/6) ...
[2020-11-24 20:09:07,864 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5a6fa880 and model type KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:09:07, skipping insertion in model container
[2020-11-24 20:09:07,864 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:09:07,864 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:09:05" (2/6) ...
[2020-11-24 20:09:07,864 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5a6fa880 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:09:07, skipping insertion in model container
[2020-11-24 20:09:07,865 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:09:07,865 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:09:06" (3/6) ...
[2020-11-24 20:09:07,865 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5a6fa880 and model type KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:09:07, skipping insertion in model container
[2020-11-24 20:09:07,865 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:09:07,865 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:09:06" (4/6) ...
[2020-11-24 20:09:07,865 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5a6fa880 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:09:07, skipping insertion in model container
[2020-11-24 20:09:07,865 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:09:07,865 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:09:07" (5/6) ...
[2020-11-24 20:09:07,865 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5a6fa880 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 08:09:07, skipping insertion in model container
[2020-11-24 20:09:07,866 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:09:07,866 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:09:07" (6/6) ...
[2020-11-24 20:09:07,866 INFO  L404   chiAutomizerObserver]: Analyzing ICFG KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_transfer-fail.bpl_BEv2
[2020-11-24 20:09:07,898 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 20:09:07,898 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 20:09:07,898 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 20:09:07,898 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 20:09:07,898 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 20:09:07,898 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 20:09:07,898 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 20:09:07,898 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 20:09:07,898 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 20:09:07,937 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5684 states.
[2020-11-24 20:09:07,996 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:09:07,996 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:09:07,996 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:09:08,003 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:09:08,004 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:09:08,004 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 20:09:08,004 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5684 states.
[2020-11-24 20:09:08,027 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:09:08,028 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:09:08,028 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:09:08,029 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:09:08,029 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6168]              assume null == 0;
[L6169]  CALL        call this := FreshRefGenerator__success();
[L2372]              havoc newRef;
[L2373]              assume Alloc[newRef] == false;
[L2374]              Alloc[newRef] := true;
[L2375]              assume newRef != null;
[L6169]  RET         call this := FreshRefGenerator__success();
[L6170]              assume now >= 0;
[L6171]              assume DType[this] == KeepToken;
[L6172]              assume msgvalue_MSG == 0;
[L6173]              gas := gas - 53000;
[L6174]  CALL        call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L1368]              havoc __exception;
[L1369]              revert := false;
[L1370]  COND FALSE  !(__exception)
[L1395]  CALL        call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4024]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2560]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]              assume msgsender_MSG != null;
[L2546]              Balance[this] := 0;
[L2560]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  COND FALSE  !(revert)
[L4024]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4025]  COND TRUE   revert
[L1395]  RET         call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1396]              assume !revert && gas >= 0;
[L6174]  RET         call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L6175]              assume !revert && gas >= 0;

Loop:
[L6178]  CALL        call CorralChoice_KeepToken(this);
[L5986]              havoc msgsender_MSG;
[L5987]              havoc msgvalue_MSG;
[L5988]              havoc choice;
[L5989]              havoc __ret_0_totalSupply;
[L5990]              havoc account_s258;
[L5991]              havoc __ret_0_balanceOf;
[L5992]              havoc recipient_s277;
[L5993]              havoc amount_s277;
[L5994]              havoc __ret_0_transfer;
[L5995]              havoc owner_s293;
[L5996]              havoc spender_s293;
[L5997]              havoc __ret_0_allowance;
[L5998]              havoc spender_s312;
[L5999]              havoc amount_s312;
[L6000]              havoc __ret_0_approve;
[L6001]              havoc sender_s348;
[L6002]              havoc recipient_s348;
[L6003]              havoc amount_s348;
[L6004]              havoc __ret_0_transferFrom;
[L6005]              havoc spender_s375;
[L6006]              havoc addedValue_s375;
[L6007]              havoc __ret_0_increaseAllowance;
[L6008]              havoc spender_s403;
[L6009]              havoc subtractedValue_s403;
[L6010]              havoc __ret_0_decreaseAllowance;
[L6011]              havoc name_s650;
[L6012]              havoc symbol_s650;
[L6013]              havoc decimals_s650;
[L6014]              havoc __ret_0_name;
[L6015]              havoc __ret_0_symbol;
[L6016]              havoc __ret_0_decimals;
[L6017]              havoc amount_s691;
[L6018]              havoc account_s704;
[L6019]              havoc amount_s704;
[L6020]              havoc __ret_0_NAME;
[L6021]              havoc __ret_0_SYMBOL;
[L6022]              havoc __ret_0_DECIMALS;
[L6023]              havoc __ret_0_INITIAL_SUPPLY;
[L6024]              havoc _spender_s788;
[L6025]              havoc _value_s788;
[L6026]              havoc _extraData_s788;
[L6027]              havoc success_s788;
[L6028]              havoc tmpNow;
[L6029]              havoc gas;
[L6030]              assume gas > 4000000 && gas <= 8000000;
[L6031]              tmpNow := now;
[L6032]              havoc now;
[L6033]              assume now > tmpNow;
[L6034]              assume msgsender_MSG != null;
[L6035]              assume DType[msgsender_MSG] != SafeMath;
[L6036]              assume DType[msgsender_MSG] != Context;
[L6037]              assume DType[msgsender_MSG] != IERC20;
[L6038]              assume DType[msgsender_MSG] != ERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6040]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6041]              assume DType[msgsender_MSG] != tokenRecipient;
[L6042]              assume DType[msgsender_MSG] != KeepToken;
[L6043]              Alloc[msgsender_MSG] := true;
[L6044]  COND TRUE   choice == 18
[L6045]              gas := gas - 21000;
[L6046]  COND FALSE  !(gas >= 0)
[L6178]  RET         call CorralChoice_KeepToken(this);

[2020-11-24 20:09:08,042 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:09:08,042 INFO  L82        PathProgramCache]: Analyzing trace with hash -1517130980, now seen corresponding path program 1 times
[2020-11-24 20:09:08,046 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:09:08,065 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:09:08,099 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:09:08,101 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:09:08,102 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:09:08,448 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:09:08,458 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:09:08,458 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:09:08,460 INFO  L87              Difference]: Start difference. First operand 5684 states. Second operand 3 states.
[2020-11-24 20:09:08,714 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:09:08,714 INFO  L93              Difference]: Finished difference Result 3592 states and 4419 transitions.
[2020-11-24 20:09:08,714 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:09:08,715 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3592 states and 4419 transitions.
[2020-11-24 20:09:08,735 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:09:08,761 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3592 states to 3592 states and 4419 transitions.
[2020-11-24 20:09:08,762 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-24 20:09:08,765 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 800
[2020-11-24 20:09:08,765 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3592 states and 4419 transitions.
[2020-11-24 20:09:08,774 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:09:08,774 INFO  L728         BuchiCegarLoop]: Abstraction has 3592 states and 4419 transitions.
[2020-11-24 20:09:08,790 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3592 states and 4419 transitions.
[2020-11-24 20:09:08,843 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3592 to 3592.
[2020-11-24 20:09:08,844 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3592 states.
[2020-11-24 20:09:08,850 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3592 states to 3592 states and 4419 transitions.
[2020-11-24 20:09:08,851 INFO  L751         BuchiCegarLoop]: Abstraction has 3592 states and 4419 transitions.
[2020-11-24 20:09:08,851 INFO  L631         BuchiCegarLoop]: Abstraction has 3592 states and 4419 transitions.
[2020-11-24 20:09:08,851 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 20:09:08,851 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3592 states and 4419 transitions.
[2020-11-24 20:09:08,860 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:09:08,860 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:09:08,860 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:09:08,862 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:09:08,862 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6168]              assume null == 0;
[L6169]  CALL        call this := FreshRefGenerator__success();
[L2372]              havoc newRef;
[L2373]              assume Alloc[newRef] == false;
[L2374]              Alloc[newRef] := true;
[L2375]              assume newRef != null;
[L6169]  RET         call this := FreshRefGenerator__success();
[L6170]              assume now >= 0;
[L6171]              assume DType[this] == KeepToken;
[L6172]              assume msgvalue_MSG == 0;
[L6173]              gas := gas - 53000;
[L6174]  CALL        call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L1368]              havoc __exception;
[L1369]              revert := false;
[L1370]  COND FALSE  !(__exception)
[L1395]  CALL        call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4024]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2560]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]              assume msgsender_MSG != null;
[L2546]              Balance[this] := 0;
[L2560]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  COND TRUE   revert
[L4024]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4025]  COND TRUE   revert
[L1395]  RET         call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1396]              assume !revert && gas >= 0;
[L6174]  RET         call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L6175]              assume !revert && gas >= 0;
[L6178]  CALL        call CorralChoice_KeepToken(this);
[L5986]              havoc msgsender_MSG;
[L5987]              havoc msgvalue_MSG;
[L5988]              havoc choice;
[L5989]              havoc __ret_0_totalSupply;
[L5990]              havoc account_s258;
[L5991]              havoc __ret_0_balanceOf;
[L5992]              havoc recipient_s277;
[L5993]              havoc amount_s277;
[L5994]              havoc __ret_0_transfer;
[L5995]              havoc owner_s293;
[L5996]              havoc spender_s293;
[L5997]              havoc __ret_0_allowance;
[L5998]              havoc spender_s312;
[L5999]              havoc amount_s312;
[L6000]              havoc __ret_0_approve;
[L6001]              havoc sender_s348;
[L6002]              havoc recipient_s348;
[L6003]              havoc amount_s348;
[L6004]              havoc __ret_0_transferFrom;
[L6005]              havoc spender_s375;
[L6006]              havoc addedValue_s375;
[L6007]              havoc __ret_0_increaseAllowance;
[L6008]              havoc spender_s403;
[L6009]              havoc subtractedValue_s403;
[L6010]              havoc __ret_0_decreaseAllowance;
[L6011]              havoc name_s650;
[L6012]              havoc symbol_s650;
[L6013]              havoc decimals_s650;
[L6014]              havoc __ret_0_name;
[L6015]              havoc __ret_0_symbol;
[L6016]              havoc __ret_0_decimals;
[L6017]              havoc amount_s691;
[L6018]              havoc account_s704;
[L6019]              havoc amount_s704;
[L6020]              havoc __ret_0_NAME;
[L6021]              havoc __ret_0_SYMBOL;
[L6022]              havoc __ret_0_DECIMALS;
[L6023]              havoc __ret_0_INITIAL_SUPPLY;
[L6024]              havoc _spender_s788;
[L6025]              havoc _value_s788;
[L6026]              havoc _extraData_s788;
[L6027]              havoc success_s788;
[L6028]              havoc tmpNow;
[L6029]              havoc gas;
[L6030]              assume gas > 4000000 && gas <= 8000000;
[L6031]              tmpNow := now;
[L6032]              havoc now;
[L6033]              assume now > tmpNow;
[L6034]              assume msgsender_MSG != null;
[L6035]              assume DType[msgsender_MSG] != SafeMath;
[L6036]              assume DType[msgsender_MSG] != Context;
[L6037]              assume DType[msgsender_MSG] != IERC20;
[L6038]              assume DType[msgsender_MSG] != ERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6040]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6041]              assume DType[msgsender_MSG] != tokenRecipient;
[L6042]              assume DType[msgsender_MSG] != KeepToken;
[L6043]              Alloc[msgsender_MSG] := true;
[L6044]  COND FALSE  !(choice == 18)
[L6050]  COND FALSE  !(choice == 17)
[L6056]  COND TRUE   choice == 16
[L6057]              gas := gas - 21000;
[L6058]  COND TRUE   gas >= 0
[L6059]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6060]              assume msgvalue_MSG == 0;
[L6061]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s277 && (amount_s277 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s277] + amount_s277 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L462]               havoc __exception;
[L463]               revert := false;
[L464]   COND FALSE  !(__exception)
[L489]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2738]  COND TRUE   DType[this] == KeepToken
[L2739]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2574]              __ret_0_ := msgsender_MSG;
[L2739]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2740]  COND TRUE   revert
[L489]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L490]               assume !revert && gas >= 0;
[L6061]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L6178]  RET         call CorralChoice_KeepToken(this);

Loop:
[L6178]  CALL        call CorralChoice_KeepToken(this);
[L5986]              havoc msgsender_MSG;
[L5987]              havoc msgvalue_MSG;
[L5988]              havoc choice;
[L5989]              havoc __ret_0_totalSupply;
[L5990]              havoc account_s258;
[L5991]              havoc __ret_0_balanceOf;
[L5992]              havoc recipient_s277;
[L5993]              havoc amount_s277;
[L5994]              havoc __ret_0_transfer;
[L5995]              havoc owner_s293;
[L5996]              havoc spender_s293;
[L5997]              havoc __ret_0_allowance;
[L5998]              havoc spender_s312;
[L5999]              havoc amount_s312;
[L6000]              havoc __ret_0_approve;
[L6001]              havoc sender_s348;
[L6002]              havoc recipient_s348;
[L6003]              havoc amount_s348;
[L6004]              havoc __ret_0_transferFrom;
[L6005]              havoc spender_s375;
[L6006]              havoc addedValue_s375;
[L6007]              havoc __ret_0_increaseAllowance;
[L6008]              havoc spender_s403;
[L6009]              havoc subtractedValue_s403;
[L6010]              havoc __ret_0_decreaseAllowance;
[L6011]              havoc name_s650;
[L6012]              havoc symbol_s650;
[L6013]              havoc decimals_s650;
[L6014]              havoc __ret_0_name;
[L6015]              havoc __ret_0_symbol;
[L6016]              havoc __ret_0_decimals;
[L6017]              havoc amount_s691;
[L6018]              havoc account_s704;
[L6019]              havoc amount_s704;
[L6020]              havoc __ret_0_NAME;
[L6021]              havoc __ret_0_SYMBOL;
[L6022]              havoc __ret_0_DECIMALS;
[L6023]              havoc __ret_0_INITIAL_SUPPLY;
[L6024]              havoc _spender_s788;
[L6025]              havoc _value_s788;
[L6026]              havoc _extraData_s788;
[L6027]              havoc success_s788;
[L6028]              havoc tmpNow;
[L6029]              havoc gas;
[L6030]              assume gas > 4000000 && gas <= 8000000;
[L6031]              tmpNow := now;
[L6032]              havoc now;
[L6033]              assume now > tmpNow;
[L6034]              assume msgsender_MSG != null;
[L6035]              assume DType[msgsender_MSG] != SafeMath;
[L6036]              assume DType[msgsender_MSG] != Context;
[L6037]              assume DType[msgsender_MSG] != IERC20;
[L6038]              assume DType[msgsender_MSG] != ERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6040]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6041]              assume DType[msgsender_MSG] != tokenRecipient;
[L6042]              assume DType[msgsender_MSG] != KeepToken;
[L6043]              Alloc[msgsender_MSG] := true;
[L6044]  COND FALSE  !(choice == 18)
[L6050]  COND FALSE  !(choice == 17)
[L6056]  COND TRUE   choice == 16
[L6057]              gas := gas - 21000;
[L6058]  COND TRUE   gas >= 0
[L6059]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6060]              assume msgvalue_MSG == 0;
[L6061]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s277 && (amount_s277 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s277] + amount_s277 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L462]               havoc __exception;
[L463]               revert := false;
[L464]   COND FALSE  !(__exception)
[L489]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2738]  COND TRUE   DType[this] == KeepToken
[L2739]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2574]              __ret_0_ := msgsender_MSG;
[L2739]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2740]  COND TRUE   revert
[L489]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L490]               assume !revert && gas >= 0;
[L6061]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L6178]  RET         call CorralChoice_KeepToken(this);

[2020-11-24 20:09:08,866 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:09:08,866 INFO  L82        PathProgramCache]: Analyzing trace with hash 1296437926, now seen corresponding path program 1 times
[2020-11-24 20:09:08,867 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:09:08,875 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:09:08,895 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:09:08,895 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:09:08,895 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:09:08,896 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:09:08,896 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:09:08,897 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:09:08,897 INFO  L87              Difference]: Start difference. First operand 3592 states and 4419 transitions. cyclomatic complexity: 829 Second operand 3 states.
[2020-11-24 20:09:09,005 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:09:09,006 INFO  L93              Difference]: Finished difference Result 4602 states and 5668 transitions.
[2020-11-24 20:09:09,006 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:09:09,006 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4602 states and 5668 transitions.
[2020-11-24 20:09:09,023 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:09:09,043 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4602 states to 4250 states and 5062 transitions.
[2020-11-24 20:09:09,043 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 968
[2020-11-24 20:09:09,044 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 984
[2020-11-24 20:09:09,044 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4250 states and 5062 transitions.
[2020-11-24 20:09:09,050 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:09:09,050 INFO  L728         BuchiCegarLoop]: Abstraction has 4250 states and 5062 transitions.
[2020-11-24 20:09:09,054 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4250 states and 5062 transitions.
[2020-11-24 20:09:09,091 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4250 to 3883.
[2020-11-24 20:09:09,091 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3883 states.
[2020-11-24 20:09:09,096 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3883 states to 3883 states and 4605 transitions.
[2020-11-24 20:09:09,096 INFO  L751         BuchiCegarLoop]: Abstraction has 3883 states and 4605 transitions.
[2020-11-24 20:09:09,096 INFO  L631         BuchiCegarLoop]: Abstraction has 3883 states and 4605 transitions.
[2020-11-24 20:09:09,096 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 20:09:09,096 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3883 states and 4605 transitions.
[2020-11-24 20:09:09,103 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:09:09,103 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:09:09,103 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:09:09,106 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:09:09,106 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6168]              assume null == 0;
[L6169]  CALL        call this := FreshRefGenerator__success();
[L2372]              havoc newRef;
[L2373]              assume Alloc[newRef] == false;
[L2374]              Alloc[newRef] := true;
[L2375]              assume newRef != null;
[L6169]  RET         call this := FreshRefGenerator__success();
[L6170]              assume now >= 0;
[L6171]              assume DType[this] == KeepToken;
[L6172]              assume msgvalue_MSG == 0;
[L6173]              gas := gas - 53000;
[L6174]  CALL        call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L1368]              havoc __exception;
[L1369]              revert := false;
[L1370]  COND FALSE  !(__exception)
[L1395]  CALL        call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4024]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2560]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]              assume msgsender_MSG != null;
[L2546]              Balance[this] := 0;
[L2560]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  COND FALSE  !(revert)
[L4024]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4025]  COND FALSE  !(revert)
[L4028]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2604]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2589]              assume msgsender_MSG != null;
[L2590]              Balance[this] := 0;
[L2604]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  COND FALSE  !(revert)
[L4028]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]  COND FALSE  !(revert)
[L4032]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2654]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2560]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]              assume msgsender_MSG != null;
[L2546]              Balance[this] := 0;
[L2560]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  COND FALSE  !(revert)
[L2654]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2655]  COND FALSE  !(revert)
[L2658]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2604]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2589]              assume msgsender_MSG != null;
[L2590]              Balance[this] := 0;
[L2604]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  COND FALSE  !(revert)
[L2658]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2659]  COND FALSE  !(revert)
[L2662]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2626]              assume msgsender_MSG != null;
[L2627]              Balance[this] := 0;
[L2628]              _balances_ERC20[this] := zeroRefintArr();
[L2629]              sum__balances0[this] := 0;
[L2630]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2631]              sum__allowances1[this] := 0;
[L2632]              _totalSupply_ERC20[this] := 0;
[L2662]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2663]  COND FALSE  !(revert)
[L4032]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4033]  COND FALSE  !(revert)
[L4036]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3808]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2560]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]              assume msgsender_MSG != null;
[L2546]              Balance[this] := 0;
[L2560]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  COND FALSE  !(revert)
[L3808]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  COND FALSE  !(revert)
[L3812]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2604]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2589]              assume msgsender_MSG != null;
[L2590]              Balance[this] := 0;
[L2604]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  COND FALSE  !(revert)
[L3812]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2654]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2560]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]              assume msgsender_MSG != null;
[L2546]              Balance[this] := 0;
[L2560]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  COND FALSE  !(revert)
[L2654]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2655]  COND FALSE  !(revert)
[L2658]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2604]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2589]              assume msgsender_MSG != null;
[L2590]              Balance[this] := 0;
[L2604]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  COND FALSE  !(revert)
[L2658]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2659]  COND FALSE  !(revert)
[L2662]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2626]              assume msgsender_MSG != null;
[L2627]              Balance[this] := 0;
[L2628]              _balances_ERC20[this] := zeroRefintArr();
[L2629]              sum__balances0[this] := 0;
[L2630]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2631]              sum__allowances1[this] := 0;
[L2632]              _totalSupply_ERC20[this] := 0;
[L2662]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2663]  COND FALSE  !(revert)
[L3816]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3781]              assume msgsender_MSG != null;
[L3782]              Balance[this] := 0;
[L3820]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L4036]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4037]  COND FALSE  !(revert)
[L4040]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, NAME_KeepToken[this], SYMBOL_KeepToken[this], DECIMALS_KeepToken[this]);
[L3724]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2604]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2589]              assume msgsender_MSG != null;
[L2590]              Balance[this] := 0;
[L2604]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  COND FALSE  !(revert)
[L3724]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3725]  COND FALSE  !(revert)
[L3728]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s650, symbol_s650, decimals_s650);
[L3699]              assume msgsender_MSG != null;
[L3700]              Balance[this] := 0;
[L3701]              _name_ERC20Detailed[this] := -708534286;
[L3702]              _symbol_ERC20Detailed[this] := -708534286;
[L3703]              _decimals_ERC20Detailed[this] := 0;
[L3705]              _name_ERC20Detailed[this] := name_s650;
[L3706]              _symbol_ERC20Detailed[this] := symbol_s650;
[L3707]              _decimals_ERC20Detailed[this] := decimals_s650;
[L3728]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s650, symbol_s650, decimals_s650);
[L3729]  COND FALSE  !(revert)
[L4040]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, NAME_KeepToken[this], SYMBOL_KeepToken[this], DECIMALS_KeepToken[this]);
[L4041]  COND FALSE  !(revert)
[L4044]  CALL        call KeepToken_KeepToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3977]              assume msgsender_MSG != null;
[L3978]              Balance[this] := 0;
[L3979]              NAME_KeepToken[this] := 153019343;
[L3980]              SYMBOL_KeepToken[this] := 577946439;
[L3981]              DECIMALS_KeepToken[this] := 18;
[L3982]              INITIAL_SUPPLY_KeepToken[this] := 1000000000000000013287555072 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3984]  COND TRUE   DType[this] == KeepToken
[L3985]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_KeepToken[this]);
[L3408]              __var_16 := null;
[L3409]  COND FALSE  !(!(account_s503 != null))
[L3413]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L2425]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2426]  COND FALSE  !(!(c_s26 >= a_s26))
[L2430]              __ret_0_ := c_s26;
[L3413]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L3414]  COND FALSE  !(revert)
[L3417]              _totalSupply_ERC20[this] := __var_17;
[L3418]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L2425]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2426]  COND FALSE  !(!(c_s26 >= a_s26))
[L2430]              __ret_0_ := c_s26;
[L3418]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L3419]  COND FALSE  !(revert)
[L3422]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s503];
[L3423]              _balances_ERC20[this][account_s503] := __var_18;
[L3424]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s503];
[L3425]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3985]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_KeepToken[this]);
[L3986]  COND FALSE  !(revert)
[L4044]  RET         call KeepToken_KeepToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND FALSE  !(revert)
[L1395]  RET         call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1396]              assume !revert && gas >= 0;
[L6174]  RET         call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L6175]              assume !revert && gas >= 0;
[L6178]  CALL        call CorralChoice_KeepToken(this);
[L5986]              havoc msgsender_MSG;
[L5987]              havoc msgvalue_MSG;
[L5988]              havoc choice;
[L5989]              havoc __ret_0_totalSupply;
[L5990]              havoc account_s258;
[L5991]              havoc __ret_0_balanceOf;
[L5992]              havoc recipient_s277;
[L5993]              havoc amount_s277;
[L5994]              havoc __ret_0_transfer;
[L5995]              havoc owner_s293;
[L5996]              havoc spender_s293;
[L5997]              havoc __ret_0_allowance;
[L5998]              havoc spender_s312;
[L5999]              havoc amount_s312;
[L6000]              havoc __ret_0_approve;
[L6001]              havoc sender_s348;
[L6002]              havoc recipient_s348;
[L6003]              havoc amount_s348;
[L6004]              havoc __ret_0_transferFrom;
[L6005]              havoc spender_s375;
[L6006]              havoc addedValue_s375;
[L6007]              havoc __ret_0_increaseAllowance;
[L6008]              havoc spender_s403;
[L6009]              havoc subtractedValue_s403;
[L6010]              havoc __ret_0_decreaseAllowance;
[L6011]              havoc name_s650;
[L6012]              havoc symbol_s650;
[L6013]              havoc decimals_s650;
[L6014]              havoc __ret_0_name;
[L6015]              havoc __ret_0_symbol;
[L6016]              havoc __ret_0_decimals;
[L6017]              havoc amount_s691;
[L6018]              havoc account_s704;
[L6019]              havoc amount_s704;
[L6020]              havoc __ret_0_NAME;
[L6021]              havoc __ret_0_SYMBOL;
[L6022]              havoc __ret_0_DECIMALS;
[L6023]              havoc __ret_0_INITIAL_SUPPLY;
[L6024]              havoc _spender_s788;
[L6025]              havoc _value_s788;
[L6026]              havoc _extraData_s788;
[L6027]              havoc success_s788;
[L6028]              havoc tmpNow;
[L6029]              havoc gas;
[L6030]              assume gas > 4000000 && gas <= 8000000;
[L6031]              tmpNow := now;
[L6032]              havoc now;
[L6033]              assume now > tmpNow;
[L6034]              assume msgsender_MSG != null;
[L6035]              assume DType[msgsender_MSG] != SafeMath;
[L6036]              assume DType[msgsender_MSG] != Context;
[L6037]              assume DType[msgsender_MSG] != IERC20;
[L6038]              assume DType[msgsender_MSG] != ERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6040]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6041]              assume DType[msgsender_MSG] != tokenRecipient;
[L6042]              assume DType[msgsender_MSG] != KeepToken;
[L6043]              Alloc[msgsender_MSG] := true;
[L6044]  COND FALSE  !(choice == 18)
[L6050]  COND FALSE  !(choice == 17)
[L6056]  COND TRUE   choice == 16
[L6057]              gas := gas - 21000;
[L6058]  COND TRUE   gas >= 0
[L6059]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6060]              assume msgvalue_MSG == 0;
[L6061]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s277 && (amount_s277 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s277] + amount_s277 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L462]               havoc __exception;
[L463]               revert := false;
[L464]   COND FALSE  !(__exception)
[L489]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2738]  COND TRUE   DType[this] == KeepToken
[L2739]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2574]              __ret_0_ := msgsender_MSG;
[L2739]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2740]  COND FALSE  !(revert)
[L2756]  COND TRUE   DType[this] == KeepToken
[L2757]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3352]              __var_12 := null;
[L3353]  COND FALSE  !(!(sender_s460 != null))
[L3357]              __var_13 := null;
[L3358]  COND FALSE  !(!(recipient_s460 != null))
[L3362]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, -812884746);
[L2449]  COND FALSE  !(!(b_s53 <= a_s53))
[L2453]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2454]              __ret_0_ := c_s53;
[L3362]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, -812884746);
[L3363]  COND FALSE  !(revert)
[L3366]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3367]              _balances_ERC20[this][sender_s460] := __var_14;
[L3368]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3369]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2425]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2426]  COND FALSE  !(!(c_s26 >= a_s26))
[L2430]              __ret_0_ := c_s26;
[L3369]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3370]  COND FALSE  !(revert)
[L3373]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3374]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3375]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3376]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2757]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L2758]  COND FALSE  !(revert)
[L2774]              __ret_0_ := true;
[L489]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L490]               assume !revert && gas >= 0;
[L6061]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L6178]  RET         call CorralChoice_KeepToken(this);

Loop:
[L6178]  CALL        call CorralChoice_KeepToken(this);
[L5986]              havoc msgsender_MSG;
[L5987]              havoc msgvalue_MSG;
[L5988]              havoc choice;
[L5989]              havoc __ret_0_totalSupply;
[L5990]              havoc account_s258;
[L5991]              havoc __ret_0_balanceOf;
[L5992]              havoc recipient_s277;
[L5993]              havoc amount_s277;
[L5994]              havoc __ret_0_transfer;
[L5995]              havoc owner_s293;
[L5996]              havoc spender_s293;
[L5997]              havoc __ret_0_allowance;
[L5998]              havoc spender_s312;
[L5999]              havoc amount_s312;
[L6000]              havoc __ret_0_approve;
[L6001]              havoc sender_s348;
[L6002]              havoc recipient_s348;
[L6003]              havoc amount_s348;
[L6004]              havoc __ret_0_transferFrom;
[L6005]              havoc spender_s375;
[L6006]              havoc addedValue_s375;
[L6007]              havoc __ret_0_increaseAllowance;
[L6008]              havoc spender_s403;
[L6009]              havoc subtractedValue_s403;
[L6010]              havoc __ret_0_decreaseAllowance;
[L6011]              havoc name_s650;
[L6012]              havoc symbol_s650;
[L6013]              havoc decimals_s650;
[L6014]              havoc __ret_0_name;
[L6015]              havoc __ret_0_symbol;
[L6016]              havoc __ret_0_decimals;
[L6017]              havoc amount_s691;
[L6018]              havoc account_s704;
[L6019]              havoc amount_s704;
[L6020]              havoc __ret_0_NAME;
[L6021]              havoc __ret_0_SYMBOL;
[L6022]              havoc __ret_0_DECIMALS;
[L6023]              havoc __ret_0_INITIAL_SUPPLY;
[L6024]              havoc _spender_s788;
[L6025]              havoc _value_s788;
[L6026]              havoc _extraData_s788;
[L6027]              havoc success_s788;
[L6028]              havoc tmpNow;
[L6029]              havoc gas;
[L6030]              assume gas > 4000000 && gas <= 8000000;
[L6031]              tmpNow := now;
[L6032]              havoc now;
[L6033]              assume now > tmpNow;
[L6034]              assume msgsender_MSG != null;
[L6035]              assume DType[msgsender_MSG] != SafeMath;
[L6036]              assume DType[msgsender_MSG] != Context;
[L6037]              assume DType[msgsender_MSG] != IERC20;
[L6038]              assume DType[msgsender_MSG] != ERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6040]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6041]              assume DType[msgsender_MSG] != tokenRecipient;
[L6042]              assume DType[msgsender_MSG] != KeepToken;
[L6043]              Alloc[msgsender_MSG] := true;
[L6044]  COND FALSE  !(choice == 18)
[L6050]  COND FALSE  !(choice == 17)
[L6056]  COND TRUE   choice == 16
[L6057]              gas := gas - 21000;
[L6058]  COND TRUE   gas >= 0
[L6059]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6060]              assume msgvalue_MSG == 0;
[L6061]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s277 && (amount_s277 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s277] + amount_s277 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L462]               havoc __exception;
[L463]               revert := false;
[L464]   COND FALSE  !(__exception)
[L489]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2738]  COND TRUE   DType[this] == KeepToken
[L2739]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2574]              __ret_0_ := msgsender_MSG;
[L2739]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2740]  COND FALSE  !(revert)
[L2756]  COND TRUE   DType[this] == KeepToken
[L2757]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3352]              __var_12 := null;
[L3353]  COND FALSE  !(!(sender_s460 != null))
[L3357]              __var_13 := null;
[L3358]  COND FALSE  !(!(recipient_s460 != null))
[L3362]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, -812884746);
[L2449]  COND FALSE  !(!(b_s53 <= a_s53))
[L2453]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2454]              __ret_0_ := c_s53;
[L3362]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, -812884746);
[L3363]  COND FALSE  !(revert)
[L3366]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3367]              _balances_ERC20[this][sender_s460] := __var_14;
[L3368]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3369]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2425]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2426]  COND FALSE  !(!(c_s26 >= a_s26))
[L2430]              __ret_0_ := c_s26;
[L3369]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3370]  COND FALSE  !(revert)
[L3373]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3374]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3375]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3376]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2757]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L2758]  COND FALSE  !(revert)
[L2774]              __ret_0_ := true;
[L489]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L490]               assume !revert && gas >= 0;
[L6061]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L6178]  RET         call CorralChoice_KeepToken(this);

[2020-11-24 20:09:09,111 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:09:09,111 INFO  L82        PathProgramCache]: Analyzing trace with hash 415250227, now seen corresponding path program 1 times
[2020-11-24 20:09:09,112 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:09:09,135 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:09:09,554 INFO  L134       CoverageAnalysis]: Checked inductivity of 188 backedges. 10 proven. 0 refuted. 0 times theorem prover too weak. 178 trivial. 0 not checked.
[2020-11-24 20:09:09,554 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:09:09,555 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [21] imperfect sequences [] total 21
[2020-11-24 20:09:09,555 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:09:09,556 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-24 20:09:09,556 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=53, Invalid=409, Unknown=0, NotChecked=0, Total=462
[2020-11-24 20:09:09,556 INFO  L87              Difference]: Start difference. First operand 3883 states and 4605 transitions. cyclomatic complexity: 724 Second operand 22 states.
[2020-11-24 20:09:13,828 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:09:13,828 INFO  L93              Difference]: Finished difference Result 3989 states and 4724 transitions.
[2020-11-24 20:09:13,828 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-11-24 20:09:13,829 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3989 states and 4724 transitions.
[2020-11-24 20:09:13,838 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:09:13,851 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3989 states to 3989 states and 4724 transitions.
[2020-11-24 20:09:13,851 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 944
[2020-11-24 20:09:13,852 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 944
[2020-11-24 20:09:13,852 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3989 states and 4724 transitions.
[2020-11-24 20:09:13,856 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:09:13,856 INFO  L728         BuchiCegarLoop]: Abstraction has 3989 states and 4724 transitions.
[2020-11-24 20:09:13,859 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3989 states and 4724 transitions.
[2020-11-24 20:09:13,888 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3989 to 3791.
[2020-11-24 20:09:13,888 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3791 states.
[2020-11-24 20:09:13,893 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3791 states to 3791 states and 4481 transitions.
[2020-11-24 20:09:13,893 INFO  L751         BuchiCegarLoop]: Abstraction has 3791 states and 4481 transitions.
[2020-11-24 20:09:13,893 INFO  L631         BuchiCegarLoop]: Abstraction has 3791 states and 4481 transitions.
[2020-11-24 20:09:13,893 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 20:09:13,893 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3791 states and 4481 transitions.
[2020-11-24 20:09:13,897 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:09:13,897 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:09:13,897 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:09:13,900 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:09:13,900 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6168]              assume null == 0;
[L6169]  CALL        call this := FreshRefGenerator__success();
[L2372]              havoc newRef;
[L2373]              assume Alloc[newRef] == false;
[L2374]              Alloc[newRef] := true;
[L2375]              assume newRef != null;
[L6169]  RET         call this := FreshRefGenerator__success();
[L6170]              assume now >= 0;
[L6171]              assume DType[this] == KeepToken;
[L6172]              assume msgvalue_MSG == 0;
[L6173]              gas := gas - 53000;
[L6174]  CALL        call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L1368]              havoc __exception;
[L1369]              revert := false;
[L1370]  COND TRUE   __exception
[L1371]              __tmp__Balance := Balance;
[L1372]              __tmp__DType := DType;
[L1373]              __tmp__Alloc := Alloc;
[L1374]              __tmp__balance_ADDR := balance_ADDR;
[L1375]              __tmp__M_Ref_int := M_Ref_int;
[L1376]              __tmp__sum__balances0 := sum__balances0;
[L1377]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1378]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1379]              __tmp__sum__allowances1 := sum__allowances1;
[L1380]              __tmp__Length := Length;
[L1381]              __tmp__now := now;
[L1382]              __tmp___balances_ERC20 := _balances_ERC20;
[L1383]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1384]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1385]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1386]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1387]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1388]              __tmp__NAME_KeepToken := NAME_KeepToken;
[L1389]              __tmp__SYMBOL_KeepToken := SYMBOL_KeepToken;
[L1390]              __tmp__DECIMALS_KeepToken := DECIMALS_KeepToken;
[L1391]              __tmp__INITIAL_SUPPLY_KeepToken := INITIAL_SUPPLY_KeepToken;
[L1392]  CALL        call KeepToken_KeepToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2552]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2537]              assume msgsender_MSG != null;
[L2538]              __tmp__Balance[this] := 0;
[L2552]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2553]  COND FALSE  !(revert)
[L3996]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4000]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2596]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2581]              assume msgsender_MSG != null;
[L2582]              __tmp__Balance[this] := 0;
[L2596]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2597]  COND FALSE  !(revert)
[L4000]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4001]  COND FALSE  !(revert)
[L4004]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2638]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2552]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2537]              assume msgsender_MSG != null;
[L2538]              __tmp__Balance[this] := 0;
[L2552]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2553]  COND FALSE  !(revert)
[L2638]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2639]  COND FALSE  !(revert)
[L2642]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2596]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2581]              assume msgsender_MSG != null;
[L2582]              __tmp__Balance[this] := 0;
[L2596]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2597]  COND FALSE  !(revert)
[L2642]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2643]  COND FALSE  !(revert)
[L2646]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2613]              assume msgsender_MSG != null;
[L2614]              __tmp__Balance[this] := 0;
[L2615]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2616]              __tmp__sum__balances0[this] := 0;
[L2617]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2618]              __tmp__sum__allowances1[this] := 0;
[L2619]              __tmp___totalSupply_ERC20[this] := 0;
[L2646]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2647]  COND FALSE  !(revert)
[L4004]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4008]  CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3788]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2552]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2537]              assume msgsender_MSG != null;
[L2538]              __tmp__Balance[this] := 0;
[L2552]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2553]  COND FALSE  !(revert)
[L3788]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3789]  COND FALSE  !(revert)
[L3792]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2596]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2581]              assume msgsender_MSG != null;
[L2582]              __tmp__Balance[this] := 0;
[L2596]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2597]  COND FALSE  !(revert)
[L3792]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3793]  COND FALSE  !(revert)
[L3796]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2638]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2552]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2537]              assume msgsender_MSG != null;
[L2538]              __tmp__Balance[this] := 0;
[L2552]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2553]  COND FALSE  !(revert)
[L2638]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2639]  COND FALSE  !(revert)
[L2642]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2596]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2581]              assume msgsender_MSG != null;
[L2582]              __tmp__Balance[this] := 0;
[L2596]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2597]  COND FALSE  !(revert)
[L2642]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2643]  COND FALSE  !(revert)
[L2646]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2613]              assume msgsender_MSG != null;
[L2614]              __tmp__Balance[this] := 0;
[L2615]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2616]              __tmp__sum__balances0[this] := 0;
[L2617]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2618]              __tmp__sum__allowances1[this] := 0;
[L2619]              __tmp___totalSupply_ERC20[this] := 0;
[L2646]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2647]  COND FALSE  !(revert)
[L3796]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3797]  COND FALSE  !(revert)
[L3800]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3773]              assume msgsender_MSG != null;
[L3774]              __tmp__Balance[this] := 0;
[L3800]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3801]  COND FALSE  !(revert)
[L4008]  RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4009]  COND FALSE  !(revert)
[L4012]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__NAME_KeepToken[this], __tmp__SYMBOL_KeepToken[this], __tmp__DECIMALS_KeepToken[this]);
[L3712]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2596]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2581]              assume msgsender_MSG != null;
[L2582]              __tmp__Balance[this] := 0;
[L2596]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2597]  COND FALSE  !(revert)
[L3712]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3713]  COND FALSE  !(revert)
[L3716]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s650, symbol_s650, decimals_s650);
[L3685]              assume msgsender_MSG != null;
[L3686]              __tmp__Balance[this] := 0;
[L3687]              __tmp___name_ERC20Detailed[this] := -708534286;
[L3688]              __tmp___symbol_ERC20Detailed[this] := -708534286;
[L3689]              __tmp___decimals_ERC20Detailed[this] := 0;
[L3691]              __tmp___name_ERC20Detailed[this] := name_s650;
[L3692]              __tmp___symbol_ERC20Detailed[this] := symbol_s650;
[L3693]              __tmp___decimals_ERC20Detailed[this] := decimals_s650;
[L3716]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s650, symbol_s650, decimals_s650);
[L3717]  COND FALSE  !(revert)
[L4012]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__NAME_KeepToken[this], __tmp__SYMBOL_KeepToken[this], __tmp__DECIMALS_KeepToken[this]);
[L4013]  COND FALSE  !(revert)
[L4016]  CALL        call KeepToken_KeepToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3957]              assume msgsender_MSG != null;
[L3958]              __tmp__Balance[this] := 0;
[L3959]              __tmp__NAME_KeepToken[this] := 153019343;
[L3960]              __tmp__SYMBOL_KeepToken[this] := 577946439;
[L3961]              __tmp__DECIMALS_KeepToken[this] := 18;
[L3962]              __tmp__INITIAL_SUPPLY_KeepToken[this] := 1000000000000000013287555072 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3964]  COND TRUE   __tmp__DType[this] == KeepToken
[L3965]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_KeepToken[this]);
[L3384]              __var_16 := null;
[L3385]  COND FALSE  !(!(account_s503 != null))
[L3389]  CALL        call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s503);
[L2413]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2414]  COND FALSE  !(!(c_s26 >= a_s26))
[L2418]              __ret_0_ := c_s26;
[L3389]  RET         call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s503);
[L3390]  COND FALSE  !(revert)
[L3393]              __tmp___totalSupply_ERC20[this] := __var_17;
[L3394]  CALL        call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s503], amount_s503);
[L2413]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2414]  COND FALSE  !(!(c_s26 >= a_s26))
[L2418]              __ret_0_ := c_s26;
[L3394]  RET         call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s503], amount_s503);
[L3395]  COND FALSE  !(revert)
[L3398]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s503];
[L3399]              __tmp___balances_ERC20[this][account_s503] := __var_18;
[L3400]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s503];
[L3965]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_KeepToken[this]);
[L3966]  COND FALSE  !(revert)
[L4016]  RET         call KeepToken_KeepToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4017]  COND FALSE  !(revert)
[L1392]  RET         call KeepToken_KeepToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1393]              assume revert || gas < 0;
[L6174]  RET         call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L6175]              assume !revert && gas >= 0;
[L6178]  CALL        call CorralChoice_KeepToken(this);
[L5986]              havoc msgsender_MSG;
[L5987]              havoc msgvalue_MSG;
[L5988]              havoc choice;
[L5989]              havoc __ret_0_totalSupply;
[L5990]              havoc account_s258;
[L5991]              havoc __ret_0_balanceOf;
[L5992]              havoc recipient_s277;
[L5993]              havoc amount_s277;
[L5994]              havoc __ret_0_transfer;
[L5995]              havoc owner_s293;
[L5996]              havoc spender_s293;
[L5997]              havoc __ret_0_allowance;
[L5998]              havoc spender_s312;
[L5999]              havoc amount_s312;
[L6000]              havoc __ret_0_approve;
[L6001]              havoc sender_s348;
[L6002]              havoc recipient_s348;
[L6003]              havoc amount_s348;
[L6004]              havoc __ret_0_transferFrom;
[L6005]              havoc spender_s375;
[L6006]              havoc addedValue_s375;
[L6007]              havoc __ret_0_increaseAllowance;
[L6008]              havoc spender_s403;
[L6009]              havoc subtractedValue_s403;
[L6010]              havoc __ret_0_decreaseAllowance;
[L6011]              havoc name_s650;
[L6012]              havoc symbol_s650;
[L6013]              havoc decimals_s650;
[L6014]              havoc __ret_0_name;
[L6015]              havoc __ret_0_symbol;
[L6016]              havoc __ret_0_decimals;
[L6017]              havoc amount_s691;
[L6018]              havoc account_s704;
[L6019]              havoc amount_s704;
[L6020]              havoc __ret_0_NAME;
[L6021]              havoc __ret_0_SYMBOL;
[L6022]              havoc __ret_0_DECIMALS;
[L6023]              havoc __ret_0_INITIAL_SUPPLY;
[L6024]              havoc _spender_s788;
[L6025]              havoc _value_s788;
[L6026]              havoc _extraData_s788;
[L6027]              havoc success_s788;
[L6028]              havoc tmpNow;
[L6029]              havoc gas;
[L6030]              assume gas > 4000000 && gas <= 8000000;
[L6031]              tmpNow := now;
[L6032]              havoc now;
[L6033]              assume now > tmpNow;
[L6034]              assume msgsender_MSG != null;
[L6035]              assume DType[msgsender_MSG] != SafeMath;
[L6036]              assume DType[msgsender_MSG] != Context;
[L6037]              assume DType[msgsender_MSG] != IERC20;
[L6038]              assume DType[msgsender_MSG] != ERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6040]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6041]              assume DType[msgsender_MSG] != tokenRecipient;
[L6042]              assume DType[msgsender_MSG] != KeepToken;
[L6043]              Alloc[msgsender_MSG] := true;
[L6044]  COND FALSE  !(choice == 18)
[L6050]  COND FALSE  !(choice == 17)
[L6056]  COND TRUE   choice == 16
[L6057]              gas := gas - 21000;
[L6058]  COND TRUE   gas >= 0
[L6059]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6060]              assume msgvalue_MSG == 0;
[L6061]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s277 && (amount_s277 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s277] + amount_s277 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L462]               havoc __exception;
[L463]               revert := false;
[L464]   COND FALSE  !(__exception)
[L489]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2738]  COND TRUE   DType[this] == KeepToken
[L2739]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2574]              __ret_0_ := msgsender_MSG;
[L2739]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2740]  COND FALSE  !(revert)
[L2756]  COND TRUE   DType[this] == KeepToken
[L2757]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3352]              __var_12 := null;
[L3353]  COND FALSE  !(!(sender_s460 != null))
[L3357]              __var_13 := null;
[L3358]  COND FALSE  !(!(recipient_s460 != null))
[L3362]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, -812884746);
[L2449]  COND FALSE  !(!(b_s53 <= a_s53))
[L2453]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2454]              __ret_0_ := c_s53;
[L3362]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, -812884746);
[L3363]  COND FALSE  !(revert)
[L3366]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3367]              _balances_ERC20[this][sender_s460] := __var_14;
[L3368]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3369]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2425]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2426]  COND FALSE  !(!(c_s26 >= a_s26))
[L2430]              __ret_0_ := c_s26;
[L3369]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3370]  COND FALSE  !(revert)
[L3373]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3374]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3375]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3376]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2757]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L2758]  COND FALSE  !(revert)
[L2774]              __ret_0_ := true;
[L489]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L490]               assume !revert && gas >= 0;
[L6061]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L6178]  RET         call CorralChoice_KeepToken(this);

Loop:
[L6178]  CALL        call CorralChoice_KeepToken(this);
[L5986]              havoc msgsender_MSG;
[L5987]              havoc msgvalue_MSG;
[L5988]              havoc choice;
[L5989]              havoc __ret_0_totalSupply;
[L5990]              havoc account_s258;
[L5991]              havoc __ret_0_balanceOf;
[L5992]              havoc recipient_s277;
[L5993]              havoc amount_s277;
[L5994]              havoc __ret_0_transfer;
[L5995]              havoc owner_s293;
[L5996]              havoc spender_s293;
[L5997]              havoc __ret_0_allowance;
[L5998]              havoc spender_s312;
[L5999]              havoc amount_s312;
[L6000]              havoc __ret_0_approve;
[L6001]              havoc sender_s348;
[L6002]              havoc recipient_s348;
[L6003]              havoc amount_s348;
[L6004]              havoc __ret_0_transferFrom;
[L6005]              havoc spender_s375;
[L6006]              havoc addedValue_s375;
[L6007]              havoc __ret_0_increaseAllowance;
[L6008]              havoc spender_s403;
[L6009]              havoc subtractedValue_s403;
[L6010]              havoc __ret_0_decreaseAllowance;
[L6011]              havoc name_s650;
[L6012]              havoc symbol_s650;
[L6013]              havoc decimals_s650;
[L6014]              havoc __ret_0_name;
[L6015]              havoc __ret_0_symbol;
[L6016]              havoc __ret_0_decimals;
[L6017]              havoc amount_s691;
[L6018]              havoc account_s704;
[L6019]              havoc amount_s704;
[L6020]              havoc __ret_0_NAME;
[L6021]              havoc __ret_0_SYMBOL;
[L6022]              havoc __ret_0_DECIMALS;
[L6023]              havoc __ret_0_INITIAL_SUPPLY;
[L6024]              havoc _spender_s788;
[L6025]              havoc _value_s788;
[L6026]              havoc _extraData_s788;
[L6027]              havoc success_s788;
[L6028]              havoc tmpNow;
[L6029]              havoc gas;
[L6030]              assume gas > 4000000 && gas <= 8000000;
[L6031]              tmpNow := now;
[L6032]              havoc now;
[L6033]              assume now > tmpNow;
[L6034]              assume msgsender_MSG != null;
[L6035]              assume DType[msgsender_MSG] != SafeMath;
[L6036]              assume DType[msgsender_MSG] != Context;
[L6037]              assume DType[msgsender_MSG] != IERC20;
[L6038]              assume DType[msgsender_MSG] != ERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6040]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6041]              assume DType[msgsender_MSG] != tokenRecipient;
[L6042]              assume DType[msgsender_MSG] != KeepToken;
[L6043]              Alloc[msgsender_MSG] := true;
[L6044]  COND FALSE  !(choice == 18)
[L6050]  COND FALSE  !(choice == 17)
[L6056]  COND TRUE   choice == 16
[L6057]              gas := gas - 21000;
[L6058]  COND TRUE   gas >= 0
[L6059]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6060]              assume msgvalue_MSG == 0;
[L6061]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s277 && (amount_s277 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s277] + amount_s277 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L462]               havoc __exception;
[L463]               revert := false;
[L464]   COND FALSE  !(__exception)
[L489]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2738]  COND TRUE   DType[this] == KeepToken
[L2739]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2574]              __ret_0_ := msgsender_MSG;
[L2739]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2740]  COND FALSE  !(revert)
[L2756]  COND TRUE   DType[this] == KeepToken
[L2757]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3352]              __var_12 := null;
[L3353]  COND FALSE  !(!(sender_s460 != null))
[L3357]              __var_13 := null;
[L3358]  COND FALSE  !(!(recipient_s460 != null))
[L3362]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, -812884746);
[L2449]  COND FALSE  !(!(b_s53 <= a_s53))
[L2453]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2454]              __ret_0_ := c_s53;
[L3362]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, -812884746);
[L3363]  COND FALSE  !(revert)
[L3366]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3367]              _balances_ERC20[this][sender_s460] := __var_14;
[L3368]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3369]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2425]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2426]  COND FALSE  !(!(c_s26 >= a_s26))
[L2430]              __ret_0_ := c_s26;
[L3369]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3370]  COND FALSE  !(revert)
[L3373]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3374]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3375]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3376]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2757]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L2758]  COND FALSE  !(revert)
[L2774]              __ret_0_ := true;
[L489]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L490]               assume !revert && gas >= 0;
[L6061]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L6178]  RET         call CorralChoice_KeepToken(this);

[2020-11-24 20:09:13,905 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:09:13,905 INFO  L82        PathProgramCache]: Analyzing trace with hash 1357058190, now seen corresponding path program 1 times
[2020-11-24 20:09:13,906 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:09:13,918 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:09:13,976 INFO  L134       CoverageAnalysis]: Checked inductivity of 188 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 188 trivial. 0 not checked.
[2020-11-24 20:09:13,976 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:09:13,976 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:09:13,977 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:09:13,977 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:09:13,977 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:09:13,977 INFO  L87              Difference]: Start difference. First operand 3791 states and 4481 transitions. cyclomatic complexity: 693 Second operand 4 states.
[2020-11-24 20:09:14,450 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:09:14,450 INFO  L93              Difference]: Finished difference Result 4526 states and 5294 transitions.
[2020-11-24 20:09:14,450 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:09:14,450 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4526 states and 5294 transitions.
[2020-11-24 20:09:14,482 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-24 20:09:14,500 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4526 states to 4357 states and 5117 transitions.
[2020-11-24 20:09:14,500 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1044
[2020-11-24 20:09:14,501 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1044
[2020-11-24 20:09:14,501 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4357 states and 5117 transitions.
[2020-11-24 20:09:14,504 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:09:14,504 INFO  L728         BuchiCegarLoop]: Abstraction has 4357 states and 5117 transitions.
[2020-11-24 20:09:14,508 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4357 states and 5117 transitions.
[2020-11-24 20:09:14,545 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4357 to 3638.
[2020-11-24 20:09:14,545 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3638 states.
[2020-11-24 20:09:14,550 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3638 states to 3638 states and 4209 transitions.
[2020-11-24 20:09:14,550 INFO  L751         BuchiCegarLoop]: Abstraction has 3638 states and 4209 transitions.
[2020-11-24 20:09:14,550 INFO  L631         BuchiCegarLoop]: Abstraction has 3638 states and 4209 transitions.
[2020-11-24 20:09:14,550 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 20:09:14,550 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3638 states and 4209 transitions.
[2020-11-24 20:09:14,556 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:09:14,557 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:09:14,557 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:09:14,559 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:09:14,559 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6168]              assume null == 0;
[L6169]  CALL        call this := FreshRefGenerator__success();
[L2372]              havoc newRef;
[L2373]              assume Alloc[newRef] == false;
[L2374]              Alloc[newRef] := true;
[L2375]              assume newRef != null;
[L6169]  RET         call this := FreshRefGenerator__success();
[L6170]              assume now >= 0;
[L6171]              assume DType[this] == KeepToken;
[L6172]              assume msgvalue_MSG == 0;
[L6173]              gas := gas - 53000;
[L6174]  CALL        call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L1368]              havoc __exception;
[L1369]              revert := false;
[L1370]  COND FALSE  !(__exception)
[L1395]  CALL        call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4024]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2560]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]              assume msgsender_MSG != null;
[L2546]              Balance[this] := 0;
[L2560]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  COND FALSE  !(revert)
[L4024]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4025]  COND FALSE  !(revert)
[L4028]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2604]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2589]              assume msgsender_MSG != null;
[L2590]              Balance[this] := 0;
[L2604]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  COND FALSE  !(revert)
[L4028]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]  COND FALSE  !(revert)
[L4032]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2654]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2560]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]              assume msgsender_MSG != null;
[L2546]              Balance[this] := 0;
[L2560]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  COND FALSE  !(revert)
[L2654]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2655]  COND FALSE  !(revert)
[L2658]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2604]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2589]              assume msgsender_MSG != null;
[L2590]              Balance[this] := 0;
[L2604]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  COND FALSE  !(revert)
[L2658]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2659]  COND FALSE  !(revert)
[L2662]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2626]              assume msgsender_MSG != null;
[L2627]              Balance[this] := 0;
[L2628]              _balances_ERC20[this] := zeroRefintArr();
[L2629]              sum__balances0[this] := 0;
[L2630]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2631]              sum__allowances1[this] := 0;
[L2632]              _totalSupply_ERC20[this] := 0;
[L2662]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2663]  COND FALSE  !(revert)
[L4032]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4033]  COND FALSE  !(revert)
[L4036]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3808]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2560]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]              assume msgsender_MSG != null;
[L2546]              Balance[this] := 0;
[L2560]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  COND FALSE  !(revert)
[L3808]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  COND FALSE  !(revert)
[L3812]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2604]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2589]              assume msgsender_MSG != null;
[L2590]              Balance[this] := 0;
[L2604]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  COND FALSE  !(revert)
[L3812]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2654]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2560]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]              assume msgsender_MSG != null;
[L2546]              Balance[this] := 0;
[L2560]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  COND FALSE  !(revert)
[L2654]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2655]  COND FALSE  !(revert)
[L2658]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2604]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2589]              assume msgsender_MSG != null;
[L2590]              Balance[this] := 0;
[L2604]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  COND FALSE  !(revert)
[L2658]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2659]  COND FALSE  !(revert)
[L2662]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2626]              assume msgsender_MSG != null;
[L2627]              Balance[this] := 0;
[L2628]              _balances_ERC20[this] := zeroRefintArr();
[L2629]              sum__balances0[this] := 0;
[L2630]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2631]              sum__allowances1[this] := 0;
[L2632]              _totalSupply_ERC20[this] := 0;
[L2662]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2663]  COND FALSE  !(revert)
[L3816]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3781]              assume msgsender_MSG != null;
[L3782]              Balance[this] := 0;
[L3820]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L4036]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4037]  COND FALSE  !(revert)
[L4040]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, NAME_KeepToken[this], SYMBOL_KeepToken[this], DECIMALS_KeepToken[this]);
[L3724]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2604]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2589]              assume msgsender_MSG != null;
[L2590]              Balance[this] := 0;
[L2604]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  COND FALSE  !(revert)
[L3724]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3725]  COND FALSE  !(revert)
[L3728]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s650, symbol_s650, decimals_s650);
[L3699]              assume msgsender_MSG != null;
[L3700]              Balance[this] := 0;
[L3701]              _name_ERC20Detailed[this] := -708534286;
[L3702]              _symbol_ERC20Detailed[this] := -708534286;
[L3703]              _decimals_ERC20Detailed[this] := 0;
[L3705]              _name_ERC20Detailed[this] := name_s650;
[L3706]              _symbol_ERC20Detailed[this] := symbol_s650;
[L3707]              _decimals_ERC20Detailed[this] := decimals_s650;
[L3728]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s650, symbol_s650, decimals_s650);
[L3729]  COND FALSE  !(revert)
[L4040]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, NAME_KeepToken[this], SYMBOL_KeepToken[this], DECIMALS_KeepToken[this]);
[L4041]  COND FALSE  !(revert)
[L4044]  CALL        call KeepToken_KeepToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3977]              assume msgsender_MSG != null;
[L3978]              Balance[this] := 0;
[L3979]              NAME_KeepToken[this] := 153019343;
[L3980]              SYMBOL_KeepToken[this] := 577946439;
[L3981]              DECIMALS_KeepToken[this] := 18;
[L3982]              INITIAL_SUPPLY_KeepToken[this] := 1000000000000000013287555072 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3984]  COND TRUE   DType[this] == KeepToken
[L3985]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_KeepToken[this]);
[L3408]              __var_16 := null;
[L3409]  COND FALSE  !(!(account_s503 != null))
[L3413]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L2425]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2426]  COND FALSE  !(!(c_s26 >= a_s26))
[L2430]              __ret_0_ := c_s26;
[L3413]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L3414]  COND FALSE  !(revert)
[L3417]              _totalSupply_ERC20[this] := __var_17;
[L3418]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L2425]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2426]  COND FALSE  !(!(c_s26 >= a_s26))
[L2430]              __ret_0_ := c_s26;
[L3418]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L3419]  COND FALSE  !(revert)
[L3422]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s503];
[L3423]              _balances_ERC20[this][account_s503] := __var_18;
[L3424]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s503];
[L3425]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3985]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_KeepToken[this]);
[L3986]  COND FALSE  !(revert)
[L4044]  RET         call KeepToken_KeepToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND FALSE  !(revert)
[L1395]  RET         call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1396]              assume !revert && gas >= 0;
[L6174]  RET         call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L6175]              assume !revert && gas >= 0;
[L6178]  CALL        call CorralChoice_KeepToken(this);
[L5986]              havoc msgsender_MSG;
[L5987]              havoc msgvalue_MSG;
[L5988]              havoc choice;
[L5989]              havoc __ret_0_totalSupply;
[L5990]              havoc account_s258;
[L5991]              havoc __ret_0_balanceOf;
[L5992]              havoc recipient_s277;
[L5993]              havoc amount_s277;
[L5994]              havoc __ret_0_transfer;
[L5995]              havoc owner_s293;
[L5996]              havoc spender_s293;
[L5997]              havoc __ret_0_allowance;
[L5998]              havoc spender_s312;
[L5999]              havoc amount_s312;
[L6000]              havoc __ret_0_approve;
[L6001]              havoc sender_s348;
[L6002]              havoc recipient_s348;
[L6003]              havoc amount_s348;
[L6004]              havoc __ret_0_transferFrom;
[L6005]              havoc spender_s375;
[L6006]              havoc addedValue_s375;
[L6007]              havoc __ret_0_increaseAllowance;
[L6008]              havoc spender_s403;
[L6009]              havoc subtractedValue_s403;
[L6010]              havoc __ret_0_decreaseAllowance;
[L6011]              havoc name_s650;
[L6012]              havoc symbol_s650;
[L6013]              havoc decimals_s650;
[L6014]              havoc __ret_0_name;
[L6015]              havoc __ret_0_symbol;
[L6016]              havoc __ret_0_decimals;
[L6017]              havoc amount_s691;
[L6018]              havoc account_s704;
[L6019]              havoc amount_s704;
[L6020]              havoc __ret_0_NAME;
[L6021]              havoc __ret_0_SYMBOL;
[L6022]              havoc __ret_0_DECIMALS;
[L6023]              havoc __ret_0_INITIAL_SUPPLY;
[L6024]              havoc _spender_s788;
[L6025]              havoc _value_s788;
[L6026]              havoc _extraData_s788;
[L6027]              havoc success_s788;
[L6028]              havoc tmpNow;
[L6029]              havoc gas;
[L6030]              assume gas > 4000000 && gas <= 8000000;
[L6031]              tmpNow := now;
[L6032]              havoc now;
[L6033]              assume now > tmpNow;
[L6034]              assume msgsender_MSG != null;
[L6035]              assume DType[msgsender_MSG] != SafeMath;
[L6036]              assume DType[msgsender_MSG] != Context;
[L6037]              assume DType[msgsender_MSG] != IERC20;
[L6038]              assume DType[msgsender_MSG] != ERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6040]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6041]              assume DType[msgsender_MSG] != tokenRecipient;
[L6042]              assume DType[msgsender_MSG] != KeepToken;
[L6043]              Alloc[msgsender_MSG] := true;
[L6044]  COND FALSE  !(choice == 18)
[L6050]  COND FALSE  !(choice == 17)
[L6056]  COND FALSE  !(choice == 16)
[L6063]  COND FALSE  !(choice == 15)
[L6069]  COND FALSE  !(choice == 14)
[L6076]  COND FALSE  !(choice == 13)
[L6083]  COND FALSE  !(choice == 12)
[L6090]  COND FALSE  !(choice == 11)
[L6097]  COND FALSE  !(choice == 10)
[L6103]  COND FALSE  !(choice == 9)
[L6109]  COND FALSE  !(choice == 8)
[L6115]  COND TRUE   choice == 7
[L6116]              gas := gas - 21000;
[L6117]  COND TRUE   gas >= 0
[L6118]              assume amount_s691 >= 0 && amount_s691 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6119]              assume msgvalue_MSG == 0;
[L6120]  CALL        call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, amount_s691);
[L1158]              havoc __exception;
[L1159]              revert := false;
[L1160]  COND FALSE  !(__exception)
[L1185]  CALL        call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, amount_s691);
[L3860]  COND TRUE   DType[this] == KeepToken
[L3861]  CALL        call __var_27 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2574]              __ret_0_ := msgsender_MSG;
[L3861]  RET         call __var_27 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3862]  COND FALSE  !(revert)
[L3873]  COND FALSE  !(DType[this] == KeepToken)
[L3878]  COND TRUE   DType[this] == ERC20Burnable
[L3879]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_27, amount_s691);
[L3457]              __var_19 := null;
[L3458]  COND FALSE  !(!(account_s548 != null))
[L3462]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s548], amount_s548, 1333744294);
[L2449]  COND FALSE  !(!(b_s53 <= a_s53))
[L2453]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2454]              __ret_0_ := c_s53;
[L3462]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s548], amount_s548, 1333744294);
[L3463]  COND FALSE  !(revert)
[L3466]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s548];
[L3467]              _balances_ERC20[this][account_s548] := __var_20;
[L3468]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s548];
[L3469]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s548, -708534286);
[L2449]  COND FALSE  !(!(b_s53 <= a_s53))
[L2453]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2454]              __ret_0_ := c_s53;
[L3469]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s548, -708534286);
[L3470]  COND FALSE  !(revert)
[L3473]              _totalSupply_ERC20[this] := __var_21;
[L3474]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3879]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_27, amount_s691);
[L3880]  COND FALSE  !(revert)
[L1185]  RET         call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, amount_s691);
[L1186]              assume !revert && gas >= 0;
[L6120]  RET         call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, amount_s691);
[L6178]  RET         call CorralChoice_KeepToken(this);
[L6178]  CALL        call CorralChoice_KeepToken(this);
[L5986]              havoc msgsender_MSG;
[L5987]              havoc msgvalue_MSG;
[L5988]              havoc choice;
[L5989]              havoc __ret_0_totalSupply;
[L5990]              havoc account_s258;
[L5991]              havoc __ret_0_balanceOf;
[L5992]              havoc recipient_s277;
[L5993]              havoc amount_s277;
[L5994]              havoc __ret_0_transfer;
[L5995]              havoc owner_s293;
[L5996]              havoc spender_s293;
[L5997]              havoc __ret_0_allowance;
[L5998]              havoc spender_s312;
[L5999]              havoc amount_s312;
[L6000]              havoc __ret_0_approve;
[L6001]              havoc sender_s348;
[L6002]              havoc recipient_s348;
[L6003]              havoc amount_s348;
[L6004]              havoc __ret_0_transferFrom;
[L6005]              havoc spender_s375;
[L6006]              havoc addedValue_s375;
[L6007]              havoc __ret_0_increaseAllowance;
[L6008]              havoc spender_s403;
[L6009]              havoc subtractedValue_s403;
[L6010]              havoc __ret_0_decreaseAllowance;
[L6011]              havoc name_s650;
[L6012]              havoc symbol_s650;
[L6013]              havoc decimals_s650;
[L6014]              havoc __ret_0_name;
[L6015]              havoc __ret_0_symbol;
[L6016]              havoc __ret_0_decimals;
[L6017]              havoc amount_s691;
[L6018]              havoc account_s704;
[L6019]              havoc amount_s704;
[L6020]              havoc __ret_0_NAME;
[L6021]              havoc __ret_0_SYMBOL;
[L6022]              havoc __ret_0_DECIMALS;
[L6023]              havoc __ret_0_INITIAL_SUPPLY;
[L6024]              havoc _spender_s788;
[L6025]              havoc _value_s788;
[L6026]              havoc _extraData_s788;
[L6027]              havoc success_s788;
[L6028]              havoc tmpNow;
[L6029]              havoc gas;
[L6030]              assume gas > 4000000 && gas <= 8000000;
[L6031]              tmpNow := now;
[L6032]              havoc now;
[L6033]              assume now > tmpNow;
[L6034]              assume msgsender_MSG != null;
[L6035]              assume DType[msgsender_MSG] != SafeMath;
[L6036]              assume DType[msgsender_MSG] != Context;
[L6037]              assume DType[msgsender_MSG] != IERC20;
[L6038]              assume DType[msgsender_MSG] != ERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6040]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6041]              assume DType[msgsender_MSG] != tokenRecipient;
[L6042]              assume DType[msgsender_MSG] != KeepToken;
[L6043]              Alloc[msgsender_MSG] := true;
[L6044]  COND FALSE  !(choice == 18)
[L6050]  COND FALSE  !(choice == 17)
[L6056]  COND TRUE   choice == 16
[L6057]              gas := gas - 21000;
[L6058]  COND TRUE   gas >= 0
[L6059]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6060]              assume msgvalue_MSG == 0;
[L6061]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s277 && (amount_s277 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s277] + amount_s277 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L462]               havoc __exception;
[L463]               revert := false;
[L464]   COND FALSE  !(__exception)
[L489]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2738]  COND TRUE   DType[this] == KeepToken
[L2739]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2574]              __ret_0_ := msgsender_MSG;
[L2739]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2740]  COND FALSE  !(revert)
[L2756]  COND TRUE   DType[this] == KeepToken
[L2757]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3352]              __var_12 := null;
[L3353]  COND FALSE  !(!(sender_s460 != null))
[L3357]              __var_13 := null;
[L3358]  COND FALSE  !(!(recipient_s460 != null))
[L3362]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, -812884746);
[L2449]  COND FALSE  !(!(b_s53 <= a_s53))
[L2453]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2454]              __ret_0_ := c_s53;
[L3362]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, -812884746);
[L3363]  COND FALSE  !(revert)
[L3366]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3367]              _balances_ERC20[this][sender_s460] := __var_14;
[L3368]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3369]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2425]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2426]  COND FALSE  !(!(c_s26 >= a_s26))
[L2430]              __ret_0_ := c_s26;
[L3369]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3370]  COND FALSE  !(revert)
[L3373]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3374]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3375]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3376]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2757]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L2758]  COND FALSE  !(revert)
[L2774]              __ret_0_ := true;
[L489]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L490]               assume !revert && gas >= 0;
[L6061]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L6178]  RET         call CorralChoice_KeepToken(this);

Loop:
[L6178]  CALL        call CorralChoice_KeepToken(this);
[L5986]              havoc msgsender_MSG;
[L5987]              havoc msgvalue_MSG;
[L5988]              havoc choice;
[L5989]              havoc __ret_0_totalSupply;
[L5990]              havoc account_s258;
[L5991]              havoc __ret_0_balanceOf;
[L5992]              havoc recipient_s277;
[L5993]              havoc amount_s277;
[L5994]              havoc __ret_0_transfer;
[L5995]              havoc owner_s293;
[L5996]              havoc spender_s293;
[L5997]              havoc __ret_0_allowance;
[L5998]              havoc spender_s312;
[L5999]              havoc amount_s312;
[L6000]              havoc __ret_0_approve;
[L6001]              havoc sender_s348;
[L6002]              havoc recipient_s348;
[L6003]              havoc amount_s348;
[L6004]              havoc __ret_0_transferFrom;
[L6005]              havoc spender_s375;
[L6006]              havoc addedValue_s375;
[L6007]              havoc __ret_0_increaseAllowance;
[L6008]              havoc spender_s403;
[L6009]              havoc subtractedValue_s403;
[L6010]              havoc __ret_0_decreaseAllowance;
[L6011]              havoc name_s650;
[L6012]              havoc symbol_s650;
[L6013]              havoc decimals_s650;
[L6014]              havoc __ret_0_name;
[L6015]              havoc __ret_0_symbol;
[L6016]              havoc __ret_0_decimals;
[L6017]              havoc amount_s691;
[L6018]              havoc account_s704;
[L6019]              havoc amount_s704;
[L6020]              havoc __ret_0_NAME;
[L6021]              havoc __ret_0_SYMBOL;
[L6022]              havoc __ret_0_DECIMALS;
[L6023]              havoc __ret_0_INITIAL_SUPPLY;
[L6024]              havoc _spender_s788;
[L6025]              havoc _value_s788;
[L6026]              havoc _extraData_s788;
[L6027]              havoc success_s788;
[L6028]              havoc tmpNow;
[L6029]              havoc gas;
[L6030]              assume gas > 4000000 && gas <= 8000000;
[L6031]              tmpNow := now;
[L6032]              havoc now;
[L6033]              assume now > tmpNow;
[L6034]              assume msgsender_MSG != null;
[L6035]              assume DType[msgsender_MSG] != SafeMath;
[L6036]              assume DType[msgsender_MSG] != Context;
[L6037]              assume DType[msgsender_MSG] != IERC20;
[L6038]              assume DType[msgsender_MSG] != ERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6040]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6041]              assume DType[msgsender_MSG] != tokenRecipient;
[L6042]              assume DType[msgsender_MSG] != KeepToken;
[L6043]              Alloc[msgsender_MSG] := true;
[L6044]  COND TRUE   choice == 18
[L6045]              gas := gas - 21000;
[L6046]  COND FALSE  !(gas >= 0)
[L6178]  RET         call CorralChoice_KeepToken(this);

[2020-11-24 20:09:14,576 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:09:14,577 INFO  L82        PathProgramCache]: Analyzing trace with hash -160439484, now seen corresponding path program 1 times
[2020-11-24 20:09:14,577 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:09:14,595 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:09:14,686 INFO  L134       CoverageAnalysis]: Checked inductivity of 256 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 255 trivial. 0 not checked.
[2020-11-24 20:09:14,686 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:09:14,687 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:09:14,687 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:09:14,687 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:09:14,687 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:09:14,687 INFO  L87              Difference]: Start difference. First operand 3638 states and 4209 transitions. cyclomatic complexity: 574 Second operand 3 states.
[2020-11-24 20:09:14,716 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:09:14,716 INFO  L93              Difference]: Finished difference Result 3644 states and 4215 transitions.
[2020-11-24 20:09:14,716 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:09:14,716 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3644 states and 4215 transitions.
[2020-11-24 20:09:14,723 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:09:14,731 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3644 states to 3644 states and 4215 transitions.
[2020-11-24 20:09:14,732 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 872
[2020-11-24 20:09:14,732 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 872
[2020-11-24 20:09:14,732 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3644 states and 4215 transitions.
[2020-11-24 20:09:14,735 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:09:14,735 INFO  L728         BuchiCegarLoop]: Abstraction has 3644 states and 4215 transitions.
[2020-11-24 20:09:14,738 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3644 states and 4215 transitions.
[2020-11-24 20:09:14,760 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3644 to 3640.
[2020-11-24 20:09:14,760 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3640 states.
[2020-11-24 20:09:14,763 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3640 states to 3640 states and 4211 transitions.
[2020-11-24 20:09:14,763 INFO  L751         BuchiCegarLoop]: Abstraction has 3640 states and 4211 transitions.
[2020-11-24 20:09:14,763 INFO  L631         BuchiCegarLoop]: Abstraction has 3640 states and 4211 transitions.
[2020-11-24 20:09:14,763 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 20:09:14,763 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3640 states and 4211 transitions.
[2020-11-24 20:09:14,767 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:09:14,767 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:09:14,767 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:09:14,769 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:09:14,769 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6168]              assume null == 0;
[L6169]  CALL        call this := FreshRefGenerator__success();
[L2372]              havoc newRef;
[L2373]              assume Alloc[newRef] == false;
[L2374]              Alloc[newRef] := true;
[L2375]              assume newRef != null;
[L6169]  RET         call this := FreshRefGenerator__success();
[L6170]              assume now >= 0;
[L6171]              assume DType[this] == KeepToken;
[L6172]              assume msgvalue_MSG == 0;
[L6173]              gas := gas - 53000;
[L6174]  CALL        call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L1368]              havoc __exception;
[L1369]              revert := false;
[L1370]  COND FALSE  !(__exception)
[L1395]  CALL        call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4024]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2560]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]              assume msgsender_MSG != null;
[L2546]              Balance[this] := 0;
[L2560]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  COND FALSE  !(revert)
[L4024]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4025]  COND FALSE  !(revert)
[L4028]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2604]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2589]              assume msgsender_MSG != null;
[L2590]              Balance[this] := 0;
[L2604]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  COND FALSE  !(revert)
[L4028]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]  COND FALSE  !(revert)
[L4032]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2654]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2560]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]              assume msgsender_MSG != null;
[L2546]              Balance[this] := 0;
[L2560]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  COND FALSE  !(revert)
[L2654]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2655]  COND FALSE  !(revert)
[L2658]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2604]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2589]              assume msgsender_MSG != null;
[L2590]              Balance[this] := 0;
[L2604]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  COND FALSE  !(revert)
[L2658]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2659]  COND FALSE  !(revert)
[L2662]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2626]              assume msgsender_MSG != null;
[L2627]              Balance[this] := 0;
[L2628]              _balances_ERC20[this] := zeroRefintArr();
[L2629]              sum__balances0[this] := 0;
[L2630]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2631]              sum__allowances1[this] := 0;
[L2632]              _totalSupply_ERC20[this] := 0;
[L2662]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2663]  COND FALSE  !(revert)
[L4032]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4033]  COND FALSE  !(revert)
[L4036]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3808]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2560]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]              assume msgsender_MSG != null;
[L2546]              Balance[this] := 0;
[L2560]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  COND FALSE  !(revert)
[L3808]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  COND FALSE  !(revert)
[L3812]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2604]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2589]              assume msgsender_MSG != null;
[L2590]              Balance[this] := 0;
[L2604]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  COND FALSE  !(revert)
[L3812]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2654]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2560]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]              assume msgsender_MSG != null;
[L2546]              Balance[this] := 0;
[L2560]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  COND FALSE  !(revert)
[L2654]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2655]  COND FALSE  !(revert)
[L2658]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2604]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2589]              assume msgsender_MSG != null;
[L2590]              Balance[this] := 0;
[L2604]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  COND FALSE  !(revert)
[L2658]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2659]  COND FALSE  !(revert)
[L2662]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2626]              assume msgsender_MSG != null;
[L2627]              Balance[this] := 0;
[L2628]              _balances_ERC20[this] := zeroRefintArr();
[L2629]              sum__balances0[this] := 0;
[L2630]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2631]              sum__allowances1[this] := 0;
[L2632]              _totalSupply_ERC20[this] := 0;
[L2662]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2663]  COND FALSE  !(revert)
[L3816]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3781]              assume msgsender_MSG != null;
[L3782]              Balance[this] := 0;
[L3820]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L4036]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4037]  COND FALSE  !(revert)
[L4040]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, NAME_KeepToken[this], SYMBOL_KeepToken[this], DECIMALS_KeepToken[this]);
[L3724]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2604]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2589]              assume msgsender_MSG != null;
[L2590]              Balance[this] := 0;
[L2604]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  COND FALSE  !(revert)
[L3724]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3725]  COND FALSE  !(revert)
[L3728]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s650, symbol_s650, decimals_s650);
[L3699]              assume msgsender_MSG != null;
[L3700]              Balance[this] := 0;
[L3701]              _name_ERC20Detailed[this] := -708534286;
[L3702]              _symbol_ERC20Detailed[this] := -708534286;
[L3703]              _decimals_ERC20Detailed[this] := 0;
[L3705]              _name_ERC20Detailed[this] := name_s650;
[L3706]              _symbol_ERC20Detailed[this] := symbol_s650;
[L3707]              _decimals_ERC20Detailed[this] := decimals_s650;
[L3728]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s650, symbol_s650, decimals_s650);
[L3729]  COND FALSE  !(revert)
[L4040]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, NAME_KeepToken[this], SYMBOL_KeepToken[this], DECIMALS_KeepToken[this]);
[L4041]  COND FALSE  !(revert)
[L4044]  CALL        call KeepToken_KeepToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3977]              assume msgsender_MSG != null;
[L3978]              Balance[this] := 0;
[L3979]              NAME_KeepToken[this] := 153019343;
[L3980]              SYMBOL_KeepToken[this] := 577946439;
[L3981]              DECIMALS_KeepToken[this] := 18;
[L3982]              INITIAL_SUPPLY_KeepToken[this] := 1000000000000000013287555072 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3984]  COND TRUE   DType[this] == KeepToken
[L3985]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_KeepToken[this]);
[L3408]              __var_16 := null;
[L3409]  COND FALSE  !(!(account_s503 != null))
[L3413]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L2425]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2426]  COND FALSE  !(!(c_s26 >= a_s26))
[L2430]              __ret_0_ := c_s26;
[L3413]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L3414]  COND FALSE  !(revert)
[L3417]              _totalSupply_ERC20[this] := __var_17;
[L3418]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L2425]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2426]  COND FALSE  !(!(c_s26 >= a_s26))
[L2430]              __ret_0_ := c_s26;
[L3418]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L3419]  COND FALSE  !(revert)
[L3422]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s503];
[L3423]              _balances_ERC20[this][account_s503] := __var_18;
[L3424]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s503];
[L3425]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3985]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_KeepToken[this]);
[L3986]  COND FALSE  !(revert)
[L4044]  RET         call KeepToken_KeepToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND FALSE  !(revert)
[L1395]  RET         call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1396]              assume !revert && gas >= 0;
[L6174]  RET         call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L6175]              assume !revert && gas >= 0;
[L6178]  CALL        call CorralChoice_KeepToken(this);
[L5986]              havoc msgsender_MSG;
[L5987]              havoc msgvalue_MSG;
[L5988]              havoc choice;
[L5989]              havoc __ret_0_totalSupply;
[L5990]              havoc account_s258;
[L5991]              havoc __ret_0_balanceOf;
[L5992]              havoc recipient_s277;
[L5993]              havoc amount_s277;
[L5994]              havoc __ret_0_transfer;
[L5995]              havoc owner_s293;
[L5996]              havoc spender_s293;
[L5997]              havoc __ret_0_allowance;
[L5998]              havoc spender_s312;
[L5999]              havoc amount_s312;
[L6000]              havoc __ret_0_approve;
[L6001]              havoc sender_s348;
[L6002]              havoc recipient_s348;
[L6003]              havoc amount_s348;
[L6004]              havoc __ret_0_transferFrom;
[L6005]              havoc spender_s375;
[L6006]              havoc addedValue_s375;
[L6007]              havoc __ret_0_increaseAllowance;
[L6008]              havoc spender_s403;
[L6009]              havoc subtractedValue_s403;
[L6010]              havoc __ret_0_decreaseAllowance;
[L6011]              havoc name_s650;
[L6012]              havoc symbol_s650;
[L6013]              havoc decimals_s650;
[L6014]              havoc __ret_0_name;
[L6015]              havoc __ret_0_symbol;
[L6016]              havoc __ret_0_decimals;
[L6017]              havoc amount_s691;
[L6018]              havoc account_s704;
[L6019]              havoc amount_s704;
[L6020]              havoc __ret_0_NAME;
[L6021]              havoc __ret_0_SYMBOL;
[L6022]              havoc __ret_0_DECIMALS;
[L6023]              havoc __ret_0_INITIAL_SUPPLY;
[L6024]              havoc _spender_s788;
[L6025]              havoc _value_s788;
[L6026]              havoc _extraData_s788;
[L6027]              havoc success_s788;
[L6028]              havoc tmpNow;
[L6029]              havoc gas;
[L6030]              assume gas > 4000000 && gas <= 8000000;
[L6031]              tmpNow := now;
[L6032]              havoc now;
[L6033]              assume now > tmpNow;
[L6034]              assume msgsender_MSG != null;
[L6035]              assume DType[msgsender_MSG] != SafeMath;
[L6036]              assume DType[msgsender_MSG] != Context;
[L6037]              assume DType[msgsender_MSG] != IERC20;
[L6038]              assume DType[msgsender_MSG] != ERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6040]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6041]              assume DType[msgsender_MSG] != tokenRecipient;
[L6042]              assume DType[msgsender_MSG] != KeepToken;
[L6043]              Alloc[msgsender_MSG] := true;
[L6044]  COND FALSE  !(choice == 18)
[L6050]  COND FALSE  !(choice == 17)
[L6056]  COND FALSE  !(choice == 16)
[L6063]  COND FALSE  !(choice == 15)
[L6069]  COND FALSE  !(choice == 14)
[L6076]  COND FALSE  !(choice == 13)
[L6083]  COND FALSE  !(choice == 12)
[L6090]  COND FALSE  !(choice == 11)
[L6097]  COND FALSE  !(choice == 10)
[L6103]  COND FALSE  !(choice == 9)
[L6109]  COND FALSE  !(choice == 8)
[L6115]  COND TRUE   choice == 7
[L6116]              gas := gas - 21000;
[L6117]  COND TRUE   gas >= 0
[L6118]              assume amount_s691 >= 0 && amount_s691 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6119]              assume msgvalue_MSG == 0;
[L6120]  CALL        call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, amount_s691);
[L1158]              havoc __exception;
[L1159]              revert := false;
[L1160]  COND FALSE  !(__exception)
[L1185]  CALL        call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, amount_s691);
[L3860]  COND FALSE  !(DType[this] == KeepToken)
[L3865]  COND TRUE   DType[this] == ERC20Burnable
[L3866]  CALL        call __var_27 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2574]              __ret_0_ := msgsender_MSG;
[L3866]  RET         call __var_27 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3867]  COND FALSE  !(revert)
[L3873]  COND FALSE  !(DType[this] == KeepToken)
[L3878]  COND TRUE   DType[this] == ERC20Burnable
[L3879]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_27, amount_s691);
[L3457]              __var_19 := null;
[L3458]  COND FALSE  !(!(account_s548 != null))
[L3462]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s548], amount_s548, 1333744294);
[L2449]  COND FALSE  !(!(b_s53 <= a_s53))
[L2453]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2454]              __ret_0_ := c_s53;
[L3462]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s548], amount_s548, 1333744294);
[L3463]  COND FALSE  !(revert)
[L3466]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s548];
[L3467]              _balances_ERC20[this][account_s548] := __var_20;
[L3468]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s548];
[L3469]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s548, -708534286);
[L2449]  COND FALSE  !(!(b_s53 <= a_s53))
[L2453]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2454]              __ret_0_ := c_s53;
[L3469]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s548, -708534286);
[L3470]  COND FALSE  !(revert)
[L3473]              _totalSupply_ERC20[this] := __var_21;
[L3474]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3879]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_27, amount_s691);
[L3880]  COND FALSE  !(revert)
[L1185]  RET         call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, amount_s691);
[L1186]              assume !revert && gas >= 0;
[L6120]  RET         call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, amount_s691);
[L6178]  RET         call CorralChoice_KeepToken(this);
[L6178]  CALL        call CorralChoice_KeepToken(this);
[L5986]              havoc msgsender_MSG;
[L5987]              havoc msgvalue_MSG;
[L5988]              havoc choice;
[L5989]              havoc __ret_0_totalSupply;
[L5990]              havoc account_s258;
[L5991]              havoc __ret_0_balanceOf;
[L5992]              havoc recipient_s277;
[L5993]              havoc amount_s277;
[L5994]              havoc __ret_0_transfer;
[L5995]              havoc owner_s293;
[L5996]              havoc spender_s293;
[L5997]              havoc __ret_0_allowance;
[L5998]              havoc spender_s312;
[L5999]              havoc amount_s312;
[L6000]              havoc __ret_0_approve;
[L6001]              havoc sender_s348;
[L6002]              havoc recipient_s348;
[L6003]              havoc amount_s348;
[L6004]              havoc __ret_0_transferFrom;
[L6005]              havoc spender_s375;
[L6006]              havoc addedValue_s375;
[L6007]              havoc __ret_0_increaseAllowance;
[L6008]              havoc spender_s403;
[L6009]              havoc subtractedValue_s403;
[L6010]              havoc __ret_0_decreaseAllowance;
[L6011]              havoc name_s650;
[L6012]              havoc symbol_s650;
[L6013]              havoc decimals_s650;
[L6014]              havoc __ret_0_name;
[L6015]              havoc __ret_0_symbol;
[L6016]              havoc __ret_0_decimals;
[L6017]              havoc amount_s691;
[L6018]              havoc account_s704;
[L6019]              havoc amount_s704;
[L6020]              havoc __ret_0_NAME;
[L6021]              havoc __ret_0_SYMBOL;
[L6022]              havoc __ret_0_DECIMALS;
[L6023]              havoc __ret_0_INITIAL_SUPPLY;
[L6024]              havoc _spender_s788;
[L6025]              havoc _value_s788;
[L6026]              havoc _extraData_s788;
[L6027]              havoc success_s788;
[L6028]              havoc tmpNow;
[L6029]              havoc gas;
[L6030]              assume gas > 4000000 && gas <= 8000000;
[L6031]              tmpNow := now;
[L6032]              havoc now;
[L6033]              assume now > tmpNow;
[L6034]              assume msgsender_MSG != null;
[L6035]              assume DType[msgsender_MSG] != SafeMath;
[L6036]              assume DType[msgsender_MSG] != Context;
[L6037]              assume DType[msgsender_MSG] != IERC20;
[L6038]              assume DType[msgsender_MSG] != ERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6040]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6041]              assume DType[msgsender_MSG] != tokenRecipient;
[L6042]              assume DType[msgsender_MSG] != KeepToken;
[L6043]              Alloc[msgsender_MSG] := true;
[L6044]  COND FALSE  !(choice == 18)
[L6050]  COND FALSE  !(choice == 17)
[L6056]  COND TRUE   choice == 16
[L6057]              gas := gas - 21000;
[L6058]  COND TRUE   gas >= 0
[L6059]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6060]              assume msgvalue_MSG == 0;
[L6061]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s277 && (amount_s277 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s277] + amount_s277 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L462]               havoc __exception;
[L463]               revert := false;
[L464]   COND FALSE  !(__exception)
[L489]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2738]  COND TRUE   DType[this] == KeepToken
[L2739]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2574]              __ret_0_ := msgsender_MSG;
[L2739]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2740]  COND FALSE  !(revert)
[L2756]  COND TRUE   DType[this] == KeepToken
[L2757]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3352]              __var_12 := null;
[L3353]  COND FALSE  !(!(sender_s460 != null))
[L3357]              __var_13 := null;
[L3358]  COND FALSE  !(!(recipient_s460 != null))
[L3362]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, -812884746);
[L2449]  COND FALSE  !(!(b_s53 <= a_s53))
[L2453]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2454]              __ret_0_ := c_s53;
[L3362]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, -812884746);
[L3363]  COND FALSE  !(revert)
[L3366]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3367]              _balances_ERC20[this][sender_s460] := __var_14;
[L3368]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3369]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2425]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2426]  COND FALSE  !(!(c_s26 >= a_s26))
[L2430]              __ret_0_ := c_s26;
[L3369]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3370]  COND FALSE  !(revert)
[L3373]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3374]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3375]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3376]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2757]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L2758]  COND FALSE  !(revert)
[L2774]              __ret_0_ := true;
[L489]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L490]               assume !revert && gas >= 0;
[L6061]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L6178]  RET         call CorralChoice_KeepToken(this);

Loop:
[L6178]  CALL        call CorralChoice_KeepToken(this);
[L5986]              havoc msgsender_MSG;
[L5987]              havoc msgvalue_MSG;
[L5988]              havoc choice;
[L5989]              havoc __ret_0_totalSupply;
[L5990]              havoc account_s258;
[L5991]              havoc __ret_0_balanceOf;
[L5992]              havoc recipient_s277;
[L5993]              havoc amount_s277;
[L5994]              havoc __ret_0_transfer;
[L5995]              havoc owner_s293;
[L5996]              havoc spender_s293;
[L5997]              havoc __ret_0_allowance;
[L5998]              havoc spender_s312;
[L5999]              havoc amount_s312;
[L6000]              havoc __ret_0_approve;
[L6001]              havoc sender_s348;
[L6002]              havoc recipient_s348;
[L6003]              havoc amount_s348;
[L6004]              havoc __ret_0_transferFrom;
[L6005]              havoc spender_s375;
[L6006]              havoc addedValue_s375;
[L6007]              havoc __ret_0_increaseAllowance;
[L6008]              havoc spender_s403;
[L6009]              havoc subtractedValue_s403;
[L6010]              havoc __ret_0_decreaseAllowance;
[L6011]              havoc name_s650;
[L6012]              havoc symbol_s650;
[L6013]              havoc decimals_s650;
[L6014]              havoc __ret_0_name;
[L6015]              havoc __ret_0_symbol;
[L6016]              havoc __ret_0_decimals;
[L6017]              havoc amount_s691;
[L6018]              havoc account_s704;
[L6019]              havoc amount_s704;
[L6020]              havoc __ret_0_NAME;
[L6021]              havoc __ret_0_SYMBOL;
[L6022]              havoc __ret_0_DECIMALS;
[L6023]              havoc __ret_0_INITIAL_SUPPLY;
[L6024]              havoc _spender_s788;
[L6025]              havoc _value_s788;
[L6026]              havoc _extraData_s788;
[L6027]              havoc success_s788;
[L6028]              havoc tmpNow;
[L6029]              havoc gas;
[L6030]              assume gas > 4000000 && gas <= 8000000;
[L6031]              tmpNow := now;
[L6032]              havoc now;
[L6033]              assume now > tmpNow;
[L6034]              assume msgsender_MSG != null;
[L6035]              assume DType[msgsender_MSG] != SafeMath;
[L6036]              assume DType[msgsender_MSG] != Context;
[L6037]              assume DType[msgsender_MSG] != IERC20;
[L6038]              assume DType[msgsender_MSG] != ERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6040]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6041]              assume DType[msgsender_MSG] != tokenRecipient;
[L6042]              assume DType[msgsender_MSG] != KeepToken;
[L6043]              Alloc[msgsender_MSG] := true;
[L6044]  COND TRUE   choice == 18
[L6045]              gas := gas - 21000;
[L6046]  COND FALSE  !(gas >= 0)
[L6178]  RET         call CorralChoice_KeepToken(this);

[2020-11-24 20:09:14,773 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:09:14,774 INFO  L82        PathProgramCache]: Analyzing trace with hash 1110440415, now seen corresponding path program 1 times
[2020-11-24 20:09:14,774 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:09:14,786 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:09:14,870 INFO  L134       CoverageAnalysis]: Checked inductivity of 256 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 255 trivial. 0 not checked.
[2020-11-24 20:09:14,871 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:09:14,871 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-24 20:09:14,871 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:09:14,871 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-24 20:09:14,871 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-24 20:09:14,871 INFO  L87              Difference]: Start difference. First operand 3640 states and 4211 transitions. cyclomatic complexity: 574 Second operand 6 states.
[2020-11-24 20:09:14,946 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:09:14,946 INFO  L93              Difference]: Finished difference Result 3658 states and 4225 transitions.
[2020-11-24 20:09:14,947 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-24 20:09:14,947 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3658 states and 4225 transitions.
[2020-11-24 20:09:14,952 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:09:14,969 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3658 states to 3618 states and 4181 transitions.
[2020-11-24 20:09:14,969 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 868
[2020-11-24 20:09:14,970 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 868
[2020-11-24 20:09:14,970 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3618 states and 4181 transitions.
[2020-11-24 20:09:14,975 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:09:14,975 INFO  L728         BuchiCegarLoop]: Abstraction has 3618 states and 4181 transitions.
[2020-11-24 20:09:14,979 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3618 states and 4181 transitions.
[2020-11-24 20:09:14,997 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3618 to 3618.
[2020-11-24 20:09:14,997 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3618 states.
[2020-11-24 20:09:15,000 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3618 states to 3618 states and 4181 transitions.
[2020-11-24 20:09:15,001 INFO  L751         BuchiCegarLoop]: Abstraction has 3618 states and 4181 transitions.
[2020-11-24 20:09:15,001 INFO  L631         BuchiCegarLoop]: Abstraction has 3618 states and 4181 transitions.
[2020-11-24 20:09:15,001 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 20:09:15,001 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3618 states and 4181 transitions.
[2020-11-24 20:09:15,004 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:09:15,004 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:09:15,004 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:09:15,006 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:09:15,006 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L6168]              assume null == 0;
[L6169]  CALL        call this := FreshRefGenerator__success();
[L2372]              havoc newRef;
[L2373]              assume Alloc[newRef] == false;
[L2374]              Alloc[newRef] := true;
[L2375]              assume newRef != null;
[L6169]  RET         call this := FreshRefGenerator__success();
[L6170]              assume now >= 0;
[L6171]              assume DType[this] == KeepToken;
[L6172]              assume msgvalue_MSG == 0;
[L6173]              gas := gas - 53000;
[L6174]  CALL        call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L1368]              havoc __exception;
[L1369]              revert := false;
[L1370]  COND FALSE  !(__exception)
[L1395]  CALL        call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4024]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2560]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]              assume msgsender_MSG != null;
[L2546]              Balance[this] := 0;
[L2560]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  COND FALSE  !(revert)
[L4024]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4025]  COND FALSE  !(revert)
[L4028]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2604]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2589]              assume msgsender_MSG != null;
[L2590]              Balance[this] := 0;
[L2604]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  COND FALSE  !(revert)
[L4028]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]  COND FALSE  !(revert)
[L4032]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2654]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2560]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]              assume msgsender_MSG != null;
[L2546]              Balance[this] := 0;
[L2560]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  COND FALSE  !(revert)
[L2654]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2655]  COND FALSE  !(revert)
[L2658]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2604]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2589]              assume msgsender_MSG != null;
[L2590]              Balance[this] := 0;
[L2604]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  COND FALSE  !(revert)
[L2658]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2659]  COND FALSE  !(revert)
[L2662]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2626]              assume msgsender_MSG != null;
[L2627]              Balance[this] := 0;
[L2628]              _balances_ERC20[this] := zeroRefintArr();
[L2629]              sum__balances0[this] := 0;
[L2630]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2631]              sum__allowances1[this] := 0;
[L2632]              _totalSupply_ERC20[this] := 0;
[L2662]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2663]  COND FALSE  !(revert)
[L4032]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4033]  COND FALSE  !(revert)
[L4036]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3808]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2560]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]              assume msgsender_MSG != null;
[L2546]              Balance[this] := 0;
[L2560]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  COND FALSE  !(revert)
[L3808]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  COND FALSE  !(revert)
[L3812]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2604]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2589]              assume msgsender_MSG != null;
[L2590]              Balance[this] := 0;
[L2604]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  COND FALSE  !(revert)
[L3812]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3813]  COND FALSE  !(revert)
[L3816]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2654]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2560]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]              assume msgsender_MSG != null;
[L2546]              Balance[this] := 0;
[L2560]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  COND FALSE  !(revert)
[L2654]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2655]  COND FALSE  !(revert)
[L2658]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2604]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2589]              assume msgsender_MSG != null;
[L2590]              Balance[this] := 0;
[L2604]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  COND FALSE  !(revert)
[L2658]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2659]  COND FALSE  !(revert)
[L2662]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2626]              assume msgsender_MSG != null;
[L2627]              Balance[this] := 0;
[L2628]              _balances_ERC20[this] := zeroRefintArr();
[L2629]              sum__balances0[this] := 0;
[L2630]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2631]              sum__allowances1[this] := 0;
[L2632]              _totalSupply_ERC20[this] := 0;
[L2662]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2663]  COND FALSE  !(revert)
[L3816]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3817]  COND FALSE  !(revert)
[L3820]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3781]              assume msgsender_MSG != null;
[L3782]              Balance[this] := 0;
[L3820]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3821]  COND FALSE  !(revert)
[L4036]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4037]  COND FALSE  !(revert)
[L4040]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, NAME_KeepToken[this], SYMBOL_KeepToken[this], DECIMALS_KeepToken[this]);
[L3724]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2604]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2589]              assume msgsender_MSG != null;
[L2590]              Balance[this] := 0;
[L2604]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  COND FALSE  !(revert)
[L3724]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3725]  COND FALSE  !(revert)
[L3728]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s650, symbol_s650, decimals_s650);
[L3699]              assume msgsender_MSG != null;
[L3700]              Balance[this] := 0;
[L3701]              _name_ERC20Detailed[this] := -708534286;
[L3702]              _symbol_ERC20Detailed[this] := -708534286;
[L3703]              _decimals_ERC20Detailed[this] := 0;
[L3705]              _name_ERC20Detailed[this] := name_s650;
[L3706]              _symbol_ERC20Detailed[this] := symbol_s650;
[L3707]              _decimals_ERC20Detailed[this] := decimals_s650;
[L3728]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s650, symbol_s650, decimals_s650);
[L3729]  COND FALSE  !(revert)
[L4040]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, NAME_KeepToken[this], SYMBOL_KeepToken[this], DECIMALS_KeepToken[this]);
[L4041]  COND FALSE  !(revert)
[L4044]  CALL        call KeepToken_KeepToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3977]              assume msgsender_MSG != null;
[L3978]              Balance[this] := 0;
[L3979]              NAME_KeepToken[this] := 153019343;
[L3980]              SYMBOL_KeepToken[this] := 577946439;
[L3981]              DECIMALS_KeepToken[this] := 18;
[L3982]              INITIAL_SUPPLY_KeepToken[this] := 1000000000000000013287555072 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3984]  COND TRUE   DType[this] == KeepToken
[L3985]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_KeepToken[this]);
[L3408]              __var_16 := null;
[L3409]  COND FALSE  !(!(account_s503 != null))
[L3413]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L2425]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2426]  COND FALSE  !(!(c_s26 >= a_s26))
[L2430]              __ret_0_ := c_s26;
[L3413]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L3414]  COND FALSE  !(revert)
[L3417]              _totalSupply_ERC20[this] := __var_17;
[L3418]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L2425]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2426]  COND FALSE  !(!(c_s26 >= a_s26))
[L2430]              __ret_0_ := c_s26;
[L3418]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L3419]  COND FALSE  !(revert)
[L3422]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s503];
[L3423]              _balances_ERC20[this][account_s503] := __var_18;
[L3424]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s503];
[L3425]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3985]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_KeepToken[this]);
[L3986]  COND FALSE  !(revert)
[L4044]  RET         call KeepToken_KeepToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  COND FALSE  !(revert)
[L1395]  RET         call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1396]              assume !revert && gas >= 0;
[L6174]  RET         call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L6175]              assume !revert && gas >= 0;
[L6178]  CALL        call CorralChoice_KeepToken(this);
[L5986]              havoc msgsender_MSG;
[L5987]              havoc msgvalue_MSG;
[L5988]              havoc choice;
[L5989]              havoc __ret_0_totalSupply;
[L5990]              havoc account_s258;
[L5991]              havoc __ret_0_balanceOf;
[L5992]              havoc recipient_s277;
[L5993]              havoc amount_s277;
[L5994]              havoc __ret_0_transfer;
[L5995]              havoc owner_s293;
[L5996]              havoc spender_s293;
[L5997]              havoc __ret_0_allowance;
[L5998]              havoc spender_s312;
[L5999]              havoc amount_s312;
[L6000]              havoc __ret_0_approve;
[L6001]              havoc sender_s348;
[L6002]              havoc recipient_s348;
[L6003]              havoc amount_s348;
[L6004]              havoc __ret_0_transferFrom;
[L6005]              havoc spender_s375;
[L6006]              havoc addedValue_s375;
[L6007]              havoc __ret_0_increaseAllowance;
[L6008]              havoc spender_s403;
[L6009]              havoc subtractedValue_s403;
[L6010]              havoc __ret_0_decreaseAllowance;
[L6011]              havoc name_s650;
[L6012]              havoc symbol_s650;
[L6013]              havoc decimals_s650;
[L6014]              havoc __ret_0_name;
[L6015]              havoc __ret_0_symbol;
[L6016]              havoc __ret_0_decimals;
[L6017]              havoc amount_s691;
[L6018]              havoc account_s704;
[L6019]              havoc amount_s704;
[L6020]              havoc __ret_0_NAME;
[L6021]              havoc __ret_0_SYMBOL;
[L6022]              havoc __ret_0_DECIMALS;
[L6023]              havoc __ret_0_INITIAL_SUPPLY;
[L6024]              havoc _spender_s788;
[L6025]              havoc _value_s788;
[L6026]              havoc _extraData_s788;
[L6027]              havoc success_s788;
[L6028]              havoc tmpNow;
[L6029]              havoc gas;
[L6030]              assume gas > 4000000 && gas <= 8000000;
[L6031]              tmpNow := now;
[L6032]              havoc now;
[L6033]              assume now > tmpNow;
[L6034]              assume msgsender_MSG != null;
[L6035]              assume DType[msgsender_MSG] != SafeMath;
[L6036]              assume DType[msgsender_MSG] != Context;
[L6037]              assume DType[msgsender_MSG] != IERC20;
[L6038]              assume DType[msgsender_MSG] != ERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6040]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6041]              assume DType[msgsender_MSG] != tokenRecipient;
[L6042]              assume DType[msgsender_MSG] != KeepToken;
[L6043]              Alloc[msgsender_MSG] := true;
[L6044]  COND FALSE  !(choice == 18)
[L6050]  COND FALSE  !(choice == 17)
[L6056]  COND FALSE  !(choice == 16)
[L6063]  COND FALSE  !(choice == 15)
[L6069]  COND FALSE  !(choice == 14)
[L6076]  COND FALSE  !(choice == 13)
[L6083]  COND FALSE  !(choice == 12)
[L6090]  COND FALSE  !(choice == 11)
[L6097]  COND FALSE  !(choice == 10)
[L6103]  COND FALSE  !(choice == 9)
[L6109]  COND FALSE  !(choice == 8)
[L6115]  COND TRUE   choice == 7
[L6116]              gas := gas - 21000;
[L6117]  COND TRUE   gas >= 0
[L6118]              assume amount_s691 >= 0 && amount_s691 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6119]              assume msgvalue_MSG == 0;
[L6120]  CALL        call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, amount_s691);
[L1158]              havoc __exception;
[L1159]              revert := false;
[L1160]  COND FALSE  !(__exception)
[L1185]  CALL        call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, amount_s691);
[L3860]  COND TRUE   DType[this] == KeepToken
[L3861]  CALL        call __var_27 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2574]              __ret_0_ := msgsender_MSG;
[L3861]  RET         call __var_27 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3862]  COND FALSE  !(revert)
[L3873]  COND TRUE   DType[this] == KeepToken
[L3874]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_27, amount_s691);
[L3457]              __var_19 := null;
[L3458]  COND FALSE  !(!(account_s548 != null))
[L3462]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s548], amount_s548, 1333744294);
[L2449]  COND FALSE  !(!(b_s53 <= a_s53))
[L2453]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2454]              __ret_0_ := c_s53;
[L3462]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s548], amount_s548, 1333744294);
[L3463]  COND FALSE  !(revert)
[L3466]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s548];
[L3467]              _balances_ERC20[this][account_s548] := __var_20;
[L3468]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s548];
[L3469]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s548, -708534286);
[L2449]  COND FALSE  !(!(b_s53 <= a_s53))
[L2453]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2454]              __ret_0_ := c_s53;
[L3469]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s548, -708534286);
[L3470]  COND FALSE  !(revert)
[L3473]              _totalSupply_ERC20[this] := __var_21;
[L3474]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3874]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_27, amount_s691);
[L3875]  COND FALSE  !(revert)
[L1185]  RET         call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, amount_s691);
[L1186]              assume !revert && gas >= 0;
[L6120]  RET         call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, amount_s691);
[L6178]  RET         call CorralChoice_KeepToken(this);
[L6178]  CALL        call CorralChoice_KeepToken(this);
[L5986]              havoc msgsender_MSG;
[L5987]              havoc msgvalue_MSG;
[L5988]              havoc choice;
[L5989]              havoc __ret_0_totalSupply;
[L5990]              havoc account_s258;
[L5991]              havoc __ret_0_balanceOf;
[L5992]              havoc recipient_s277;
[L5993]              havoc amount_s277;
[L5994]              havoc __ret_0_transfer;
[L5995]              havoc owner_s293;
[L5996]              havoc spender_s293;
[L5997]              havoc __ret_0_allowance;
[L5998]              havoc spender_s312;
[L5999]              havoc amount_s312;
[L6000]              havoc __ret_0_approve;
[L6001]              havoc sender_s348;
[L6002]              havoc recipient_s348;
[L6003]              havoc amount_s348;
[L6004]              havoc __ret_0_transferFrom;
[L6005]              havoc spender_s375;
[L6006]              havoc addedValue_s375;
[L6007]              havoc __ret_0_increaseAllowance;
[L6008]              havoc spender_s403;
[L6009]              havoc subtractedValue_s403;
[L6010]              havoc __ret_0_decreaseAllowance;
[L6011]              havoc name_s650;
[L6012]              havoc symbol_s650;
[L6013]              havoc decimals_s650;
[L6014]              havoc __ret_0_name;
[L6015]              havoc __ret_0_symbol;
[L6016]              havoc __ret_0_decimals;
[L6017]              havoc amount_s691;
[L6018]              havoc account_s704;
[L6019]              havoc amount_s704;
[L6020]              havoc __ret_0_NAME;
[L6021]              havoc __ret_0_SYMBOL;
[L6022]              havoc __ret_0_DECIMALS;
[L6023]              havoc __ret_0_INITIAL_SUPPLY;
[L6024]              havoc _spender_s788;
[L6025]              havoc _value_s788;
[L6026]              havoc _extraData_s788;
[L6027]              havoc success_s788;
[L6028]              havoc tmpNow;
[L6029]              havoc gas;
[L6030]              assume gas > 4000000 && gas <= 8000000;
[L6031]              tmpNow := now;
[L6032]              havoc now;
[L6033]              assume now > tmpNow;
[L6034]              assume msgsender_MSG != null;
[L6035]              assume DType[msgsender_MSG] != SafeMath;
[L6036]              assume DType[msgsender_MSG] != Context;
[L6037]              assume DType[msgsender_MSG] != IERC20;
[L6038]              assume DType[msgsender_MSG] != ERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6040]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6041]              assume DType[msgsender_MSG] != tokenRecipient;
[L6042]              assume DType[msgsender_MSG] != KeepToken;
[L6043]              Alloc[msgsender_MSG] := true;
[L6044]  COND FALSE  !(choice == 18)
[L6050]  COND FALSE  !(choice == 17)
[L6056]  COND TRUE   choice == 16
[L6057]              gas := gas - 21000;
[L6058]  COND TRUE   gas >= 0
[L6059]              assume amount_s277 >= 0 && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6060]              assume msgvalue_MSG == 0;
[L6061]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != recipient_s277 && (amount_s277 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][recipient_s277] + amount_s277 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && amount_s277 >= 0) && amount_s277 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s277] >= 0) && _balances_ERC20[this][recipient_s277] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L462]               havoc __exception;
[L463]               revert := false;
[L464]   COND FALSE  !(__exception)
[L489]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L2738]  COND TRUE   DType[this] == KeepToken
[L2739]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2574]              __ret_0_ := msgsender_MSG;
[L2739]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2740]  COND FALSE  !(revert)
[L2756]  COND TRUE   DType[this] == KeepToken
[L2757]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L3352]              __var_12 := null;
[L3353]  COND FALSE  !(!(sender_s460 != null))
[L3357]              __var_13 := null;
[L3358]  COND FALSE  !(!(recipient_s460 != null))
[L3362]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, -812884746);
[L2449]  COND FALSE  !(!(b_s53 <= a_s53))
[L2453]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2454]              __ret_0_ := c_s53;
[L3362]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s460], amount_s460, -812884746);
[L3363]  COND FALSE  !(revert)
[L3366]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s460];
[L3367]              _balances_ERC20[this][sender_s460] := __var_14;
[L3368]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s460];
[L3369]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L2425]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2426]  COND FALSE  !(!(c_s26 >= a_s26))
[L2430]              __ret_0_ := c_s26;
[L3369]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s460], amount_s460);
[L3370]  COND FALSE  !(revert)
[L3373]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s460];
[L3374]              _balances_ERC20[this][recipient_s460] := __var_15;
[L3375]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s460];
[L3376]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2757]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s277, amount_s277);
[L2758]  COND FALSE  !(revert)
[L2774]              __ret_0_ := true;
[L489]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L490]               assume !revert && gas >= 0;
[L6061]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s277, amount_s277);
[L6178]  RET         call CorralChoice_KeepToken(this);

Loop:
[L6178]  CALL        call CorralChoice_KeepToken(this);
[L5986]              havoc msgsender_MSG;
[L5987]              havoc msgvalue_MSG;
[L5988]              havoc choice;
[L5989]              havoc __ret_0_totalSupply;
[L5990]              havoc account_s258;
[L5991]              havoc __ret_0_balanceOf;
[L5992]              havoc recipient_s277;
[L5993]              havoc amount_s277;
[L5994]              havoc __ret_0_transfer;
[L5995]              havoc owner_s293;
[L5996]              havoc spender_s293;
[L5997]              havoc __ret_0_allowance;
[L5998]              havoc spender_s312;
[L5999]              havoc amount_s312;
[L6000]              havoc __ret_0_approve;
[L6001]              havoc sender_s348;
[L6002]              havoc recipient_s348;
[L6003]              havoc amount_s348;
[L6004]              havoc __ret_0_transferFrom;
[L6005]              havoc spender_s375;
[L6006]              havoc addedValue_s375;
[L6007]              havoc __ret_0_increaseAllowance;
[L6008]              havoc spender_s403;
[L6009]              havoc subtractedValue_s403;
[L6010]              havoc __ret_0_decreaseAllowance;
[L6011]              havoc name_s650;
[L6012]              havoc symbol_s650;
[L6013]              havoc decimals_s650;
[L6014]              havoc __ret_0_name;
[L6015]              havoc __ret_0_symbol;
[L6016]              havoc __ret_0_decimals;
[L6017]              havoc amount_s691;
[L6018]              havoc account_s704;
[L6019]              havoc amount_s704;
[L6020]              havoc __ret_0_NAME;
[L6021]              havoc __ret_0_SYMBOL;
[L6022]              havoc __ret_0_DECIMALS;
[L6023]              havoc __ret_0_INITIAL_SUPPLY;
[L6024]              havoc _spender_s788;
[L6025]              havoc _value_s788;
[L6026]              havoc _extraData_s788;
[L6027]              havoc success_s788;
[L6028]              havoc tmpNow;
[L6029]              havoc gas;
[L6030]              assume gas > 4000000 && gas <= 8000000;
[L6031]              tmpNow := now;
[L6032]              havoc now;
[L6033]              assume now > tmpNow;
[L6034]              assume msgsender_MSG != null;
[L6035]              assume DType[msgsender_MSG] != SafeMath;
[L6036]              assume DType[msgsender_MSG] != Context;
[L6037]              assume DType[msgsender_MSG] != IERC20;
[L6038]              assume DType[msgsender_MSG] != ERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6040]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6041]              assume DType[msgsender_MSG] != tokenRecipient;
[L6042]              assume DType[msgsender_MSG] != KeepToken;
[L6043]              Alloc[msgsender_MSG] := true;
[L6044]  COND TRUE   choice == 18
[L6045]              gas := gas - 21000;
[L6046]  COND FALSE  !(gas >= 0)
[L6178]  RET         call CorralChoice_KeepToken(this);

[2020-11-24 20:09:15,010 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:09:15,010 INFO  L82        PathProgramCache]: Analyzing trace with hash 1097678642, now seen corresponding path program 1 times
[2020-11-24 20:09:15,011 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:09:15,038 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:09:15,204 INFO  L134       CoverageAnalysis]: Checked inductivity of 256 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 256 trivial. 0 not checked.
[2020-11-24 20:09:15,204 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:09:15,204 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-24 20:09:15,205 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:09:15,205 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-24 20:09:15,205 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=152, Unknown=0, NotChecked=0, Total=182
[2020-11-24 20:09:15,205 INFO  L87              Difference]: Start difference. First operand 3618 states and 4181 transitions. cyclomatic complexity: 566 Second operand 14 states.
[2020-11-24 20:09:17,219 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:09:17,219 INFO  L93              Difference]: Finished difference Result 2123 states and 2444 transitions.
[2020-11-24 20:09:17,219 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-24 20:09:17,219 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2123 states and 2444 transitions.
[2020-11-24 20:09:17,222 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 20:09:17,222 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2123 states to 0 states and 0 transitions.
[2020-11-24 20:09:17,223 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-24 20:09:17,223 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-24 20:09:17,223 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-24 20:09:17,223 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:09:17,223 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:09:17,223 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:09:17,223 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:09:17,223 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 20:09:17,223 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-24 20:09:17,223 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 20:09:17,223 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-24 20:09:17,226 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:09:17 BasicIcfg
[2020-11-24 20:09:17,226 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 20:09:17,226 INFO  L168              Benchmark]: Toolchain (without parser) took 12357.57 ms. Allocated memory was 1.0 GB in the beginning and 2.0 GB in the end (delta: 971.0 MB). Free memory was 929.8 MB in the beginning and 1.1 GB in the end (delta: -209.1 MB). Peak memory consumption was 761.8 MB. Max. memory is 15.3 GB.
[2020-11-24 20:09:17,227 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 20:09:17,227 INFO  L168              Benchmark]: Boogie Preprocessor took 125.61 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 20:09:17,227 INFO  L168              Benchmark]: UtopiaSpecLang took 62.93 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:09:17,228 INFO  L168              Benchmark]: Boogie Printer took 21.00 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:09:17,228 INFO  L168              Benchmark]: RCFGBuilder took 930.67 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 71.3 MB). Free memory was 908.3 MB in the beginning and 1.0 GB in the end (delta: -127.7 MB). Peak memory consumption was 196.0 MB. Max. memory is 15.3 GB.
[2020-11-24 20:09:17,229 INFO  L168              Benchmark]: UtopiaLTL2Aut took 39.06 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 13.3 MB). Peak memory consumption was 13.3 MB. Max. memory is 15.3 GB.
[2020-11-24 20:09:17,229 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1643.24 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 153.1 MB). Free memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: -45.6 MB). Peak memory consumption was 543.1 MB. Max. memory is 15.3 GB.
[2020-11-24 20:09:17,229 INFO  L168              Benchmark]: BlockEncodingV2 took 166.65 ms. Allocated memory is still 1.3 GB. Free memory was 1.1 GB in the beginning and 973.8 MB in the end (delta: 94.6 MB). Peak memory consumption was 94.6 MB. Max. memory is 15.3 GB.
[2020-11-24 20:09:17,230 INFO  L168              Benchmark]: BuchiAutomizer took 9365.44 ms. Allocated memory was 1.3 GB in the beginning and 2.0 GB in the end (delta: 746.6 MB). Free memory was 973.8 MB in the beginning and 1.1 GB in the end (delta: -165.2 MB). Peak memory consumption was 581.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:09:17,233 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5868 locations, 10888 edges
  - StatisticsResult: Encoded RCFG
    5684 locations, 10412 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 125.61 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 62.93 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 21.00 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 930.67 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 71.3 MB). Free memory was 908.3 MB in the beginning and 1.0 GB in the end (delta: -127.7 MB). Peak memory consumption was 196.0 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 39.06 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 13.3 MB). Peak memory consumption was 13.3 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1643.24 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 153.1 MB). Free memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: -45.6 MB). Peak memory consumption was 543.1 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 166.65 ms. Allocated memory is still 1.3 GB. Free memory was 1.1 GB in the beginning and 973.8 MB in the end (delta: 94.6 MB). Peak memory consumption was 94.6 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 9365.44 ms. Allocated memory was 1.3 GB in the beginning and 2.0 GB in the end (delta: 746.6 MB). Free memory was 973.8 MB in the beginning and 1.1 GB in the end (delta: -165.2 MB). Peak memory consumption was 581.4 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2282 locations, 3331 edges
  - StatisticsResult: BuchiProgram size
    5868 locations, 10888 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic). 7 modules have a trivial ranking function, the largest among these consists of 22 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 9.3s and 8 iterations.  TraceHistogramMax:5. Analysis of lassos took 1.4s. Construction of modules took 5.4s. BÃ¼chi inclusion checks took 1.8s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 6 MinimizatonAttempts, 1288 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 3883 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 27387 SDtfs, 14897 SDslu, 54526 SDs, 0 SdLazy, 74549 SolverSat, 3284 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 5.4s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_ERC200) ==> ( <>(fail_transfer_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
