This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 16:09:24,223 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 16:09:24,224 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 16:09:24,235 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 16:09:24,235 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 16:09:24,236 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 16:09:24,237 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 16:09:24,239 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 16:09:24,240 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 16:09:24,241 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 16:09:24,242 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 16:09:24,242 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 16:09:24,242 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 16:09:24,243 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 16:09:24,244 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 16:09:24,245 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 16:09:24,246 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 16:09:24,247 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 16:09:24,248 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 16:09:24,249 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 16:09:24,250 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 16:09:24,251 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 16:09:24,252 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 16:09:24,253 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 16:09:24,253 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 16:09:24,253 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 16:09:24,254 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 16:09:24,254 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 16:09:24,254 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 16:09:24,255 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 16:09:24,255 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 16:09:24,256 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 16:09:24,256 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 16:09:24,257 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 16:09:24,257 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 16:09:24,257 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 16:09:24,258 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 16:09:24,258 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 16:09:24,258 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 16:09:24,259 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 16:09:24,259 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 16:09:24,260 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 16:09:24,267 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 16:09:24,268 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 16:09:24,268 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 16:09:24,269 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 16:09:24,269 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 16:09:24,269 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 16:09:24,269 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 16:09:24,269 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 16:09:24,269 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 16:09:24,269 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 16:09:24,270 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 16:09:24,270 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 16:09:24,270 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 16:09:24,270 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 16:09:24,270 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 16:09:24,270 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 16:09:24,270 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 16:09:24,270 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 16:09:24,271 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 16:09:24,271 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 16:09:24,271 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 16:09:24,271 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 16:09:24,271 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 16:09:24,271 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 16:09:24,271 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 16:09:24,271 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 16:09:24,298 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 16:09:24,313 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 16:09:24,316 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 16:09:24,317 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 16:09:24,318 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 16:09:24,318 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-normal.bpl
[2020-11-25 16:09:24,318 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-normal.bpl'
[2020-11-25 16:09:24,417 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 16:09:24,419 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 16:09:24,419 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 16:09:24,420 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 16:09:24,420 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 16:09:24,436 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:09:24" (1/1) ...
[2020-11-25 16:09:24,438 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:09:24" (1/1) ...
[2020-11-25 16:09:24,483 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:09:24" (1/1) ...
[2020-11-25 16:09:24,484 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:09:24" (1/1) ...
[2020-11-25 16:09:24,515 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:09:24" (1/1) ...
[2020-11-25 16:09:24,528 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:09:24" (1/1) ...
[2020-11-25 16:09:24,539 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:09:24" (1/1) ...
[2020-11-25 16:09:24,556 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 16:09:24,557 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 16:09:24,557 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 16:09:24,559 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 16:09:24,563 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:09:24" (1/1) ...
[2020-11-25 16:09:24,584 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(EXEToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= _balances_ERC20[this][from] && value <= _allowed_ERC20[this][from][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(EXEToken.transferFrom(from, to, value), return == true && _balances_ERC20[this][from] == old(_balances_ERC20[this][from]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _allowed_ERC20[this][from][msg.sender] == old(_allowed_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3]) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this]) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this]) && stopped_Stoppable[this] == old(stopped_Stoppable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 16:09:24,590 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(EXEToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= _balances_ERC20[this][from] && value <= _allowed_ERC20[this][from][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(EXEToken.transferFrom(from, to, value), return == true && _balances_ERC20[this][from] == old(_balances_ERC20[this][from]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _allowed_ERC20[this][from][msg.sender] == old(_allowed_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3]) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this]) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this]) && stopped_Stoppable[this] == old(stopped_Stoppable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 16:09:24,598 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(EXEToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= _balances_ERC20[this][from] && value <= _allowed_ERC20[this][from][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(EXEToken.transferFrom(from, to, value), return == true && _balances_ERC20[this][from] == old(_balances_ERC20[this][from]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _allowed_ERC20[this][from][msg.sender] == old(_allowed_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3]) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this]) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this]) && stopped_Stoppable[this] == old(stopped_Stoppable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 16:09:24,610 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( p1!=sender_s1113 && p1!=recipient_s1113 ) && ( p2!=sender_s1113 || p3!=msg.sender ) ) && sender_s1113!=recipient_s1113 ) && amount_s1113<=_balances_ERC20[this][sender_s1113] ) && amount_s1113<=_allowed_ERC20[this][sender_s1113][msg.sender] ) && ( _balances_ERC20[this][recipient_s1113] + amount_s1113 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && amount_s1113>=0 ) && amount_s1113<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s1113]>=0 ) && _balances_ERC20[this][recipient_s1113]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][sender_s1113]>=0 ) && _balances_ERC20[this][sender_s1113]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowed_ERC20[this][sender_s1113][msg.sender]>=0 ) && _allowed_ERC20[this][sender_s1113][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[recipient_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p3,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]],BinaryExpression[COMPNEQ,IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>],IdentifierExpression[recipient_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],BinaryExpression[COMPLEQ,IdentifierExpression[amount_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[amount_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[recipient_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],IdentifierExpression[amount_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[recipient_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[recipient_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 16:09:24,615 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( __ret_0_==true && _balances_ERC20[this][sender_s1113]==( ( old(_balances_ERC20[this][sender_s1113]) ) - amount_s1113 ) ) && _balances_ERC20[this][recipient_s1113]==( ( old(_balances_ERC20[this][recipient_s1113]) ) + amount_s1113 ) ) && _allowed_ERC20[this][sender_s1113][msg.sender]==( ( old(_allowed_ERC20[this][sender_s1113][msg.sender]) ) - amount_s1113 ) ) && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this][p1]==( old(_balances_ERC20[this][p1]) ) ) && _allowed_ERC20[this][p2][p3]==( old(_allowed_ERC20[this][p2][p3]) ) ) && _lockTimes_EXEToken[this]==( old(_lockTimes_EXEToken[this]) ) ) && _lockAmounts_EXEToken[this]==( old(_lockAmounts_EXEToken[this]) ) ) && stopped_Stoppable[this]==( old(stopped_Stoppable[this]) ) ) && _owner_Ownable[this]==( old(_owner_Ownable[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_EXEToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]],IdentifierExpression[amount_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[recipient_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[recipient_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]],IdentifierExpression[amount_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]],IdentifierExpression[amount_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_lockTimes_EXEToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_lockTimes_EXEToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_lockAmounts_EXEToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_lockAmounts_EXEToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[stopped_Stoppable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[stopped_Stoppable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]]]]
[2020-11-25 16:09:24,622 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(EXEToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= _balances_ERC20[this][from] && value <= _allowed_ERC20[this][from][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(EXEToken.transferFrom(from, to, value), return == true && _balances_ERC20[this][from] == old(_balances_ERC20[this][from]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _allowed_ERC20[this][from][msg.sender] == old(_allowed_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3]) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this]) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this]) && stopped_Stoppable[this] == old(stopped_Stoppable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 16:09:24,622 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_EXEToken0) ==> ( <>AP(success_transferFrom_EXEToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 16:09:24,636 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:09:24 PropertyContainer
[2020-11-25 16:09:24,637 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 16:09:24,637 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 16:09:24,637 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 16:09:24,637 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 16:09:24,638 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:09:24" (1/2) ...
[2020-11-25 16:09:24,639 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 16:09:24,639 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 16:09:24,661 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:09:24" (2/2) ...
[2020-11-25 16:09:24,662 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 16:09:24,662 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 16:09:24,662 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 16:09:24,662 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 16:09:24,663 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:09:24" (1/2) ...
[2020-11-25 16:09:24,723 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 16:09:24,723 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:09:24,723 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 16:09:24,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 16:09:24,724 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:09:24,724 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:09:24,724 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:09:24,724 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:09:24,724 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 16:09:24,724 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 16:09:24,724 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 16:09:24,724 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 16:09:24,725 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 16:09:24,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 16:09:24,725 INFO  L130     BoogieDeclarations]: Found specification of procedure _isOwner_Ownable__success
[2020-11-25 16:09:24,725 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 16:09:24,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 16:09:24,725 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 16:09:24,725 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 16:09:24,725 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 16:09:24,725 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 16:09:24,726 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 16:09:24,726 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 16:09:24,726 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 16:09:24,726 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 16:09:24,726 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 16:09:24,726 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 16:09:24,726 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 16:09:24,726 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 16:09:24,726 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 16:09:24,727 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 16:09:24,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 16:09:24,727 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 16:09:24,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 16:09:24,727 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 16:09:24,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 16:09:24,727 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 16:09:24,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 16:09:24,727 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 16:09:24,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 16:09:24,728 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 16:09:24,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 16:09:24,728 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 16:09:24,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 16:09:24,728 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 16:09:24,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 16:09:24,728 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 16:09:24,728 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 16:09:24,728 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 16:09:24,729 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 16:09:24,729 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 16:09:24,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 16:09:24,729 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 16:09:24,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 16:09:24,729 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 16:09:24,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 16:09:24,729 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 16:09:24,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 16:09:24,729 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 16:09:24,730 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 16:09:24,730 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 16:09:24,730 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-25 16:09:24,730 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-25 16:09:24,730 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 16:09:24,730 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 16:09:24,730 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20Burnable__success
[2020-11-25 16:09:24,730 INFO  L130     BoogieDeclarations]: Found specification of procedure Stoppable_Stoppable_NoBaseCtor__success
[2020-11-25 16:09:24,730 INFO  L130     BoogieDeclarations]: Found specification of procedure Stoppable_Stoppable
[2020-11-25 16:09:24,730 INFO  L138     BoogieDeclarations]: Found implementation of procedure Stoppable_Stoppable
[2020-11-25 16:09:24,731 INFO  L130     BoogieDeclarations]: Found specification of procedure stop_Stoppable
[2020-11-25 16:09:24,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure stop_Stoppable
[2020-11-25 16:09:24,731 INFO  L130     BoogieDeclarations]: Found specification of procedure start_Stoppable
[2020-11-25 16:09:24,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure start_Stoppable
[2020-11-25 16:09:24,731 INFO  L130     BoogieDeclarations]: Found specification of procedure stopped_Stoppable
[2020-11-25 16:09:24,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopped_Stoppable
[2020-11-25 16:09:24,731 INFO  L130     BoogieDeclarations]: Found specification of procedure EXEToken_EXEToken_NoBaseCtor__success
[2020-11-25 16:09:24,731 INFO  L130     BoogieDeclarations]: Found specification of procedure EXEToken_EXEToken
[2020-11-25 16:09:24,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure EXEToken_EXEToken
[2020-11-25 16:09:24,732 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_EXEToken__success
[2020-11-25 16:09:24,732 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_EXEToken
[2020-11-25 16:09:24,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_EXEToken
[2020-11-25 16:09:24,732 INFO  L130     BoogieDeclarations]: Found specification of procedure setLock~address~uint256~uint256_EXEToken
[2020-11-25 16:09:24,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure setLock~address~uint256~uint256_EXEToken
[2020-11-25 16:09:24,732 INFO  L130     BoogieDeclarations]: Found specification of procedure getLock~address_EXEToken
[2020-11-25 16:09:24,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure getLock~address_EXEToken
[2020-11-25 16:09:24,732 INFO  L130     BoogieDeclarations]: Found specification of procedure _isLocked~address~uint256_EXEToken__success
[2020-11-25 16:09:24,732 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_EXEToken
[2020-11-25 16:09:24,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_EXEToken
[2020-11-25 16:09:24,733 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_EXEToken
[2020-11-25 16:09:24,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_EXEToken
[2020-11-25 16:09:24,733 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 16:09:24,733 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 16:09:24,733 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 16:09:24,733 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 16:09:24,733 INFO  L130     BoogieDeclarations]: Found specification of procedure enabled_pre__success
[2020-11-25 16:09:24,733 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 16:09:24,733 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 16:09:24,733 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 16:09:24,733 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 16:09:24,734 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 16:09:24,734 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 16:09:24,734 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 16:09:24,734 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 16:09:24,734 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 16:09:24,734 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 16:09:24,734 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-25 16:09:24,734 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-25 16:09:24,734 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Stoppable
[2020-11-25 16:09:24,734 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Stoppable
[2020-11-25 16:09:24,735 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_EXEToken
[2020-11-25 16:09:24,735 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 16:09:24,735 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 16:09:24,735 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:09:24,735 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 16:09:24,735 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 16:09:24,735 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:09:24,735 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:09:24,735 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:09:24,735 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:09:24,736 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 16:09:24,736 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 16:09:24,736 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 16:09:24,736 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 16:09:24,736 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 16:09:24,736 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 16:09:24,736 INFO  L130     BoogieDeclarations]: Found specification of procedure _isOwner_Ownable__fail
[2020-11-25 16:09:24,736 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 16:09:24,736 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 16:09:24,736 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 16:09:24,737 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 16:09:24,737 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 16:09:24,737 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 16:09:24,737 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 16:09:24,737 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 16:09:24,737 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 16:09:24,737 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 16:09:24,737 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 16:09:24,737 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 16:09:24,737 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 16:09:24,738 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 16:09:24,738 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 16:09:24,738 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 16:09:24,738 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 16:09:24,738 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 16:09:24,738 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 16:09:24,738 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 16:09:24,738 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 16:09:24,739 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 16:09:24,739 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 16:09:24,739 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 16:09:24,739 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 16:09:24,739 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 16:09:24,739 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 16:09:24,739 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 16:09:24,739 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 16:09:24,739 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 16:09:24,739 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 16:09:24,739 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 16:09:24,740 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 16:09:24,740 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 16:09:24,740 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 16:09:24,740 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 16:09:24,740 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 16:09:24,740 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 16:09:24,740 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 16:09:24,740 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 16:09:24,740 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 16:09:24,740 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 16:09:24,740 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 16:09:24,741 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 16:09:24,741 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20Burnable__fail
[2020-11-25 16:09:24,741 INFO  L130     BoogieDeclarations]: Found specification of procedure Stoppable_Stoppable_NoBaseCtor__fail
[2020-11-25 16:09:24,741 INFO  L130     BoogieDeclarations]: Found specification of procedure Stoppable_Stoppable__success
[2020-11-25 16:09:24,741 INFO  L130     BoogieDeclarations]: Found specification of procedure Stoppable_Stoppable__fail
[2020-11-25 16:09:24,741 INFO  L130     BoogieDeclarations]: Found specification of procedure stop_Stoppable__success
[2020-11-25 16:09:24,741 INFO  L130     BoogieDeclarations]: Found specification of procedure stop_Stoppable__fail
[2020-11-25 16:09:24,741 INFO  L130     BoogieDeclarations]: Found specification of procedure start_Stoppable__success
[2020-11-25 16:09:24,741 INFO  L130     BoogieDeclarations]: Found specification of procedure start_Stoppable__fail
[2020-11-25 16:09:24,741 INFO  L130     BoogieDeclarations]: Found specification of procedure stopped_Stoppable__success
[2020-11-25 16:09:24,742 INFO  L130     BoogieDeclarations]: Found specification of procedure stopped_Stoppable__fail
[2020-11-25 16:09:24,742 INFO  L130     BoogieDeclarations]: Found specification of procedure EXEToken_EXEToken_NoBaseCtor__fail
[2020-11-25 16:09:24,742 INFO  L130     BoogieDeclarations]: Found specification of procedure EXEToken_EXEToken__success
[2020-11-25 16:09:24,742 INFO  L130     BoogieDeclarations]: Found specification of procedure EXEToken_EXEToken__fail
[2020-11-25 16:09:24,742 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_EXEToken__fail
[2020-11-25 16:09:24,742 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_EXEToken__success
[2020-11-25 16:09:24,742 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_EXEToken__fail
[2020-11-25 16:09:24,742 INFO  L130     BoogieDeclarations]: Found specification of procedure setLock~address~uint256~uint256_EXEToken__success
[2020-11-25 16:09:24,742 INFO  L130     BoogieDeclarations]: Found specification of procedure setLock~address~uint256~uint256_EXEToken__fail
[2020-11-25 16:09:24,742 INFO  L130     BoogieDeclarations]: Found specification of procedure getLock~address_EXEToken__success
[2020-11-25 16:09:24,742 INFO  L130     BoogieDeclarations]: Found specification of procedure getLock~address_EXEToken__fail
[2020-11-25 16:09:24,742 INFO  L130     BoogieDeclarations]: Found specification of procedure _isLocked~address~uint256_EXEToken__fail
[2020-11-25 16:09:24,743 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_EXEToken__success
[2020-11-25 16:09:24,743 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_EXEToken__fail
[2020-11-25 16:09:24,743 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_EXEToken__success
[2020-11-25 16:09:24,743 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_EXEToken__fail
[2020-11-25 16:09:24,743 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 16:09:24,743 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 16:09:24,743 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 16:09:24,743 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 16:09:24,743 INFO  L130     BoogieDeclarations]: Found specification of procedure enabled_pre__fail
[2020-11-25 16:09:24,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 16:09:24,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 16:09:24,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:09:24,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:09:24,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 16:09:24,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 16:09:24,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:09:24,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:09:24,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:09:24,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:09:24,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:09:24,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:09:24,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:09:24,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:09:24,745 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 16:09:24,745 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 16:09:24,745 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 16:09:24,745 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 16:09:24,745 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 16:09:24,745 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 16:09:24,745 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 16:09:24,745 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 16:09:24,745 INFO  L138     BoogieDeclarations]: Found implementation of procedure _isOwner_Ownable__fail
[2020-11-25 16:09:24,745 INFO  L138     BoogieDeclarations]: Found implementation of procedure _isOwner_Ownable__success
[2020-11-25 16:09:24,745 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 16:09:24,745 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 16:09:24,746 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 16:09:24,746 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 16:09:24,746 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 16:09:24,746 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 16:09:24,746 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 16:09:24,746 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 16:09:24,746 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 16:09:24,746 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 16:09:24,746 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 16:09:24,746 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 16:09:24,746 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 16:09:24,746 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 16:09:24,747 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 16:09:24,747 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 16:09:24,747 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 16:09:24,747 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 16:09:24,747 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 16:09:24,747 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 16:09:24,747 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 16:09:24,747 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 16:09:24,747 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 16:09:24,747 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 16:09:24,747 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 16:09:24,747 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 16:09:24,748 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 16:09:24,748 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 16:09:24,748 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 16:09:24,748 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 16:09:24,748 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 16:09:24,748 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 16:09:24,748 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 16:09:24,748 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 16:09:24,748 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 16:09:24,748 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 16:09:24,748 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 16:09:24,749 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 16:09:24,749 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 16:09:24,749 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 16:09:24,749 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 16:09:24,749 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 16:09:24,749 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 16:09:24,749 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 16:09:24,749 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 16:09:24,749 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 16:09:24,749 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 16:09:24,749 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 16:09:24,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 16:09:24,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 16:09:24,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 16:09:24,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 16:09:24,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20Burnable__fail
[2020-11-25 16:09:24,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20Burnable__success
[2020-11-25 16:09:24,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure Stoppable_Stoppable_NoBaseCtor__fail
[2020-11-25 16:09:24,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure Stoppable_Stoppable_NoBaseCtor__success
[2020-11-25 16:09:24,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure Stoppable_Stoppable__fail
[2020-11-25 16:09:24,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure Stoppable_Stoppable__success
[2020-11-25 16:09:24,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure stop_Stoppable__fail
[2020-11-25 16:09:24,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure stop_Stoppable__success
[2020-11-25 16:09:24,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure start_Stoppable__fail
[2020-11-25 16:09:24,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure start_Stoppable__success
[2020-11-25 16:09:24,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopped_Stoppable__fail
[2020-11-25 16:09:24,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopped_Stoppable__success
[2020-11-25 16:09:24,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure EXEToken_EXEToken_NoBaseCtor__fail
[2020-11-25 16:09:24,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure EXEToken_EXEToken_NoBaseCtor__success
[2020-11-25 16:09:24,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure EXEToken_EXEToken__fail
[2020-11-25 16:09:24,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure EXEToken_EXEToken__success
[2020-11-25 16:09:24,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_EXEToken__fail
[2020-11-25 16:09:24,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_EXEToken__success
[2020-11-25 16:09:24,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_EXEToken__fail
[2020-11-25 16:09:24,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_EXEToken__success
[2020-11-25 16:09:24,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure setLock~address~uint256~uint256_EXEToken__fail
[2020-11-25 16:09:24,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure setLock~address~uint256~uint256_EXEToken__success
[2020-11-25 16:09:24,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure getLock~address_EXEToken__fail
[2020-11-25 16:09:24,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure getLock~address_EXEToken__success
[2020-11-25 16:09:24,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure _isLocked~address~uint256_EXEToken__fail
[2020-11-25 16:09:24,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure _isLocked~address~uint256_EXEToken__success
[2020-11-25 16:09:24,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_EXEToken__fail
[2020-11-25 16:09:24,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_EXEToken__success
[2020-11-25 16:09:24,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_EXEToken__fail
[2020-11-25 16:09:24,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_EXEToken__success
[2020-11-25 16:09:24,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 16:09:24,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 16:09:24,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 16:09:24,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 16:09:24,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 16:09:24,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 16:09:24,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 16:09:24,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 16:09:24,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure enabled_pre__fail
[2020-11-25 16:09:24,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure enabled_pre__success
[2020-11-25 16:09:24,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 16:09:24,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 16:09:24,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 16:09:24,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 16:09:24,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 16:09:24,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 16:09:24,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 16:09:24,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 16:09:24,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 16:09:24,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 16:09:24,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-25 16:09:24,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-25 16:09:24,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Stoppable
[2020-11-25 16:09:24,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Stoppable
[2020-11-25 16:09:24,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_EXEToken
[2020-11-25 16:09:24,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 16:09:24,755 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 16:09:24,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 16:09:25,292 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:09:25,473 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:09:25,473 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:09:25,473 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:09:25,685 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 16:09:25,686 INFO  L286             CfgBuilder]: Removed 8 assue(true) statements.
[2020-11-25 16:09:25,688 INFO  L202        PluginConnector]: Adding new model EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:09:25 BoogieIcfgContainer
[2020-11-25 16:09:25,688 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:09:24" (2/2) ...
[2020-11-25 16:09:25,688 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 16:09:25,688 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@44198ef4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:09:25, skipping insertion in model container
[2020-11-25 16:09:25,688 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 16:09:25,689 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 16:09:25,689 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 16:09:25,690 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 16:09:25,690 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:09:24" (1/3) ...
[2020-11-25 16:09:25,690 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@28dd79cd and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:09:25, skipping insertion in model container
[2020-11-25 16:09:25,691 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:09:24" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 16:09:25,724 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:09:25 NWAContainer
[2020-11-25 16:09:25,724 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 16:09:25,724 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 16:09:25,724 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 16:09:25,725 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 16:09:25,726 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:09:25" (3/4) ...
[2020-11-25 16:09:25,726 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@5eafaec3 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:09:25, skipping insertion in model container
[2020-11-25 16:09:25,727 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:09:25" (4/4) ...
[2020-11-25 16:09:25,729 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 16:09:25,735 INFO  L110   BuchiProductObserver]: Initial RCFG 2515 locations, 3423 edges
[2020-11-25 16:09:25,735 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 16:09:25,746 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 16:09:27,681 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 16:09:27,689 INFO  L110   BuchiProductObserver]: BuchiProgram size 6236 locations, 11172 edges
[2020-11-25 16:09:27,689 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:09:27 BoogieIcfgContainer
[2020-11-25 16:09:27,689 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 16:09:27,689 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 16:09:27,689 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 16:09:27,690 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 16:09:27,691 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:09:27" (1/1) ...
[2020-11-25 16:09:27,812 INFO  L313           BlockEncoder]: Initial Icfg 6236 locations, 11172 edges
[2020-11-25 16:09:27,813 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 16:09:27,813 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 16:09:27,813 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 16:09:27,814 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 16:09:27,826 INFO  L70    emoveInfeasibleEdges]: Removed 159 edges and 19 locations because of local infeasibility
[2020-11-25 16:09:27,839 INFO  L70        RemoveSinkStates]: Removed 80 edges and 53 locations by removing sink states
[2020-11-25 16:09:27,851 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 16:09:27,855 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 16:09:27,859 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 16:09:27,859 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 16:09:27,862 INFO  L313           BlockEncoder]: Encoded RCFG 6130 locations, 10883 edges
[2020-11-25 16:09:27,863 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:09:27 BasicIcfg
[2020-11-25 16:09:27,863 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 16:09:27,863 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 16:09:27,863 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 16:09:27,865 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 16:09:27,865 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:09:27,865 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:09:24" (1/6) ...
[2020-11-25 16:09:27,866 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@30019433 and model type EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:09:27, skipping insertion in model container
[2020-11-25 16:09:27,866 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:09:27,866 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:09:24" (2/6) ...
[2020-11-25 16:09:27,866 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@30019433 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:09:27, skipping insertion in model container
[2020-11-25 16:09:27,867 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:09:27,867 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:09:25" (3/6) ...
[2020-11-25 16:09:27,867 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@30019433 and model type EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:09:27, skipping insertion in model container
[2020-11-25 16:09:27,867 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:09:27,867 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:09:25" (4/6) ...
[2020-11-25 16:09:27,867 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@30019433 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:09:27, skipping insertion in model container
[2020-11-25 16:09:27,867 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:09:27,867 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:09:27" (5/6) ...
[2020-11-25 16:09:27,867 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@30019433 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 04:09:27, skipping insertion in model container
[2020-11-25 16:09:27,868 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:09:27,868 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:09:27" (6/6) ...
[2020-11-25 16:09:27,869 INFO  L404   chiAutomizerObserver]: Analyzing ICFG EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-normal.bpl_BEv2
[2020-11-25 16:09:27,901 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 16:09:27,902 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 16:09:27,902 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 16:09:27,902 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 16:09:27,902 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 16:09:27,902 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 16:09:27,902 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 16:09:27,902 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 16:09:27,902 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 16:09:27,952 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6130 states.
[2020-11-25 16:09:28,008 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:09:28,008 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:09:28,008 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:09:28,015 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:09:28,015 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:09:28,015 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 16:09:28,015 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6130 states.
[2020-11-25 16:09:28,038 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:09:28,038 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:09:28,038 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:09:28,040 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:09:28,040 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_EXEToken0 := false;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7038]              assume null == 0;
[L7039]  CALL        call this := FreshRefGenerator__success();
[L3029]              havoc newRef;
[L3030]              assume Alloc[newRef] == false;
[L3031]              Alloc[newRef] := true;
[L3032]              assume newRef != null;
[L7039]  RET         call this := FreshRefGenerator__success();
[L7040]              assume now >= 0;
[L7041]              assume DType[this] == EXEToken;
[L7042]              assume msgvalue_MSG == 0;
[L7043]              gas := gas - 53000;
[L7044]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1770]              havoc __exception;
[L1771]              revert := false;
[L1772]  COND FALSE  !(__exception)
[L1799]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4315]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND TRUE   revert
[L4315]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4316]  COND TRUE   revert
[L1799]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1800]              assume !revert && gas >= 0;
[L7044]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7045]              assume !revert && gas >= 0;

Loop:
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND TRUE   choice == 21
[L6891]              gas := gas - 21000;
[L6892]  COND FALSE  !(gas >= 0)
[L7048]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:09:28,053 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:09:28,053 INFO  L82        PathProgramCache]: Analyzing trace with hash -660842642, now seen corresponding path program 1 times
[2020-11-25 16:09:28,057 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:09:28,075 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:09:28,106 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:09:28,108 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:09:28,108 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:09:28,478 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:09:28,487 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:09:28,487 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:09:28,488 INFO  L87              Difference]: Start difference. First operand 6130 states. Second operand 4 states.
[2020-11-25 16:09:29,086 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:09:29,086 INFO  L93              Difference]: Finished difference Result 3834 states and 4417 transitions.
[2020-11-25 16:09:29,086 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:09:29,087 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3834 states and 4417 transitions.
[2020-11-25 16:09:29,108 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:09:29,134 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3834 states to 3834 states and 4417 transitions.
[2020-11-25 16:09:29,135 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 16:09:29,137 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 851
[2020-11-25 16:09:29,138 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3834 states and 4417 transitions.
[2020-11-25 16:09:29,146 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:09:29,146 INFO  L728         BuchiCegarLoop]: Abstraction has 3834 states and 4417 transitions.
[2020-11-25 16:09:29,161 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3834 states and 4417 transitions.
[2020-11-25 16:09:29,218 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3834 to 3834.
[2020-11-25 16:09:29,218 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3834 states.
[2020-11-25 16:09:29,224 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3834 states to 3834 states and 4417 transitions.
[2020-11-25 16:09:29,224 INFO  L751         BuchiCegarLoop]: Abstraction has 3834 states and 4417 transitions.
[2020-11-25 16:09:29,224 INFO  L631         BuchiCegarLoop]: Abstraction has 3834 states and 4417 transitions.
[2020-11-25 16:09:29,224 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 16:09:29,224 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3834 states and 4417 transitions.
[2020-11-25 16:09:29,233 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:09:29,233 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:09:29,233 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:09:29,235 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:09:29,235 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_EXEToken0 := false;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7038]              assume null == 0;
[L7039]  CALL        call this := FreshRefGenerator__success();
[L3029]              havoc newRef;
[L3030]              assume Alloc[newRef] == false;
[L3031]              Alloc[newRef] := true;
[L3032]              assume newRef != null;
[L7039]  RET         call this := FreshRefGenerator__success();
[L7040]              assume now >= 0;
[L7041]              assume DType[this] == EXEToken;
[L7042]              assume msgvalue_MSG == 0;
[L7043]              gas := gas - 53000;
[L7044]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1770]              havoc __exception;
[L1771]              revert := false;
[L1772]  COND FALSE  !(__exception)
[L1799]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4315]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4315]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4316]  COND TRUE   revert
[L1799]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1800]              assume !revert && gas >= 0;
[L7044]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7045]              assume !revert && gas >= 0;
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND FALSE  !(choice == 21)
[L6896]  COND FALSE  !(choice == 20)
[L6902]  COND FALSE  !(choice == 19)
[L6908]  COND FALSE  !(choice == 18)
[L6914]  COND FALSE  !(choice == 17)
[L6920]  COND FALSE  !(choice == 16)
[L6927]  COND FALSE  !(choice == 15)
[L6934]  COND TRUE   choice == 14
[L6935]              gas := gas - 21000;
[L6936]  COND TRUE   gas >= 0
[L6937]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6938]              assume msgvalue_MSG == 0;
[L6939]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != sender_s1113 && p1 != recipient_s1113) && (p2 != sender_s1113 || p3 != msgsender_MSG)) && sender_s1113 != recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && _balances_ERC20[this][recipient_s1113] + amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND FALSE  !(__exception)
[L2129]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4596]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6068]  COND FALSE  !(!!stopped_Stoppable[this])
[L4596]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4597]  COND TRUE   revert
[L2129]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2130]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((__ret_0_ == true && _balances_ERC20[this][sender_s1113] == old(_balances_ERC20[this][sender_s1113]) - amount_s1113) && _balances_ERC20[this][recipient_s1113] == old(_balances_ERC20[this][recipient_s1113]) + amount_s1113) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] == old(_allowed_ERC20[this][sender_s1113][msgsender_MSG]) - amount_s1113) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3])) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this])) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this])) && stopped_Stoppable[this] == old(stopped_Stoppable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7048]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND FALSE  !(choice == 21)
[L6896]  COND FALSE  !(choice == 20)
[L6902]  COND FALSE  !(choice == 19)
[L6908]  COND FALSE  !(choice == 18)
[L6914]  COND FALSE  !(choice == 17)
[L6920]  COND FALSE  !(choice == 16)
[L6927]  COND FALSE  !(choice == 15)
[L6934]  COND TRUE   choice == 14
[L6935]              gas := gas - 21000;
[L6936]  COND TRUE   gas >= 0
[L6937]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6938]              assume msgvalue_MSG == 0;
[L6939]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != sender_s1113 && p1 != recipient_s1113) && (p2 != sender_s1113 || p3 != msgsender_MSG)) && sender_s1113 != recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && _balances_ERC20[this][recipient_s1113] + amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND FALSE  !(__exception)
[L2129]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4596]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6068]  COND FALSE  !(!!stopped_Stoppable[this])
[L4596]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4597]  COND TRUE   revert
[L2129]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2130]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((__ret_0_ == true && _balances_ERC20[this][sender_s1113] == old(_balances_ERC20[this][sender_s1113]) - amount_s1113) && _balances_ERC20[this][recipient_s1113] == old(_balances_ERC20[this][recipient_s1113]) + amount_s1113) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] == old(_allowed_ERC20[this][sender_s1113][msgsender_MSG]) - amount_s1113) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3])) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this])) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this])) && stopped_Stoppable[this] == old(stopped_Stoppable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7048]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:09:29,239 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:09:29,239 INFO  L82        PathProgramCache]: Analyzing trace with hash -1812877002, now seen corresponding path program 1 times
[2020-11-25 16:09:29,240 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:09:29,248 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:09:29,270 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:09:29,270 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:09:29,270 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 16:09:29,271 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:09:29,271 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 16:09:29,272 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 16:09:29,272 INFO  L87              Difference]: Start difference. First operand 3834 states and 4417 transitions. cyclomatic complexity: 585 Second operand 3 states.
[2020-11-25 16:09:29,367 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:09:29,367 INFO  L93              Difference]: Finished difference Result 5012 states and 5801 transitions.
[2020-11-25 16:09:29,367 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 16:09:29,368 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5012 states and 5801 transitions.
[2020-11-25 16:09:29,385 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:09:29,406 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5012 states to 5012 states and 5801 transitions.
[2020-11-25 16:09:29,406 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1188
[2020-11-25 16:09:29,407 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1188
[2020-11-25 16:09:29,407 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5012 states and 5801 transitions.
[2020-11-25 16:09:29,413 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:09:29,413 INFO  L728         BuchiCegarLoop]: Abstraction has 5012 states and 5801 transitions.
[2020-11-25 16:09:29,418 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5012 states and 5801 transitions.
[2020-11-25 16:09:29,459 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5012 to 4238.
[2020-11-25 16:09:29,459 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4238 states.
[2020-11-25 16:09:29,464 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4238 states to 4238 states and 4867 transitions.
[2020-11-25 16:09:29,464 INFO  L751         BuchiCegarLoop]: Abstraction has 4238 states and 4867 transitions.
[2020-11-25 16:09:29,464 INFO  L631         BuchiCegarLoop]: Abstraction has 4238 states and 4867 transitions.
[2020-11-25 16:09:29,464 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 16:09:29,464 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4238 states and 4867 transitions.
[2020-11-25 16:09:29,470 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:09:29,470 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:09:29,470 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:09:29,472 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:09:29,472 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_EXEToken0 := false;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7038]              assume null == 0;
[L7039]  CALL        call this := FreshRefGenerator__success();
[L3029]              havoc newRef;
[L3030]              assume Alloc[newRef] == false;
[L3031]              Alloc[newRef] := true;
[L3032]              assume newRef != null;
[L7039]  RET         call this := FreshRefGenerator__success();
[L7040]              assume now >= 0;
[L7041]              assume DType[this] == EXEToken;
[L7042]              assume msgvalue_MSG == 0;
[L7043]              gas := gas - 53000;
[L7044]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1770]              havoc __exception;
[L1771]              revert := false;
[L1772]  COND FALSE  !(__exception)
[L1799]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4315]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4315]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4316]  COND FALSE  !(revert)
[L4319]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3927]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3927]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3902]              assume msgsender_MSG != null;
[L3903]              Balance[this] := 0;
[L3904]              _name_ERC20Detailed[this] := 427332508;
[L3905]              _symbol_ERC20Detailed[this] := 427332508;
[L3906]              _decimals_ERC20Detailed[this] := 0;
[L3908]              _name_ERC20Detailed[this] := name_s778;
[L3909]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3910]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3931]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3932]  COND FALSE  !(revert)
[L4319]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4320]  COND FALSE  !(revert)
[L4323]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4323]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4324]  COND FALSE  !(revert)
[L4327]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4007]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4011]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4015]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3984]              assume msgsender_MSG != null;
[L3985]              Balance[this] := 0;
[L4015]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4016]  COND FALSE  !(revert)
[L4327]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4328]  COND FALSE  !(revert)
[L4331]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4331]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4157]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4158]  COND FALSE  !(revert)
[L4161]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4137]              assume msgsender_MSG != null;
[L4138]              Balance[this] := 0;
[L4139]              stopped_Stoppable[this] := false;
[L4161]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4162]  COND FALSE  !(revert)
[L4335]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4251]              assume msgsender_MSG != null;
[L4252]              Balance[this] := 0;
[L4253]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4254]              sum__lockTimes2[this] := 0;
[L4255]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4256]              sum__lockAmounts3[this] := 0;
[L4258]  COND TRUE   DType[this] == EXEToken
[L4259]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3235]              __ret_0_ := _owner_Ownable[this];
[L4259]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]  COND FALSE  !(revert)
[L4266]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4267]  COND TRUE   DType[this] == EXEToken
[L4268]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3740]              __var_15 := null;
[L3741]  COND TRUE   !(account_s654 != null)
[L3742]              revert := true;
[L4268]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4269]  COND TRUE   revert
[L4339]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4340]  COND TRUE   revert
[L1799]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1800]              assume !revert && gas >= 0;
[L7044]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7045]              assume !revert && gas >= 0;
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND FALSE  !(choice == 21)
[L6896]  COND FALSE  !(choice == 20)
[L6902]  COND FALSE  !(choice == 19)
[L6908]  COND FALSE  !(choice == 18)
[L6914]  COND FALSE  !(choice == 17)
[L6920]  COND FALSE  !(choice == 16)
[L6927]  COND FALSE  !(choice == 15)
[L6934]  COND TRUE   choice == 14
[L6935]              gas := gas - 21000;
[L6936]  COND TRUE   gas >= 0
[L6937]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6938]              assume msgvalue_MSG == 0;
[L6939]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != sender_s1113 && p1 != recipient_s1113) && (p2 != sender_s1113 || p3 != msgsender_MSG)) && sender_s1113 != recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && _balances_ERC20[this][recipient_s1113] + amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND FALSE  !(__exception)
[L2129]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4596]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6068]  COND TRUE   !!stopped_Stoppable[this]
[L6069]              revert := true;
[L4596]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4597]  COND TRUE   revert
[L2129]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2130]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((__ret_0_ == true && _balances_ERC20[this][sender_s1113] == old(_balances_ERC20[this][sender_s1113]) - amount_s1113) && _balances_ERC20[this][recipient_s1113] == old(_balances_ERC20[this][recipient_s1113]) + amount_s1113) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] == old(_allowed_ERC20[this][sender_s1113][msgsender_MSG]) - amount_s1113) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3])) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this])) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this])) && stopped_Stoppable[this] == old(stopped_Stoppable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7048]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND FALSE  !(choice == 21)
[L6896]  COND FALSE  !(choice == 20)
[L6902]  COND FALSE  !(choice == 19)
[L6908]  COND FALSE  !(choice == 18)
[L6914]  COND FALSE  !(choice == 17)
[L6920]  COND FALSE  !(choice == 16)
[L6927]  COND FALSE  !(choice == 15)
[L6934]  COND TRUE   choice == 14
[L6935]              gas := gas - 21000;
[L6936]  COND TRUE   gas >= 0
[L6937]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6938]              assume msgvalue_MSG == 0;
[L6939]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != sender_s1113 && p1 != recipient_s1113) && (p2 != sender_s1113 || p3 != msgsender_MSG)) && sender_s1113 != recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && _balances_ERC20[this][recipient_s1113] + amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND FALSE  !(__exception)
[L2129]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4596]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6068]  COND TRUE   !!stopped_Stoppable[this]
[L6069]              revert := true;
[L4596]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4597]  COND TRUE   revert
[L2129]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2130]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((__ret_0_ == true && _balances_ERC20[this][sender_s1113] == old(_balances_ERC20[this][sender_s1113]) - amount_s1113) && _balances_ERC20[this][recipient_s1113] == old(_balances_ERC20[this][recipient_s1113]) + amount_s1113) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] == old(_allowed_ERC20[this][sender_s1113][msgsender_MSG]) - amount_s1113) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowed_ERC20[this][p2][p3] == old(_allowed_ERC20[this][p2][p3])) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this])) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this])) && stopped_Stoppable[this] == old(stopped_Stoppable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7048]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:09:29,477 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:09:29,477 INFO  L82        PathProgramCache]: Analyzing trace with hash -1483497092, now seen corresponding path program 1 times
[2020-11-25 16:09:29,478 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:09:29,493 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:09:29,583 INFO  L134       CoverageAnalysis]: Checked inductivity of 131 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 131 trivial. 0 not checked.
[2020-11-25 16:09:29,583 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:09:29,583 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 16:09:29,584 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:09:29,584 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 16:09:29,584 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 16:09:29,584 INFO  L87              Difference]: Start difference. First operand 4238 states and 4867 transitions. cyclomatic complexity: 631 Second operand 3 states.
[2020-11-25 16:09:29,650 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:09:29,650 INFO  L93              Difference]: Finished difference Result 5012 states and 5623 transitions.
[2020-11-25 16:09:29,650 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 16:09:29,650 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5012 states and 5623 transitions.
[2020-11-25 16:09:29,662 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:09:29,677 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5012 states to 4658 states and 5205 transitions.
[2020-11-25 16:09:29,677 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1061
[2020-11-25 16:09:29,678 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1099
[2020-11-25 16:09:29,678 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4658 states and 5205 transitions.
[2020-11-25 16:09:29,682 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:09:29,682 INFO  L728         BuchiCegarLoop]: Abstraction has 4658 states and 5205 transitions.
[2020-11-25 16:09:29,686 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4658 states and 5205 transitions.
[2020-11-25 16:09:29,718 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4658 to 3992.
[2020-11-25 16:09:29,718 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3992 states.
[2020-11-25 16:09:29,722 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3992 states to 3992 states and 4379 transitions.
[2020-11-25 16:09:29,722 INFO  L751         BuchiCegarLoop]: Abstraction has 3992 states and 4379 transitions.
[2020-11-25 16:09:29,722 INFO  L631         BuchiCegarLoop]: Abstraction has 3992 states and 4379 transitions.
[2020-11-25 16:09:29,722 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 16:09:29,722 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3992 states and 4379 transitions.
[2020-11-25 16:09:29,727 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:09:29,727 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:09:29,727 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:09:29,729 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:09:29,729 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_EXEToken0 := false;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7038]              assume null == 0;
[L7039]  CALL        call this := FreshRefGenerator__success();
[L3029]              havoc newRef;
[L3030]              assume Alloc[newRef] == false;
[L3031]              Alloc[newRef] := true;
[L3032]              assume newRef != null;
[L7039]  RET         call this := FreshRefGenerator__success();
[L7040]              assume now >= 0;
[L7041]              assume DType[this] == EXEToken;
[L7042]              assume msgvalue_MSG == 0;
[L7043]              gas := gas - 53000;
[L7044]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1770]              havoc __exception;
[L1771]              revert := false;
[L1772]  COND FALSE  !(__exception)
[L1799]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4315]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4315]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4316]  COND FALSE  !(revert)
[L4319]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3927]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3927]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3902]              assume msgsender_MSG != null;
[L3903]              Balance[this] := 0;
[L3904]              _name_ERC20Detailed[this] := 427332508;
[L3905]              _symbol_ERC20Detailed[this] := 427332508;
[L3906]              _decimals_ERC20Detailed[this] := 0;
[L3908]              _name_ERC20Detailed[this] := name_s778;
[L3909]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3910]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3931]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3932]  COND FALSE  !(revert)
[L4319]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4320]  COND FALSE  !(revert)
[L4323]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4323]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4324]  COND FALSE  !(revert)
[L4327]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4007]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4011]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4015]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3984]              assume msgsender_MSG != null;
[L3985]              Balance[this] := 0;
[L4015]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4016]  COND FALSE  !(revert)
[L4327]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4328]  COND FALSE  !(revert)
[L4331]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4331]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4157]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4158]  COND FALSE  !(revert)
[L4161]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4137]              assume msgsender_MSG != null;
[L4138]              Balance[this] := 0;
[L4139]              stopped_Stoppable[this] := false;
[L4161]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4162]  COND FALSE  !(revert)
[L4335]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4251]              assume msgsender_MSG != null;
[L4252]              Balance[this] := 0;
[L4253]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4254]              sum__lockTimes2[this] := 0;
[L4255]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4256]              sum__lockAmounts3[this] := 0;
[L4258]  COND TRUE   DType[this] == EXEToken
[L4259]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3235]              __ret_0_ := _owner_Ownable[this];
[L4259]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]  COND FALSE  !(revert)
[L4266]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4267]  COND TRUE   DType[this] == EXEToken
[L4268]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3740]              __var_15 := null;
[L3741]  COND FALSE  !(!(account_s654 != null))
[L3745]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3745]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3746]  COND FALSE  !(revert)
[L3749]              _totalSupply_ERC20[this] := __var_16;
[L3750]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3750]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3751]  COND FALSE  !(revert)
[L3754]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3755]              _balances_ERC20[this][account_s654] := __var_17;
[L3756]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3757]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4268]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4269]  COND FALSE  !(revert)
[L4339]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4340]  COND FALSE  !(revert)
[L1799]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1800]              assume !revert && gas >= 0;
[L7044]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7045]              assume !revert && gas >= 0;
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND FALSE  !(choice == 21)
[L6896]  COND FALSE  !(choice == 20)
[L6902]  COND FALSE  !(choice == 19)
[L6908]  COND FALSE  !(choice == 18)
[L6914]  COND FALSE  !(choice == 17)
[L6920]  COND FALSE  !(choice == 16)
[L6927]  COND FALSE  !(choice == 15)
[L6934]  COND TRUE   choice == 14
[L6935]              gas := gas - 21000;
[L6936]  COND TRUE   gas >= 0
[L6937]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6938]              assume msgvalue_MSG == 0;
[L6939]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != sender_s1113 && p1 != recipient_s1113) && (p2 != sender_s1113 || p3 != msgsender_MSG)) && sender_s1113 != recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && _balances_ERC20[this][recipient_s1113] + amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND TRUE   __exception
[L2103]              __tmp__Balance := Balance;
[L2104]              __tmp__DType := DType;
[L2105]              __tmp__Alloc := Alloc;
[L2106]              __tmp__balance_ADDR := balance_ADDR;
[L2107]              __tmp__M_Ref_int := M_Ref_int;
[L2108]              __tmp__sum__balances0 := sum__balances0;
[L2109]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2110]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2111]              __tmp__sum__allowed1 := sum__allowed1;
[L2112]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2113]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2114]              __tmp__Length := Length;
[L2115]              __tmp__now := now;
[L2116]              __tmp___owner_Ownable := _owner_Ownable;
[L2117]              __tmp___balances_ERC20 := _balances_ERC20;
[L2118]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2119]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2120]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2121]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2122]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2123]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2124]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2125]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2126]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4567]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6060]  COND TRUE   !!__tmp__stopped_Stoppable[this]
[L6061]              revert := true;
[L4567]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4568]  COND TRUE   revert
[L2126]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2127]              assume revert || gas < 0;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7048]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND FALSE  !(choice == 21)
[L6896]  COND FALSE  !(choice == 20)
[L6902]  COND FALSE  !(choice == 19)
[L6908]  COND FALSE  !(choice == 18)
[L6914]  COND FALSE  !(choice == 17)
[L6920]  COND FALSE  !(choice == 16)
[L6927]  COND FALSE  !(choice == 15)
[L6934]  COND TRUE   choice == 14
[L6935]              gas := gas - 21000;
[L6936]  COND TRUE   gas >= 0
[L6937]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6938]              assume msgvalue_MSG == 0;
[L6939]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != sender_s1113 && p1 != recipient_s1113) && (p2 != sender_s1113 || p3 != msgsender_MSG)) && sender_s1113 != recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && _balances_ERC20[this][recipient_s1113] + amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND TRUE   __exception
[L2103]              __tmp__Balance := Balance;
[L2104]              __tmp__DType := DType;
[L2105]              __tmp__Alloc := Alloc;
[L2106]              __tmp__balance_ADDR := balance_ADDR;
[L2107]              __tmp__M_Ref_int := M_Ref_int;
[L2108]              __tmp__sum__balances0 := sum__balances0;
[L2109]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2110]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2111]              __tmp__sum__allowed1 := sum__allowed1;
[L2112]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2113]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2114]              __tmp__Length := Length;
[L2115]              __tmp__now := now;
[L2116]              __tmp___owner_Ownable := _owner_Ownable;
[L2117]              __tmp___balances_ERC20 := _balances_ERC20;
[L2118]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2119]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2120]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2121]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2122]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2123]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2124]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2125]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2126]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4567]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6060]  COND TRUE   !!__tmp__stopped_Stoppable[this]
[L6061]              revert := true;
[L4567]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4568]  COND TRUE   revert
[L2126]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2127]              assume revert || gas < 0;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7048]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:09:29,733 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:09:29,734 INFO  L82        PathProgramCache]: Analyzing trace with hash 137629980, now seen corresponding path program 1 times
[2020-11-25 16:09:29,734 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:09:29,747 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:09:29,839 INFO  L134       CoverageAnalysis]: Checked inductivity of 136 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 136 trivial. 0 not checked.
[2020-11-25 16:09:29,839 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:09:29,839 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 16:09:29,840 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:09:29,840 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 16:09:29,840 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=133, Unknown=0, NotChecked=0, Total=156
[2020-11-25 16:09:29,840 INFO  L87              Difference]: Start difference. First operand 3992 states and 4379 transitions. cyclomatic complexity: 389 Second operand 13 states.
[2020-11-25 16:09:32,892 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:09:32,893 INFO  L93              Difference]: Finished difference Result 6538 states and 7240 transitions.
[2020-11-25 16:09:32,893 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-25 16:09:32,894 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6538 states and 7240 transitions.
[2020-11-25 16:09:32,914 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 16:09:32,936 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6538 states to 6528 states and 7228 transitions.
[2020-11-25 16:09:32,936 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1542
[2020-11-25 16:09:32,938 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1542
[2020-11-25 16:09:32,938 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6528 states and 7228 transitions.
[2020-11-25 16:09:32,945 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:09:32,945 INFO  L728         BuchiCegarLoop]: Abstraction has 6528 states and 7228 transitions.
[2020-11-25 16:09:32,951 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6528 states and 7228 transitions.
[2020-11-25 16:09:33,013 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6528 to 5626.
[2020-11-25 16:09:33,013 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5626 states.
[2020-11-25 16:09:33,022 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5626 states to 5626 states and 6305 transitions.
[2020-11-25 16:09:33,022 INFO  L751         BuchiCegarLoop]: Abstraction has 5626 states and 6305 transitions.
[2020-11-25 16:09:33,022 INFO  L631         BuchiCegarLoop]: Abstraction has 5626 states and 6305 transitions.
[2020-11-25 16:09:33,022 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 16:09:33,022 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5626 states and 6305 transitions.
[2020-11-25 16:09:33,033 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 16:09:33,033 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:09:33,033 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:09:33,036 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:09:33,037 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_EXEToken0 := false;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7038]              assume null == 0;
[L7039]  CALL        call this := FreshRefGenerator__success();
[L3029]              havoc newRef;
[L3030]              assume Alloc[newRef] == false;
[L3031]              Alloc[newRef] := true;
[L3032]              assume newRef != null;
[L7039]  RET         call this := FreshRefGenerator__success();
[L7040]              assume now >= 0;
[L7041]              assume DType[this] == EXEToken;
[L7042]              assume msgvalue_MSG == 0;
[L7043]              gas := gas - 53000;
[L7044]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1770]              havoc __exception;
[L1771]              revert := false;
[L1772]  COND FALSE  !(__exception)
[L1799]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4315]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4315]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4316]  COND FALSE  !(revert)
[L4319]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3927]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3927]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3902]              assume msgsender_MSG != null;
[L3903]              Balance[this] := 0;
[L3904]              _name_ERC20Detailed[this] := 427332508;
[L3905]              _symbol_ERC20Detailed[this] := 427332508;
[L3906]              _decimals_ERC20Detailed[this] := 0;
[L3908]              _name_ERC20Detailed[this] := name_s778;
[L3909]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3910]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3931]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3932]  COND FALSE  !(revert)
[L4319]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4320]  COND FALSE  !(revert)
[L4323]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4323]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4324]  COND FALSE  !(revert)
[L4327]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4007]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4011]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4015]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3984]              assume msgsender_MSG != null;
[L3985]              Balance[this] := 0;
[L4015]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4016]  COND FALSE  !(revert)
[L4327]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4328]  COND FALSE  !(revert)
[L4331]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4331]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4157]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4158]  COND FALSE  !(revert)
[L4161]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4137]              assume msgsender_MSG != null;
[L4138]              Balance[this] := 0;
[L4139]              stopped_Stoppable[this] := false;
[L4161]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4162]  COND FALSE  !(revert)
[L4335]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4251]              assume msgsender_MSG != null;
[L4252]              Balance[this] := 0;
[L4253]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4254]              sum__lockTimes2[this] := 0;
[L4255]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4256]              sum__lockAmounts3[this] := 0;
[L4258]  COND TRUE   DType[this] == EXEToken
[L4259]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3235]              __ret_0_ := _owner_Ownable[this];
[L4259]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]  COND FALSE  !(revert)
[L4266]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4267]  COND TRUE   DType[this] == EXEToken
[L4268]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3740]              __var_15 := null;
[L3741]  COND FALSE  !(!(account_s654 != null))
[L3745]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3745]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3746]  COND FALSE  !(revert)
[L3749]              _totalSupply_ERC20[this] := __var_16;
[L3750]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3750]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3751]  COND FALSE  !(revert)
[L3754]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3755]              _balances_ERC20[this][account_s654] := __var_17;
[L3756]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3757]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4268]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4269]  COND FALSE  !(revert)
[L4339]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4340]  COND FALSE  !(revert)
[L1799]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1800]              assume !revert && gas >= 0;
[L7044]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7045]              assume !revert && gas >= 0;
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND FALSE  !(choice == 21)
[L6896]  COND FALSE  !(choice == 20)
[L6902]  COND FALSE  !(choice == 19)
[L6908]  COND FALSE  !(choice == 18)
[L6914]  COND FALSE  !(choice == 17)
[L6920]  COND FALSE  !(choice == 16)
[L6927]  COND FALSE  !(choice == 15)
[L6934]  COND TRUE   choice == 14
[L6935]              gas := gas - 21000;
[L6936]  COND TRUE   gas >= 0
[L6937]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6938]              assume msgvalue_MSG == 0;
[L6939]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != sender_s1113 && p1 != recipient_s1113) && (p2 != sender_s1113 || p3 != msgsender_MSG)) && sender_s1113 != recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && _balances_ERC20[this][recipient_s1113] + amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND TRUE   __exception
[L2103]              __tmp__Balance := Balance;
[L2104]              __tmp__DType := DType;
[L2105]              __tmp__Alloc := Alloc;
[L2106]              __tmp__balance_ADDR := balance_ADDR;
[L2107]              __tmp__M_Ref_int := M_Ref_int;
[L2108]              __tmp__sum__balances0 := sum__balances0;
[L2109]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2110]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2111]              __tmp__sum__allowed1 := sum__allowed1;
[L2112]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2113]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2114]              __tmp__Length := Length;
[L2115]              __tmp__now := now;
[L2116]              __tmp___owner_Ownable := _owner_Ownable;
[L2117]              __tmp___balances_ERC20 := _balances_ERC20;
[L2118]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2119]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2120]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2121]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2122]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2123]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2124]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2125]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2126]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4567]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6060]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4567]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4568]  COND FALSE  !(revert)
[L4571]  CALL        call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4451]  COND TRUE   __tmp__DType[this] == EXEToken
[L4452]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4452]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4453]  COND FALSE  !(revert)
[L4459]  COND TRUE   __tmp__DType[this] == EXEToken
[L4460]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4460]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4461]  COND FALSE  !(revert)
[L4467]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3126]  COND TRUE   !(b_s82 <= a_s82)
[L3127]              revert := true;
[L4467]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4468]  COND TRUE   revert
[L4571]  RET         call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4572]  COND TRUE   revert
[L2126]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2127]              assume revert || gas < 0;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7048]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND FALSE  !(choice == 21)
[L6896]  COND FALSE  !(choice == 20)
[L6902]  COND FALSE  !(choice == 19)
[L6908]  COND FALSE  !(choice == 18)
[L6914]  COND FALSE  !(choice == 17)
[L6920]  COND FALSE  !(choice == 16)
[L6927]  COND FALSE  !(choice == 15)
[L6934]  COND TRUE   choice == 14
[L6935]              gas := gas - 21000;
[L6936]  COND TRUE   gas >= 0
[L6937]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6938]              assume msgvalue_MSG == 0;
[L6939]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != sender_s1113 && p1 != recipient_s1113) && (p2 != sender_s1113 || p3 != msgsender_MSG)) && sender_s1113 != recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && _balances_ERC20[this][recipient_s1113] + amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND TRUE   __exception
[L2103]              __tmp__Balance := Balance;
[L2104]              __tmp__DType := DType;
[L2105]              __tmp__Alloc := Alloc;
[L2106]              __tmp__balance_ADDR := balance_ADDR;
[L2107]              __tmp__M_Ref_int := M_Ref_int;
[L2108]              __tmp__sum__balances0 := sum__balances0;
[L2109]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2110]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2111]              __tmp__sum__allowed1 := sum__allowed1;
[L2112]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2113]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2114]              __tmp__Length := Length;
[L2115]              __tmp__now := now;
[L2116]              __tmp___owner_Ownable := _owner_Ownable;
[L2117]              __tmp___balances_ERC20 := _balances_ERC20;
[L2118]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2119]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2120]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2121]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2122]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2123]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2124]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2125]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2126]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4567]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6060]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4567]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4568]  COND FALSE  !(revert)
[L4571]  CALL        call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4451]  COND TRUE   __tmp__DType[this] == EXEToken
[L4452]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4452]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4453]  COND FALSE  !(revert)
[L4459]  COND TRUE   __tmp__DType[this] == EXEToken
[L4460]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4460]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4461]  COND FALSE  !(revert)
[L4467]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3126]  COND TRUE   !(b_s82 <= a_s82)
[L3127]              revert := true;
[L4467]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4468]  COND TRUE   revert
[L4571]  RET         call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4572]  COND TRUE   revert
[L2126]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2127]              assume revert || gas < 0;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7048]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:09:33,049 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:09:33,050 INFO  L82        PathProgramCache]: Analyzing trace with hash 571619965, now seen corresponding path program 1 times
[2020-11-25 16:09:33,052 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:09:33,072 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:09:33,281 INFO  L134       CoverageAnalysis]: Checked inductivity of 139 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 137 trivial. 0 not checked.
[2020-11-25 16:09:33,281 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:09:33,281 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-25 16:09:33,282 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:09:33,282 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-25 16:09:33,282 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=34, Invalid=272, Unknown=0, NotChecked=0, Total=306
[2020-11-25 16:09:33,282 INFO  L87              Difference]: Start difference. First operand 5626 states and 6305 transitions. cyclomatic complexity: 683 Second operand 18 states.
[2020-11-25 16:09:36,305 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:09:36,305 INFO  L93              Difference]: Finished difference Result 5942 states and 6820 transitions.
[2020-11-25 16:09:36,305 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 16:09:36,306 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5942 states and 6820 transitions.
[2020-11-25 16:09:36,319 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 28
[2020-11-25 16:09:36,337 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5942 states to 5942 states and 6820 transitions.
[2020-11-25 16:09:36,338 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1469
[2020-11-25 16:09:36,338 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1469
[2020-11-25 16:09:36,338 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5942 states and 6820 transitions.
[2020-11-25 16:09:36,343 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:09:36,344 INFO  L728         BuchiCegarLoop]: Abstraction has 5942 states and 6820 transitions.
[2020-11-25 16:09:36,347 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5942 states and 6820 transitions.
[2020-11-25 16:09:36,387 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5942 to 5862.
[2020-11-25 16:09:36,387 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5862 states.
[2020-11-25 16:09:36,394 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5862 states to 5862 states and 6632 transitions.
[2020-11-25 16:09:36,394 INFO  L751         BuchiCegarLoop]: Abstraction has 5862 states and 6632 transitions.
[2020-11-25 16:09:36,394 INFO  L631         BuchiCegarLoop]: Abstraction has 5862 states and 6632 transitions.
[2020-11-25 16:09:36,394 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 16:09:36,394 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5862 states and 6632 transitions.
[2020-11-25 16:09:36,401 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 16:09:36,401 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:09:36,401 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:09:36,402 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:09:36,402 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_EXEToken0 := false;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7038]              assume null == 0;
[L7039]  CALL        call this := FreshRefGenerator__success();
[L3029]              havoc newRef;
[L3030]              assume Alloc[newRef] == false;
[L3031]              Alloc[newRef] := true;
[L3032]              assume newRef != null;
[L7039]  RET         call this := FreshRefGenerator__success();
[L7040]              assume now >= 0;
[L7041]              assume DType[this] == EXEToken;
[L7042]              assume msgvalue_MSG == 0;
[L7043]              gas := gas - 53000;
[L7044]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1770]              havoc __exception;
[L1771]              revert := false;
[L1772]  COND FALSE  !(__exception)
[L1799]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4315]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4315]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4316]  COND FALSE  !(revert)
[L4319]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3927]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3927]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3902]              assume msgsender_MSG != null;
[L3903]              Balance[this] := 0;
[L3904]              _name_ERC20Detailed[this] := 427332508;
[L3905]              _symbol_ERC20Detailed[this] := 427332508;
[L3906]              _decimals_ERC20Detailed[this] := 0;
[L3908]              _name_ERC20Detailed[this] := name_s778;
[L3909]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3910]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3931]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3932]  COND FALSE  !(revert)
[L4319]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4320]  COND FALSE  !(revert)
[L4323]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4323]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4324]  COND FALSE  !(revert)
[L4327]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4007]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4011]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4015]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3984]              assume msgsender_MSG != null;
[L3985]              Balance[this] := 0;
[L4015]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4016]  COND FALSE  !(revert)
[L4327]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4328]  COND FALSE  !(revert)
[L4331]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4331]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4157]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4158]  COND FALSE  !(revert)
[L4161]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4137]              assume msgsender_MSG != null;
[L4138]              Balance[this] := 0;
[L4139]              stopped_Stoppable[this] := false;
[L4161]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4162]  COND FALSE  !(revert)
[L4335]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4251]              assume msgsender_MSG != null;
[L4252]              Balance[this] := 0;
[L4253]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4254]              sum__lockTimes2[this] := 0;
[L4255]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4256]              sum__lockAmounts3[this] := 0;
[L4258]  COND TRUE   DType[this] == EXEToken
[L4259]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3235]              __ret_0_ := _owner_Ownable[this];
[L4259]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]  COND FALSE  !(revert)
[L4266]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4267]  COND TRUE   DType[this] == EXEToken
[L4268]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3740]              __var_15 := null;
[L3741]  COND FALSE  !(!(account_s654 != null))
[L3745]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3745]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3746]  COND FALSE  !(revert)
[L3749]              _totalSupply_ERC20[this] := __var_16;
[L3750]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3750]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3751]  COND FALSE  !(revert)
[L3754]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3755]              _balances_ERC20[this][account_s654] := __var_17;
[L3756]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3757]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4268]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4269]  COND FALSE  !(revert)
[L4339]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4340]  COND FALSE  !(revert)
[L1799]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1800]              assume !revert && gas >= 0;
[L7044]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7045]              assume !revert && gas >= 0;
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND FALSE  !(choice == 21)
[L6896]  COND FALSE  !(choice == 20)
[L6902]  COND FALSE  !(choice == 19)
[L6908]  COND FALSE  !(choice == 18)
[L6914]  COND FALSE  !(choice == 17)
[L6920]  COND FALSE  !(choice == 16)
[L6927]  COND FALSE  !(choice == 15)
[L6934]  COND TRUE   choice == 14
[L6935]              gas := gas - 21000;
[L6936]  COND TRUE   gas >= 0
[L6937]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6938]              assume msgvalue_MSG == 0;
[L6939]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != sender_s1113 && p1 != recipient_s1113) && (p2 != sender_s1113 || p3 != msgsender_MSG)) && sender_s1113 != recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && _balances_ERC20[this][recipient_s1113] + amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND TRUE   __exception
[L2103]              __tmp__Balance := Balance;
[L2104]              __tmp__DType := DType;
[L2105]              __tmp__Alloc := Alloc;
[L2106]              __tmp__balance_ADDR := balance_ADDR;
[L2107]              __tmp__M_Ref_int := M_Ref_int;
[L2108]              __tmp__sum__balances0 := sum__balances0;
[L2109]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2110]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2111]              __tmp__sum__allowed1 := sum__allowed1;
[L2112]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2113]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2114]              __tmp__Length := Length;
[L2115]              __tmp__now := now;
[L2116]              __tmp___owner_Ownable := _owner_Ownable;
[L2117]              __tmp___balances_ERC20 := _balances_ERC20;
[L2118]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2119]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2120]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2121]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2122]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2123]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2124]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2125]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2126]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4567]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6060]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4567]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4568]  COND FALSE  !(revert)
[L4571]  CALL        call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4451]  COND TRUE   __tmp__DType[this] == EXEToken
[L4452]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4452]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4453]  COND FALSE  !(revert)
[L4459]  COND TRUE   __tmp__DType[this] == EXEToken
[L4460]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4460]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4461]  COND FALSE  !(revert)
[L4467]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3126]  COND FALSE  !(!(b_s82 <= a_s82))
[L3130]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3131]              __ret_0_ := c_s82;
[L4467]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4468]  COND FALSE  !(revert)
[L4471]              __ret_0_ := ((__tmp___lockTimes_EXEToken[this][account_s1055] != 0 && __tmp___lockAmounts_EXEToken[this][account_s1055] != 0) && __tmp___lockTimes_EXEToken[this][account_s1055] > __tmp__now) && (__var_25 <= __tmp___lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4571]  RET         call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4572]  COND FALSE  !(revert)
[L4575]  COND TRUE   !!__var_31
[L4576]              revert := true;
[L2126]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2127]              assume revert || gas < 0;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7048]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND TRUE   choice == 21
[L6891]              gas := gas - 21000;
[L6892]  COND FALSE  !(gas >= 0)
[L7048]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:09:36,406 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:09:36,406 INFO  L82        PathProgramCache]: Analyzing trace with hash -407873405, now seen corresponding path program 1 times
[2020-11-25 16:09:36,407 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:09:36,429 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:09:36,553 INFO  L134       CoverageAnalysis]: Checked inductivity of 139 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 139 trivial. 0 not checked.
[2020-11-25 16:09:36,553 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:09:36,554 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 16:09:36,554 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:09:36,554 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 16:09:36,554 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=132, Unknown=0, NotChecked=0, Total=156
[2020-11-25 16:09:36,554 INFO  L87              Difference]: Start difference. First operand 5862 states and 6632 transitions. cyclomatic complexity: 778 Second operand 13 states.
[2020-11-25 16:09:38,967 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:09:38,967 INFO  L93              Difference]: Finished difference Result 10050 states and 11643 transitions.
[2020-11-25 16:09:38,968 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-25 16:09:38,968 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10050 states and 11643 transitions.
[2020-11-25 16:09:38,990 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 40
[2020-11-25 16:09:39,018 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10050 states to 10050 states and 11643 transitions.
[2020-11-25 16:09:39,019 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2430
[2020-11-25 16:09:39,020 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2430
[2020-11-25 16:09:39,020 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10050 states and 11643 transitions.
[2020-11-25 16:09:39,026 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:09:39,026 INFO  L728         BuchiCegarLoop]: Abstraction has 10050 states and 11643 transitions.
[2020-11-25 16:09:39,031 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10050 states and 11643 transitions.
[2020-11-25 16:09:39,112 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10050 to 8980.
[2020-11-25 16:09:39,112 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8980 states.
[2020-11-25 16:09:39,124 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8980 states to 8980 states and 10449 transitions.
[2020-11-25 16:09:39,124 INFO  L751         BuchiCegarLoop]: Abstraction has 8980 states and 10449 transitions.
[2020-11-25 16:09:39,124 INFO  L631         BuchiCegarLoop]: Abstraction has 8980 states and 10449 transitions.
[2020-11-25 16:09:39,124 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 16:09:39,124 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8980 states and 10449 transitions.
[2020-11-25 16:09:39,133 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 32
[2020-11-25 16:09:39,133 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:09:39,134 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:09:39,135 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:09:39,135 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_EXEToken0 := false;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7038]              assume null == 0;
[L7039]  CALL        call this := FreshRefGenerator__success();
[L3029]              havoc newRef;
[L3030]              assume Alloc[newRef] == false;
[L3031]              Alloc[newRef] := true;
[L3032]              assume newRef != null;
[L7039]  RET         call this := FreshRefGenerator__success();
[L7040]              assume now >= 0;
[L7041]              assume DType[this] == EXEToken;
[L7042]              assume msgvalue_MSG == 0;
[L7043]              gas := gas - 53000;
[L7044]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1770]              havoc __exception;
[L1771]              revert := false;
[L1772]  COND FALSE  !(__exception)
[L1799]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4315]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4315]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4316]  COND FALSE  !(revert)
[L4319]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3927]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3927]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3902]              assume msgsender_MSG != null;
[L3903]              Balance[this] := 0;
[L3904]              _name_ERC20Detailed[this] := 427332508;
[L3905]              _symbol_ERC20Detailed[this] := 427332508;
[L3906]              _decimals_ERC20Detailed[this] := 0;
[L3908]              _name_ERC20Detailed[this] := name_s778;
[L3909]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3910]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3931]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3932]  COND FALSE  !(revert)
[L4319]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4320]  COND FALSE  !(revert)
[L4323]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4323]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4324]  COND FALSE  !(revert)
[L4327]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4007]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4011]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4015]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3984]              assume msgsender_MSG != null;
[L3985]              Balance[this] := 0;
[L4015]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4016]  COND FALSE  !(revert)
[L4327]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4328]  COND FALSE  !(revert)
[L4331]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4331]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4157]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4158]  COND FALSE  !(revert)
[L4161]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4137]              assume msgsender_MSG != null;
[L4138]              Balance[this] := 0;
[L4139]              stopped_Stoppable[this] := false;
[L4161]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4162]  COND FALSE  !(revert)
[L4335]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4251]              assume msgsender_MSG != null;
[L4252]              Balance[this] := 0;
[L4253]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4254]              sum__lockTimes2[this] := 0;
[L4255]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4256]              sum__lockAmounts3[this] := 0;
[L4258]  COND TRUE   DType[this] == EXEToken
[L4259]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3235]              __ret_0_ := _owner_Ownable[this];
[L4259]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]  COND FALSE  !(revert)
[L4266]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4267]  COND TRUE   DType[this] == EXEToken
[L4268]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3740]              __var_15 := null;
[L3741]  COND FALSE  !(!(account_s654 != null))
[L3745]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3745]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3746]  COND FALSE  !(revert)
[L3749]              _totalSupply_ERC20[this] := __var_16;
[L3750]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3750]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3751]  COND FALSE  !(revert)
[L3754]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3755]              _balances_ERC20[this][account_s654] := __var_17;
[L3756]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3757]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4268]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4269]  COND FALSE  !(revert)
[L4339]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4340]  COND FALSE  !(revert)
[L1799]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1800]              assume !revert && gas >= 0;
[L7044]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7045]              assume !revert && gas >= 0;
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND FALSE  !(choice == 21)
[L6896]  COND FALSE  !(choice == 20)
[L6902]  COND FALSE  !(choice == 19)
[L6908]  COND FALSE  !(choice == 18)
[L6914]  COND FALSE  !(choice == 17)
[L6920]  COND FALSE  !(choice == 16)
[L6927]  COND FALSE  !(choice == 15)
[L6934]  COND TRUE   choice == 14
[L6935]              gas := gas - 21000;
[L6936]  COND TRUE   gas >= 0
[L6937]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6938]              assume msgvalue_MSG == 0;
[L6939]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != sender_s1113 && p1 != recipient_s1113) && (p2 != sender_s1113 || p3 != msgsender_MSG)) && sender_s1113 != recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && _balances_ERC20[this][recipient_s1113] + amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND TRUE   __exception
[L2103]              __tmp__Balance := Balance;
[L2104]              __tmp__DType := DType;
[L2105]              __tmp__Alloc := Alloc;
[L2106]              __tmp__balance_ADDR := balance_ADDR;
[L2107]              __tmp__M_Ref_int := M_Ref_int;
[L2108]              __tmp__sum__balances0 := sum__balances0;
[L2109]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2110]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2111]              __tmp__sum__allowed1 := sum__allowed1;
[L2112]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2113]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2114]              __tmp__Length := Length;
[L2115]              __tmp__now := now;
[L2116]              __tmp___owner_Ownable := _owner_Ownable;
[L2117]              __tmp___balances_ERC20 := _balances_ERC20;
[L2118]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2119]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2120]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2121]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2122]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2123]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2124]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2125]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2126]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4567]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6060]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4567]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4568]  COND FALSE  !(revert)
[L4571]  CALL        call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4451]  COND TRUE   __tmp__DType[this] == EXEToken
[L4452]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4452]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4453]  COND FALSE  !(revert)
[L4459]  COND TRUE   __tmp__DType[this] == EXEToken
[L4460]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4460]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4461]  COND FALSE  !(revert)
[L4467]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3126]  COND FALSE  !(!(b_s82 <= a_s82))
[L3130]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3131]              __ret_0_ := c_s82;
[L4467]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4468]  COND FALSE  !(revert)
[L4471]              __ret_0_ := ((__tmp___lockTimes_EXEToken[this][account_s1055] != 0 && __tmp___lockAmounts_EXEToken[this][account_s1055] != 0) && __tmp___lockTimes_EXEToken[this][account_s1055] > __tmp__now) && (__var_25 <= __tmp___lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4571]  RET         call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4572]  COND FALSE  !(revert)
[L4575]  COND FALSE  !(!!__var_31)
[L4579]  COND TRUE   __tmp__DType[this] == EXEToken
[L4580]  CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3546]  COND TRUE   !(value_s512 <= __tmp___balances_ERC20[this][from_s512])
[L3547]              revert := true;
[L4580]  RET         call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4581]  COND TRUE   revert
[L2126]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2127]              assume revert || gas < 0;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7048]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND FALSE  !(choice == 21)
[L6896]  COND FALSE  !(choice == 20)
[L6902]  COND FALSE  !(choice == 19)
[L6908]  COND FALSE  !(choice == 18)
[L6914]  COND FALSE  !(choice == 17)
[L6920]  COND FALSE  !(choice == 16)
[L6927]  COND FALSE  !(choice == 15)
[L6934]  COND TRUE   choice == 14
[L6935]              gas := gas - 21000;
[L6936]  COND TRUE   gas >= 0
[L6937]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6938]              assume msgvalue_MSG == 0;
[L6939]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != sender_s1113 && p1 != recipient_s1113) && (p2 != sender_s1113 || p3 != msgsender_MSG)) && sender_s1113 != recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && _balances_ERC20[this][recipient_s1113] + amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND TRUE   __exception
[L2103]              __tmp__Balance := Balance;
[L2104]              __tmp__DType := DType;
[L2105]              __tmp__Alloc := Alloc;
[L2106]              __tmp__balance_ADDR := balance_ADDR;
[L2107]              __tmp__M_Ref_int := M_Ref_int;
[L2108]              __tmp__sum__balances0 := sum__balances0;
[L2109]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2110]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2111]              __tmp__sum__allowed1 := sum__allowed1;
[L2112]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2113]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2114]              __tmp__Length := Length;
[L2115]              __tmp__now := now;
[L2116]              __tmp___owner_Ownable := _owner_Ownable;
[L2117]              __tmp___balances_ERC20 := _balances_ERC20;
[L2118]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2119]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2120]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2121]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2122]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2123]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2124]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2125]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2126]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4567]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6060]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4567]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4568]  COND FALSE  !(revert)
[L4571]  CALL        call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4451]  COND TRUE   __tmp__DType[this] == EXEToken
[L4452]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4452]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4453]  COND FALSE  !(revert)
[L4459]  COND TRUE   __tmp__DType[this] == EXEToken
[L4460]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4460]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4461]  COND FALSE  !(revert)
[L4467]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3126]  COND FALSE  !(!(b_s82 <= a_s82))
[L3130]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3131]              __ret_0_ := c_s82;
[L4467]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4468]  COND FALSE  !(revert)
[L4471]              __ret_0_ := ((__tmp___lockTimes_EXEToken[this][account_s1055] != 0 && __tmp___lockAmounts_EXEToken[this][account_s1055] != 0) && __tmp___lockTimes_EXEToken[this][account_s1055] > __tmp__now) && (__var_25 <= __tmp___lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4571]  RET         call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4572]  COND FALSE  !(revert)
[L4575]  COND FALSE  !(!!__var_31)
[L4579]  COND TRUE   __tmp__DType[this] == EXEToken
[L4580]  CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3546]  COND TRUE   !(value_s512 <= __tmp___balances_ERC20[this][from_s512])
[L3547]              revert := true;
[L4580]  RET         call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4581]  COND TRUE   revert
[L2126]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2127]              assume revert || gas < 0;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7048]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:09:39,146 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:09:39,146 INFO  L82        PathProgramCache]: Analyzing trace with hash -458552807, now seen corresponding path program 1 times
[2020-11-25 16:09:39,147 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:09:39,159 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:09:39,332 INFO  L134       CoverageAnalysis]: Checked inductivity of 139 backedges. 10 proven. 0 refuted. 0 times theorem prover too weak. 129 trivial. 0 not checked.
[2020-11-25 16:09:39,333 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:09:39,333 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [24] imperfect sequences [] total 24
[2020-11-25 16:09:39,333 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:09:39,333 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-25 16:09:39,333 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=51, Invalid=549, Unknown=0, NotChecked=0, Total=600
[2020-11-25 16:09:39,334 INFO  L87              Difference]: Start difference. First operand 8980 states and 10449 transitions. cyclomatic complexity: 1479 Second operand 25 states.
[2020-11-25 16:09:43,324 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:09:43,324 INFO  L93              Difference]: Finished difference Result 9244 states and 11231 transitions.
[2020-11-25 16:09:43,324 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 16:09:43,324 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9244 states and 11231 transitions.
[2020-11-25 16:09:43,356 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 68
[2020-11-25 16:09:43,392 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9244 states to 9244 states and 11231 transitions.
[2020-11-25 16:09:43,392 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2301
[2020-11-25 16:09:43,393 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2301
[2020-11-25 16:09:43,393 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9244 states and 11231 transitions.
[2020-11-25 16:09:43,399 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:09:43,400 INFO  L728         BuchiCegarLoop]: Abstraction has 9244 states and 11231 transitions.
[2020-11-25 16:09:43,404 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9244 states and 11231 transitions.
[2020-11-25 16:09:43,491 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9244 to 9106.
[2020-11-25 16:09:43,492 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9106 states.
[2020-11-25 16:09:43,505 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9106 states to 9106 states and 10794 transitions.
[2020-11-25 16:09:43,505 INFO  L751         BuchiCegarLoop]: Abstraction has 9106 states and 10794 transitions.
[2020-11-25 16:09:43,505 INFO  L631         BuchiCegarLoop]: Abstraction has 9106 states and 10794 transitions.
[2020-11-25 16:09:43,505 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 16:09:43,505 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9106 states and 10794 transitions.
[2020-11-25 16:09:43,515 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 46
[2020-11-25 16:09:43,515 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:09:43,515 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:09:43,516 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:09:43,516 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_EXEToken0 := false;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7038]              assume null == 0;
[L7039]  CALL        call this := FreshRefGenerator__success();
[L3029]              havoc newRef;
[L3030]              assume Alloc[newRef] == false;
[L3031]              Alloc[newRef] := true;
[L3032]              assume newRef != null;
[L7039]  RET         call this := FreshRefGenerator__success();
[L7040]              assume now >= 0;
[L7041]              assume DType[this] == EXEToken;
[L7042]              assume msgvalue_MSG == 0;
[L7043]              gas := gas - 53000;
[L7044]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1770]              havoc __exception;
[L1771]              revert := false;
[L1772]  COND FALSE  !(__exception)
[L1799]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4315]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4315]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4316]  COND FALSE  !(revert)
[L4319]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3927]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3927]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3902]              assume msgsender_MSG != null;
[L3903]              Balance[this] := 0;
[L3904]              _name_ERC20Detailed[this] := 427332508;
[L3905]              _symbol_ERC20Detailed[this] := 427332508;
[L3906]              _decimals_ERC20Detailed[this] := 0;
[L3908]              _name_ERC20Detailed[this] := name_s778;
[L3909]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3910]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3931]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3932]  COND FALSE  !(revert)
[L4319]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4320]  COND FALSE  !(revert)
[L4323]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4323]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4324]  COND FALSE  !(revert)
[L4327]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4007]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4011]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4015]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3984]              assume msgsender_MSG != null;
[L3985]              Balance[this] := 0;
[L4015]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4016]  COND FALSE  !(revert)
[L4327]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4328]  COND FALSE  !(revert)
[L4331]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4331]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4157]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4158]  COND FALSE  !(revert)
[L4161]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4137]              assume msgsender_MSG != null;
[L4138]              Balance[this] := 0;
[L4139]              stopped_Stoppable[this] := false;
[L4161]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4162]  COND FALSE  !(revert)
[L4335]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4251]              assume msgsender_MSG != null;
[L4252]              Balance[this] := 0;
[L4253]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4254]              sum__lockTimes2[this] := 0;
[L4255]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4256]              sum__lockAmounts3[this] := 0;
[L4258]  COND TRUE   DType[this] == EXEToken
[L4259]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3235]              __ret_0_ := _owner_Ownable[this];
[L4259]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]  COND FALSE  !(revert)
[L4266]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4267]  COND TRUE   DType[this] == EXEToken
[L4268]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3740]              __var_15 := null;
[L3741]  COND FALSE  !(!(account_s654 != null))
[L3745]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3745]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3746]  COND FALSE  !(revert)
[L3749]              _totalSupply_ERC20[this] := __var_16;
[L3750]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3750]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3751]  COND FALSE  !(revert)
[L3754]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3755]              _balances_ERC20[this][account_s654] := __var_17;
[L3756]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3757]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4268]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4269]  COND FALSE  !(revert)
[L4339]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4340]  COND FALSE  !(revert)
[L1799]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1800]              assume !revert && gas >= 0;
[L7044]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7045]              assume !revert && gas >= 0;
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND FALSE  !(choice == 21)
[L6896]  COND FALSE  !(choice == 20)
[L6902]  COND FALSE  !(choice == 19)
[L6908]  COND FALSE  !(choice == 18)
[L6914]  COND FALSE  !(choice == 17)
[L6920]  COND FALSE  !(choice == 16)
[L6927]  COND FALSE  !(choice == 15)
[L6934]  COND TRUE   choice == 14
[L6935]              gas := gas - 21000;
[L6936]  COND TRUE   gas >= 0
[L6937]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6938]              assume msgvalue_MSG == 0;
[L6939]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != sender_s1113 && p1 != recipient_s1113) && (p2 != sender_s1113 || p3 != msgsender_MSG)) && sender_s1113 != recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && _balances_ERC20[this][recipient_s1113] + amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND TRUE   __exception
[L2103]              __tmp__Balance := Balance;
[L2104]              __tmp__DType := DType;
[L2105]              __tmp__Alloc := Alloc;
[L2106]              __tmp__balance_ADDR := balance_ADDR;
[L2107]              __tmp__M_Ref_int := M_Ref_int;
[L2108]              __tmp__sum__balances0 := sum__balances0;
[L2109]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2110]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2111]              __tmp__sum__allowed1 := sum__allowed1;
[L2112]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2113]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2114]              __tmp__Length := Length;
[L2115]              __tmp__now := now;
[L2116]              __tmp___owner_Ownable := _owner_Ownable;
[L2117]              __tmp___balances_ERC20 := _balances_ERC20;
[L2118]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2119]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2120]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2121]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2122]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2123]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2124]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2125]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2126]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4567]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6060]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4567]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4568]  COND FALSE  !(revert)
[L4571]  CALL        call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4451]  COND TRUE   __tmp__DType[this] == EXEToken
[L4452]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4452]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4453]  COND FALSE  !(revert)
[L4459]  COND TRUE   __tmp__DType[this] == EXEToken
[L4460]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4460]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4461]  COND FALSE  !(revert)
[L4467]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3126]  COND FALSE  !(!(b_s82 <= a_s82))
[L3130]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3131]              __ret_0_ := c_s82;
[L4467]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4468]  COND FALSE  !(revert)
[L4471]              __ret_0_ := ((__tmp___lockTimes_EXEToken[this][account_s1055] != 0 && __tmp___lockAmounts_EXEToken[this][account_s1055] != 0) && __tmp___lockTimes_EXEToken[this][account_s1055] > __tmp__now) && (__var_25 <= __tmp___lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4571]  RET         call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4572]  COND FALSE  !(revert)
[L4575]  COND FALSE  !(!!__var_31)
[L4579]  COND TRUE   __tmp__DType[this] == EXEToken
[L4580]  CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3546]  COND FALSE  !(!(value_s512 <= __tmp___balances_ERC20[this][from_s512]))
[L3550]  COND TRUE   !(value_s512 <= __tmp___allowed_ERC20[this][from_s512][msgsender_MSG])
[L3551]              revert := true;
[L4580]  RET         call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4581]  COND TRUE   revert
[L2126]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2127]              assume revert || gas < 0;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7048]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND FALSE  !(choice == 21)
[L6896]  COND FALSE  !(choice == 20)
[L6902]  COND FALSE  !(choice == 19)
[L6908]  COND FALSE  !(choice == 18)
[L6914]  COND FALSE  !(choice == 17)
[L6920]  COND FALSE  !(choice == 16)
[L6927]  COND FALSE  !(choice == 15)
[L6934]  COND TRUE   choice == 14
[L6935]              gas := gas - 21000;
[L6936]  COND TRUE   gas >= 0
[L6937]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6938]              assume msgvalue_MSG == 0;
[L6939]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != sender_s1113 && p1 != recipient_s1113) && (p2 != sender_s1113 || p3 != msgsender_MSG)) && sender_s1113 != recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && _balances_ERC20[this][recipient_s1113] + amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND TRUE   __exception
[L2103]              __tmp__Balance := Balance;
[L2104]              __tmp__DType := DType;
[L2105]              __tmp__Alloc := Alloc;
[L2106]              __tmp__balance_ADDR := balance_ADDR;
[L2107]              __tmp__M_Ref_int := M_Ref_int;
[L2108]              __tmp__sum__balances0 := sum__balances0;
[L2109]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2110]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2111]              __tmp__sum__allowed1 := sum__allowed1;
[L2112]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2113]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2114]              __tmp__Length := Length;
[L2115]              __tmp__now := now;
[L2116]              __tmp___owner_Ownable := _owner_Ownable;
[L2117]              __tmp___balances_ERC20 := _balances_ERC20;
[L2118]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2119]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2120]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2121]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2122]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2123]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2124]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2125]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2126]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4567]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6060]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4567]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4568]  COND FALSE  !(revert)
[L4571]  CALL        call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4451]  COND TRUE   __tmp__DType[this] == EXEToken
[L4452]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4452]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4453]  COND FALSE  !(revert)
[L4459]  COND TRUE   __tmp__DType[this] == EXEToken
[L4460]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4460]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4461]  COND FALSE  !(revert)
[L4467]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3126]  COND FALSE  !(!(b_s82 <= a_s82))
[L3130]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3131]              __ret_0_ := c_s82;
[L4467]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4468]  COND FALSE  !(revert)
[L4471]              __ret_0_ := ((__tmp___lockTimes_EXEToken[this][account_s1055] != 0 && __tmp___lockAmounts_EXEToken[this][account_s1055] != 0) && __tmp___lockTimes_EXEToken[this][account_s1055] > __tmp__now) && (__var_25 <= __tmp___lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4571]  RET         call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4572]  COND FALSE  !(revert)
[L4575]  COND FALSE  !(!!__var_31)
[L4579]  COND TRUE   __tmp__DType[this] == EXEToken
[L4580]  CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3546]  COND FALSE  !(!(value_s512 <= __tmp___balances_ERC20[this][from_s512]))
[L3550]  COND TRUE   !(value_s512 <= __tmp___allowed_ERC20[this][from_s512][msgsender_MSG])
[L3551]              revert := true;
[L4580]  RET         call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4581]  COND TRUE   revert
[L2126]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2127]              assume revert || gas < 0;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7048]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:09:43,528 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:09:43,528 INFO  L82        PathProgramCache]: Analyzing trace with hash -583923467, now seen corresponding path program 1 times
[2020-11-25 16:09:43,528 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:09:43,540 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:09:43,669 INFO  L134       CoverageAnalysis]: Checked inductivity of 139 backedges. 8 proven. 0 refuted. 0 times theorem prover too weak. 131 trivial. 0 not checked.
[2020-11-25 16:09:43,669 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:09:43,669 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-25 16:09:43,669 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:09:43,670 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 16:09:43,670 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=210, Unknown=0, NotChecked=0, Total=240
[2020-11-25 16:09:43,670 INFO  L87              Difference]: Start difference. First operand 9106 states and 10794 transitions. cyclomatic complexity: 1703 Second operand 16 states.
[2020-11-25 16:09:46,044 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:09:46,044 INFO  L93              Difference]: Finished difference Result 9254 states and 11444 transitions.
[2020-11-25 16:09:46,044 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 16:09:46,044 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9254 states and 11444 transitions.
[2020-11-25 16:09:46,069 INFO  L131   ngComponentsAnalysis]: Automaton has 13 accepting balls. 76
[2020-11-25 16:09:46,101 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9254 states to 9254 states and 11444 transitions.
[2020-11-25 16:09:46,101 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2324
[2020-11-25 16:09:46,102 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2324
[2020-11-25 16:09:46,102 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9254 states and 11444 transitions.
[2020-11-25 16:09:46,109 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:09:46,109 INFO  L728         BuchiCegarLoop]: Abstraction has 9254 states and 11444 transitions.
[2020-11-25 16:09:46,113 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9254 states and 11444 transitions.
[2020-11-25 16:09:46,176 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9254 to 9164.
[2020-11-25 16:09:46,176 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9164 states.
[2020-11-25 16:09:46,192 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9164 states to 9164 states and 11098 transitions.
[2020-11-25 16:09:46,192 INFO  L751         BuchiCegarLoop]: Abstraction has 9164 states and 11098 transitions.
[2020-11-25 16:09:46,192 INFO  L631         BuchiCegarLoop]: Abstraction has 9164 states and 11098 transitions.
[2020-11-25 16:09:46,192 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 16:09:46,192 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9164 states and 11098 transitions.
[2020-11-25 16:09:46,204 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 62
[2020-11-25 16:09:46,204 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:09:46,204 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:09:46,205 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:09:46,205 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_EXEToken0 := false;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7038]              assume null == 0;
[L7039]  CALL        call this := FreshRefGenerator__success();
[L3029]              havoc newRef;
[L3030]              assume Alloc[newRef] == false;
[L3031]              Alloc[newRef] := true;
[L3032]              assume newRef != null;
[L7039]  RET         call this := FreshRefGenerator__success();
[L7040]              assume now >= 0;
[L7041]              assume DType[this] == EXEToken;
[L7042]              assume msgvalue_MSG == 0;
[L7043]              gas := gas - 53000;
[L7044]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1770]              havoc __exception;
[L1771]              revert := false;
[L1772]  COND FALSE  !(__exception)
[L1799]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4315]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4315]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4316]  COND FALSE  !(revert)
[L4319]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3927]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3927]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3902]              assume msgsender_MSG != null;
[L3903]              Balance[this] := 0;
[L3904]              _name_ERC20Detailed[this] := 427332508;
[L3905]              _symbol_ERC20Detailed[this] := 427332508;
[L3906]              _decimals_ERC20Detailed[this] := 0;
[L3908]              _name_ERC20Detailed[this] := name_s778;
[L3909]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3910]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3931]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3932]  COND FALSE  !(revert)
[L4319]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4320]  COND FALSE  !(revert)
[L4323]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4323]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4324]  COND FALSE  !(revert)
[L4327]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4007]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4011]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4015]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3984]              assume msgsender_MSG != null;
[L3985]              Balance[this] := 0;
[L4015]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4016]  COND FALSE  !(revert)
[L4327]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4328]  COND FALSE  !(revert)
[L4331]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4331]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4157]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4158]  COND FALSE  !(revert)
[L4161]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4137]              assume msgsender_MSG != null;
[L4138]              Balance[this] := 0;
[L4139]              stopped_Stoppable[this] := false;
[L4161]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4162]  COND FALSE  !(revert)
[L4335]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4251]              assume msgsender_MSG != null;
[L4252]              Balance[this] := 0;
[L4253]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4254]              sum__lockTimes2[this] := 0;
[L4255]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4256]              sum__lockAmounts3[this] := 0;
[L4258]  COND TRUE   DType[this] == EXEToken
[L4259]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3235]              __ret_0_ := _owner_Ownable[this];
[L4259]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]  COND FALSE  !(revert)
[L4266]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4267]  COND TRUE   DType[this] == EXEToken
[L4268]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3740]              __var_15 := null;
[L3741]  COND FALSE  !(!(account_s654 != null))
[L3745]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3745]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3746]  COND FALSE  !(revert)
[L3749]              _totalSupply_ERC20[this] := __var_16;
[L3750]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3750]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3751]  COND FALSE  !(revert)
[L3754]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3755]              _balances_ERC20[this][account_s654] := __var_17;
[L3756]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3757]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4268]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4269]  COND FALSE  !(revert)
[L4339]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4340]  COND FALSE  !(revert)
[L1799]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1800]              assume !revert && gas >= 0;
[L7044]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7045]              assume !revert && gas >= 0;
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND FALSE  !(choice == 21)
[L6896]  COND FALSE  !(choice == 20)
[L6902]  COND FALSE  !(choice == 19)
[L6908]  COND FALSE  !(choice == 18)
[L6914]  COND FALSE  !(choice == 17)
[L6920]  COND FALSE  !(choice == 16)
[L6927]  COND FALSE  !(choice == 15)
[L6934]  COND TRUE   choice == 14
[L6935]              gas := gas - 21000;
[L6936]  COND TRUE   gas >= 0
[L6937]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6938]              assume msgvalue_MSG == 0;
[L6939]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != sender_s1113 && p1 != recipient_s1113) && (p2 != sender_s1113 || p3 != msgsender_MSG)) && sender_s1113 != recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && _balances_ERC20[this][recipient_s1113] + amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND TRUE   __exception
[L2103]              __tmp__Balance := Balance;
[L2104]              __tmp__DType := DType;
[L2105]              __tmp__Alloc := Alloc;
[L2106]              __tmp__balance_ADDR := balance_ADDR;
[L2107]              __tmp__M_Ref_int := M_Ref_int;
[L2108]              __tmp__sum__balances0 := sum__balances0;
[L2109]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2110]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2111]              __tmp__sum__allowed1 := sum__allowed1;
[L2112]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2113]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2114]              __tmp__Length := Length;
[L2115]              __tmp__now := now;
[L2116]              __tmp___owner_Ownable := _owner_Ownable;
[L2117]              __tmp___balances_ERC20 := _balances_ERC20;
[L2118]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2119]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2120]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2121]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2122]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2123]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2124]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2125]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2126]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4567]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6060]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4567]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4568]  COND FALSE  !(revert)
[L4571]  CALL        call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4451]  COND TRUE   __tmp__DType[this] == EXEToken
[L4452]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4452]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4453]  COND FALSE  !(revert)
[L4459]  COND TRUE   __tmp__DType[this] == EXEToken
[L4460]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4460]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4461]  COND FALSE  !(revert)
[L4467]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3126]  COND FALSE  !(!(b_s82 <= a_s82))
[L3130]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3131]              __ret_0_ := c_s82;
[L4467]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4468]  COND FALSE  !(revert)
[L4471]              __ret_0_ := ((__tmp___lockTimes_EXEToken[this][account_s1055] != 0 && __tmp___lockAmounts_EXEToken[this][account_s1055] != 0) && __tmp___lockTimes_EXEToken[this][account_s1055] > __tmp__now) && (__var_25 <= __tmp___lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4571]  RET         call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4572]  COND FALSE  !(revert)
[L4575]  COND FALSE  !(!!__var_31)
[L4579]  COND TRUE   __tmp__DType[this] == EXEToken
[L4580]  CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3546]  COND FALSE  !(!(value_s512 <= __tmp___balances_ERC20[this][from_s512]))
[L3550]  COND FALSE  !(!(value_s512 <= __tmp___allowed_ERC20[this][from_s512][msgsender_MSG]))
[L3554]              __var_7 := null;
[L3555]  COND TRUE   !(to_s512 != null)
[L3556]              revert := true;
[L4580]  RET         call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4581]  COND TRUE   revert
[L2126]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2127]              assume revert || gas < 0;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7048]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND TRUE   choice == 21
[L6891]              gas := gas - 21000;
[L6892]  COND FALSE  !(gas >= 0)
[L7048]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:09:46,208 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:09:46,209 INFO  L82        PathProgramCache]: Analyzing trace with hash -1408436421, now seen corresponding path program 1 times
[2020-11-25 16:09:46,209 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:09:46,230 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:09:46,252 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:09:46,338 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:09:46,338 INFO  L82        PathProgramCache]: Analyzing trace with hash -545921516, now seen corresponding path program 1 times
[2020-11-25 16:09:46,338 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:09:46,341 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:09:46,346 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:09:46,346 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:09:46,346 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:09:46,346 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 16:09:46,346 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:09:46,346 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:09:46,347 INFO  L87              Difference]: Start difference. First operand 9164 states and 11098 transitions. cyclomatic complexity: 1953 Second operand 4 states.
[2020-11-25 16:09:46,800 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:09:46,800 INFO  L93              Difference]: Finished difference Result 9810 states and 12442 transitions.
[2020-11-25 16:09:46,800 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:09:46,800 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9810 states and 12442 transitions.
[2020-11-25 16:09:46,877 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 124
[2020-11-25 16:09:46,944 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9810 states to 9810 states and 12442 transitions.
[2020-11-25 16:09:46,945 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2360
[2020-11-25 16:09:46,946 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2360
[2020-11-25 16:09:46,946 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9810 states and 12442 transitions.
[2020-11-25 16:09:46,960 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:09:46,961 INFO  L728         BuchiCegarLoop]: Abstraction has 9810 states and 12442 transitions.
[2020-11-25 16:09:46,966 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9810 states and 12442 transitions.
[2020-11-25 16:09:47,136 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9810 to 9189.
[2020-11-25 16:09:47,136 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9189 states.
[2020-11-25 16:09:47,158 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9189 states to 9189 states and 10954 transitions.
[2020-11-25 16:09:47,158 INFO  L751         BuchiCegarLoop]: Abstraction has 9189 states and 10954 transitions.
[2020-11-25 16:09:47,158 INFO  L631         BuchiCegarLoop]: Abstraction has 9189 states and 10954 transitions.
[2020-11-25 16:09:47,158 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 16:09:47,158 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9189 states and 10954 transitions.
[2020-11-25 16:09:47,174 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 62
[2020-11-25 16:09:47,174 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:09:47,174 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:09:47,176 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:09:47,176 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_EXEToken0 := false;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7038]              assume null == 0;
[L7039]  CALL        call this := FreshRefGenerator__success();
[L3029]              havoc newRef;
[L3030]              assume Alloc[newRef] == false;
[L3031]              Alloc[newRef] := true;
[L3032]              assume newRef != null;
[L7039]  RET         call this := FreshRefGenerator__success();
[L7040]              assume now >= 0;
[L7041]              assume DType[this] == EXEToken;
[L7042]              assume msgvalue_MSG == 0;
[L7043]              gas := gas - 53000;
[L7044]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1770]              havoc __exception;
[L1771]              revert := false;
[L1772]  COND FALSE  !(__exception)
[L1799]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4315]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4315]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4316]  COND FALSE  !(revert)
[L4319]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3927]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3927]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3902]              assume msgsender_MSG != null;
[L3903]              Balance[this] := 0;
[L3904]              _name_ERC20Detailed[this] := 427332508;
[L3905]              _symbol_ERC20Detailed[this] := 427332508;
[L3906]              _decimals_ERC20Detailed[this] := 0;
[L3908]              _name_ERC20Detailed[this] := name_s778;
[L3909]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3910]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3931]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3932]  COND FALSE  !(revert)
[L4319]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4320]  COND FALSE  !(revert)
[L4323]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4323]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4324]  COND FALSE  !(revert)
[L4327]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4007]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4011]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4015]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3984]              assume msgsender_MSG != null;
[L3985]              Balance[this] := 0;
[L4015]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4016]  COND FALSE  !(revert)
[L4327]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4328]  COND FALSE  !(revert)
[L4331]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4331]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4157]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4158]  COND FALSE  !(revert)
[L4161]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4137]              assume msgsender_MSG != null;
[L4138]              Balance[this] := 0;
[L4139]              stopped_Stoppable[this] := false;
[L4161]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4162]  COND FALSE  !(revert)
[L4335]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4251]              assume msgsender_MSG != null;
[L4252]              Balance[this] := 0;
[L4253]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4254]              sum__lockTimes2[this] := 0;
[L4255]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4256]              sum__lockAmounts3[this] := 0;
[L4258]  COND TRUE   DType[this] == EXEToken
[L4259]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3235]              __ret_0_ := _owner_Ownable[this];
[L4259]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]  COND FALSE  !(revert)
[L4266]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4267]  COND TRUE   DType[this] == EXEToken
[L4268]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3740]              __var_15 := null;
[L3741]  COND FALSE  !(!(account_s654 != null))
[L3745]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3745]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3746]  COND FALSE  !(revert)
[L3749]              _totalSupply_ERC20[this] := __var_16;
[L3750]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3750]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3751]  COND FALSE  !(revert)
[L3754]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3755]              _balances_ERC20[this][account_s654] := __var_17;
[L3756]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3757]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4268]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4269]  COND FALSE  !(revert)
[L4339]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4340]  COND FALSE  !(revert)
[L1799]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1800]              assume !revert && gas >= 0;
[L7044]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7045]              assume !revert && gas >= 0;
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND FALSE  !(choice == 21)
[L6896]  COND FALSE  !(choice == 20)
[L6902]  COND FALSE  !(choice == 19)
[L6908]  COND FALSE  !(choice == 18)
[L6914]  COND FALSE  !(choice == 17)
[L6920]  COND FALSE  !(choice == 16)
[L6927]  COND FALSE  !(choice == 15)
[L6934]  COND TRUE   choice == 14
[L6935]              gas := gas - 21000;
[L6936]  COND TRUE   gas >= 0
[L6937]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6938]              assume msgvalue_MSG == 0;
[L6939]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != sender_s1113 && p1 != recipient_s1113) && (p2 != sender_s1113 || p3 != msgsender_MSG)) && sender_s1113 != recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && _balances_ERC20[this][recipient_s1113] + amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND TRUE   __exception
[L2103]              __tmp__Balance := Balance;
[L2104]              __tmp__DType := DType;
[L2105]              __tmp__Alloc := Alloc;
[L2106]              __tmp__balance_ADDR := balance_ADDR;
[L2107]              __tmp__M_Ref_int := M_Ref_int;
[L2108]              __tmp__sum__balances0 := sum__balances0;
[L2109]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2110]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2111]              __tmp__sum__allowed1 := sum__allowed1;
[L2112]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2113]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2114]              __tmp__Length := Length;
[L2115]              __tmp__now := now;
[L2116]              __tmp___owner_Ownable := _owner_Ownable;
[L2117]              __tmp___balances_ERC20 := _balances_ERC20;
[L2118]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2119]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2120]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2121]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2122]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2123]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2124]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2125]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2126]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4567]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6060]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4567]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4568]  COND FALSE  !(revert)
[L4571]  CALL        call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4451]  COND TRUE   __tmp__DType[this] == EXEToken
[L4452]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4452]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4453]  COND FALSE  !(revert)
[L4459]  COND TRUE   __tmp__DType[this] == EXEToken
[L4460]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4460]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4461]  COND FALSE  !(revert)
[L4467]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3126]  COND FALSE  !(!(b_s82 <= a_s82))
[L3130]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3131]              __ret_0_ := c_s82;
[L4467]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4468]  COND FALSE  !(revert)
[L4471]              __ret_0_ := ((__tmp___lockTimes_EXEToken[this][account_s1055] != 0 && __tmp___lockAmounts_EXEToken[this][account_s1055] != 0) && __tmp___lockTimes_EXEToken[this][account_s1055] > __tmp__now) && (__var_25 <= __tmp___lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4571]  RET         call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4572]  COND FALSE  !(revert)
[L4575]  COND FALSE  !(!!__var_31)
[L4579]  COND TRUE   __tmp__DType[this] == EXEToken
[L4580]  CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3546]  COND FALSE  !(!(value_s512 <= __tmp___balances_ERC20[this][from_s512]))
[L3550]  COND FALSE  !(!(value_s512 <= __tmp___allowed_ERC20[this][from_s512][msgsender_MSG]))
[L3554]              __var_7 := null;
[L3555]  COND TRUE   !(to_s512 != null)
[L3556]              revert := true;
[L4580]  RET         call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4581]  COND TRUE   revert
[L2126]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2127]              assume revert || gas < 0;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7048]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND TRUE   choice == 21
[L6891]              gas := gas - 21000;
[L6892]  COND TRUE   gas >= 0
[L6893]              assume msgvalue_MSG == 0;
[L6894]  CALL        call __ret_0_owner := owner_Ownable(this, msgsender_MSG, msgvalue_MSG);
[L218]               havoc __exception;
[L219]               revert := false;
[L220]   COND FALSE  !(__exception)
[L247]   CALL        call __ret_0_ := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3235]              __ret_0_ := _owner_Ownable[this];
[L247]   RET         call __ret_0_ := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L248]               assume !revert && gas >= 0;
[L6894]  RET         call __ret_0_owner := owner_Ownable(this, msgsender_MSG, msgvalue_MSG);
[L7048]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:09:47,196 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:09:47,196 INFO  L82        PathProgramCache]: Analyzing trace with hash -1408436421, now seen corresponding path program 2 times
[2020-11-25 16:09:47,197 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:09:47,220 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:09:47,246 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:09:47,308 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:09:47,308 INFO  L82        PathProgramCache]: Analyzing trace with hash -1610059709, now seen corresponding path program 1 times
[2020-11-25 16:09:47,309 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:09:47,313 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:09:47,317 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:09:47,326 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:09:47,326 INFO  L82        PathProgramCache]: Analyzing trace with hash -1532386563, now seen corresponding path program 1 times
[2020-11-25 16:09:47,327 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:09:47,353 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:09:47,383 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 37 to 73
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 883 to 1759
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2473 to 4943
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 16:09:47,820 WARN  L188               SmtUtils]: Spent 146.00 ms on a formula simplification that was a NOOP. DAG size: 310
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.003s / 0.006s total
Resizing node table from 7933 to 15859
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3137 to 6271
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-25 16:09:47,973 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 16:09:48,378 WARN  L188               SmtUtils]: Spent 116.00 ms on a formula simplification. DAG size of input: 115 DAG size of output: 114
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 16:09:49,017 WARN  L188               SmtUtils]: Spent 480.00 ms on a formula simplification. DAG size of input: 289 DAG size of output: 272
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
[2020-11-25 16:09:49,357 WARN  L188               SmtUtils]: Spent 114.00 ms on a formula simplification that was a NOOP. DAG size: 296
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
[2020-11-25 16:09:49,777 WARN  L188               SmtUtils]: Spent 144.00 ms on a formula simplification. DAG size of input: 75 DAG size of output: 71
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 16:09:49,977 WARN  L188               SmtUtils]: Spent 185.00 ms on a formula simplification. DAG size of input: 141 DAG size of output: 134
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #6: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #7: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 16:09:50,434 WARN  L188               SmtUtils]: Spent 291.00 ms on a formula simplification. DAG size of input: 104 DAG size of output: 95
[2020-11-25 16:09:50,889 WARN  L188               SmtUtils]: Spent 453.00 ms on a formula simplification. DAG size of input: 210 DAG size of output: 197
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #8: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #9: 16103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 16103 to 32203
Garbage collection #10: 32203 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 32203 to 64403
[2020-11-25 16:09:52,688 WARN  L188               SmtUtils]: Spent 1.72 s on a formula simplification. DAG size of input: 244 DAG size of output: 155
[2020-11-25 16:09:53,439 WARN  L188               SmtUtils]: Spent 749.00 ms on a formula simplification that was a NOOP. DAG size: 325
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
[2020-11-25 16:09:58,555 WARN  L188               SmtUtils]: Spent 5.05 s on a formula simplification. DAG size of input: 321 DAG size of output: 285
[2020-11-25 16:10:04,259 WARN  L188               SmtUtils]: Spent 5.70 s on a formula simplification. DAG size of input: 357 DAG size of output: 333
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #7: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
Garbage collection #8: 14051 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 14051 to 28099
Garbage collection #9: 28099 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 28099 to 56197
Garbage collection #10: 56197 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 56197 to 106189
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #7: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #8: 9883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9883 to 19763
Garbage collection #9: 19763 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19763 to 39521
Garbage collection #10: 39521 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 39521 to 79039
Garbage collection #11: 79039 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 79039 to 129037
[2020-11-25 16:10:07,097 WARN  L188               SmtUtils]: Spent 2.59 s on a formula simplification. DAG size of input: 461 DAG size of output: 207
[2020-11-25 16:10:08,313 WARN  L188               SmtUtils]: Spent 1.21 s on a formula simplification that was a NOOP. DAG size: 400
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9883 to 19763
Garbage collection #8: 19763 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19763 to 39521
[2020-11-25 16:10:14,010 WARN  L188               SmtUtils]: Spent 5.62 s on a formula simplification. DAG size of input: 365 DAG size of output: 332
[2020-11-25 16:10:15,524 WARN  L188               SmtUtils]: Spent 1.51 s on a formula simplification. DAG size of input: 570 DAG size of output: 522
Garbage collection #1: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #2: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #3: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #4: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #5: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #6: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #7: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
Garbage collection #8: 26597 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 26597 to 53189
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #7: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
[2020-11-25 16:10:15,875 WARN  L188               SmtUtils]: Spent 327.00 ms on a formula simplification. DAG size of input: 236 DAG size of output: 225
[2020-11-25 16:10:16,166 WARN  L188               SmtUtils]: Spent 251.00 ms on a formula simplification that was a NOOP. DAG size: 351
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
[2020-11-25 16:10:16,580 WARN  L188               SmtUtils]: Spent 398.00 ms on a formula simplification. DAG size of input: 255 DAG size of output: 237
[2020-11-25 16:10:17,254 WARN  L188               SmtUtils]: Spent 673.00 ms on a formula simplification. DAG size of input: 365 DAG size of output: 364
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
Garbage collection #8: 17077 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17077 to 34147
Garbage collection #9: 34147 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 34147 to 68281
[2020-11-25 16:10:18,667 WARN  L188               SmtUtils]: Spent 1.39 s on a formula simplification. DAG size of input: 398 DAG size of output: 359
[2020-11-25 16:10:18,684 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:10:18,704 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:10:18,713 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:10:18 BasicIcfg
[2020-11-25 16:10:18,713 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 16:10:18,713 INFO  L168              Benchmark]: Toolchain (without parser) took 54295.43 ms. Allocated memory was 1.0 GB in the beginning and 3.1 GB in the end (delta: 2.0 GB). Free memory was 935.2 MB in the beginning and 1.4 GB in the end (delta: -497.8 MB). Peak memory consumption was 2.1 GB. Max. memory is 15.3 GB.
[2020-11-25 16:10:18,714 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 16:10:18,715 INFO  L168              Benchmark]: Boogie Preprocessor took 137.03 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 913.7 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 16:10:18,715 INFO  L168              Benchmark]: UtopiaSpecLang took 80.04 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 902.9 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 16:10:18,715 INFO  L168              Benchmark]: Boogie Printer took 24.72 ms. Allocated memory is still 1.0 GB. Free memory was 902.9 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:10:18,716 INFO  L168              Benchmark]: RCFGBuilder took 1026.33 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 53.0 MB). Free memory was 897.6 MB in the beginning and 978.2 MB in the end (delta: -80.6 MB). Peak memory consumption was 185.5 MB. Max. memory is 15.3 GB.
[2020-11-25 16:10:18,716 INFO  L168              Benchmark]: UtopiaLTL2Aut took 35.55 ms. Allocated memory is still 1.1 GB. Free memory was 978.2 MB in the beginning and 974.8 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:10:18,717 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1964.57 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 171.4 MB). Free memory was 974.8 MB in the beginning and 866.8 MB in the end (delta: 108.1 MB). Peak memory consumption was 467.0 MB. Max. memory is 15.3 GB.
[2020-11-25 16:10:18,717 INFO  L168              Benchmark]: BlockEncodingV2 took 173.86 ms. Allocated memory is still 1.3 GB. Free memory was 866.8 MB in the beginning and 780.0 MB in the end (delta: 86.8 MB). Peak memory consumption was 86.8 MB. Max. memory is 15.3 GB.
[2020-11-25 16:10:18,718 INFO  L168              Benchmark]: BuchiAutomizer took 50849.87 ms. Allocated memory was 1.3 GB in the beginning and 3.1 GB in the end (delta: 1.8 GB). Free memory was 780.0 MB in the beginning and 1.4 GB in the end (delta: -653.0 MB). Peak memory consumption was 1.8 GB. Max. memory is 15.3 GB.
[2020-11-25 16:10:18,721 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    6236 locations, 11172 edges
  - StatisticsResult: Encoded RCFG
    6130 locations, 10883 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 137.03 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 913.7 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 80.04 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 902.9 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 24.72 ms. Allocated memory is still 1.0 GB. Free memory was 902.9 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1026.33 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 53.0 MB). Free memory was 897.6 MB in the beginning and 978.2 MB in the end (delta: -80.6 MB). Peak memory consumption was 185.5 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 35.55 ms. Allocated memory is still 1.1 GB. Free memory was 978.2 MB in the beginning and 974.8 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1964.57 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 171.4 MB). Free memory was 974.8 MB in the beginning and 866.8 MB in the end (delta: 108.1 MB). Peak memory consumption was 467.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 173.86 ms. Allocated memory is still 1.3 GB. Free memory was 866.8 MB in the beginning and 780.0 MB in the end (delta: 86.8 MB). Peak memory consumption was 86.8 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 50849.87 ms. Allocated memory was 1.3 GB in the beginning and 3.1 GB in the end (delta: 1.8 GB). Free memory was 780.0 MB in the beginning and 1.4 GB in the end (delta: -653.0 MB). Peak memory consumption was 1.8 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2515 locations, 3423 edges
  - StatisticsResult: BuchiProgram size
    6236 locations, 11172 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 9 terminating modules (9 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.9 modules have a trivial ranking function, the largest among these consists of 25 locations. The remainder module has 9189 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 50.7s and 10 iterations.  TraceHistogramMax:5. Analysis of lassos took 33.0s. Construction of modules took 11.6s. BÃ¼chi inclusion checks took 4.4s. Highest rank in rank-based complementation 0. Minimization of det autom 9. Minimization of nondet autom 0. Automata minimization 0.7s AutomataMinimizationTime, 9 MinimizatonAttempts, 4341 StatesRemovedByMinimization, 8 NontrivialMinimizations. Non-live state removal took 0.5s Buchi closure took 0.0s. Biggest automaton had 9189 states and ocurred in iteration 9.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 40209 SDtfs, 52453 SDslu, 59660 SDs, 0 SdLazy, 246736 SolverSat, 10598 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 11.6s Time	LassoAnalysisResults: nont1 unkn0 SFLI1 SFLT0 conc0 concLT0 SILN0 SILU8 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(231584178474632390847141970017375815706539969331281128078915168015826259279893) = (new EXEToken)({from : 231584178474632390847141970017375815706539969331281128078915168015826259279890, name : 231584178474632390847141970017375815706539969331281128078915168015826259279876, symbol : 231584178474632390847141970017375815706539969331281128078915168015826259279885, totalSupply : 231584178474632390847141970017375815706539969331281128078915168015826259279896, decimals : 0});
[L1770]              havoc __exception;
[L1771]              revert := false;
[L1772]  COND FALSE  !(__exception)
[L1799]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4315]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4315]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4316]  COND FALSE  !(revert)
[L4319]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3927]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3927]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3902]              assume msgsender_MSG != null;
[L3903]              Balance[this] := 0;
[L3904]              _name_ERC20Detailed[this] := 427332508;
[L3905]              _symbol_ERC20Detailed[this] := 427332508;
[L3906]              _decimals_ERC20Detailed[this] := 0;
[L3908]              _name_ERC20Detailed[this] := name_s778;
[L3909]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3910]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3931]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3932]  COND FALSE  !(revert)
[L4319]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4320]  COND FALSE  !(revert)
[L4323]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4323]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4324]  COND FALSE  !(revert)
[L4327]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4007]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4011]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4015]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3984]              assume msgsender_MSG != null;
[L3985]              Balance[this] := 0;
[L4015]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4016]  COND FALSE  !(revert)
[L4327]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4328]  COND FALSE  !(revert)
[L4331]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4331]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4157]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4158]  COND FALSE  !(revert)
[L4161]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4137]              assume msgsender_MSG != null;
[L4138]              Balance[this] := 0;
[L4139]              stopped_Stoppable[this] := false;
[L4161]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4162]  COND FALSE  !(revert)
[L4335]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4251]              assume msgsender_MSG != null;
[L4252]              Balance[this] := 0;
[L4253]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4254]              sum__lockTimes2[this] := 0;
[L4255]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4256]              sum__lockAmounts3[this] := 0;
[L4258]  COND TRUE   DType[this] == EXEToken
[L4259]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3235]              __ret_0_ := _owner_Ownable[this];
[L4259]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]  COND FALSE  !(revert)
[L4266]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4267]  COND TRUE   DType[this] == EXEToken
[L4268]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3740]              __var_15 := null;
[L3741]  COND FALSE  !(!(account_s654 != null))
[L3745]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3745]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3746]  COND FALSE  !(revert)
[L3749]              _totalSupply_ERC20[this] := __var_16;
[L3750]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3750]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3751]  COND FALSE  !(revert)
[L3754]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3755]              _balances_ERC20[this][account_s654] := __var_17;
[L3756]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3757]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4268]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4269]  COND FALSE  !(revert)
[L4339]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4340]  COND FALSE  !(revert)
[L1799]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1800]              assume !revert && gas >= 0;
[L7044]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
EXEToken(231584178474632390847141970017375815706539969331281128078915168015826259279893).transferFrom~address~address~uint256.gas(3979002)({from : 231584178474632390847141970017375815706539969331281128078915168015826259279894, sender : 231584178474632390847141970017375815706539969331281128078915168015826259279890, recipient : 0, amount : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != sender_s1113 && p1 != recipient_s1113) && (p2 != sender_s1113 || p3 != msgsender_MSG)) && sender_s1113 != recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && _balances_ERC20[this][recipient_s1113] + amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND TRUE   __exception
[L2103]              __tmp__Balance := Balance;
[L2104]              __tmp__DType := DType;
[L2105]              __tmp__Alloc := Alloc;
[L2106]              __tmp__balance_ADDR := balance_ADDR;
[L2107]              __tmp__M_Ref_int := M_Ref_int;
[L2108]              __tmp__sum__balances0 := sum__balances0;
[L2109]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2110]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2111]              __tmp__sum__allowed1 := sum__allowed1;
[L2112]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2113]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2114]              __tmp__Length := Length;
[L2115]              __tmp__now := now;
[L2116]              __tmp___owner_Ownable := _owner_Ownable;
[L2117]              __tmp___balances_ERC20 := _balances_ERC20;
[L2118]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2119]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2120]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2121]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2122]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2123]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2124]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2125]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2126]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4567]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6060]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4567]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4568]  COND FALSE  !(revert)
[L4571]  CALL        call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4451]  COND TRUE   __tmp__DType[this] == EXEToken
[L4452]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4452]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4453]  COND FALSE  !(revert)
[L4459]  COND TRUE   __tmp__DType[this] == EXEToken
[L4460]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4460]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4461]  COND FALSE  !(revert)
[L4467]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3126]  COND FALSE  !(!(b_s82 <= a_s82))
[L3130]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3131]              __ret_0_ := c_s82;
[L4467]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4468]  COND FALSE  !(revert)
[L4471]              __ret_0_ := ((__tmp___lockTimes_EXEToken[this][account_s1055] != 0 && __tmp___lockAmounts_EXEToken[this][account_s1055] != 0) && __tmp___lockTimes_EXEToken[this][account_s1055] > __tmp__now) && (__var_25 <= __tmp___lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4571]  RET         call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4572]  COND FALSE  !(revert)
[L4575]  COND FALSE  !(!!__var_31)
[L4579]  COND TRUE   __tmp__DType[this] == EXEToken
[L4580]  CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3546]  COND FALSE  !(!(value_s512 <= __tmp___balances_ERC20[this][from_s512]))
[L3550]  COND FALSE  !(!(value_s512 <= __tmp___allowed_ERC20[this][from_s512][msgsender_MSG]))
[L3554]              __var_7 := null;
[L3555]  COND TRUE   !(to_s512 != null)
[L3556]              revert := true;
[L4580]  RET         call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4581]  COND TRUE   revert
[L2126]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2127]              assume revert || gas < 0;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);

Loop:
Ownable(231584178474632390847141970017375815706539969331281128078915168015826259279893).owner.gas(3979001)({from : 231584178474632390847141970017375815706539969331281128078915168015826259279892});
[L218]               havoc __exception;
[L219]               revert := false;
[L220]   COND FALSE  !(__exception)
[L247]   CALL        call __ret_0_ := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3235]              __ret_0_ := _owner_Ownable[this];
[L247]   RET         call __ret_0_ := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L248]               assume !revert && gas >= 0;
[L6894]  RET         call __ret_0_owner := owner_Ownable(this, msgsender_MSG, msgvalue_MSG);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
