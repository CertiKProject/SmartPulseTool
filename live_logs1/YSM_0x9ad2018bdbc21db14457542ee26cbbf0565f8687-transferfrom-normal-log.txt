This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 09:47:13,033 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 09:47:13,034 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 09:47:13,045 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 09:47:13,046 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 09:47:13,046 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 09:47:13,047 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 09:47:13,049 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 09:47:13,050 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 09:47:13,051 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 09:47:13,052 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 09:47:13,052 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 09:47:13,053 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 09:47:13,054 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 09:47:13,056 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 09:47:13,056 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 09:47:13,057 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 09:47:13,059 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 09:47:13,061 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 09:47:13,063 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 09:47:13,064 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 09:47:13,065 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 09:47:13,066 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 09:47:13,066 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 09:47:13,067 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 09:47:13,067 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 09:47:13,067 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 09:47:13,068 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 09:47:13,068 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 09:47:13,068 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 09:47:13,069 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 09:47:13,069 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 09:47:13,070 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 09:47:13,070 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 09:47:13,071 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 09:47:13,071 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 09:47:13,072 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 09:47:13,072 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 09:47:13,072 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 09:47:13,073 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 09:47:13,073 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 09:47:13,073 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 09:47:13,082 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 09:47:13,082 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 09:47:13,083 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 09:47:13,083 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 09:47:13,083 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 09:47:13,083 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 09:47:13,083 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 09:47:13,083 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 09:47:13,084 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 09:47:13,084 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 09:47:13,085 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 09:47:13,085 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 09:47:13,085 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 09:47:13,085 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 09:47:13,085 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 09:47:13,085 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 09:47:13,085 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 09:47:13,086 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 09:47:13,086 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 09:47:13,086 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 09:47:13,086 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 09:47:13,086 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 09:47:13,086 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 09:47:13,086 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 09:47:13,086 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 09:47:13,087 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 09:47:13,108 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 09:47:13,118 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 09:47:13,121 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 09:47:13,122 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 09:47:13,123 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 09:47:13,123 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-normal.bpl
[2020-11-25 09:47:13,123 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-normal.bpl'
[2020-11-25 09:47:13,182 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 09:47:13,184 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 09:47:13,184 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 09:47:13,184 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 09:47:13,184 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 09:47:13,201 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:47:13" (1/1) ...
[2020-11-25 09:47:13,202 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:47:13" (1/1) ...
[2020-11-25 09:47:13,226 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:47:13" (1/1) ...
[2020-11-25 09:47:13,227 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:47:13" (1/1) ...
[2020-11-25 09:47:13,244 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:47:13" (1/1) ...
[2020-11-25 09:47:13,251 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:47:13" (1/1) ...
[2020-11-25 09:47:13,256 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:47:13" (1/1) ...
[2020-11-25 09:47:13,262 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 09:47:13,263 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 09:47:13,263 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 09:47:13,265 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 09:47:13,269 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:47:13" (1/1) ...
[2020-11-25 09:47:13,282 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(YSM.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= holders_YSM[this][from] && value <= approach_YSM[this][from][msg.sender] && holders_YSM[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_YSM[this][to] >= 0 && holders_YSM[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_YSM[this][from] >= 0 &&  holders_YSM[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && approach_YSM[this][from][msg.sender] >= 0 && approach_YSM[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(YSM.transferFrom(from, to, value), return == true && holders_YSM[this][from] == old(holders_YSM[this][from]) - value && holders_YSM[this][to] == old(holders_YSM[this][to]) + value && approach_YSM[this][from][msg.sender] == old(approach_YSM[this][from][msg.sender]) - value && totalSupply_YSM[this] == old(totalSupply_YSM[this]) && holders_YSM[this][p1] == old(holders_YSM[this][p1]) && approach_YSM[this][p2][p3] == old(approach_YSM[this][p2][p3]) && decimals_YSM[this] == old(decimals_YSM[this]) && symbol_YSM[this] == old(symbol_YSM[this]) && name_YSM[this] == old(name_YSM[this]))))
[2020-11-25 09:47:13,287 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(YSM.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= holders_YSM[this][from] && value <= approach_YSM[this][from][msg.sender] && holders_YSM[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_YSM[this][to] >= 0 && holders_YSM[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_YSM[this][from] >= 0 &&  holders_YSM[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && approach_YSM[this][from][msg.sender] >= 0 && approach_YSM[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(YSM.transferFrom(from, to, value), return == true && holders_YSM[this][from] == old(holders_YSM[this][from]) - value && holders_YSM[this][to] == old(holders_YSM[this][to]) + value && approach_YSM[this][from][msg.sender] == old(approach_YSM[this][from][msg.sender]) - value && totalSupply_YSM[this] == old(totalSupply_YSM[this]) && holders_YSM[this][p1] == old(holders_YSM[this][p1]) && approach_YSM[this][p2][p3] == old(approach_YSM[this][p2][p3]) && decimals_YSM[this] == old(decimals_YSM[this]) && symbol_YSM[this] == old(symbol_YSM[this]) && name_YSM[this] == old(name_YSM[this]))))
[2020-11-25 09:47:13,295 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(YSM.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= holders_YSM[this][from] && value <= approach_YSM[this][from][msg.sender] && holders_YSM[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_YSM[this][to] >= 0 && holders_YSM[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_YSM[this][from] >= 0 &&  holders_YSM[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && approach_YSM[this][from][msg.sender] >= 0 && approach_YSM[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(YSM.transferFrom(from, to, value), return == true && holders_YSM[this][from] == old(holders_YSM[this][from]) - value && holders_YSM[this][to] == old(holders_YSM[this][to]) + value && approach_YSM[this][from][msg.sender] == old(approach_YSM[this][from][msg.sender]) - value && totalSupply_YSM[this] == old(totalSupply_YSM[this]) && holders_YSM[this][p1] == old(holders_YSM[this][p1]) && approach_YSM[this][p2][p3] == old(approach_YSM[this][p2][p3]) && decimals_YSM[this] == old(decimals_YSM[this]) && symbol_YSM[this] == old(symbol_YSM[this]) && name_YSM[this] == old(name_YSM[this]))))
[2020-11-25 09:47:13,302 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( p1!=_from_s315 && p1!=_to_s315 ) && ( p2!=_from_s315 || p3!=msg.sender ) ) && _from_s315!=_to_s315 ) && _val_s315<=holders_YSM[this][_from_s315] ) && _val_s315<=approach_YSM[this][_from_s315][msg.sender] ) && ( holders_YSM[this][_to_s315] + _val_s315 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _val_s315>=0 ) && _val_s315<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && holders_YSM[this][_to_s315]>=0 ) && holders_YSM[this][_to_s315]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && holders_YSM[this][_from_s315]>=0 ) && holders_YSM[this][_from_s315]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && approach_YSM[this][_from_s315][msg.sender]>=0 ) && approach_YSM[this][_from_s315][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[_to_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]],BinaryExpression[COMPNEQ,IdentifierExpression[p3,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]]],BinaryExpression[COMPNEQ,IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>],IdentifierExpression[_to_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],BinaryExpression[COMPLEQ,IdentifierExpression[_val_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[_val_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[approach_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[_to_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],IdentifierExpression[_val_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[_val_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_val_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[_to_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[_to_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[approach_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[approach_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 09:47:13,305 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( __ret_0_==true && holders_YSM[this][_from_s315]==( ( old(holders_YSM[this][_from_s315]) ) - _val_s315 ) ) && holders_YSM[this][_to_s315]==( ( old(holders_YSM[this][_to_s315]) ) + _val_s315 ) ) && approach_YSM[this][_from_s315][msg.sender]==( ( old(approach_YSM[this][_from_s315][msg.sender]) ) - _val_s315 ) ) && totalSupply_YSM[this]==( old(totalSupply_YSM[this]) ) ) && holders_YSM[this][p1]==( old(holders_YSM[this][p1]) ) ) && approach_YSM[this][p2][p3]==( old(approach_YSM[this][p2][p3]) ) ) && decimals_YSM[this]==( old(decimals_YSM[this]) ) ) && symbol_YSM[this]==( old(symbol_YSM[this]) ) ) && name_YSM[this]==( old(name_YSM[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_YSM>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]]],IdentifierExpression[_val_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[_to_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[_to_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]]],IdentifierExpression[_val_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[approach_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[approach_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]]],IdentifierExpression[_val_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[approach_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[approach_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_YSM,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_YSM>]]]]]]
[2020-11-25 09:47:13,309 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(YSM.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= holders_YSM[this][from] && value <= approach_YSM[this][from][msg.sender] && holders_YSM[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_YSM[this][to] >= 0 && holders_YSM[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_YSM[this][from] >= 0 &&  holders_YSM[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && approach_YSM[this][from][msg.sender] >= 0 && approach_YSM[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(YSM.transferFrom(from, to, value), return == true && holders_YSM[this][from] == old(holders_YSM[this][from]) - value && holders_YSM[this][to] == old(holders_YSM[this][to]) + value && approach_YSM[this][from][msg.sender] == old(approach_YSM[this][from][msg.sender]) - value && totalSupply_YSM[this] == old(totalSupply_YSM[this]) && holders_YSM[this][p1] == old(holders_YSM[this][p1]) && approach_YSM[this][p2][p3] == old(approach_YSM[this][p2][p3]) && decimals_YSM[this] == old(decimals_YSM[this]) && symbol_YSM[this] == old(symbol_YSM[this]) && name_YSM[this] == old(name_YSM[this]))))
[2020-11-25 09:47:13,309 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_YSM0) ==> ( <>AP(success_transferFrom_YSM0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 09:47:13,315 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:47:13 PropertyContainer
[2020-11-25 09:47:13,316 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 09:47:13,316 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 09:47:13,316 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 09:47:13,316 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 09:47:13,317 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:47:13" (1/2) ...
[2020-11-25 09:47:13,317 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 09:47:13,317 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 09:47:13,326 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:47:13" (2/2) ...
[2020-11-25 09:47:13,327 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 09:47:13,327 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 09:47:13,327 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 09:47:13,327 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 09:47:13,328 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:47:13" (1/2) ...
[2020-11-25 09:47:13,384 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 09:47:13,384 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 09:47:13,384 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 09:47:13,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 09:47:13,385 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 09:47:13,385 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 09:47:13,385 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 09:47:13,385 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 09:47:13,385 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 09:47:13,385 INFO  L130     BoogieDeclarations]: Found specification of procedure YSM_YSM_NoBaseCtor__success
[2020-11-25 09:47:13,385 INFO  L130     BoogieDeclarations]: Found specification of procedure YSM_YSM
[2020-11-25 09:47:13,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure YSM_YSM
[2020-11-25 09:47:13,385 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_YSM__success
[2020-11-25 09:47:13,385 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_YSM
[2020-11-25 09:47:13,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_YSM
[2020-11-25 09:47:13,386 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_YSM
[2020-11-25 09:47:13,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_YSM
[2020-11-25 09:47:13,386 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_YSM
[2020-11-25 09:47:13,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_YSM
[2020-11-25 09:47:13,386 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_YSM
[2020-11-25 09:47:13,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_YSM
[2020-11-25 09:47:13,386 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_YSM
[2020-11-25 09:47:13,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_YSM
[2020-11-25 09:47:13,386 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_YSM
[2020-11-25 09:47:13,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_YSM
[2020-11-25 09:47:13,386 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_YSM
[2020-11-25 09:47:13,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_YSM
[2020-11-25 09:47:13,387 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_YSM
[2020-11-25 09:47:13,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_YSM
[2020-11-25 09:47:13,387 INFO  L130     BoogieDeclarations]: Found specification of procedure name_YSM
[2020-11-25 09:47:13,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_YSM
[2020-11-25 09:47:13,387 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 09:47:13,387 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 09:47:13,387 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 09:47:13,387 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 09:47:13,387 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 09:47:13,387 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_YSM
[2020-11-25 09:47:13,388 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 09:47:13,388 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 09:47:13,388 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 09:47:13,388 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 09:47:13,388 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 09:47:13,388 INFO  L130     BoogieDeclarations]: Found specification of procedure YSM_YSM_NoBaseCtor__fail
[2020-11-25 09:47:13,388 INFO  L130     BoogieDeclarations]: Found specification of procedure YSM_YSM__success
[2020-11-25 09:47:13,388 INFO  L130     BoogieDeclarations]: Found specification of procedure YSM_YSM__fail
[2020-11-25 09:47:13,388 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_YSM__fail
[2020-11-25 09:47:13,388 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_YSM__success
[2020-11-25 09:47:13,388 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_YSM__fail
[2020-11-25 09:47:13,388 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_YSM__success
[2020-11-25 09:47:13,388 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_YSM__fail
[2020-11-25 09:47:13,389 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_YSM__success
[2020-11-25 09:47:13,389 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_YSM__fail
[2020-11-25 09:47:13,389 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_YSM__success
[2020-11-25 09:47:13,389 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_YSM__fail
[2020-11-25 09:47:13,389 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_YSM__success
[2020-11-25 09:47:13,389 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_YSM__fail
[2020-11-25 09:47:13,389 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_YSM__success
[2020-11-25 09:47:13,389 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_YSM__fail
[2020-11-25 09:47:13,389 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_YSM__success
[2020-11-25 09:47:13,389 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_YSM__fail
[2020-11-25 09:47:13,389 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_YSM__success
[2020-11-25 09:47:13,389 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_YSM__fail
[2020-11-25 09:47:13,389 INFO  L130     BoogieDeclarations]: Found specification of procedure name_YSM__success
[2020-11-25 09:47:13,389 INFO  L130     BoogieDeclarations]: Found specification of procedure name_YSM__fail
[2020-11-25 09:47:13,390 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 09:47:13,390 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 09:47:13,390 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 09:47:13,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 09:47:13,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 09:47:13,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 09:47:13,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 09:47:13,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 09:47:13,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 09:47:13,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure YSM_YSM_NoBaseCtor__fail
[2020-11-25 09:47:13,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure YSM_YSM_NoBaseCtor__success
[2020-11-25 09:47:13,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure YSM_YSM__fail
[2020-11-25 09:47:13,390 INFO  L138     BoogieDeclarations]: Found implementation of procedure YSM_YSM__success
[2020-11-25 09:47:13,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_YSM__fail
[2020-11-25 09:47:13,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_YSM__success
[2020-11-25 09:47:13,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_YSM__fail
[2020-11-25 09:47:13,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_YSM__success
[2020-11-25 09:47:13,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_YSM__fail
[2020-11-25 09:47:13,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_YSM__success
[2020-11-25 09:47:13,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_YSM__fail
[2020-11-25 09:47:13,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_YSM__success
[2020-11-25 09:47:13,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_YSM__fail
[2020-11-25 09:47:13,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_YSM__success
[2020-11-25 09:47:13,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_YSM__fail
[2020-11-25 09:47:13,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_YSM__success
[2020-11-25 09:47:13,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_YSM__fail
[2020-11-25 09:47:13,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_YSM__success
[2020-11-25 09:47:13,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_YSM__fail
[2020-11-25 09:47:13,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_YSM__success
[2020-11-25 09:47:13,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_YSM__fail
[2020-11-25 09:47:13,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_YSM__success
[2020-11-25 09:47:13,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_YSM__fail
[2020-11-25 09:47:13,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_YSM__success
[2020-11-25 09:47:13,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 09:47:13,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 09:47:13,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 09:47:13,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 09:47:13,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 09:47:13,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 09:47:13,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 09:47:13,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 09:47:13,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_YSM
[2020-11-25 09:47:13,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 09:47:13,393 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 09:47:13,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 09:47:13,546 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:47:13,787 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:47:13,788 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:47:13,788 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:47:13,877 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 09:47:13,877 INFO  L286             CfgBuilder]: Removed 2 assue(true) statements.
[2020-11-25 09:47:13,878 INFO  L202        PluginConnector]: Adding new model YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:47:13 BoogieIcfgContainer
[2020-11-25 09:47:13,878 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:47:13" (2/2) ...
[2020-11-25 09:47:13,879 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 09:47:13,879 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@34d0294e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:47:13, skipping insertion in model container
[2020-11-25 09:47:13,879 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 09:47:13,879 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 09:47:13,879 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 09:47:13,881 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 09:47:13,881 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:47:13" (1/3) ...
[2020-11-25 09:47:13,881 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@53355f63 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:47:13, skipping insertion in model container
[2020-11-25 09:47:13,882 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:47:13" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 09:47:13,924 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:47:13 NWAContainer
[2020-11-25 09:47:13,924 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 09:47:13,924 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 09:47:13,924 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 09:47:13,925 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 09:47:13,926 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:47:13" (3/4) ...
[2020-11-25 09:47:13,927 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@3e1e4b2d and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:47:13, skipping insertion in model container
[2020-11-25 09:47:13,927 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:47:13" (4/4) ...
[2020-11-25 09:47:13,930 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 09:47:13,932 INFO  L110   BuchiProductObserver]: Initial RCFG 660 locations, 788 edges
[2020-11-25 09:47:13,933 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 09:47:13,944 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 09:47:14,915 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 09:47:14,917 INFO  L110   BuchiProductObserver]: BuchiProgram size 1528 locations, 2549 edges
[2020-11-25 09:47:14,918 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:47:14 BoogieIcfgContainer
[2020-11-25 09:47:14,918 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 09:47:14,918 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 09:47:14,919 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 09:47:14,921 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 09:47:14,922 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:47:14" (1/1) ...
[2020-11-25 09:47:14,970 INFO  L313           BlockEncoder]: Initial Icfg 1528 locations, 2549 edges
[2020-11-25 09:47:14,970 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 09:47:14,971 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 09:47:14,971 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 09:47:14,971 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 09:47:14,980 INFO  L70    emoveInfeasibleEdges]: Removed 27 edges and 7 locations because of local infeasibility
[2020-11-25 09:47:14,986 INFO  L70        RemoveSinkStates]: Removed 2 edges and 1 locations by removing sink states
[2020-11-25 09:47:15,000 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 09:47:15,002 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 09:47:15,004 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 09:47:15,004 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 09:47:15,007 INFO  L313           BlockEncoder]: Encoded RCFG 1510 locations, 2506 edges
[2020-11-25 09:47:15,007 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:47:15 BasicIcfg
[2020-11-25 09:47:15,007 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 09:47:15,008 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 09:47:15,008 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 09:47:15,010 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 09:47:15,010 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:47:15,010 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:47:13" (1/6) ...
[2020-11-25 09:47:15,011 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2a624ecd and model type YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:47:15, skipping insertion in model container
[2020-11-25 09:47:15,011 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:47:15,011 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:47:13" (2/6) ...
[2020-11-25 09:47:15,012 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2a624ecd and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:47:15, skipping insertion in model container
[2020-11-25 09:47:15,012 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:47:15,012 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:47:13" (3/6) ...
[2020-11-25 09:47:15,012 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2a624ecd and model type YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:47:15, skipping insertion in model container
[2020-11-25 09:47:15,012 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:47:15,012 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:47:13" (4/6) ...
[2020-11-25 09:47:15,013 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2a624ecd and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:47:15, skipping insertion in model container
[2020-11-25 09:47:15,013 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:47:15,013 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:47:14" (5/6) ...
[2020-11-25 09:47:15,013 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2a624ecd and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 09:47:15, skipping insertion in model container
[2020-11-25 09:47:15,013 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:47:15,013 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:47:15" (6/6) ...
[2020-11-25 09:47:15,014 INFO  L404   chiAutomizerObserver]: Analyzing ICFG YSM_0x9ad2018bdbc21db14457542ee26cbbf0565f8687_transferfrom-normal.bpl_BEv2
[2020-11-25 09:47:15,053 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 09:47:15,053 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 09:47:15,053 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 09:47:15,053 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 09:47:15,054 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 09:47:15,054 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 09:47:15,054 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 09:47:15,054 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 09:47:15,054 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 09:47:15,073 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1510 states.
[2020-11-25 09:47:15,121 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:47:15,122 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:47:15,122 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:47:15,130 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:47:15,130 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:47:15,130 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 09:47:15,131 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1510 states.
[2020-11-25 09:47:15,141 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:47:15,141 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:47:15,141 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:47:15,143 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:47:15,143 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YSM0 := false;
[L3]                 call_transferFrom_YSM0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == YSM;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND TRUE   revert
[L167]   RET         call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;

Loop:
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND FALSE  !(gas >= 0)
[L1770]  RET         call CorralChoice_YSM(this);

[2020-11-25 09:47:15,160 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:47:15,160 INFO  L82        PathProgramCache]: Analyzing trace with hash 9560350, now seen corresponding path program 1 times
[2020-11-25 09:47:15,164 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:47:15,183 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:47:15,228 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:47:15,230 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:47:15,230 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 09:47:15,234 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:47:15,325 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 09:47:15,326 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 09:47:15,328 INFO  L87              Difference]: Start difference. First operand 1510 states. Second operand 4 states.
[2020-11-25 09:47:15,536 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:47:15,536 INFO  L93              Difference]: Finished difference Result 1148 states and 1245 transitions.
[2020-11-25 09:47:15,537 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 09:47:15,538 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1148 states and 1245 transitions.
[2020-11-25 09:47:15,546 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:47:15,558 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1148 states to 1138 states and 1225 transitions.
[2020-11-25 09:47:15,559 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 09:47:15,560 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 501
[2020-11-25 09:47:15,561 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1138 states and 1225 transitions.
[2020-11-25 09:47:15,566 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:47:15,566 INFO  L728         BuchiCegarLoop]: Abstraction has 1138 states and 1225 transitions.
[2020-11-25 09:47:15,582 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1138 states and 1225 transitions.
[2020-11-25 09:47:15,611 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1138 to 1138.
[2020-11-25 09:47:15,611 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1138 states.
[2020-11-25 09:47:15,615 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1138 states to 1138 states and 1225 transitions.
[2020-11-25 09:47:15,616 INFO  L751         BuchiCegarLoop]: Abstraction has 1138 states and 1225 transitions.
[2020-11-25 09:47:15,616 INFO  L631         BuchiCegarLoop]: Abstraction has 1138 states and 1225 transitions.
[2020-11-25 09:47:15,616 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 09:47:15,616 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1138 states and 1225 transitions.
[2020-11-25 09:47:15,621 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:47:15,621 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:47:15,622 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:47:15,623 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:47:15,623 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YSM0 := false;
[L3]                 call_transferFrom_YSM0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == YSM;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND TRUE   revert
[L167]   RET         call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && holders_YSM[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND TRUE   !(holders_YSM[this][_from_s315] >= _val_s315)
[L1089]              revert := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && holders_YSM[this][_from_s315] == old(holders_YSM[this][_from_s315]) - _val_s315) && holders_YSM[this][_to_s315] == old(holders_YSM[this][_to_s315]) + _val_s315) && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this][p1] == old(holders_YSM[this][p1])) && approach_YSM[this][p2][p3] == old(approach_YSM[this][p2][p3])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

Loop:
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && holders_YSM[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND TRUE   !(holders_YSM[this][_from_s315] >= _val_s315)
[L1089]              revert := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && holders_YSM[this][_from_s315] == old(holders_YSM[this][_from_s315]) - _val_s315) && holders_YSM[this][_to_s315] == old(holders_YSM[this][_to_s315]) + _val_s315) && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this][p1] == old(holders_YSM[this][p1])) && approach_YSM[this][p2][p3] == old(approach_YSM[this][p2][p3])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

[2020-11-25 09:47:15,628 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:47:15,628 INFO  L82        PathProgramCache]: Analyzing trace with hash 923933644, now seen corresponding path program 1 times
[2020-11-25 09:47:15,629 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:47:15,640 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:47:15,660 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:47:15,661 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:47:15,661 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 09:47:15,662 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:47:15,662 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 09:47:15,662 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 09:47:15,663 INFO  L87              Difference]: Start difference. First operand 1138 states and 1225 transitions. cyclomatic complexity: 89 Second operand 4 states.
[2020-11-25 09:47:15,844 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:47:15,844 INFO  L93              Difference]: Finished difference Result 1658 states and 1885 transitions.
[2020-11-25 09:47:15,845 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 09:47:15,845 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1658 states and 1885 transitions.
[2020-11-25 09:47:15,858 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 09:47:15,869 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1658 states to 1624 states and 1847 transitions.
[2020-11-25 09:47:15,869 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 744
[2020-11-25 09:47:15,870 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 744
[2020-11-25 09:47:15,870 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1624 states and 1847 transitions.
[2020-11-25 09:47:15,874 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:47:15,874 INFO  L728         BuchiCegarLoop]: Abstraction has 1624 states and 1847 transitions.
[2020-11-25 09:47:15,875 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1624 states and 1847 transitions.
[2020-11-25 09:47:15,892 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1624 to 1128.
[2020-11-25 09:47:15,892 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1128 states.
[2020-11-25 09:47:15,895 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1128 states to 1128 states and 1199 transitions.
[2020-11-25 09:47:15,896 INFO  L751         BuchiCegarLoop]: Abstraction has 1128 states and 1199 transitions.
[2020-11-25 09:47:15,896 INFO  L631         BuchiCegarLoop]: Abstraction has 1128 states and 1199 transitions.
[2020-11-25 09:47:15,896 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 09:47:15,896 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1128 states and 1199 transitions.
[2020-11-25 09:47:15,899 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:47:15,900 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:47:15,900 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:47:15,902 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:47:15,902 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YSM0 := false;
[L3]                 call_transferFrom_YSM0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == YSM;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_YSM[this] := 0;
[L952]               decimals_YSM[this] := 0;
[L953]               symbol_YSM[this] := -339949848;
[L954]               name_YSM[this] := -339949848;
[L955]               approach_YSM[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_YSM[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_YSM[this] := 488267391;
[L961]               symbol_YSM[this] := 774884429;
[L962]               decimals_YSM[this] := 18;
[L963]               __var_1 := decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_YSM[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_YSM[this][msgsender_MSG];
[L966]               holders_YSM[this][msgsender_MSG] := totalSupply_YSM[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_YSM[this][msgsender_MSG];
[L990]   RET         call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && holders_YSM[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND TRUE   __exception
[L305]               __tmp__Balance := Balance;
[L306]               __tmp__DType := DType;
[L307]               __tmp__Alloc := Alloc;
[L308]               __tmp__balance_ADDR := balance_ADDR;
[L309]               __tmp__M_Ref_int := M_Ref_int;
[L310]               __tmp__alloc_approach_YSM_lvl0 := alloc_approach_YSM_lvl0;
[L311]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L312]               __tmp__sum_approach0 := sum_approach0;
[L313]               __tmp__sum_holders1 := sum_holders1;
[L314]               __tmp__Length := Length;
[L315]               __tmp__now := now;
[L316]               __tmp__totalSupply_YSM := totalSupply_YSM;
[L317]               __tmp__decimals_YSM := decimals_YSM;
[L318]               __tmp__symbol_YSM := symbol_YSM;
[L319]               __tmp__name_YSM := name_YSM;
[L320]               __tmp__approach_YSM := approach_YSM;
[L321]               __tmp__holders_YSM := holders_YSM;
[L322]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1065]  COND TRUE   !(__tmp__holders_YSM[this][_from_s315] >= _val_s315)
[L1066]              revert := true;
[L322]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L323]               assume revert || gas < 0;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

Loop:
[L1770]  CALL       call CorralChoice_YSM(this);
[L1663]             havoc msgsender_MSG;
[L1664]             havoc msgvalue_MSG;
[L1665]             havoc choice;
[L1666]             havoc _from_s315;
[L1667]             havoc _to_s315;
[L1668]             havoc _val_s315;
[L1669]             havoc __ret_0_transferFrom;
[L1670]             havoc _to_s213;
[L1671]             havoc _val_s213;
[L1672]             havoc __ret_0_transfer;
[L1673]             havoc _own_s139;
[L1674]             havoc __ret_0_balanceOf;
[L1675]             havoc _owner_s368;
[L1676]             havoc _spender_s368;
[L1677]             havoc __ret_0_allowance;
[L1678]             havoc _spender_s352;
[L1679]             havoc _val_s352;
[L1680]             havoc __ret_0_approve;
[L1681]             havoc __ret_0_totalSupply;
[L1682]             havoc __ret_0_decimals;
[L1683]             havoc __ret_0_symbol;
[L1684]             havoc __ret_0_name;
[L1685]             havoc tmpNow;
[L1686]             havoc gas;
[L1687]             assume gas > 4000000 && gas <= 8000000;
[L1688]             tmpNow := now;
[L1689]             havoc now;
[L1690]             assume now > tmpNow;
[L1691]             assume msgsender_MSG != null;
[L1692]             assume DType[msgsender_MSG] != ERC20;
[L1693]             assume DType[msgsender_MSG] != YSM;
[L1694]             Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE  choice == 9
[L1696]             gas := gas - 21000;
[L1697]  COND TRUE  gas >= 0
[L1698]             assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]             assume msgvalue_MSG == 0;
[L1700]  CALL       call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && holders_YSM[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                call_transferFrom_YSM0 := true;
[L3]                call_transferFrom_YSM0 := false;
[L3]                revert := revert_hold;
[L302]              havoc __exception;
[L303]              revert := false;
[L304]   COND TRUE  __exception
[L305]              __tmp__Balance := Balance;
[L306]              __tmp__DType := DType;
[L307]              __tmp__Alloc := Alloc;
[L308]              __tmp__balance_ADDR := balance_ADDR;
[L309]              __tmp__M_Ref_int := M_Ref_int;
[L310]              __tmp__alloc_approach_YSM_lvl0 := alloc_approach_YSM_lvl0;
[L311]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L312]              __tmp__sum_approach0 := sum_approach0;
[L313]              __tmp__sum_holders1 := sum_holders1;
[L314]              __tmp__Length := Length;
[L315]              __tmp__now := now;
[L316]              __tmp__totalSupply_YSM := totalSupply_YSM;
[L317]              __tmp__decimals_YSM := decimals_YSM;
[L318]              __tmp__symbol_YSM := symbol_YSM;
[L319]              __tmp__name_YSM := name_YSM;
[L320]              __tmp__approach_YSM := approach_YSM;
[L321]              __tmp__holders_YSM := holders_YSM;
[L322]   CALL       call __ret_0_ := transferFrom~address~address~uint256_YSM__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1065]  COND TRUE  !(__tmp__holders_YSM[this][_from_s315] >= _val_s315)
[L1066]             revert := true;
[L322]   RET        call __ret_0_ := transferFrom~address~address~uint256_YSM__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L323]              assume revert || gas < 0;
[L1700]  RET        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET        call CorralChoice_YSM(this);

[2020-11-25 09:47:15,906 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:47:15,906 INFO  L82        PathProgramCache]: Analyzing trace with hash 1780154129, now seen corresponding path program 1 times
[2020-11-25 09:47:15,907 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:47:15,923 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:47:15,973 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:47:15,973 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:47:15,973 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 09:47:15,974 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:47:15,974 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 09:47:15,974 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 09:47:15,974 INFO  L87              Difference]: Start difference. First operand 1128 states and 1199 transitions. cyclomatic complexity: 73 Second operand 6 states.
[2020-11-25 09:47:16,425 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:47:16,425 INFO  L93              Difference]: Finished difference Result 1268 states and 1356 transitions.
[2020-11-25 09:47:16,425 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 09:47:16,425 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1268 states and 1356 transitions.
[2020-11-25 09:47:16,431 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:47:16,436 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1268 states to 1268 states and 1356 transitions.
[2020-11-25 09:47:16,437 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 564
[2020-11-25 09:47:16,438 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 564
[2020-11-25 09:47:16,438 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1268 states and 1356 transitions.
[2020-11-25 09:47:16,439 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:47:16,439 INFO  L728         BuchiCegarLoop]: Abstraction has 1268 states and 1356 transitions.
[2020-11-25 09:47:16,440 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1268 states and 1356 transitions.
[2020-11-25 09:47:16,452 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1268 to 1180.
[2020-11-25 09:47:16,452 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1180 states.
[2020-11-25 09:47:16,454 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1180 states to 1180 states and 1255 transitions.
[2020-11-25 09:47:16,454 INFO  L751         BuchiCegarLoop]: Abstraction has 1180 states and 1255 transitions.
[2020-11-25 09:47:16,454 INFO  L631         BuchiCegarLoop]: Abstraction has 1180 states and 1255 transitions.
[2020-11-25 09:47:16,454 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 09:47:16,454 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1180 states and 1255 transitions.
[2020-11-25 09:47:16,457 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:47:16,457 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:47:16,457 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:47:16,459 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:47:16,459 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YSM0 := false;
[L3]                 call_transferFrom_YSM0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == YSM;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_YSM[this] := 0;
[L952]               decimals_YSM[this] := 0;
[L953]               symbol_YSM[this] := -339949848;
[L954]               name_YSM[this] := -339949848;
[L955]               approach_YSM[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_YSM[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_YSM[this] := 488267391;
[L961]               symbol_YSM[this] := 774884429;
[L962]               decimals_YSM[this] := 18;
[L963]               __var_1 := decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_YSM[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_YSM[this][msgsender_MSG];
[L966]               holders_YSM[this][msgsender_MSG] := totalSupply_YSM[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_YSM[this][msgsender_MSG];
[L990]   RET         call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && holders_YSM[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND TRUE   __exception
[L305]               __tmp__Balance := Balance;
[L306]               __tmp__DType := DType;
[L307]               __tmp__Alloc := Alloc;
[L308]               __tmp__balance_ADDR := balance_ADDR;
[L309]               __tmp__M_Ref_int := M_Ref_int;
[L310]               __tmp__alloc_approach_YSM_lvl0 := alloc_approach_YSM_lvl0;
[L311]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L312]               __tmp__sum_approach0 := sum_approach0;
[L313]               __tmp__sum_holders1 := sum_holders1;
[L314]               __tmp__Length := Length;
[L315]               __tmp__now := now;
[L316]               __tmp__totalSupply_YSM := totalSupply_YSM;
[L317]               __tmp__decimals_YSM := decimals_YSM;
[L318]               __tmp__symbol_YSM := symbol_YSM;
[L319]               __tmp__name_YSM := name_YSM;
[L320]               __tmp__approach_YSM := approach_YSM;
[L321]               __tmp__holders_YSM := holders_YSM;
[L322]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1065]  COND FALSE  !(!(__tmp__holders_YSM[this][_from_s315] >= _val_s315))
[L1069]  COND TRUE   !(__tmp__approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315)
[L1070]              revert := true;
[L322]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L323]               assume revert || gas < 0;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

Loop:
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && holders_YSM[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND TRUE   __exception
[L305]               __tmp__Balance := Balance;
[L306]               __tmp__DType := DType;
[L307]               __tmp__Alloc := Alloc;
[L308]               __tmp__balance_ADDR := balance_ADDR;
[L309]               __tmp__M_Ref_int := M_Ref_int;
[L310]               __tmp__alloc_approach_YSM_lvl0 := alloc_approach_YSM_lvl0;
[L311]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L312]               __tmp__sum_approach0 := sum_approach0;
[L313]               __tmp__sum_holders1 := sum_holders1;
[L314]               __tmp__Length := Length;
[L315]               __tmp__now := now;
[L316]               __tmp__totalSupply_YSM := totalSupply_YSM;
[L317]               __tmp__decimals_YSM := decimals_YSM;
[L318]               __tmp__symbol_YSM := symbol_YSM;
[L319]               __tmp__name_YSM := name_YSM;
[L320]               __tmp__approach_YSM := approach_YSM;
[L321]               __tmp__holders_YSM := holders_YSM;
[L322]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1065]  COND FALSE  !(!(__tmp__holders_YSM[this][_from_s315] >= _val_s315))
[L1069]  COND TRUE   !(__tmp__approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315)
[L1070]              revert := true;
[L322]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L323]               assume revert || gas < 0;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

[2020-11-25 09:47:16,461 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:47:16,462 INFO  L82        PathProgramCache]: Analyzing trace with hash 708270474, now seen corresponding path program 1 times
[2020-11-25 09:47:16,462 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:47:16,472 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:47:16,526 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:47:16,526 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:47:16,526 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 09:47:16,527 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:47:16,527 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 09:47:16,527 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 09:47:16,527 INFO  L87              Difference]: Start difference. First operand 1180 states and 1255 transitions. cyclomatic complexity: 77 Second operand 6 states.
[2020-11-25 09:47:16,970 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:47:16,970 INFO  L93              Difference]: Finished difference Result 1260 states and 1345 transitions.
[2020-11-25 09:47:16,970 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 09:47:16,970 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1260 states and 1345 transitions.
[2020-11-25 09:47:16,974 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:47:16,978 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1260 states to 1260 states and 1345 transitions.
[2020-11-25 09:47:16,978 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 560
[2020-11-25 09:47:16,978 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 560
[2020-11-25 09:47:16,978 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1260 states and 1345 transitions.
[2020-11-25 09:47:16,979 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:47:16,979 INFO  L728         BuchiCegarLoop]: Abstraction has 1260 states and 1345 transitions.
[2020-11-25 09:47:16,980 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1260 states and 1345 transitions.
[2020-11-25 09:47:16,988 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1260 to 1180.
[2020-11-25 09:47:16,988 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1180 states.
[2020-11-25 09:47:16,990 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1180 states to 1180 states and 1255 transitions.
[2020-11-25 09:47:16,990 INFO  L751         BuchiCegarLoop]: Abstraction has 1180 states and 1255 transitions.
[2020-11-25 09:47:16,990 INFO  L631         BuchiCegarLoop]: Abstraction has 1180 states and 1255 transitions.
[2020-11-25 09:47:16,990 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 09:47:16,990 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1180 states and 1255 transitions.
[2020-11-25 09:47:16,992 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:47:16,992 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:47:16,992 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:47:16,993 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:47:16,993 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YSM0 := false;
[L3]                 call_transferFrom_YSM0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == YSM;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_YSM[this] := 0;
[L952]               decimals_YSM[this] := 0;
[L953]               symbol_YSM[this] := -339949848;
[L954]               name_YSM[this] := -339949848;
[L955]               approach_YSM[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_YSM[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_YSM[this] := 488267391;
[L961]               symbol_YSM[this] := 774884429;
[L962]               decimals_YSM[this] := 18;
[L963]               __var_1 := decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_YSM[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_YSM[this][msgsender_MSG];
[L966]               holders_YSM[this][msgsender_MSG] := totalSupply_YSM[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_YSM[this][msgsender_MSG];
[L990]   RET         call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && holders_YSM[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_YSM[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_YSM[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_from_s315];
[L1098]              holders_YSM[this][_from_s315] := (holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_from_s315];
[L1100]              assert _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_YSM[this][_from_s315][msgsender_MSG];
[L1102]              approach_YSM[this][_from_s315][msgsender_MSG] := (approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_YSM[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_to_s315];
[L1105]              holders_YSM[this][_to_s315] := (holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_to_s315];
[L1107]              assert holders_YSM[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_YSM" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && holders_YSM[this][_from_s315] == old(holders_YSM[this][_from_s315]) - _val_s315) && holders_YSM[this][_to_s315] == old(holders_YSM[this][_to_s315]) + _val_s315) && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this][p1] == old(holders_YSM[this][p1])) && approach_YSM[this][p2][p3] == old(approach_YSM[this][p2][p3])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

Loop:
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && holders_YSM[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_YSM[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_YSM[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_from_s315];
[L1098]              holders_YSM[this][_from_s315] := (holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_from_s315];
[L1100]              assert _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_YSM[this][_from_s315][msgsender_MSG];
[L1102]              approach_YSM[this][_from_s315][msgsender_MSG] := (approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_YSM[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_to_s315];
[L1105]              holders_YSM[this][_to_s315] := (holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_to_s315];
[L1107]              assert holders_YSM[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_YSM" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && holders_YSM[this][_from_s315] == old(holders_YSM[this][_from_s315]) - _val_s315) && holders_YSM[this][_to_s315] == old(holders_YSM[this][_to_s315]) + _val_s315) && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this][p1] == old(holders_YSM[this][p1])) && approach_YSM[this][p2][p3] == old(approach_YSM[this][p2][p3])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

[2020-11-25 09:47:16,995 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:47:16,995 INFO  L82        PathProgramCache]: Analyzing trace with hash -1660058408, now seen corresponding path program 1 times
[2020-11-25 09:47:16,996 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:47:17,048 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:47:17,685 WARN  L188               SmtUtils]: Spent 121.00 ms on a formula simplification. DAG size of input: 76 DAG size of output: 47
[2020-11-25 09:47:17,913 WARN  L188               SmtUtils]: Spent 102.00 ms on a formula simplification. DAG size of input: 115 DAG size of output: 64
[2020-11-25 09:47:18,087 WARN  L188               SmtUtils]: Spent 138.00 ms on a formula simplification. DAG size of input: 116 DAG size of output: 70
[2020-11-25 09:47:18,405 WARN  L188               SmtUtils]: Spent 135.00 ms on a formula simplification. DAG size of input: 116 DAG size of output: 70
[2020-11-25 09:47:18,645 WARN  L188               SmtUtils]: Spent 188.00 ms on a formula simplification. DAG size of input: 160 DAG size of output: 76
[2020-11-25 09:47:18,820 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:47:18,820 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:47:18,820 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [22] imperfect sequences [] total 22
[2020-11-25 09:47:18,821 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:47:18,821 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 23 interpolants.
[2020-11-25 09:47:18,821 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=58, Invalid=448, Unknown=0, NotChecked=0, Total=506
[2020-11-25 09:47:18,821 INFO  L87              Difference]: Start difference. First operand 1180 states and 1255 transitions. cyclomatic complexity: 77 Second operand 23 states.
[2020-11-25 09:47:22,337 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:47:22,337 INFO  L93              Difference]: Finished difference Result 1263 states and 1364 transitions.
[2020-11-25 09:47:22,337 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 22 states. 
[2020-11-25 09:47:22,337 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1263 states and 1364 transitions.
[2020-11-25 09:47:22,341 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:47:22,344 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1263 states to 1263 states and 1364 transitions.
[2020-11-25 09:47:22,344 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 559
[2020-11-25 09:47:22,345 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 559
[2020-11-25 09:47:22,345 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1263 states and 1364 transitions.
[2020-11-25 09:47:22,346 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:47:22,346 INFO  L728         BuchiCegarLoop]: Abstraction has 1263 states and 1364 transitions.
[2020-11-25 09:47:22,347 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1263 states and 1364 transitions.
[2020-11-25 09:47:22,356 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1263 to 1234.
[2020-11-25 09:47:22,356 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1234 states.
[2020-11-25 09:47:22,358 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1234 states to 1234 states and 1319 transitions.
[2020-11-25 09:47:22,358 INFO  L751         BuchiCegarLoop]: Abstraction has 1234 states and 1319 transitions.
[2020-11-25 09:47:22,358 INFO  L631         BuchiCegarLoop]: Abstraction has 1234 states and 1319 transitions.
[2020-11-25 09:47:22,358 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 09:47:22,358 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1234 states and 1319 transitions.
[2020-11-25 09:47:22,360 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:47:22,360 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:47:22,360 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:47:22,361 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:47:22,361 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YSM0 := false;
[L3]                 call_transferFrom_YSM0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == YSM;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_YSM[this] := 0;
[L952]               decimals_YSM[this] := 0;
[L953]               symbol_YSM[this] := -339949848;
[L954]               name_YSM[this] := -339949848;
[L955]               approach_YSM[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_YSM[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_YSM[this] := 488267391;
[L961]               symbol_YSM[this] := 774884429;
[L962]               decimals_YSM[this] := 18;
[L963]               __var_1 := decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_YSM[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_YSM[this][msgsender_MSG];
[L966]               holders_YSM[this][msgsender_MSG] := totalSupply_YSM[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_YSM[this][msgsender_MSG];
[L990]   RET         call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && holders_YSM[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND TRUE   __exception
[L305]               __tmp__Balance := Balance;
[L306]               __tmp__DType := DType;
[L307]               __tmp__Alloc := Alloc;
[L308]               __tmp__balance_ADDR := balance_ADDR;
[L309]               __tmp__M_Ref_int := M_Ref_int;
[L310]               __tmp__alloc_approach_YSM_lvl0 := alloc_approach_YSM_lvl0;
[L311]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L312]               __tmp__sum_approach0 := sum_approach0;
[L313]               __tmp__sum_holders1 := sum_holders1;
[L314]               __tmp__Length := Length;
[L315]               __tmp__now := now;
[L316]               __tmp__totalSupply_YSM := totalSupply_YSM;
[L317]               __tmp__decimals_YSM := decimals_YSM;
[L318]               __tmp__symbol_YSM := symbol_YSM;
[L319]               __tmp__name_YSM := name_YSM;
[L320]               __tmp__approach_YSM := approach_YSM;
[L321]               __tmp__holders_YSM := holders_YSM;
[L322]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1065]  COND FALSE  !(!(__tmp__holders_YSM[this][_from_s315] >= _val_s315))
[L1069]  COND FALSE  !(!(__tmp__approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1073]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] - __tmp__holders_YSM[this][_from_s315];
[L1074]              __tmp__holders_YSM[this][_from_s315] := (__tmp__holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1075]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] + __tmp__holders_YSM[this][_from_s315];
[L1076]              __tmp__sum_approach0[_from_s315] := __tmp__sum_approach0[_from_s315] - __tmp__approach_YSM[this][_from_s315][msgsender_MSG];
[L1077]              __tmp__approach_YSM[this][_from_s315][msgsender_MSG] := (__tmp__approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1078]              __tmp__sum_approach0[_from_s315] := __tmp__sum_approach0[_from_s315] + __tmp__approach_YSM[this][_from_s315][msgsender_MSG];
[L1079]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] - __tmp__holders_YSM[this][_to_s315];
[L1080]              __tmp__holders_YSM[this][_to_s315] := (__tmp__holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1081]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] + __tmp__holders_YSM[this][_to_s315];
[L1082]              __ret_0_ := true;
[L322]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L323]               assume revert || gas < 0;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

Loop:
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && holders_YSM[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND TRUE   __exception
[L305]               __tmp__Balance := Balance;
[L306]               __tmp__DType := DType;
[L307]               __tmp__Alloc := Alloc;
[L308]               __tmp__balance_ADDR := balance_ADDR;
[L309]               __tmp__M_Ref_int := M_Ref_int;
[L310]               __tmp__alloc_approach_YSM_lvl0 := alloc_approach_YSM_lvl0;
[L311]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L312]               __tmp__sum_approach0 := sum_approach0;
[L313]               __tmp__sum_holders1 := sum_holders1;
[L314]               __tmp__Length := Length;
[L315]               __tmp__now := now;
[L316]               __tmp__totalSupply_YSM := totalSupply_YSM;
[L317]               __tmp__decimals_YSM := decimals_YSM;
[L318]               __tmp__symbol_YSM := symbol_YSM;
[L319]               __tmp__name_YSM := name_YSM;
[L320]               __tmp__approach_YSM := approach_YSM;
[L321]               __tmp__holders_YSM := holders_YSM;
[L322]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1065]  COND FALSE  !(!(__tmp__holders_YSM[this][_from_s315] >= _val_s315))
[L1069]  COND FALSE  !(!(__tmp__approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1073]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] - __tmp__holders_YSM[this][_from_s315];
[L1074]              __tmp__holders_YSM[this][_from_s315] := (__tmp__holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1075]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] + __tmp__holders_YSM[this][_from_s315];
[L1076]              __tmp__sum_approach0[_from_s315] := __tmp__sum_approach0[_from_s315] - __tmp__approach_YSM[this][_from_s315][msgsender_MSG];
[L1077]              __tmp__approach_YSM[this][_from_s315][msgsender_MSG] := (__tmp__approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1078]              __tmp__sum_approach0[_from_s315] := __tmp__sum_approach0[_from_s315] + __tmp__approach_YSM[this][_from_s315][msgsender_MSG];
[L1079]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] - __tmp__holders_YSM[this][_to_s315];
[L1080]              __tmp__holders_YSM[this][_to_s315] := (__tmp__holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1081]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] + __tmp__holders_YSM[this][_to_s315];
[L1082]              __ret_0_ := true;
[L322]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L323]               assume revert || gas < 0;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

[2020-11-25 09:47:22,363 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:47:22,363 INFO  L82        PathProgramCache]: Analyzing trace with hash 1535861756, now seen corresponding path program 1 times
[2020-11-25 09:47:22,364 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:47:22,370 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:47:22,391 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:47:22,391 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:47:22,391 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 09:47:22,392 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:47:22,392 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 09:47:22,392 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-11-25 09:47:22,392 INFO  L87              Difference]: Start difference. First operand 1234 states and 1319 transitions. cyclomatic complexity: 89 Second operand 6 states.
[2020-11-25 09:47:22,498 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:47:22,498 INFO  L93              Difference]: Finished difference Result 1604 states and 1786 transitions.
[2020-11-25 09:47:22,498 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 09:47:22,498 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1604 states and 1786 transitions.
[2020-11-25 09:47:22,502 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 09:47:22,505 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1604 states to 1147 states and 1326 transitions.
[2020-11-25 09:47:22,505 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 532
[2020-11-25 09:47:22,506 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 532
[2020-11-25 09:47:22,506 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1147 states and 1326 transitions.
[2020-11-25 09:47:22,507 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:47:22,507 INFO  L728         BuchiCegarLoop]: Abstraction has 1147 states and 1326 transitions.
[2020-11-25 09:47:22,507 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1147 states and 1326 transitions.
[2020-11-25 09:47:22,513 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1147 to 782.
[2020-11-25 09:47:22,513 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 782 states.
[2020-11-25 09:47:22,514 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 782 states to 782 states and 839 transitions.
[2020-11-25 09:47:22,514 INFO  L751         BuchiCegarLoop]: Abstraction has 782 states and 839 transitions.
[2020-11-25 09:47:22,514 INFO  L631         BuchiCegarLoop]: Abstraction has 782 states and 839 transitions.
[2020-11-25 09:47:22,514 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 09:47:22,514 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 782 states and 839 transitions.
[2020-11-25 09:47:22,515 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:47:22,516 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:47:22,516 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:47:22,516 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:47:22,516 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YSM0 := false;
[L3]                 call_transferFrom_YSM0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == YSM;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_YSM[this] := 0;
[L952]               decimals_YSM[this] := 0;
[L953]               symbol_YSM[this] := -339949848;
[L954]               name_YSM[this] := -339949848;
[L955]               approach_YSM[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_YSM[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_YSM[this] := 488267391;
[L961]               symbol_YSM[this] := 774884429;
[L962]               decimals_YSM[this] := 18;
[L963]               __var_1 := decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_YSM[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_YSM[this][msgsender_MSG];
[L966]               holders_YSM[this][msgsender_MSG] := totalSupply_YSM[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_YSM[this][msgsender_MSG];
[L990]   RET         call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND FALSE  !(choice == 8)
[L1709]  COND FALSE  !(choice == 7)
[L1715]  COND FALSE  !(choice == 6)
[L1721]  COND TRUE   choice == 5
[L1722]              gas := gas - 21000;
[L1723]  COND TRUE   gas >= 0
[L1724]              assume _val_s352 >= 0 && _val_s352 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1725]              assume msgvalue_MSG == 0;
[L1726]  CALL        call __ret_0_approve := approve~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L354]               havoc __exception;
[L355]               revert := false;
[L356]   COND FALSE  !(__exception)
[L377]   CALL        call __ret_0_ := approve~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1128]  COND FALSE  !(!(holders_YSM[this][msgsender_MSG] >= _val_s352))
[L1132]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] - approach_YSM[this][msgsender_MSG][_spender_s352];
[L1133]              approach_YSM[this][msgsender_MSG][_spender_s352] := _val_s352;
[L1134]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] + approach_YSM[this][msgsender_MSG][_spender_s352];
[L1135]              assert { :EventEmitted "Approval_YSM" } true;
[L1136]              __ret_0_ := true;
[L377]   RET         call __ret_0_ := approve~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L378]               assume !revert && gas >= 0;
[L1726]  RET         call __ret_0_approve := approve~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1770]  RET         call CorralChoice_YSM(this);
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && holders_YSM[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_YSM[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_YSM[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_from_s315];
[L1098]              holders_YSM[this][_from_s315] := (holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_from_s315];
[L1100]              assert _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_YSM[this][_from_s315][msgsender_MSG];
[L1102]              approach_YSM[this][_from_s315][msgsender_MSG] := (approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_YSM[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_to_s315];
[L1105]              holders_YSM[this][_to_s315] := (holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_to_s315];
[L1107]              assert holders_YSM[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_YSM" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && holders_YSM[this][_from_s315] == old(holders_YSM[this][_from_s315]) - _val_s315) && holders_YSM[this][_to_s315] == old(holders_YSM[this][_to_s315]) + _val_s315) && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this][p1] == old(holders_YSM[this][p1])) && approach_YSM[this][p2][p3] == old(approach_YSM[this][p2][p3])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

Loop:
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND FALSE  !(gas >= 0)
[L1770]  RET         call CorralChoice_YSM(this);

[2020-11-25 09:47:22,519 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:47:22,519 INFO  L82        PathProgramCache]: Analyzing trace with hash -1319105706, now seen corresponding path program 1 times
[2020-11-25 09:47:22,519 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:47:22,563 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:47:23,456 WARN  L188               SmtUtils]: Spent 108.00 ms on a formula simplification. DAG size of input: 120 DAG size of output: 83
[2020-11-25 09:47:23,609 WARN  L188               SmtUtils]: Spent 103.00 ms on a formula simplification. DAG size of input: 121 DAG size of output: 84
[2020-11-25 09:47:23,927 INFO  L134       CoverageAnalysis]: Checked inductivity of 35 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 34 trivial. 0 not checked.
[2020-11-25 09:47:23,928 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:47:23,928 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-11-25 09:47:23,928 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:47:23,928 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 09:47:23,928 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=73, Invalid=629, Unknown=0, NotChecked=0, Total=702
[2020-11-25 09:47:23,929 INFO  L87              Difference]: Start difference. First operand 782 states and 839 transitions. cyclomatic complexity: 60 Second operand 27 states.
[2020-11-25 09:47:25,268 WARN  L188               SmtUtils]: Spent 175.00 ms on a formula simplification. DAG size of input: 105 DAG size of output: 94
[2020-11-25 09:47:26,960 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:47:26,961 INFO  L93              Difference]: Finished difference Result 911 states and 1012 transitions.
[2020-11-25 09:47:26,961 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-11-25 09:47:26,961 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 911 states and 1012 transitions.
[2020-11-25 09:47:26,963 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:47:26,965 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 911 states to 911 states and 1012 transitions.
[2020-11-25 09:47:26,965 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 465
[2020-11-25 09:47:26,965 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 465
[2020-11-25 09:47:26,965 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 911 states and 1012 transitions.
[2020-11-25 09:47:26,966 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:47:26,966 INFO  L728         BuchiCegarLoop]: Abstraction has 911 states and 1012 transitions.
[2020-11-25 09:47:26,967 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 911 states and 1012 transitions.
[2020-11-25 09:47:26,973 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 911 to 889.
[2020-11-25 09:47:26,973 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 889 states.
[2020-11-25 09:47:26,974 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 889 states to 889 states and 988 transitions.
[2020-11-25 09:47:26,974 INFO  L751         BuchiCegarLoop]: Abstraction has 889 states and 988 transitions.
[2020-11-25 09:47:26,974 INFO  L631         BuchiCegarLoop]: Abstraction has 889 states and 988 transitions.
[2020-11-25 09:47:26,974 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 09:47:26,974 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 889 states and 988 transitions.
[2020-11-25 09:47:26,976 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:47:26,976 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:47:26,976 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:47:26,977 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:47:26,977 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YSM0 := false;
[L3]                 call_transferFrom_YSM0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == YSM;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_YSM[this] := 0;
[L952]               decimals_YSM[this] := 0;
[L953]               symbol_YSM[this] := -339949848;
[L954]               name_YSM[this] := -339949848;
[L955]               approach_YSM[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_YSM[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_YSM[this] := 488267391;
[L961]               symbol_YSM[this] := 774884429;
[L962]               decimals_YSM[this] := 18;
[L963]               __var_1 := decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_YSM[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_YSM[this][msgsender_MSG];
[L966]               holders_YSM[this][msgsender_MSG] := totalSupply_YSM[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_YSM[this][msgsender_MSG];
[L990]   RET         call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND TRUE   choice == 8
[L1703]              gas := gas - 21000;
[L1704]  COND TRUE   gas >= 0
[L1705]              assume _val_s213 >= 0 && _val_s213 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1706]              assume msgvalue_MSG == 0;
[L1707]  CALL        call __ret_0_transfer := transfer~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L248]               havoc __exception;
[L249]               revert := false;
[L250]   COND FALSE  !(__exception)
[L271]   CALL        call __ret_0_ := transfer~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1042]  COND FALSE  !(!(holders_YSM[this][msgsender_MSG] >= _val_s213))
[L1046]  COND FALSE  !(!(msgsender_MSG != _to_s213))
[L1050]              assert _val_s213 <= holders_YSM[this][msgsender_MSG];
[L1051]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][msgsender_MSG];
[L1052]              holders_YSM[this][msgsender_MSG] := (holders_YSM[this][msgsender_MSG] - _val_s213) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1053]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][msgsender_MSG];
[L1054]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_to_s213];
[L1055]              holders_YSM[this][_to_s213] := (holders_YSM[this][_to_s213] + _val_s213) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1056]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_to_s213];
[L1057]              assert holders_YSM[this][_to_s213] >= _val_s213;
[L1058]              assert { :EventEmitted "Transfer_YSM" } true;
[L1059]              __ret_0_ := true;
[L271]   RET         call __ret_0_ := transfer~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L272]               assume !revert && gas >= 0;
[L1707]  RET         call __ret_0_transfer := transfer~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _to_s213, _val_s213);
[L1770]  RET         call CorralChoice_YSM(this);
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && holders_YSM[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_YSM[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_YSM[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_from_s315];
[L1098]              holders_YSM[this][_from_s315] := (holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_from_s315];
[L1100]              assert _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_YSM[this][_from_s315][msgsender_MSG];
[L1102]              approach_YSM[this][_from_s315][msgsender_MSG] := (approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_YSM[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_to_s315];
[L1105]              holders_YSM[this][_to_s315] := (holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_to_s315];
[L1107]              assert holders_YSM[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_YSM" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && holders_YSM[this][_from_s315] == old(holders_YSM[this][_from_s315]) - _val_s315) && holders_YSM[this][_to_s315] == old(holders_YSM[this][_to_s315]) + _val_s315) && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this][p1] == old(holders_YSM[this][p1])) && approach_YSM[this][p2][p3] == old(approach_YSM[this][p2][p3])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

Loop:
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND FALSE  !(gas >= 0)
[L1770]  RET         call CorralChoice_YSM(this);

[2020-11-25 09:47:26,981 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:47:26,981 INFO  L82        PathProgramCache]: Analyzing trace with hash 2085276714, now seen corresponding path program 1 times
[2020-11-25 09:47:26,982 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:47:27,032 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:47:27,959 INFO  L134       CoverageAnalysis]: Checked inductivity of 35 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 34 trivial. 0 not checked.
[2020-11-25 09:47:27,960 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:47:27,960 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [29] total 29
[2020-11-25 09:47:27,961 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:47:27,961 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 30 interpolants.
[2020-11-25 09:47:27,961 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=92, Invalid=778, Unknown=0, NotChecked=0, Total=870
[2020-11-25 09:47:27,961 INFO  L87              Difference]: Start difference. First operand 889 states and 988 transitions. cyclomatic complexity: 105 Second operand 30 states.
[2020-11-25 09:47:30,286 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:47:30,286 INFO  L93              Difference]: Finished difference Result 1141 states and 1328 transitions.
[2020-11-25 09:47:30,287 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 34 states. 
[2020-11-25 09:47:30,287 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1141 states and 1328 transitions.
[2020-11-25 09:47:30,290 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:47:30,292 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1141 states to 1141 states and 1328 transitions.
[2020-11-25 09:47:30,292 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 682
[2020-11-25 09:47:30,293 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 682
[2020-11-25 09:47:30,293 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1141 states and 1328 transitions.
[2020-11-25 09:47:30,294 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:47:30,294 INFO  L728         BuchiCegarLoop]: Abstraction has 1141 states and 1328 transitions.
[2020-11-25 09:47:30,294 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1141 states and 1328 transitions.
[2020-11-25 09:47:30,299 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1141 to 887.
[2020-11-25 09:47:30,299 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 887 states.
[2020-11-25 09:47:30,300 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 887 states to 887 states and 983 transitions.
[2020-11-25 09:47:30,300 INFO  L751         BuchiCegarLoop]: Abstraction has 887 states and 983 transitions.
[2020-11-25 09:47:30,300 INFO  L631         BuchiCegarLoop]: Abstraction has 887 states and 983 transitions.
[2020-11-25 09:47:30,300 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 09:47:30,300 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 887 states and 983 transitions.
[2020-11-25 09:47:30,302 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:47:30,302 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:47:30,302 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:47:30,302 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:47:30,303 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YSM0 := false;
[L3]                 call_transferFrom_YSM0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == YSM;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_YSM[this] := 0;
[L952]               decimals_YSM[this] := 0;
[L953]               symbol_YSM[this] := -339949848;
[L954]               name_YSM[this] := -339949848;
[L955]               approach_YSM[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_YSM[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_YSM[this] := 488267391;
[L961]               symbol_YSM[this] := 774884429;
[L962]               decimals_YSM[this] := 18;
[L963]               __var_1 := decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_YSM[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_YSM[this][msgsender_MSG];
[L966]               holders_YSM[this][msgsender_MSG] := totalSupply_YSM[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_YSM[this][msgsender_MSG];
[L990]   RET         call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && holders_YSM[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_YSM[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_YSM[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_from_s315];
[L1098]              holders_YSM[this][_from_s315] := (holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_from_s315];
[L1100]              assert _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_YSM[this][_from_s315][msgsender_MSG];
[L1102]              approach_YSM[this][_from_s315][msgsender_MSG] := (approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_YSM[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_to_s315];
[L1105]              holders_YSM[this][_to_s315] := (holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_to_s315];
[L1107]              assert holders_YSM[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_YSM" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && holders_YSM[this][_from_s315] == old(holders_YSM[this][_from_s315]) - _val_s315) && holders_YSM[this][_to_s315] == old(holders_YSM[this][_to_s315]) + _val_s315) && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this][p1] == old(holders_YSM[this][p1])) && approach_YSM[this][p2][p3] == old(approach_YSM[this][p2][p3])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && holders_YSM[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_YSM[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_YSM[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_from_s315];
[L1098]              holders_YSM[this][_from_s315] := (holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_from_s315];
[L1100]              assert _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_YSM[this][_from_s315][msgsender_MSG];
[L1102]              approach_YSM[this][_from_s315][msgsender_MSG] := (approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_YSM[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_to_s315];
[L1105]              holders_YSM[this][_to_s315] := (holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_to_s315];
[L1107]              assert holders_YSM[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_YSM" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && holders_YSM[this][_from_s315] == old(holders_YSM[this][_from_s315]) - _val_s315) && holders_YSM[this][_to_s315] == old(holders_YSM[this][_to_s315]) + _val_s315) && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this][p1] == old(holders_YSM[this][p1])) && approach_YSM[this][p2][p3] == old(approach_YSM[this][p2][p3])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

Loop:
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND FALSE  !(gas >= 0)
[L1770]  RET         call CorralChoice_YSM(this);

[2020-11-25 09:47:30,305 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:47:30,305 INFO  L82        PathProgramCache]: Analyzing trace with hash -1939269992, now seen corresponding path program 1 times
[2020-11-25 09:47:30,306 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:47:30,396 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:47:31,615 WARN  L188               SmtUtils]: Spent 381.00 ms on a formula simplification. DAG size of input: 218 DAG size of output: 78
[2020-11-25 09:47:31,881 WARN  L188               SmtUtils]: Spent 218.00 ms on a formula simplification. DAG size of input: 179 DAG size of output: 85
[2020-11-25 09:47:32,139 WARN  L188               SmtUtils]: Spent 224.00 ms on a formula simplification. DAG size of input: 182 DAG size of output: 88
[2020-11-25 09:47:32,542 WARN  L188               SmtUtils]: Spent 351.00 ms on a formula simplification. DAG size of input: 281 DAG size of output: 97
[2020-11-25 09:47:32,693 WARN  L188               SmtUtils]: Spent 101.00 ms on a formula simplification. DAG size of input: 273 DAG size of output: 61
[2020-11-25 09:47:33,624 INFO  L134       CoverageAnalysis]: Checked inductivity of 44 backedges. 0 proven. 44 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:47:33,624 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:47:33,624 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [38] total 38
[2020-11-25 09:47:33,625 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:47:33,625 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 39 interpolants.
[2020-11-25 09:47:33,625 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=140, Invalid=1342, Unknown=0, NotChecked=0, Total=1482
[2020-11-25 09:47:33,625 INFO  L87              Difference]: Start difference. First operand 887 states and 983 transitions. cyclomatic complexity: 102 Second operand 39 states.
[2020-11-25 09:47:35,483 WARN  L188               SmtUtils]: Spent 128.00 ms on a formula simplification. DAG size of input: 120 DAG size of output: 101
[2020-11-25 09:47:37,610 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:47:37,610 INFO  L93              Difference]: Finished difference Result 1031 states and 1179 transitions.
[2020-11-25 09:47:37,610 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 34 states. 
[2020-11-25 09:47:37,610 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1031 states and 1179 transitions.
[2020-11-25 09:47:37,612 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 09:47:37,614 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1031 states to 1031 states and 1179 transitions.
[2020-11-25 09:47:37,614 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 570
[2020-11-25 09:47:37,615 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 570
[2020-11-25 09:47:37,615 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1031 states and 1179 transitions.
[2020-11-25 09:47:37,615 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:47:37,615 INFO  L728         BuchiCegarLoop]: Abstraction has 1031 states and 1179 transitions.
[2020-11-25 09:47:37,616 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1031 states and 1179 transitions.
[2020-11-25 09:47:37,621 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1031 to 999.
[2020-11-25 09:47:37,621 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 999 states.
[2020-11-25 09:47:37,622 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 999 states to 999 states and 1142 transitions.
[2020-11-25 09:47:37,622 INFO  L751         BuchiCegarLoop]: Abstraction has 999 states and 1142 transitions.
[2020-11-25 09:47:37,622 INFO  L631         BuchiCegarLoop]: Abstraction has 999 states and 1142 transitions.
[2020-11-25 09:47:37,622 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 09:47:37,622 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 999 states and 1142 transitions.
[2020-11-25 09:47:37,623 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 09:47:37,623 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:47:37,623 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:47:37,624 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:47:37,624 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YSM0 := false;
[L3]                 call_transferFrom_YSM0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == YSM;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_YSM[this] := 0;
[L952]               decimals_YSM[this] := 0;
[L953]               symbol_YSM[this] := -339949848;
[L954]               name_YSM[this] := -339949848;
[L955]               approach_YSM[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_YSM[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_YSM[this] := 488267391;
[L961]               symbol_YSM[this] := 774884429;
[L962]               decimals_YSM[this] := 18;
[L963]               __var_1 := decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_YSM[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_YSM[this][msgsender_MSG];
[L966]               holders_YSM[this][msgsender_MSG] := totalSupply_YSM[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_YSM[this][msgsender_MSG];
[L990]   RET         call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && holders_YSM[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_YSM[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_YSM[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_from_s315];
[L1098]              holders_YSM[this][_from_s315] := (holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_from_s315];
[L1100]              assert _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_YSM[this][_from_s315][msgsender_MSG];
[L1102]              approach_YSM[this][_from_s315][msgsender_MSG] := (approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_YSM[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_to_s315];
[L1105]              holders_YSM[this][_to_s315] := (holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_to_s315];
[L1107]              assert holders_YSM[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_YSM" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume ((((((((__ret_0_ == true && holders_YSM[this][_from_s315] == old(holders_YSM[this][_from_s315]) - _val_s315) && holders_YSM[this][_to_s315] == old(holders_YSM[this][_to_s315]) + _val_s315) && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this][p1] == old(holders_YSM[this][p1])) && approach_YSM[this][p2][p3] == old(approach_YSM[this][p2][p3])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]);
[L3]                 success_transferFrom_YSM0 := true;
[L3]                 success_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && holders_YSM[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_YSM[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_YSM[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_from_s315];
[L1098]              holders_YSM[this][_from_s315] := (holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_from_s315];
[L1100]              assert _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_YSM[this][_from_s315][msgsender_MSG];
[L1102]              approach_YSM[this][_from_s315][msgsender_MSG] := (approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_YSM[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_to_s315];
[L1105]              holders_YSM[this][_to_s315] := (holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_to_s315];
[L1107]              assert holders_YSM[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_YSM" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && holders_YSM[this][_from_s315] == old(holders_YSM[this][_from_s315]) - _val_s315) && holders_YSM[this][_to_s315] == old(holders_YSM[this][_to_s315]) + _val_s315) && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this][p1] == old(holders_YSM[this][p1])) && approach_YSM[this][p2][p3] == old(approach_YSM[this][p2][p3])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

Loop:
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND FALSE  !(gas >= 0)
[L1770]  RET         call CorralChoice_YSM(this);

[2020-11-25 09:47:37,626 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:47:37,626 INFO  L82        PathProgramCache]: Analyzing trace with hash 351882999, now seen corresponding path program 1 times
[2020-11-25 09:47:37,627 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:47:37,676 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:47:38,178 WARN  L188               SmtUtils]: Spent 122.00 ms on a formula simplification. DAG size of input: 200 DAG size of output: 54
[2020-11-25 09:47:38,878 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:47:39,423 WARN  L188               SmtUtils]: Spent 201.00 ms on a formula simplification. DAG size of input: 195 DAG size of output: 99
[2020-11-25 09:47:39,623 WARN  L188               SmtUtils]: Spent 103.00 ms on a formula simplification. DAG size of input: 162 DAG size of output: 66
[2020-11-25 09:47:39,981 INFO  L134       CoverageAnalysis]: Checked inductivity of 44 backedges. 0 proven. 10 refuted. 0 times theorem prover too weak. 34 trivial. 0 not checked.
[2020-11-25 09:47:39,981 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:47:39,981 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [34] total 34
[2020-11-25 09:47:39,981 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:47:39,982 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 35 interpolants.
[2020-11-25 09:47:39,982 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=107, Invalid=1083, Unknown=0, NotChecked=0, Total=1190
[2020-11-25 09:47:39,982 INFO  L87              Difference]: Start difference. First operand 999 states and 1142 transitions. cyclomatic complexity: 152 Second operand 35 states.
[2020-11-25 09:47:41,247 WARN  L188               SmtUtils]: Spent 184.00 ms on a formula simplification. DAG size of input: 126 DAG size of output: 114
[2020-11-25 09:47:41,497 WARN  L188               SmtUtils]: Spent 168.00 ms on a formula simplification. DAG size of input: 131 DAG size of output: 117
[2020-11-25 09:47:42,680 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:47:42,680 INFO  L93              Difference]: Finished difference Result 1131 states and 1323 transitions.
[2020-11-25 09:47:42,680 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 29 states. 
[2020-11-25 09:47:42,680 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1131 states and 1323 transitions.
[2020-11-25 09:47:42,683 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:47:42,686 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1131 states to 1131 states and 1323 transitions.
[2020-11-25 09:47:42,686 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 669
[2020-11-25 09:47:42,686 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 669
[2020-11-25 09:47:42,686 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1131 states and 1323 transitions.
[2020-11-25 09:47:42,687 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:47:42,687 INFO  L728         BuchiCegarLoop]: Abstraction has 1131 states and 1323 transitions.
[2020-11-25 09:47:42,687 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1131 states and 1323 transitions.
[2020-11-25 09:47:42,693 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1131 to 1001.
[2020-11-25 09:47:42,693 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1001 states.
[2020-11-25 09:47:42,694 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1001 states to 1001 states and 1148 transitions.
[2020-11-25 09:47:42,694 INFO  L751         BuchiCegarLoop]: Abstraction has 1001 states and 1148 transitions.
[2020-11-25 09:47:42,694 INFO  L631         BuchiCegarLoop]: Abstraction has 1001 states and 1148 transitions.
[2020-11-25 09:47:42,694 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 09:47:42,694 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1001 states and 1148 transitions.
[2020-11-25 09:47:42,695 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 09:47:42,696 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:47:42,696 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:47:42,696 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:47:42,696 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YSM0 := false;
[L3]                 call_transferFrom_YSM0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == YSM;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_YSM[this] := 0;
[L952]               decimals_YSM[this] := 0;
[L953]               symbol_YSM[this] := -339949848;
[L954]               name_YSM[this] := -339949848;
[L955]               approach_YSM[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_YSM[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_YSM[this] := 488267391;
[L961]               symbol_YSM[this] := 774884429;
[L962]               decimals_YSM[this] := 18;
[L963]               __var_1 := decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_YSM[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_YSM[this][msgsender_MSG];
[L966]               holders_YSM[this][msgsender_MSG] := totalSupply_YSM[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_YSM[this][msgsender_MSG];
[L990]   RET         call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && holders_YSM[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_YSM[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_YSM[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_from_s315];
[L1098]              holders_YSM[this][_from_s315] := (holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_from_s315];
[L1100]              assert _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_YSM[this][_from_s315][msgsender_MSG];
[L1102]              approach_YSM[this][_from_s315][msgsender_MSG] := (approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_YSM[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_to_s315];
[L1105]              holders_YSM[this][_to_s315] := (holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_to_s315];
[L1107]              assert holders_YSM[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_YSM" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && holders_YSM[this][_from_s315] == old(holders_YSM[this][_from_s315]) - _val_s315) && holders_YSM[this][_to_s315] == old(holders_YSM[this][_to_s315]) + _val_s315) && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this][p1] == old(holders_YSM[this][p1])) && approach_YSM[this][p2][p3] == old(approach_YSM[this][p2][p3])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && holders_YSM[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_YSM[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_YSM[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_from_s315];
[L1098]              holders_YSM[this][_from_s315] := (holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_from_s315];
[L1100]              assert _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_YSM[this][_from_s315][msgsender_MSG];
[L1102]              approach_YSM[this][_from_s315][msgsender_MSG] := (approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_YSM[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_to_s315];
[L1105]              holders_YSM[this][_to_s315] := (holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_to_s315];
[L1107]              assert holders_YSM[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_YSM" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && holders_YSM[this][_from_s315] == old(holders_YSM[this][_from_s315]) - _val_s315) && holders_YSM[this][_to_s315] == old(holders_YSM[this][_to_s315]) + _val_s315) && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this][p1] == old(holders_YSM[this][p1])) && approach_YSM[this][p2][p3] == old(approach_YSM[this][p2][p3])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && holders_YSM[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_YSM[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_YSM[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_from_s315];
[L1098]              holders_YSM[this][_from_s315] := (holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_from_s315];
[L1100]              assert _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_YSM[this][_from_s315][msgsender_MSG];
[L1102]              approach_YSM[this][_from_s315][msgsender_MSG] := (approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_YSM[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_to_s315];
[L1105]              holders_YSM[this][_to_s315] := (holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_to_s315];
[L1107]              assert holders_YSM[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_YSM" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && holders_YSM[this][_from_s315] == old(holders_YSM[this][_from_s315]) - _val_s315) && holders_YSM[this][_to_s315] == old(holders_YSM[this][_to_s315]) + _val_s315) && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this][p1] == old(holders_YSM[this][p1])) && approach_YSM[this][p2][p3] == old(approach_YSM[this][p2][p3])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

Loop:
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND FALSE  !(gas >= 0)
[L1770]  RET         call CorralChoice_YSM(this);

[2020-11-25 09:47:42,699 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:47:42,699 INFO  L82        PathProgramCache]: Analyzing trace with hash 578496600, now seen corresponding path program 2 times
[2020-11-25 09:47:42,699 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:47:42,875 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:47:45,484 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:47:45,544 WARN  L188               SmtUtils]: Spent 199.00 ms on a formula simplification. DAG size of input: 258 DAG size of output: 75
[2020-11-25 09:47:46,025 WARN  L188               SmtUtils]: Spent 177.00 ms on a formula simplification. DAG size of input: 264 DAG size of output: 54
[2020-11-25 09:47:46,355 WARN  L188               SmtUtils]: Spent 248.00 ms on a formula simplification. DAG size of input: 267 DAG size of output: 57
[2020-11-25 09:47:47,064 WARN  L188               SmtUtils]: Spent 450.00 ms on a formula simplification. DAG size of input: 435 DAG size of output: 55
[2020-11-25 09:47:47,568 WARN  L188               SmtUtils]: Spent 409.00 ms on a formula simplification. DAG size of input: 504 DAG size of output: 62
[2020-11-25 09:47:48,021 WARN  L188               SmtUtils]: Spent 351.00 ms on a formula simplification. DAG size of input: 460 DAG size of output: 65
[2020-11-25 09:47:48,531 WARN  L188               SmtUtils]: Spent 406.00 ms on a formula simplification. DAG size of input: 461 DAG size of output: 67
[2020-11-25 09:47:57,948 WARN  L188               SmtUtils]: Spent 8.97 s on a formula simplification. DAG size of input: 1533 DAG size of output: 138
[2020-11-25 09:48:03,384 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:48:03,538 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:48:03,972 WARN  L188               SmtUtils]: Spent 4.38 s on a formula simplification. DAG size of input: 1695 DAG size of output: 128
[2020-11-25 09:48:05,905 WARN  L188               SmtUtils]: Spent 954.00 ms on a formula simplification. DAG size of input: 772 DAG size of output: 48
[2020-11-25 09:48:07,005 WARN  L188               SmtUtils]: Spent 122.00 ms on a formula simplification. DAG size of input: 176 DAG size of output: 57
[2020-11-25 09:48:07,707 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:48:10,730 WARN  L188               SmtUtils]: Spent 3.19 s on a formula simplification. DAG size of input: 626 DAG size of output: 177
[2020-11-25 09:48:12,352 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:48:15,072 WARN  L188               SmtUtils]: Spent 2.96 s on a formula simplification. DAG size of input: 746 DAG size of output: 151
[2020-11-25 09:48:16,406 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:48:16,766 WARN  L188               SmtUtils]: Spent 782.00 ms on a formula simplification. DAG size of input: 577 DAG size of output: 65
[2020-11-25 09:48:17,660 INFO  L134       CoverageAnalysis]: Checked inductivity of 168 backedges. 2 proven. 123 refuted. 0 times theorem prover too weak. 43 trivial. 0 not checked.
[2020-11-25 09:48:17,661 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:48:17,661 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [45] total 45
[2020-11-25 09:48:17,661 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:48:17,661 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 45 interpolants.
[2020-11-25 09:48:17,661 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=164, Invalid=1816, Unknown=0, NotChecked=0, Total=1980
[2020-11-25 09:48:17,662 INFO  L87              Difference]: Start difference. First operand 1001 states and 1148 transitions. cyclomatic complexity: 157 Second operand 45 states.
[2020-11-25 09:48:21,566 WARN  L188               SmtUtils]: Spent 568.00 ms on a formula simplification. DAG size of input: 252 DAG size of output: 141
[2020-11-25 09:48:21,938 WARN  L188               SmtUtils]: Spent 250.00 ms on a formula simplification. DAG size of input: 171 DAG size of output: 114
[2020-11-25 09:48:23,394 WARN  L188               SmtUtils]: Spent 1.17 s on a formula simplification. DAG size of input: 344 DAG size of output: 136
[2020-11-25 09:48:23,771 WARN  L188               SmtUtils]: Spent 279.00 ms on a formula simplification. DAG size of input: 222 DAG size of output: 115
[2020-11-25 09:48:27,524 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:48:27,524 INFO  L93              Difference]: Finished difference Result 1349 states and 1646 transitions.
[2020-11-25 09:48:27,524 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-11-25 09:48:27,524 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1349 states and 1646 transitions.
[2020-11-25 09:48:27,527 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 09:48:27,530 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1349 states to 1349 states and 1646 transitions.
[2020-11-25 09:48:27,530 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 876
[2020-11-25 09:48:27,530 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 876
[2020-11-25 09:48:27,530 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1349 states and 1646 transitions.
[2020-11-25 09:48:27,531 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:48:27,532 INFO  L728         BuchiCegarLoop]: Abstraction has 1349 states and 1646 transitions.
[2020-11-25 09:48:27,532 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1349 states and 1646 transitions.
[2020-11-25 09:48:27,539 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1349 to 1312.
[2020-11-25 09:48:27,540 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1312 states.
[2020-11-25 09:48:27,541 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1312 states to 1312 states and 1599 transitions.
[2020-11-25 09:48:27,541 INFO  L751         BuchiCegarLoop]: Abstraction has 1312 states and 1599 transitions.
[2020-11-25 09:48:27,541 INFO  L631         BuchiCegarLoop]: Abstraction has 1312 states and 1599 transitions.
[2020-11-25 09:48:27,541 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 09:48:27,541 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1312 states and 1599 transitions.
[2020-11-25 09:48:27,543 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 09:48:27,543 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:48:27,543 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:48:27,543 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:48:27,544 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_YSM0 := false;
[L3]                 call_transferFrom_YSM0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == YSM;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_YSM[this] := 0;
[L952]               decimals_YSM[this] := 0;
[L953]               symbol_YSM[this] := -339949848;
[L954]               name_YSM[this] := -339949848;
[L955]               approach_YSM[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_YSM[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_YSM[this] := 488267391;
[L961]               symbol_YSM[this] := 774884429;
[L962]               decimals_YSM[this] := 18;
[L963]               __var_1 := decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_YSM[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_YSM[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_YSM[this][msgsender_MSG];
[L966]               holders_YSM[this][msgsender_MSG] := totalSupply_YSM[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_YSM[this][msgsender_MSG];
[L990]   RET         call YSM_YSM_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call YSM_YSM__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call YSM_YSM(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && holders_YSM[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_YSM[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_YSM[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_from_s315];
[L1098]              holders_YSM[this][_from_s315] := (holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_from_s315];
[L1100]              assert _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_YSM[this][_from_s315][msgsender_MSG];
[L1102]              approach_YSM[this][_from_s315][msgsender_MSG] := (approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_YSM[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_to_s315];
[L1105]              holders_YSM[this][_to_s315] := (holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_to_s315];
[L1107]              assert holders_YSM[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_YSM" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume ((((((((__ret_0_ == true && holders_YSM[this][_from_s315] == old(holders_YSM[this][_from_s315]) - _val_s315) && holders_YSM[this][_to_s315] == old(holders_YSM[this][_to_s315]) + _val_s315) && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this][p1] == old(holders_YSM[this][p1])) && approach_YSM[this][p2][p3] == old(approach_YSM[this][p2][p3])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]);
[L3]                 success_transferFrom_YSM0 := true;
[L3]                 success_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND FALSE  !(choice == 8)
[L1709]  COND FALSE  !(choice == 7)
[L1715]  COND FALSE  !(choice == 6)
[L1721]  COND TRUE   choice == 5
[L1722]              gas := gas - 21000;
[L1723]  COND TRUE   gas >= 0
[L1724]              assume _val_s352 >= 0 && _val_s352 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1725]              assume msgvalue_MSG == 0;
[L1726]  CALL        call __ret_0_approve := approve~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L354]               havoc __exception;
[L355]               revert := false;
[L356]   COND FALSE  !(__exception)
[L377]   CALL        call __ret_0_ := approve~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1128]  COND FALSE  !(!(holders_YSM[this][msgsender_MSG] >= _val_s352))
[L1132]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] - approach_YSM[this][msgsender_MSG][_spender_s352];
[L1133]              approach_YSM[this][msgsender_MSG][_spender_s352] := _val_s352;
[L1134]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] + approach_YSM[this][msgsender_MSG][_spender_s352];
[L1135]              assert { :EventEmitted "Approval_YSM" } true;
[L1136]              __ret_0_ := true;
[L377]   RET         call __ret_0_ := approve~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L378]               assume !revert && gas >= 0;
[L1726]  RET         call __ret_0_approve := approve~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1770]  RET         call CorralChoice_YSM(this);
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_YSM[this][_from_s315]) && _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG]) && holders_YSM[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_to_s315] >= 0) && holders_YSM[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_YSM[this][_from_s315] >= 0) && holders_YSM[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_YSM[this][_from_s315][msgsender_MSG] >= 0) && approach_YSM[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_YSM0 := true;
[L3]                 call_transferFrom_YSM0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_YSM[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_YSM[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_YSM[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_from_s315];
[L1098]              holders_YSM[this][_from_s315] := (holders_YSM[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_from_s315];
[L1100]              assert _val_s315 <= approach_YSM[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_YSM[this][_from_s315][msgsender_MSG];
[L1102]              approach_YSM[this][_from_s315][msgsender_MSG] := (approach_YSM[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_YSM[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_YSM[this][_to_s315];
[L1105]              holders_YSM[this][_to_s315] := (holders_YSM[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_YSM[this][_to_s315];
[L1107]              assert holders_YSM[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_YSM" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && holders_YSM[this][_from_s315] == old(holders_YSM[this][_from_s315]) - _val_s315) && holders_YSM[this][_to_s315] == old(holders_YSM[this][_to_s315]) + _val_s315) && approach_YSM[this][_from_s315][msgsender_MSG] == old(approach_YSM[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_YSM[this] == old(totalSupply_YSM[this])) && holders_YSM[this][p1] == old(holders_YSM[this][p1])) && approach_YSM[this][p2][p3] == old(approach_YSM[this][p2][p3])) && decimals_YSM[this] == old(decimals_YSM[this])) && symbol_YSM[this] == old(symbol_YSM[this])) && name_YSM[this] == old(name_YSM[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_YSM(this);

Loop:
[L1770]  CALL        call CorralChoice_YSM(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != YSM;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND FALSE  !(choice == 8)
[L1709]  COND FALSE  !(choice == 7)
[L1715]  COND FALSE  !(choice == 6)
[L1721]  COND TRUE   choice == 5
[L1722]              gas := gas - 21000;
[L1723]  COND TRUE   gas >= 0
[L1724]              assume _val_s352 >= 0 && _val_s352 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1725]              assume msgvalue_MSG == 0;
[L1726]  CALL        call __ret_0_approve := approve~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L354]               havoc __exception;
[L355]               revert := false;
[L356]   COND FALSE  !(__exception)
[L377]   CALL        call __ret_0_ := approve~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1128]  COND FALSE  !(!(holders_YSM[this][msgsender_MSG] >= _val_s352))
[L1132]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] - approach_YSM[this][msgsender_MSG][_spender_s352];
[L1133]              approach_YSM[this][msgsender_MSG][_spender_s352] := _val_s352;
[L1134]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] + approach_YSM[this][msgsender_MSG][_spender_s352];
[L1135]              assert { :EventEmitted "Approval_YSM" } true;
[L1136]              __ret_0_ := true;
[L377]   RET         call __ret_0_ := approve~address~uint256_YSM__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L378]               assume !revert && gas >= 0;
[L1726]  RET         call __ret_0_approve := approve~address~uint256_YSM(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1770]  RET         call CorralChoice_YSM(this);

[2020-11-25 09:48:27,546 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:48:27,546 INFO  L82        PathProgramCache]: Analyzing trace with hash 1251955125, now seen corresponding path program 1 times
[2020-11-25 09:48:27,547 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:48:27,634 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:48:27,808 INFO  L134       CoverageAnalysis]: Checked inductivity of 117 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 113 trivial. 0 not checked.
[2020-11-25 09:48:27,808 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:48:27,808 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 09:48:27,808 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:48:27,808 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 09:48:27,808 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-11-25 09:48:27,808 INFO  L87              Difference]: Start difference. First operand 1312 states and 1599 transitions. cyclomatic complexity: 304 Second operand 12 states.
[2020-11-25 09:48:28,418 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:48:28,418 INFO  L93              Difference]: Finished difference Result 495 states and 580 transitions.
[2020-11-25 09:48:28,418 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 09:48:28,418 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 495 states and 580 transitions.
[2020-11-25 09:48:28,419 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:48:28,420 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 495 states to 0 states and 0 transitions.
[2020-11-25 09:48:28,420 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 09:48:28,420 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 09:48:28,420 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 09:48:28,420 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:48:28,420 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:48:28,420 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:48:28,420 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:48:28,420 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 09:48:28,420 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 09:48:28,420 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:48:28,420 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 09:48:28,423 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:48:28 BasicIcfg
[2020-11-25 09:48:28,423 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 09:48:28,423 INFO  L168              Benchmark]: Toolchain (without parser) took 75240.25 ms. Allocated memory was 1.0 GB in the beginning and 4.6 GB in the end (delta: 3.5 GB). Free memory was 940.6 MB in the beginning and 3.2 GB in the end (delta: -2.3 GB). Peak memory consumption was 1.3 GB. Max. memory is 15.3 GB.
[2020-11-25 09:48:28,423 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 09:48:28,424 INFO  L168              Benchmark]: Boogie Preprocessor took 79.00 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:48:28,424 INFO  L168              Benchmark]: UtopiaSpecLang took 52.58 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:48:28,424 INFO  L168              Benchmark]: Boogie Printer took 10.72 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 09:48:28,424 INFO  L168              Benchmark]: RCFGBuilder took 552.24 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 881.4 MB in the end (delta: 48.4 MB). Peak memory consumption was 48.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:48:28,424 INFO  L168              Benchmark]: UtopiaLTL2Aut took 44.55 ms. Allocated memory is still 1.0 GB. Free memory was 881.4 MB in the beginning and 872.5 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 09:48:28,425 INFO  L168              Benchmark]: BÃ¼chi Program Product took 994.05 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 56.1 MB). Free memory was 872.5 MB in the beginning and 937.3 MB in the end (delta: -64.9 MB). Peak memory consumption was 155.6 MB. Max. memory is 15.3 GB.
[2020-11-25 09:48:28,425 INFO  L168              Benchmark]: BlockEncodingV2 took 88.99 ms. Allocated memory is still 1.1 GB. Free memory was 933.9 MB in the beginning and 905.4 MB in the end (delta: 28.5 MB). Peak memory consumption was 28.5 MB. Max. memory is 15.3 GB.
[2020-11-25 09:48:28,425 INFO  L168              Benchmark]: BuchiAutomizer took 73415.11 ms. Allocated memory was 1.1 GB in the beginning and 4.6 GB in the end (delta: 3.5 GB). Free memory was 905.4 MB in the beginning and 3.2 GB in the end (delta: -2.3 GB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
[2020-11-25 09:48:28,427 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    1528 locations, 2549 edges
  - StatisticsResult: Encoded RCFG
    1510 locations, 2506 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 79.00 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 52.58 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 10.72 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 552.24 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 881.4 MB in the end (delta: 48.4 MB). Peak memory consumption was 48.4 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 44.55 ms. Allocated memory is still 1.0 GB. Free memory was 881.4 MB in the beginning and 872.5 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 994.05 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 56.1 MB). Free memory was 872.5 MB in the beginning and 937.3 MB in the end (delta: -64.9 MB). Peak memory consumption was 155.6 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 88.99 ms. Allocated memory is still 1.1 GB. Free memory was 933.9 MB in the beginning and 905.4 MB in the end (delta: 28.5 MB). Peak memory consumption was 28.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 73415.11 ms. Allocated memory was 1.1 GB in the beginning and 4.6 GB in the end (delta: 3.5 GB). Free memory was 905.4 MB in the beginning and 3.2 GB in the end (delta: -2.3 GB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    660 locations, 788 edges
  - StatisticsResult: BuchiProgram size
    1528 locations, 2549 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 12 terminating modules (12 trivial, 0 deterministic, 0 nondeterministic). 12 modules have a trivial ranking function, the largest among these consists of 45 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 73.3s and 13 iterations.  TraceHistogramMax:3. Analysis of lassos took 45.4s. Construction of modules took 18.9s. BÃ¼chi inclusion checks took 8.5s. Highest rank in rank-based complementation 0. Minimization of det autom 12. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 11 MinimizatonAttempts, 1533 StatesRemovedByMinimization, 10 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 1312 states and ocurred in iteration 11.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 11775 SDtfs, 15438 SDslu, 55238 SDs, 0 SdLazy, 70932 SolverSat, 2573 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 18.9s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU12 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_YSM0) ==> ( <>(success_transferFrom_YSM0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
