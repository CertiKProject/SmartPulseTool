This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 08:40:53,420 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 08:40:53,422 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 08:40:53,434 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 08:40:53,434 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 08:40:53,434 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 08:40:53,435 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 08:40:53,437 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 08:40:53,439 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 08:40:53,439 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 08:40:53,440 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 08:40:53,440 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 08:40:53,441 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 08:40:53,442 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 08:40:53,443 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 08:40:53,443 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 08:40:53,444 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 08:40:53,445 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 08:40:53,447 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 08:40:53,448 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 08:40:53,449 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 08:40:53,450 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 08:40:53,452 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 08:40:53,452 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 08:40:53,452 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 08:40:53,452 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 08:40:53,453 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 08:40:53,453 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 08:40:53,454 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 08:40:53,454 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 08:40:53,454 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 08:40:53,455 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 08:40:53,455 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 08:40:53,456 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 08:40:53,457 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 08:40:53,457 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 08:40:53,457 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 08:40:53,458 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 08:40:53,458 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 08:40:53,458 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 08:40:53,459 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 08:40:53,459 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 08:40:53,467 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 08:40:53,467 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 08:40:53,468 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 08:40:53,468 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 08:40:53,468 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 08:40:53,468 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 08:40:53,469 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 08:40:53,469 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 08:40:53,469 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 08:40:53,469 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 08:40:53,469 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 08:40:53,469 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 08:40:53,469 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 08:40:53,469 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 08:40:53,470 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 08:40:53,470 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 08:40:53,470 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 08:40:53,470 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 08:40:53,470 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 08:40:53,470 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 08:40:53,470 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 08:40:53,470 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 08:40:53,470 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 08:40:53,471 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 08:40:53,471 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 08:40:53,471 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 08:40:53,492 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 08:40:53,502 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 08:40:53,505 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 08:40:53,506 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 08:40:53,506 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 08:40:53,507 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_totalsupply.bpl
[2020-11-25 08:40:53,507 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_totalsupply.bpl'
[2020-11-25 08:40:53,638 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 08:40:53,639 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 08:40:53,639 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 08:40:53,640 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 08:40:53,640 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 08:40:53,657 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:40:53" (1/1) ...
[2020-11-25 08:40:53,658 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:40:53" (1/1) ...
[2020-11-25 08:40:53,708 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:40:53" (1/1) ...
[2020-11-25 08:40:53,709 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:40:53" (1/1) ...
[2020-11-25 08:40:53,743 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:40:53" (1/1) ...
[2020-11-25 08:40:53,767 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:40:53" (1/1) ...
[2020-11-25 08:40:53,783 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:40:53" (1/1) ...
[2020-11-25 08:40:53,804 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 08:40:53,804 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 08:40:53,804 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 08:40:53,807 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 08:40:53,810 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:40:53" (1/1) ...
[2020-11-25 08:40:53,834 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.totalSupply, _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.totalSupply, return == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:40:53,840 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.totalSupply, _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.totalSupply, return == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:40:53,848 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.totalSupply, _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.totalSupply, return == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:40:53,855 INFO  L636   opiaSpecLangObserver]: Parsed ( _totalSupply_ERC20[this]>=0 && _totalSupply_ERC20[this]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPGEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],IntegerLiteral[0]],BinaryExpression[COMPLT,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 08:40:53,858 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( __ret_0_==_totalSupply_ERC20[this] && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this]==( old(_allowances_ERC20[this]) ) ) && _owner_Ownable[this]==( old(_owner_Ownable[this]) ) ) && _minters_MinterRole[this]==( old(_minters_MinterRole[this]) ) ) && _paused_Pausable[this]==( old(_paused_Pausable[this]) ) ) && _pausers_PauserRole[this]==( old(_pausers_PauserRole[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,totalSupply_ERC20>],ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_ERC20>]]]]]]
[2020-11-25 08:40:53,869 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.totalSupply, _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.totalSupply, return == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:40:53,869 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_totalSupply_ERC200) ==> ( <>AP(success_totalSupply_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 08:40:53,890 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:40:53 PropertyContainer
[2020-11-25 08:40:53,890 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 08:40:53,890 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 08:40:53,891 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 08:40:53,891 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 08:40:53,892 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:40:53" (1/2) ...
[2020-11-25 08:40:53,892 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 08:40:53,892 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 08:40:53,918 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:40:53" (2/2) ...
[2020-11-25 08:40:53,919 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 08:40:53,919 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 08:40:53,919 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 08:40:53,919 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 08:40:53,920 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:40:53" (1/2) ...
[2020-11-25 08:40:53,976 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 08:40:53,976 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 08:40:53,977 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:40:53,977 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 08:40:53,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 08:40:53,977 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:40:53,977 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 08:40:53,977 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:40:53,977 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 08:40:53,977 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 08:40:53,977 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 08:40:53,978 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 08:40:53,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 08:40:53,978 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 08:40:53,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 08:40:53,978 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable
[2020-11-25 08:40:53,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable
[2020-11-25 08:40:53,978 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-25 08:40:53,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-25 08:40:53,979 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 08:40:53,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 08:40:53,979 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 08:40:53,979 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 08:40:53,979 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 08:40:53,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 08:40:53,979 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 08:40:53,979 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 08:40:53,979 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 08:40:53,980 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 08:40:53,980 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 08:40:53,980 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 08:40:53,980 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:40:53,980 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 08:40:53,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 08:40:53,980 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 08:40:53,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 08:40:53,980 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 08:40:53,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 08:40:53,981 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 08:40:53,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 08:40:53,981 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 08:40:53,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 08:40:53,981 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 08:40:53,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 08:40:53,981 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:40:53,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:40:53,981 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 08:40:53,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 08:40:53,982 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 08:40:53,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 08:40:53,982 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 08:40:53,982 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 08:40:53,982 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 08:40:53,982 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 08:40:53,982 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 08:40:53,982 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 08:40:53,982 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 08:40:53,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 08:40:53,983 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 08:40:53,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 08:40:53,983 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 08:40:53,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 08:40:53,983 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 08:40:53,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 08:40:53,983 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 08:40:53,983 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 08:40:53,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 08:40:53,983 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 08:40:53,984 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 08:40:53,984 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 08:40:53,984 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 08:40:53,984 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 08:40:53,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 08:40:53,984 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 08:40:53,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 08:40:53,984 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 08:40:53,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 08:40:53,984 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 08:40:53,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 08:40:53,985 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 08:40:53,985 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 08:40:53,985 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 08:40:53,985 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 08:40:53,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 08:40:53,985 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 08:40:53,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 08:40:53,985 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 08:40:53,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 08:40:53,986 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 08:40:53,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 08:40:53,986 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 08:40:53,986 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 08:40:53,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 08:40:53,986 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 08:40:53,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 08:40:53,986 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 08:40:53,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 08:40:53,986 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 08:40:53,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 08:40:53,987 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 08:40:53,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 08:40:53,987 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 08:40:53,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 08:40:53,987 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 08:40:53,987 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 08:40:53,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 08:40:53,987 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 08:40:53,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 08:40:53,988 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 08:40:53,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 08:40:53,988 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 08:40:53,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 08:40:53,988 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 08:40:53,988 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 08:40:53,988 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 08:40:53,988 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 08:40:53,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 08:40:53,988 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 08:40:53,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 08:40:53,989 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 08:40:53,989 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 08:40:53,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 08:40:53,989 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-25 08:40:53,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-25 08:40:53,989 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 08:40:53,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 08:40:53,989 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl_NoBaseCtor__success
[2020-11-25 08:40:53,990 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl
[2020-11-25 08:40:53,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl
[2020-11-25 08:40:53,990 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 08:40:53,990 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 08:40:53,990 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 08:40:53,990 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 08:40:53,990 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 08:40:53,990 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 08:40:53,990 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 08:40:53,990 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 08:40:53,991 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 08:40:53,991 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 08:40:53,991 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 08:40:53,991 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 08:40:53,991 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 08:40:53,991 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 08:40:53,991 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 08:40:53,991 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 08:40:53,991 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 08:40:53,992 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 08:40:53,992 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 08:40:53,992 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 08:40:53,992 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 08:40:53,992 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 08:40:53,992 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 08:40:53,992 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 08:40:53,992 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 08:40:53,992 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 08:40:53,993 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 08:40:53,993 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 08:40:53,993 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 08:40:53,993 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 08:40:53,993 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-25 08:40:53,993 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-25 08:40:53,993 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Wafl
[2020-11-25 08:40:53,993 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 08:40:53,993 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 08:40:53,993 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 08:40:53,993 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:40:53,994 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 08:40:53,994 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 08:40:53,994 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:40:53,994 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 08:40:53,994 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:40:53,994 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 08:40:53,994 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 08:40:53,994 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 08:40:53,994 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 08:40:53,994 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 08:40:53,994 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 08:40:53,995 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 08:40:53,995 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__success
[2020-11-25 08:40:53,995 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__fail
[2020-11-25 08:40:53,995 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-25 08:40:53,995 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-25 08:40:53,995 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 08:40:53,995 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 08:40:53,995 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 08:40:53,995 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 08:40:53,995 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 08:40:53,995 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 08:40:53,996 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:40:53,996 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 08:40:53,996 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 08:40:53,996 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 08:40:53,996 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 08:40:53,996 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 08:40:53,996 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 08:40:53,996 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 08:40:53,996 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 08:40:53,996 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 08:40:53,996 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 08:40:53,996 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 08:40:53,997 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 08:40:53,997 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 08:40:53,997 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 08:40:53,997 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:40:53,997 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:40:53,997 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:40:53,997 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:40:53,997 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 08:40:53,997 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 08:40:53,997 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 08:40:53,997 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 08:40:53,998 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 08:40:53,998 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 08:40:53,998 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 08:40:53,998 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 08:40:53,998 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 08:40:53,998 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 08:40:53,998 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 08:40:53,998 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 08:40:53,998 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 08:40:53,998 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 08:40:53,998 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 08:40:53,998 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 08:40:53,999 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 08:40:53,999 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 08:40:53,999 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 08:40:53,999 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 08:40:53,999 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 08:40:53,999 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 08:40:53,999 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 08:40:53,999 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 08:40:53,999 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 08:40:53,999 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 08:40:53,999 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 08:40:54,000 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 08:40:54,000 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 08:40:54,000 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 08:40:54,000 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 08:40:54,000 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 08:40:54,000 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 08:40:54,000 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 08:40:54,000 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 08:40:54,000 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 08:40:54,000 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 08:40:54,000 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 08:40:54,001 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 08:40:54,001 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 08:40:54,001 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 08:40:54,001 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 08:40:54,001 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 08:40:54,001 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 08:40:54,001 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 08:40:54,001 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 08:40:54,001 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 08:40:54,001 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 08:40:54,001 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 08:40:54,001 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 08:40:54,002 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 08:40:54,002 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 08:40:54,002 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 08:40:54,002 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 08:40:54,002 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 08:40:54,002 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 08:40:54,002 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 08:40:54,002 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 08:40:54,002 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 08:40:54,002 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 08:40:54,002 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 08:40:54,003 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 08:40:54,003 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 08:40:54,003 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 08:40:54,003 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 08:40:54,003 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 08:40:54,003 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 08:40:54,003 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 08:40:54,003 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 08:40:54,003 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 08:40:54,003 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 08:40:54,003 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 08:40:54,004 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 08:40:54,004 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 08:40:54,004 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 08:40:54,004 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 08:40:54,004 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl_NoBaseCtor__fail
[2020-11-25 08:40:54,004 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl__success
[2020-11-25 08:40:54,004 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl__fail
[2020-11-25 08:40:54,004 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 08:40:54,004 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 08:40:54,004 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 08:40:54,004 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 08:40:54,005 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 08:40:54,005 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 08:40:54,005 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 08:40:54,005 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 08:40:54,005 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 08:40:54,005 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 08:40:54,005 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 08:40:54,005 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 08:40:54,005 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:40:54,005 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:40:54,005 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 08:40:54,005 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 08:40:54,006 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:40:54,006 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:40:54,006 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 08:40:54,006 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 08:40:54,006 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:40:54,006 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:40:54,006 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 08:40:54,006 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 08:40:54,006 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 08:40:54,006 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 08:40:54,006 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 08:40:54,006 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 08:40:54,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 08:40:54,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 08:40:54,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 08:40:54,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 08:40:54,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__fail
[2020-11-25 08:40:54,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__success
[2020-11-25 08:40:54,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-25 08:40:54,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-25 08:40:54,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 08:40:54,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 08:40:54,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 08:40:54,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 08:40:54,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 08:40:54,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 08:40:54,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 08:40:54,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 08:40:54,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:40:54,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:40:54,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 08:40:54,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 08:40:54,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 08:40:54,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 08:40:54,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 08:40:54,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 08:40:54,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 08:40:54,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 08:40:54,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 08:40:54,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 08:40:54,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 08:40:54,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 08:40:54,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 08:40:54,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 08:40:54,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:40:54,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:40:54,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:40:54,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:40:54,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 08:40:54,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 08:40:54,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 08:40:54,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 08:40:54,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 08:40:54,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 08:40:54,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 08:40:54,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 08:40:54,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 08:40:54,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 08:40:54,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 08:40:54,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 08:40:54,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 08:40:54,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 08:40:54,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 08:40:54,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 08:40:54,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 08:40:54,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 08:40:54,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 08:40:54,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 08:40:54,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 08:40:54,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 08:40:54,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 08:40:54,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 08:40:54,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 08:40:54,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 08:40:54,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 08:40:54,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 08:40:54,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 08:40:54,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 08:40:54,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 08:40:54,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 08:40:54,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 08:40:54,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 08:40:54,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 08:40:54,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 08:40:54,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 08:40:54,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 08:40:54,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 08:40:54,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 08:40:54,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 08:40:54,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 08:40:54,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 08:40:54,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 08:40:54,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 08:40:54,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 08:40:54,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 08:40:54,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 08:40:54,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 08:40:54,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 08:40:54,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 08:40:54,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 08:40:54,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 08:40:54,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 08:40:54,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 08:40:54,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 08:40:54,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 08:40:54,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 08:40:54,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 08:40:54,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 08:40:54,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 08:40:54,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 08:40:54,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 08:40:54,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 08:40:54,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 08:40:54,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 08:40:54,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 08:40:54,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 08:40:54,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 08:40:54,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 08:40:54,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 08:40:54,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 08:40:54,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 08:40:54,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 08:40:54,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 08:40:54,015 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 08:40:54,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 08:40:54,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 08:40:54,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 08:40:54,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 08:40:54,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 08:40:54,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 08:40:54,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 08:40:54,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 08:40:54,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 08:40:54,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 08:40:54,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 08:40:54,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 08:40:54,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 08:40:54,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 08:40:54,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 08:40:54,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 08:40:54,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 08:40:54,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 08:40:54,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 08:40:54,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 08:40:54,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl_NoBaseCtor__fail
[2020-11-25 08:40:54,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl_NoBaseCtor__success
[2020-11-25 08:40:54,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl__fail
[2020-11-25 08:40:54,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl__success
[2020-11-25 08:40:54,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 08:40:54,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 08:40:54,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 08:40:54,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 08:40:54,018 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 08:40:54,018 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 08:40:54,018 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 08:40:54,018 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 08:40:54,018 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 08:40:54,018 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 08:40:54,018 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 08:40:54,018 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 08:40:54,018 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 08:40:54,018 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 08:40:54,018 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 08:40:54,018 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 08:40:54,018 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 08:40:54,018 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 08:40:54,019 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 08:40:54,019 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 08:40:54,019 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 08:40:54,019 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 08:40:54,019 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 08:40:54,019 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 08:40:54,019 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 08:40:54,019 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 08:40:54,019 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 08:40:54,019 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 08:40:54,019 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 08:40:54,019 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 08:40:54,019 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 08:40:54,020 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 08:40:54,020 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 08:40:54,020 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 08:40:54,020 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 08:40:54,020 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 08:40:54,020 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 08:40:54,020 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 08:40:54,020 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-25 08:40:54,020 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-25 08:40:54,020 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Wafl
[2020-11-25 08:40:54,020 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 08:40:54,020 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 08:40:54,020 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 08:40:54,263 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:40:54,263 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:40:54,264 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:40:55,429 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 08:40:55,429 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-25 08:40:55,431 INFO  L202        PluginConnector]: Adding new model Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:40:55 BoogieIcfgContainer
[2020-11-25 08:40:55,431 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:40:53" (2/2) ...
[2020-11-25 08:40:55,432 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 08:40:55,432 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@40575632 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:40:55, skipping insertion in model container
[2020-11-25 08:40:55,432 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 08:40:55,432 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 08:40:55,432 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 08:40:55,433 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 08:40:55,433 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:40:53" (1/3) ...
[2020-11-25 08:40:55,433 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@49820c17 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:40:55, skipping insertion in model container
[2020-11-25 08:40:55,434 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:40:53" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 08:40:55,464 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:40:55 NWAContainer
[2020-11-25 08:40:55,464 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 08:40:55,464 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 08:40:55,464 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 08:40:55,465 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 08:40:55,466 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:40:55" (3/4) ...
[2020-11-25 08:40:55,467 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@33edfdfb and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:40:55, skipping insertion in model container
[2020-11-25 08:40:55,467 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:40:55" (4/4) ...
[2020-11-25 08:40:55,470 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 08:40:55,477 INFO  L110   BuchiProductObserver]: Initial RCFG 4156 locations, 6111 edges
[2020-11-25 08:40:55,477 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 08:40:55,493 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 08:40:58,854 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 08:40:58,868 INFO  L110   BuchiProductObserver]: BuchiProgram size 10762 locations, 20071 edges
[2020-11-25 08:40:58,868 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:40:58 BoogieIcfgContainer
[2020-11-25 08:40:58,868 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 08:40:58,869 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 08:40:58,869 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 08:40:58,870 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 08:40:58,870 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:40:58" (1/1) ...
[2020-11-25 08:40:59,064 INFO  L313           BlockEncoder]: Initial Icfg 10762 locations, 20071 edges
[2020-11-25 08:40:59,064 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 08:40:59,064 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 08:40:59,065 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 08:40:59,065 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 08:40:59,087 INFO  L70    emoveInfeasibleEdges]: Removed 291 edges and 29 locations because of local infeasibility
[2020-11-25 08:40:59,104 INFO  L70        RemoveSinkStates]: Removed 170 edges and 113 locations by removing sink states
[2020-11-25 08:40:59,126 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 08:40:59,133 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 08:40:59,140 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 08:40:59,140 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 08:40:59,146 INFO  L313           BlockEncoder]: Encoded RCFG 10568 locations, 19533 edges
[2020-11-25 08:40:59,146 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:40:59 BasicIcfg
[2020-11-25 08:40:59,146 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 08:40:59,147 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 08:40:59,147 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 08:40:59,148 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 08:40:59,148 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:40:59,149 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:40:53" (1/6) ...
[2020-11-25 08:40:59,150 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@414d2460 and model type Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:40:59, skipping insertion in model container
[2020-11-25 08:40:59,150 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:40:59,150 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:40:53" (2/6) ...
[2020-11-25 08:40:59,150 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@414d2460 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:40:59, skipping insertion in model container
[2020-11-25 08:40:59,150 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:40:59,150 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:40:55" (3/6) ...
[2020-11-25 08:40:59,151 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@414d2460 and model type Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:40:59, skipping insertion in model container
[2020-11-25 08:40:59,151 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:40:59,151 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:40:55" (4/6) ...
[2020-11-25 08:40:59,151 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@414d2460 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:40:59, skipping insertion in model container
[2020-11-25 08:40:59,151 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:40:59,151 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:40:58" (5/6) ...
[2020-11-25 08:40:59,151 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@414d2460 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 08:40:59, skipping insertion in model container
[2020-11-25 08:40:59,152 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:40:59,152 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:40:59" (6/6) ...
[2020-11-25 08:40:59,153 INFO  L404   chiAutomizerObserver]: Analyzing ICFG Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_totalsupply.bpl_BEv2
[2020-11-25 08:40:59,187 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 08:40:59,187 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 08:40:59,188 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 08:40:59,188 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 08:40:59,188 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 08:40:59,188 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 08:40:59,188 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 08:40:59,188 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 08:40:59,188 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 08:40:59,259 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10568 states.
[2020-11-25 08:40:59,346 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:40:59,346 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:40:59,346 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:40:59,354 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:40:59,354 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:40:59,354 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 08:40:59,354 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10568 states.
[2020-11-25 08:40:59,460 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:40:59,460 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:40:59,460 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:40:59,462 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:40:59,462 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_ERC200 := false;
[L2]                  call_totalSupply_ERC200 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND TRUE   revert
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND TRUE   revert
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND TRUE   choice == 27
[L11034]              gas := gas - 21000;
[L11035]  COND FALSE  !(gas >= 0)
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:40:59,475 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:40:59,475 INFO  L82        PathProgramCache]: Analyzing trace with hash 1614732391, now seen corresponding path program 1 times
[2020-11-25 08:40:59,480 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:40:59,497 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:40:59,530 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:40:59,532 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:40:59,532 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:40:59,905 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:40:59,913 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:40:59,914 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:40:59,915 INFO  L87              Difference]: Start difference. First operand 10568 states. Second operand 4 states.
[2020-11-25 08:41:01,112 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:41:01,112 INFO  L93              Difference]: Finished difference Result 6107 states and 7519 transitions.
[2020-11-25 08:41:01,112 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:41:01,113 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6107 states and 7519 transitions.
[2020-11-25 08:41:01,144 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:41:01,181 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6107 states to 6107 states and 7519 transitions.
[2020-11-25 08:41:01,182 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 08:41:01,186 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1401
[2020-11-25 08:41:01,186 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6107 states and 7519 transitions.
[2020-11-25 08:41:01,200 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:41:01,201 INFO  L728         BuchiCegarLoop]: Abstraction has 6107 states and 7519 transitions.
[2020-11-25 08:41:01,219 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6107 states and 7519 transitions.
[2020-11-25 08:41:01,294 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6107 to 6107.
[2020-11-25 08:41:01,294 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6107 states.
[2020-11-25 08:41:01,305 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6107 states to 6107 states and 7519 transitions.
[2020-11-25 08:41:01,305 INFO  L751         BuchiCegarLoop]: Abstraction has 6107 states and 7519 transitions.
[2020-11-25 08:41:01,305 INFO  L631         BuchiCegarLoop]: Abstraction has 6107 states and 7519 transitions.
[2020-11-25 08:41:01,306 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 08:41:01,306 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6107 states and 7519 transitions.
[2020-11-25 08:41:01,316 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:41:01,316 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:41:01,316 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:41:01,318 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:41:01,318 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_ERC200 := false;
[L2]                  call_totalSupply_ERC200 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND TRUE   revert
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND TRUE   choice == 23
[L11058]              gas := gas - 21000;
[L11059]  COND TRUE   gas >= 0
[L11060]              assume msgvalue_MSG == 0;
[L11061]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_ERC200 := true;
[L2]                  call_totalSupply_ERC200 := false;
[L2]                  revert := revert_hold;
[L645]                havoc __exception;
[L646]                revert := false;
[L647]    COND FALSE  !(__exception)
[L675]    CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4925]               __ret_0_ := _totalSupply_ERC20[this];
[L675]    RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L676]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11061]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND TRUE   choice == 23
[L11058]              gas := gas - 21000;
[L11059]  COND TRUE   gas >= 0
[L11060]              assume msgvalue_MSG == 0;
[L11061]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_ERC200 := true;
[L2]                  call_totalSupply_ERC200 := false;
[L2]                  revert := revert_hold;
[L645]                havoc __exception;
[L646]                revert := false;
[L647]    COND FALSE  !(__exception)
[L675]    CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4925]               __ret_0_ := _totalSupply_ERC20[this];
[L675]    RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L676]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11061]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:41:01,322 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:41:01,323 INFO  L82        PathProgramCache]: Analyzing trace with hash -1687189760, now seen corresponding path program 1 times
[2020-11-25 08:41:01,324 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:41:01,332 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:41:01,353 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:41:01,353 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:41:01,353 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:41:01,354 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:41:01,354 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:41:01,355 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:41:01,355 INFO  L87              Difference]: Start difference. First operand 6107 states and 7519 transitions. cyclomatic complexity: 1414 Second operand 3 states.
[2020-11-25 08:41:01,585 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:41:01,585 INFO  L93              Difference]: Finished difference Result 8321 states and 10254 transitions.
[2020-11-25 08:41:01,585 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:41:01,585 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8321 states and 10254 transitions.
[2020-11-25 08:41:01,609 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:41:01,647 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8321 states to 8321 states and 10254 transitions.
[2020-11-25 08:41:01,647 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2059
[2020-11-25 08:41:01,649 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2059
[2020-11-25 08:41:01,649 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8321 states and 10254 transitions.
[2020-11-25 08:41:01,658 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:41:01,658 INFO  L728         BuchiCegarLoop]: Abstraction has 8321 states and 10254 transitions.
[2020-11-25 08:41:01,667 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8321 states and 10254 transitions.
[2020-11-25 08:41:01,750 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8321 to 7329.
[2020-11-25 08:41:01,751 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7329 states.
[2020-11-25 08:41:01,761 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7329 states to 7329 states and 9052 transitions.
[2020-11-25 08:41:01,761 INFO  L751         BuchiCegarLoop]: Abstraction has 7329 states and 9052 transitions.
[2020-11-25 08:41:01,761 INFO  L631         BuchiCegarLoop]: Abstraction has 7329 states and 9052 transitions.
[2020-11-25 08:41:01,761 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 08:41:01,761 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7329 states and 9052 transitions.
[2020-11-25 08:41:01,772 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:41:01,772 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:41:01,772 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:41:01,774 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:41:01,774 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_ERC200 := false;
[L2]                  call_totalSupply_ERC200 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND FALSE  !(DType[this] == Pausable)
[L5977]   COND TRUE   DType[this] == PauserRole
[L5978]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND TRUE   !(account_s834 != null)
[L5904]               revert := true;
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND TRUE   revert
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND TRUE   revert
[L5978]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND TRUE   revert
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND TRUE   revert
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND TRUE   revert
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND TRUE   choice == 23
[L11058]              gas := gas - 21000;
[L11059]  COND TRUE   gas >= 0
[L11060]              assume msgvalue_MSG == 0;
[L11061]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_ERC200 := true;
[L2]                  call_totalSupply_ERC200 := false;
[L2]                  revert := revert_hold;
[L645]                havoc __exception;
[L646]                revert := false;
[L647]    COND FALSE  !(__exception)
[L675]    CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4925]               __ret_0_ := _totalSupply_ERC20[this];
[L675]    RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L676]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11061]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND TRUE   choice == 23
[L11058]              gas := gas - 21000;
[L11059]  COND TRUE   gas >= 0
[L11060]              assume msgvalue_MSG == 0;
[L11061]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_ERC200 := true;
[L2]                  call_totalSupply_ERC200 := false;
[L2]                  revert := revert_hold;
[L645]                havoc __exception;
[L646]                revert := false;
[L647]    COND FALSE  !(__exception)
[L675]    CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4925]               __ret_0_ := _totalSupply_ERC20[this];
[L675]    RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L676]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11061]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:41:01,778 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:41:01,778 INFO  L82        PathProgramCache]: Analyzing trace with hash 239099490, now seen corresponding path program 1 times
[2020-11-25 08:41:01,779 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:41:01,789 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:41:01,840 INFO  L134       CoverageAnalysis]: Checked inductivity of 36 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 22 trivial. 0 not checked.
[2020-11-25 08:41:01,841 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:41:01,841 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 08:41:01,841 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:41:01,841 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 08:41:01,841 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 08:41:01,841 INFO  L87              Difference]: Start difference. First operand 7329 states and 9052 transitions. cyclomatic complexity: 1725 Second operand 10 states.
[2020-11-25 08:41:02,059 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:41:02,059 INFO  L93              Difference]: Finished difference Result 7389 states and 9147 transitions.
[2020-11-25 08:41:02,059 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 08:41:02,059 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7389 states and 9147 transitions.
[2020-11-25 08:41:02,081 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:41:02,106 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7389 states to 7389 states and 9147 transitions.
[2020-11-25 08:41:02,106 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1801
[2020-11-25 08:41:02,107 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1801
[2020-11-25 08:41:02,107 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7389 states and 9147 transitions.
[2020-11-25 08:41:02,115 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:41:02,115 INFO  L728         BuchiCegarLoop]: Abstraction has 7389 states and 9147 transitions.
[2020-11-25 08:41:02,122 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7389 states and 9147 transitions.
[2020-11-25 08:41:02,204 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7389 to 7373.
[2020-11-25 08:41:02,204 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7373 states.
[2020-11-25 08:41:02,220 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7373 states to 7373 states and 9121 transitions.
[2020-11-25 08:41:02,220 INFO  L751         BuchiCegarLoop]: Abstraction has 7373 states and 9121 transitions.
[2020-11-25 08:41:02,220 INFO  L631         BuchiCegarLoop]: Abstraction has 7373 states and 9121 transitions.
[2020-11-25 08:41:02,220 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 08:41:02,220 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7373 states and 9121 transitions.
[2020-11-25 08:41:02,237 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:41:02,237 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:41:02,238 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:41:02,240 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:41:02,241 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_ERC200 := false;
[L2]                  call_totalSupply_ERC200 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND FALSE  !(DType[this] == Pausable)
[L5977]   COND TRUE   DType[this] == PauserRole
[L5978]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND TRUE   !!__var_20
[L5853]               revert := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND TRUE   revert
[L5978]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND TRUE   revert
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND TRUE   revert
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND TRUE   revert
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND TRUE   choice == 23
[L11058]              gas := gas - 21000;
[L11059]  COND TRUE   gas >= 0
[L11060]              assume msgvalue_MSG == 0;
[L11061]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_ERC200 := true;
[L2]                  call_totalSupply_ERC200 := false;
[L2]                  revert := revert_hold;
[L645]                havoc __exception;
[L646]                revert := false;
[L647]    COND FALSE  !(__exception)
[L675]    CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4925]               __ret_0_ := _totalSupply_ERC20[this];
[L675]    RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L676]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11061]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND TRUE   choice == 23
[L11058]              gas := gas - 21000;
[L11059]  COND TRUE   gas >= 0
[L11060]              assume msgvalue_MSG == 0;
[L11061]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_ERC200 := true;
[L2]                  call_totalSupply_ERC200 := false;
[L2]                  revert := revert_hold;
[L645]                havoc __exception;
[L646]                revert := false;
[L647]    COND FALSE  !(__exception)
[L675]    CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4925]               __ret_0_ := _totalSupply_ERC20[this];
[L675]    RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L676]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11061]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:41:02,245 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:41:02,245 INFO  L82        PathProgramCache]: Analyzing trace with hash -1417012189, now seen corresponding path program 1 times
[2020-11-25 08:41:02,246 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:41:02,256 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:41:02,306 INFO  L134       CoverageAnalysis]: Checked inductivity of 36 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 36 trivial. 0 not checked.
[2020-11-25 08:41:02,306 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:41:02,306 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:41:02,307 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:41:02,307 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:41:02,307 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:41:02,307 INFO  L87              Difference]: Start difference. First operand 7373 states and 9121 transitions. cyclomatic complexity: 1750 Second operand 3 states.
[2020-11-25 08:41:02,536 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:41:02,536 INFO  L93              Difference]: Finished difference Result 8335 states and 9749 transitions.
[2020-11-25 08:41:02,537 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:41:02,537 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8335 states and 9749 transitions.
[2020-11-25 08:41:02,553 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:41:02,573 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8335 states to 7469 states and 8682 transitions.
[2020-11-25 08:41:02,573 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1788
[2020-11-25 08:41:02,574 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1881
[2020-11-25 08:41:02,574 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7469 states and 8682 transitions.
[2020-11-25 08:41:02,579 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:41:02,579 INFO  L728         BuchiCegarLoop]: Abstraction has 7469 states and 8682 transitions.
[2020-11-25 08:41:02,585 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7469 states and 8682 transitions.
[2020-11-25 08:41:02,629 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7469 to 6907.
[2020-11-25 08:41:02,630 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6907 states.
[2020-11-25 08:41:02,637 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6907 states to 6907 states and 7972 transitions.
[2020-11-25 08:41:02,637 INFO  L751         BuchiCegarLoop]: Abstraction has 6907 states and 7972 transitions.
[2020-11-25 08:41:02,637 INFO  L631         BuchiCegarLoop]: Abstraction has 6907 states and 7972 transitions.
[2020-11-25 08:41:02,637 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 08:41:02,637 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6907 states and 7972 transitions.
[2020-11-25 08:41:02,645 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:41:02,646 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:41:02,646 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:41:02,648 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:41:02,648 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_ERC200 := false;
[L2]                  call_totalSupply_ERC200 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND TRUE   DType[this] == ERC20Pausable
[L5968]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5968]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5969]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND TRUE   DType[this] == ERC20Pausable
[L5968]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5968]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5969]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND TRUE   DType[this] == ERC20Pausable
[L5968]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5968]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5969]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND TRUE   DType[this] == ERC20Pausable
[L5968]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5968]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5969]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6657]   COND TRUE   DType[this] == MinterRole
[L6658]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6658]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6659]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6657]   COND TRUE   DType[this] == MinterRole
[L6658]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6658]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6659]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND TRUE   choice == 23
[L11058]              gas := gas - 21000;
[L11059]  COND TRUE   gas >= 0
[L11060]              assume msgvalue_MSG == 0;
[L11061]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_ERC200 := true;
[L2]                  call_totalSupply_ERC200 := false;
[L2]                  revert := revert_hold;
[L645]                havoc __exception;
[L646]                revert := false;
[L647]    COND FALSE  !(__exception)
[L675]    CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4925]               __ret_0_ := _totalSupply_ERC20[this];
[L675]    RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L676]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11061]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND TRUE   choice == 23
[L11058]              gas := gas - 21000;
[L11059]  COND TRUE   gas >= 0
[L11060]              assume msgvalue_MSG == 0;
[L11061]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_ERC200 := true;
[L2]                  call_totalSupply_ERC200 := false;
[L2]                  revert := revert_hold;
[L645]                havoc __exception;
[L646]                revert := false;
[L647]    COND FALSE  !(__exception)
[L675]    CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4925]               __ret_0_ := _totalSupply_ERC20[this];
[L675]    RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L676]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11061]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:41:02,655 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:41:02,655 INFO  L82        PathProgramCache]: Analyzing trace with hash 1085664236, now seen corresponding path program 1 times
[2020-11-25 08:41:02,656 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:41:02,671 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:41:02,860 INFO  L134       CoverageAnalysis]: Checked inductivity of 1013 backedges. 0 proven. 27 refuted. 0 times theorem prover too weak. 986 trivial. 0 not checked.
[2020-11-25 08:41:02,860 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:41:02,860 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 08:41:02,861 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:41:02,861 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:41:02,861 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:41:02,861 INFO  L87              Difference]: Start difference. First operand 6907 states and 7972 transitions. cyclomatic complexity: 1067 Second operand 7 states.
[2020-11-25 08:41:03,040 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:41:03,040 INFO  L93              Difference]: Finished difference Result 6942 states and 8015 transitions.
[2020-11-25 08:41:03,041 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:41:03,041 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6942 states and 8015 transitions.
[2020-11-25 08:41:03,055 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:41:03,083 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6942 states to 6913 states and 7979 transitions.
[2020-11-25 08:41:03,083 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1826
[2020-11-25 08:41:03,085 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1826
[2020-11-25 08:41:03,085 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6913 states and 7979 transitions.
[2020-11-25 08:41:03,090 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:41:03,091 INFO  L728         BuchiCegarLoop]: Abstraction has 6913 states and 7979 transitions.
[2020-11-25 08:41:03,099 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6913 states and 7979 transitions.
[2020-11-25 08:41:03,133 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6913 to 6913.
[2020-11-25 08:41:03,133 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6913 states.
[2020-11-25 08:41:03,141 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6913 states to 6913 states and 7979 transitions.
[2020-11-25 08:41:03,141 INFO  L751         BuchiCegarLoop]: Abstraction has 6913 states and 7979 transitions.
[2020-11-25 08:41:03,141 INFO  L631         BuchiCegarLoop]: Abstraction has 6913 states and 7979 transitions.
[2020-11-25 08:41:03,141 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 08:41:03,141 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6913 states and 7979 transitions.
[2020-11-25 08:41:03,148 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:41:03,149 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:41:03,149 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:41:03,151 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:41:03,151 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_ERC200 := false;
[L2]                  call_totalSupply_ERC200 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND TRUE   DType[this] == Pausable
[L5973]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5973]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5974]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND TRUE   DType[this] == ERC20Pausable
[L5968]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5968]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5969]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND TRUE   DType[this] == ERC20Pausable
[L5968]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5968]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5969]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND TRUE   DType[this] == ERC20Pausable
[L5968]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5968]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5969]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND TRUE   DType[this] == ERC20Mintable
[L6653]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6653]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6654]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND TRUE   DType[this] == ERC20Mintable
[L6653]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6653]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6654]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND TRUE   choice == 23
[L11058]              gas := gas - 21000;
[L11059]  COND TRUE   gas >= 0
[L11060]              assume msgvalue_MSG == 0;
[L11061]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_ERC200 := true;
[L2]                  call_totalSupply_ERC200 := false;
[L2]                  revert := revert_hold;
[L645]                havoc __exception;
[L646]                revert := false;
[L647]    COND FALSE  !(__exception)
[L675]    CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4925]               __ret_0_ := _totalSupply_ERC20[this];
[L675]    RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L676]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11061]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND TRUE   choice == 23
[L11058]              gas := gas - 21000;
[L11059]  COND TRUE   gas >= 0
[L11060]              assume msgvalue_MSG == 0;
[L11061]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_ERC200 := true;
[L2]                  call_totalSupply_ERC200 := false;
[L2]                  revert := revert_hold;
[L645]                havoc __exception;
[L646]                revert := false;
[L647]    COND FALSE  !(__exception)
[L675]    CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4925]               __ret_0_ := _totalSupply_ERC20[this];
[L675]    RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L676]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11061]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:41:03,157 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:41:03,157 INFO  L82        PathProgramCache]: Analyzing trace with hash -860480662, now seen corresponding path program 1 times
[2020-11-25 08:41:03,158 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:41:03,170 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:41:03,330 INFO  L134       CoverageAnalysis]: Checked inductivity of 1000 backedges. 0 proven. 18 refuted. 0 times theorem prover too weak. 982 trivial. 0 not checked.
[2020-11-25 08:41:03,330 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:41:03,330 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 08:41:03,330 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:41:03,331 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:41:03,331 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:41:03,331 INFO  L87              Difference]: Start difference. First operand 6913 states and 7979 transitions. cyclomatic complexity: 1068 Second operand 7 states.
[2020-11-25 08:41:03,492 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:41:03,492 INFO  L93              Difference]: Finished difference Result 6948 states and 8022 transitions.
[2020-11-25 08:41:03,492 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:41:03,492 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6948 states and 8022 transitions.
[2020-11-25 08:41:03,506 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:41:03,521 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6948 states to 6919 states and 7986 transitions.
[2020-11-25 08:41:03,521 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1826
[2020-11-25 08:41:03,522 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1826
[2020-11-25 08:41:03,522 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6919 states and 7986 transitions.
[2020-11-25 08:41:03,526 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:41:03,527 INFO  L728         BuchiCegarLoop]: Abstraction has 6919 states and 7986 transitions.
[2020-11-25 08:41:03,532 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6919 states and 7986 transitions.
[2020-11-25 08:41:03,568 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6919 to 6913.
[2020-11-25 08:41:03,568 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6913 states.
[2020-11-25 08:41:03,575 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6913 states to 6913 states and 7979 transitions.
[2020-11-25 08:41:03,575 INFO  L751         BuchiCegarLoop]: Abstraction has 6913 states and 7979 transitions.
[2020-11-25 08:41:03,575 INFO  L631         BuchiCegarLoop]: Abstraction has 6913 states and 7979 transitions.
[2020-11-25 08:41:03,575 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 08:41:03,575 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6913 states and 7979 transitions.
[2020-11-25 08:41:03,582 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:41:03,582 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:41:03,583 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:41:03,584 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:41:03,584 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_ERC200 := false;
[L2]                  call_totalSupply_ERC200 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND FALSE  !(DType[this] == Pausable)
[L5977]   COND TRUE   DType[this] == PauserRole
[L5978]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5978]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND FALSE  !(DType[this] == Pausable)
[L5977]   COND TRUE   DType[this] == PauserRole
[L5978]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5978]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND FALSE  !(DType[this] == Pausable)
[L5977]   COND TRUE   DType[this] == PauserRole
[L5978]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5978]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND FALSE  !(DType[this] == Pausable)
[L5977]   COND TRUE   DType[this] == PauserRole
[L5978]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5978]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6657]   COND TRUE   DType[this] == MinterRole
[L6658]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6658]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6659]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6657]   COND TRUE   DType[this] == MinterRole
[L6658]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6658]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6659]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND TRUE   choice == 23
[L11058]              gas := gas - 21000;
[L11059]  COND TRUE   gas >= 0
[L11060]              assume msgvalue_MSG == 0;
[L11061]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_ERC200 := true;
[L2]                  call_totalSupply_ERC200 := false;
[L2]                  revert := revert_hold;
[L645]                havoc __exception;
[L646]                revert := false;
[L647]    COND FALSE  !(__exception)
[L675]    CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4925]               __ret_0_ := _totalSupply_ERC20[this];
[L675]    RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L676]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11061]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND TRUE   choice == 23
[L11058]              gas := gas - 21000;
[L11059]  COND TRUE   gas >= 0
[L11060]              assume msgvalue_MSG == 0;
[L11061]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_ERC200 := true;
[L2]                  call_totalSupply_ERC200 := false;
[L2]                  revert := revert_hold;
[L645]                havoc __exception;
[L646]                revert := false;
[L647]    COND FALSE  !(__exception)
[L675]    CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4925]               __ret_0_ := _totalSupply_ERC20[this];
[L675]    RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L676]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11061]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:41:03,590 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:41:03,590 INFO  L82        PathProgramCache]: Analyzing trace with hash -699483412, now seen corresponding path program 1 times
[2020-11-25 08:41:03,591 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:41:03,602 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:41:03,832 INFO  L134       CoverageAnalysis]: Checked inductivity of 1025 backedges. 0 proven. 36 refuted. 0 times theorem prover too weak. 989 trivial. 0 not checked.
[2020-11-25 08:41:03,832 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:41:03,832 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 08:41:03,833 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:41:03,833 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:41:03,833 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:41:03,833 INFO  L87              Difference]: Start difference. First operand 6913 states and 7979 transitions. cyclomatic complexity: 1068 Second operand 7 states.
[2020-11-25 08:41:03,995 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:41:03,995 INFO  L93              Difference]: Finished difference Result 6948 states and 8022 transitions.
[2020-11-25 08:41:03,996 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:41:03,996 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6948 states and 8022 transitions.
[2020-11-25 08:41:04,009 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:41:04,022 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6948 states to 6919 states and 7986 transitions.
[2020-11-25 08:41:04,022 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1826
[2020-11-25 08:41:04,024 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1826
[2020-11-25 08:41:04,024 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6919 states and 7986 transitions.
[2020-11-25 08:41:04,028 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:41:04,028 INFO  L728         BuchiCegarLoop]: Abstraction has 6919 states and 7986 transitions.
[2020-11-25 08:41:04,033 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6919 states and 7986 transitions.
[2020-11-25 08:41:04,070 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6919 to 6913.
[2020-11-25 08:41:04,070 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6913 states.
[2020-11-25 08:41:04,078 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6913 states to 6913 states and 7979 transitions.
[2020-11-25 08:41:04,078 INFO  L751         BuchiCegarLoop]: Abstraction has 6913 states and 7979 transitions.
[2020-11-25 08:41:04,078 INFO  L631         BuchiCegarLoop]: Abstraction has 6913 states and 7979 transitions.
[2020-11-25 08:41:04,078 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 08:41:04,078 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6913 states and 7979 transitions.
[2020-11-25 08:41:04,086 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:41:04,086 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:41:04,086 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:41:04,088 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:41:04,088 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_ERC200 := false;
[L2]                  call_totalSupply_ERC200 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND TRUE   choice == 23
[L11058]              gas := gas - 21000;
[L11059]  COND TRUE   gas >= 0
[L11060]              assume msgvalue_MSG == 0;
[L11061]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_ERC200 := true;
[L2]                  call_totalSupply_ERC200 := false;
[L2]                  revert := revert_hold;
[L645]                havoc __exception;
[L646]                revert := false;
[L647]    COND FALSE  !(__exception)
[L675]    CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4925]               __ret_0_ := _totalSupply_ERC20[this];
[L675]    RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L676]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11061]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND TRUE   choice == 23
[L11058]              gas := gas - 21000;
[L11059]  COND TRUE   gas >= 0
[L11060]              assume msgvalue_MSG == 0;
[L11061]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_ERC200 := true;
[L2]                  call_totalSupply_ERC200 := false;
[L2]                  revert := revert_hold;
[L645]                havoc __exception;
[L646]                revert := false;
[L647]    COND FALSE  !(__exception)
[L675]    CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4925]               __ret_0_ := _totalSupply_ERC20[this];
[L675]    RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L676]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == _totalSupply_ERC20[this] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11061]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:41:04,093 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:41:04,093 INFO  L82        PathProgramCache]: Analyzing trace with hash 1050449512, now seen corresponding path program 1 times
[2020-11-25 08:41:04,094 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:41:04,113 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:41:04,268 INFO  L134       CoverageAnalysis]: Checked inductivity of 1005 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1005 trivial. 0 not checked.
[2020-11-25 08:41:04,268 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:41:04,268 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:41:04,269 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:41:04,269 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:41:04,269 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:41:04,269 INFO  L87              Difference]: Start difference. First operand 6913 states and 7979 transitions. cyclomatic complexity: 1068 Second operand 4 states.
[2020-11-25 08:41:04,316 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:41:04,316 INFO  L93              Difference]: Finished difference Result 6914 states and 7978 transitions.
[2020-11-25 08:41:04,316 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:41:04,316 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6914 states and 7978 transitions.
[2020-11-25 08:41:04,342 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:41:04,363 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6914 states to 6904 states and 7968 transitions.
[2020-11-25 08:41:04,363 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1815
[2020-11-25 08:41:04,363 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1815
[2020-11-25 08:41:04,364 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6904 states and 7968 transitions.
[2020-11-25 08:41:04,368 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:41:04,368 INFO  L728         BuchiCegarLoop]: Abstraction has 6904 states and 7968 transitions.
[2020-11-25 08:41:04,373 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6904 states and 7968 transitions.
[2020-11-25 08:41:04,414 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6904 to 6902.
[2020-11-25 08:41:04,414 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6902 states.
[2020-11-25 08:41:04,421 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6902 states to 6902 states and 7966 transitions.
[2020-11-25 08:41:04,422 INFO  L751         BuchiCegarLoop]: Abstraction has 6902 states and 7966 transitions.
[2020-11-25 08:41:04,422 INFO  L631         BuchiCegarLoop]: Abstraction has 6902 states and 7966 transitions.
[2020-11-25 08:41:04,422 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 08:41:04,422 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6902 states and 7966 transitions.
[2020-11-25 08:41:04,429 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:41:04,429 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:41:04,429 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:41:04,431 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:41:04,431 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_ERC200 := false;
[L2]                  call_totalSupply_ERC200 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND TRUE   DType[this] == ERC20Pausable
[L5968]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5968]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5969]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND TRUE   DType[this] == ERC20Pausable
[L5968]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5968]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5969]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND TRUE   DType[this] == ERC20Pausable
[L5968]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5968]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5969]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND TRUE   DType[this] == ERC20Mintable
[L6653]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6653]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6654]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND TRUE   DType[this] == ERC20Mintable
[L6653]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6653]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6654]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND TRUE   choice == 23
[L11058]              gas := gas - 21000;
[L11059]  COND TRUE   gas >= 0
[L11060]              assume msgvalue_MSG == 0;
[L11061]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_ERC200 := true;
[L2]                  call_totalSupply_ERC200 := false;
[L2]                  revert := revert_hold;
[L645]                havoc __exception;
[L646]                revert := false;
[L647]    COND TRUE   __exception
[L648]                __tmp__Balance := Balance;
[L649]                __tmp__DType := DType;
[L650]                __tmp__Alloc := Alloc;
[L651]                __tmp__balance_ADDR := balance_ADDR;
[L652]                __tmp__M_Ref_int := M_Ref_int;
[L653]                __tmp__sum__balances0 := sum__balances0;
[L654]                __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L655]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L656]                __tmp__sum__allowances1 := sum__allowances1;
[L657]                __tmp__M_Ref_bool := M_Ref_bool;
[L658]                __tmp__sum := sum;
[L659]                __tmp__Length := Length;
[L660]                __tmp__now := now;
[L661]                __tmp___owner_Ownable := _owner_Ownable;
[L662]                __tmp___balances_ERC20 := _balances_ERC20;
[L663]                __tmp___allowances_ERC20 := _allowances_ERC20;
[L664]                __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L665]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L666]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L667]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L668]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L669]                __tmp___pausers_PauserRole := _pausers_PauserRole;
[L670]                __tmp___paused_Pausable := _paused_Pausable;
[L671]                __tmp___minters_MinterRole := _minters_MinterRole;
[L672]    CALL        call __ret_0_ := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4919]               __ret_0_ := __tmp___totalSupply_ERC20[this];
[L672]    RET         call __ret_0_ := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L673]                assume revert || gas < 0;
[L11061]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND TRUE   choice == 23
[L11058]              gas := gas - 21000;
[L11059]  COND TRUE   gas >= 0
[L11060]              assume msgvalue_MSG == 0;
[L11061]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_ERC200 := true;
[L2]                  call_totalSupply_ERC200 := false;
[L2]                  revert := revert_hold;
[L645]                havoc __exception;
[L646]                revert := false;
[L647]    COND TRUE   __exception
[L648]                __tmp__Balance := Balance;
[L649]                __tmp__DType := DType;
[L650]                __tmp__Alloc := Alloc;
[L651]                __tmp__balance_ADDR := balance_ADDR;
[L652]                __tmp__M_Ref_int := M_Ref_int;
[L653]                __tmp__sum__balances0 := sum__balances0;
[L654]                __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L655]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L656]                __tmp__sum__allowances1 := sum__allowances1;
[L657]                __tmp__M_Ref_bool := M_Ref_bool;
[L658]                __tmp__sum := sum;
[L659]                __tmp__Length := Length;
[L660]                __tmp__now := now;
[L661]                __tmp___owner_Ownable := _owner_Ownable;
[L662]                __tmp___balances_ERC20 := _balances_ERC20;
[L663]                __tmp___allowances_ERC20 := _allowances_ERC20;
[L664]                __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L665]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L666]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L667]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L668]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L669]                __tmp___pausers_PauserRole := _pausers_PauserRole;
[L670]                __tmp___paused_Pausable := _paused_Pausable;
[L671]                __tmp___minters_MinterRole := _minters_MinterRole;
[L672]    CALL        call __ret_0_ := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4919]               __ret_0_ := __tmp___totalSupply_ERC20[this];
[L672]    RET         call __ret_0_ := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L673]                assume revert || gas < 0;
[L11061]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:41:04,436 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:41:04,436 INFO  L82        PathProgramCache]: Analyzing trace with hash -1294962983, now seen corresponding path program 1 times
[2020-11-25 08:41:04,437 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:41:04,449 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:41:04,622 INFO  L134       CoverageAnalysis]: Checked inductivity of 997 backedges. 6 proven. 25 refuted. 0 times theorem prover too weak. 966 trivial. 0 not checked.
[2020-11-25 08:41:04,622 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:41:04,623 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 08:41:04,623 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:41:04,623 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 08:41:04,623 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 08:41:04,623 INFO  L87              Difference]: Start difference. First operand 6902 states and 7966 transitions. cyclomatic complexity: 1066 Second operand 8 states.
[2020-11-25 08:41:04,818 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:41:04,818 INFO  L93              Difference]: Finished difference Result 6941 states and 8013 transitions.
[2020-11-25 08:41:04,818 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 08:41:04,819 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6941 states and 8013 transitions.
[2020-11-25 08:41:04,833 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:41:04,849 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6941 states to 6915 states and 7981 transitions.
[2020-11-25 08:41:04,849 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1815
[2020-11-25 08:41:04,850 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1815
[2020-11-25 08:41:04,850 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6915 states and 7981 transitions.
[2020-11-25 08:41:04,855 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:41:04,855 INFO  L728         BuchiCegarLoop]: Abstraction has 6915 states and 7981 transitions.
[2020-11-25 08:41:04,860 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6915 states and 7981 transitions.
[2020-11-25 08:41:04,902 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6915 to 6915.
[2020-11-25 08:41:04,902 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6915 states.
[2020-11-25 08:41:04,909 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6915 states to 6915 states and 7981 transitions.
[2020-11-25 08:41:04,910 INFO  L751         BuchiCegarLoop]: Abstraction has 6915 states and 7981 transitions.
[2020-11-25 08:41:04,910 INFO  L631         BuchiCegarLoop]: Abstraction has 6915 states and 7981 transitions.
[2020-11-25 08:41:04,910 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 08:41:04,910 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6915 states and 7981 transitions.
[2020-11-25 08:41:04,918 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:41:04,918 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:41:04,918 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:41:04,920 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:41:04,920 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_ERC200 := false;
[L2]                  call_totalSupply_ERC200 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND TRUE   choice == 23
[L11058]              gas := gas - 21000;
[L11059]  COND TRUE   gas >= 0
[L11060]              assume msgvalue_MSG == 0;
[L11061]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_ERC200 := true;
[L2]                  call_totalSupply_ERC200 := false;
[L2]                  revert := revert_hold;
[L645]                havoc __exception;
[L646]                revert := false;
[L647]    COND TRUE   __exception
[L648]                __tmp__Balance := Balance;
[L649]                __tmp__DType := DType;
[L650]                __tmp__Alloc := Alloc;
[L651]                __tmp__balance_ADDR := balance_ADDR;
[L652]                __tmp__M_Ref_int := M_Ref_int;
[L653]                __tmp__sum__balances0 := sum__balances0;
[L654]                __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L655]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L656]                __tmp__sum__allowances1 := sum__allowances1;
[L657]                __tmp__M_Ref_bool := M_Ref_bool;
[L658]                __tmp__sum := sum;
[L659]                __tmp__Length := Length;
[L660]                __tmp__now := now;
[L661]                __tmp___owner_Ownable := _owner_Ownable;
[L662]                __tmp___balances_ERC20 := _balances_ERC20;
[L663]                __tmp___allowances_ERC20 := _allowances_ERC20;
[L664]                __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L665]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L666]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L667]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L668]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L669]                __tmp___pausers_PauserRole := _pausers_PauserRole;
[L670]                __tmp___paused_Pausable := _paused_Pausable;
[L671]                __tmp___minters_MinterRole := _minters_MinterRole;
[L672]    CALL        call __ret_0_ := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4919]               __ret_0_ := __tmp___totalSupply_ERC20[this];
[L672]    RET         call __ret_0_ := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L673]                assume revert || gas < 0;
[L11061]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND TRUE   choice == 23
[L11058]              gas := gas - 21000;
[L11059]  COND TRUE   gas >= 0
[L11060]              assume msgvalue_MSG == 0;
[L11061]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _totalSupply_ERC20[this] >= 0 && _totalSupply_ERC20[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_ERC200 := true;
[L2]                  call_totalSupply_ERC200 := false;
[L2]                  revert := revert_hold;
[L645]                havoc __exception;
[L646]                revert := false;
[L647]    COND TRUE   __exception
[L648]                __tmp__Balance := Balance;
[L649]                __tmp__DType := DType;
[L650]                __tmp__Alloc := Alloc;
[L651]                __tmp__balance_ADDR := balance_ADDR;
[L652]                __tmp__M_Ref_int := M_Ref_int;
[L653]                __tmp__sum__balances0 := sum__balances0;
[L654]                __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L655]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L656]                __tmp__sum__allowances1 := sum__allowances1;
[L657]                __tmp__M_Ref_bool := M_Ref_bool;
[L658]                __tmp__sum := sum;
[L659]                __tmp__Length := Length;
[L660]                __tmp__now := now;
[L661]                __tmp___owner_Ownable := _owner_Ownable;
[L662]                __tmp___balances_ERC20 := _balances_ERC20;
[L663]                __tmp___allowances_ERC20 := _allowances_ERC20;
[L664]                __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L665]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L666]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L667]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L668]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L669]                __tmp___pausers_PauserRole := _pausers_PauserRole;
[L670]                __tmp___paused_Pausable := _paused_Pausable;
[L671]                __tmp___minters_MinterRole := _minters_MinterRole;
[L672]    CALL        call __ret_0_ := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4919]               __ret_0_ := __tmp___totalSupply_ERC20[this];
[L672]    RET         call __ret_0_ := totalSupply_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L673]                assume revert || gas < 0;
[L11061]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:41:04,925 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:41:04,925 INFO  L82        PathProgramCache]: Analyzing trace with hash -1491912171, now seen corresponding path program 1 times
[2020-11-25 08:41:04,926 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:41:04,946 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:41:05,197 INFO  L134       CoverageAnalysis]: Checked inductivity of 1005 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1005 trivial. 0 not checked.
[2020-11-25 08:41:05,197 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:41:05,197 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 08:41:05,198 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:41:05,198 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 08:41:05,198 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 08:41:05,198 INFO  L87              Difference]: Start difference. First operand 6915 states and 7981 transitions. cyclomatic complexity: 1068 Second operand 5 states.
[2020-11-25 08:41:05,850 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:41:05,850 INFO  L93              Difference]: Finished difference Result 4334 states and 4945 transitions.
[2020-11-25 08:41:05,851 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:41:05,851 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4334 states and 4945 transitions.
[2020-11-25 08:41:05,860 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 08:41:05,860 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4334 states to 0 states and 0 transitions.
[2020-11-25 08:41:05,860 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 08:41:05,860 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 08:41:05,860 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 08:41:05,860 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:41:05,860 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:41:05,860 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:41:05,860 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:41:05,860 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 08:41:05,860 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 08:41:05,860 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 08:41:05,860 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 08:41:05,863 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:41:05 BasicIcfg
[2020-11-25 08:41:05,863 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 08:41:05,864 INFO  L168              Benchmark]: Toolchain (without parser) took 12225.56 ms. Allocated memory was 1.0 GB in the beginning and 2.8 GB in the end (delta: 1.8 GB). Free memory was 919.1 MB in the beginning and 2.3 GB in the end (delta: -1.4 GB). Peak memory consumption was 455.8 MB. Max. memory is 15.3 GB.
[2020-11-25 08:41:05,865 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 08:41:05,865 INFO  L168              Benchmark]: Boogie Preprocessor took 164.59 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 897.2 MB in the end (delta: 21.9 MB). Peak memory consumption was 21.9 MB. Max. memory is 15.3 GB.
[2020-11-25 08:41:05,865 INFO  L168              Benchmark]: UtopiaSpecLang took 85.81 ms. Allocated memory is still 1.0 GB. Free memory was 897.2 MB in the beginning and 886.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 08:41:05,865 INFO  L168              Benchmark]: Boogie Printer took 28.35 ms. Allocated memory is still 1.0 GB. Free memory was 886.5 MB in the beginning and 881.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:41:05,866 INFO  L168              Benchmark]: RCFGBuilder took 1512.81 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 60.8 MB). Free memory was 881.1 MB in the beginning and 760.4 MB in the end (delta: 120.7 MB). Peak memory consumption was 181.6 MB. Max. memory is 15.3 GB.
[2020-11-25 08:41:05,866 INFO  L168              Benchmark]: UtopiaLTL2Aut took 32.20 ms. Allocated memory is still 1.1 GB. Free memory was 760.4 MB in the beginning and 757.0 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:41:05,866 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3404.09 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 440.9 MB). Free memory was 757.0 MB in the beginning and 879.8 MB in the end (delta: -122.9 MB). Peak memory consumption was 342.7 MB. Max. memory is 15.3 GB.
[2020-11-25 08:41:05,867 INFO  L168              Benchmark]: BlockEncodingV2 took 277.62 ms. Allocated memory is still 1.5 GB. Free memory was 879.8 MB in the beginning and 722.0 MB in the end (delta: 157.8 MB). Peak memory consumption was 157.8 MB. Max. memory is 15.3 GB.
[2020-11-25 08:41:05,867 INFO  L168              Benchmark]: BuchiAutomizer took 6716.90 ms. Allocated memory was 1.5 GB in the beginning and 2.8 GB in the end (delta: 1.3 GB). Free memory was 722.0 MB in the beginning and 2.3 GB in the end (delta: -1.6 GB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 08:41:05,870 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    10762 locations, 20071 edges
  - StatisticsResult: Encoded RCFG
    10568 locations, 19533 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 164.59 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 897.2 MB in the end (delta: 21.9 MB). Peak memory consumption was 21.9 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 85.81 ms. Allocated memory is still 1.0 GB. Free memory was 897.2 MB in the beginning and 886.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 28.35 ms. Allocated memory is still 1.0 GB. Free memory was 886.5 MB in the beginning and 881.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1512.81 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 60.8 MB). Free memory was 881.1 MB in the beginning and 760.4 MB in the end (delta: 120.7 MB). Peak memory consumption was 181.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 32.20 ms. Allocated memory is still 1.1 GB. Free memory was 760.4 MB in the beginning and 757.0 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3404.09 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 440.9 MB). Free memory was 757.0 MB in the beginning and 879.8 MB in the end (delta: -122.9 MB). Peak memory consumption was 342.7 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 277.62 ms. Allocated memory is still 1.5 GB. Free memory was 879.8 MB in the beginning and 722.0 MB in the end (delta: 157.8 MB). Peak memory consumption was 157.8 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 6716.90 ms. Allocated memory was 1.5 GB in the beginning and 2.8 GB in the end (delta: 1.3 GB). Free memory was 722.0 MB in the beginning and 2.3 GB in the end (delta: -1.6 GB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    4156 locations, 6111 edges
  - StatisticsResult: BuchiProgram size
    10762 locations, 20071 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 10 terminating modules (10 trivial, 0 deterministic, 0 nondeterministic). 10 modules have a trivial ranking function, the largest among these consists of 10 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 6.6s and 11 iterations.  TraceHistogramMax:9. Analysis of lassos took 1.9s. Construction of modules took 2.1s. BÃ¼chi inclusion checks took 1.1s. Highest rank in rank-based complementation 0. Minimization of det autom 10. Minimization of nondet autom 0. Automata minimization 0.6s AutomataMinimizationTime, 9 MinimizatonAttempts, 1584 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.3s Buchi closure took 0.0s. Biggest automaton had 7373 states and ocurred in iteration 3.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 71368 SDtfs, 22882 SDslu, 234146 SDs, 0 SdLazy, 15124 SolverSat, 6031 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 2.1s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU10 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_totalSupply_ERC200) ==> ( <>(success_totalSupply_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
