This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 14:15:41,479 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 14:15:41,481 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 14:15:41,491 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 14:15:41,492 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 14:15:41,492 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 14:15:41,493 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 14:15:41,495 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 14:15:41,496 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 14:15:41,497 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 14:15:41,497 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 14:15:41,498 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 14:15:41,498 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 14:15:41,499 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 14:15:41,500 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 14:15:41,500 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 14:15:41,501 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 14:15:41,502 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 14:15:41,503 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 14:15:41,504 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 14:15:41,505 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 14:15:41,506 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 14:15:41,507 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 14:15:41,507 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 14:15:41,507 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 14:15:41,508 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 14:15:41,508 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 14:15:41,509 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 14:15:41,509 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 14:15:41,509 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 14:15:41,510 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 14:15:41,510 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 14:15:41,511 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 14:15:41,511 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 14:15:41,512 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 14:15:41,512 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 14:15:41,512 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 14:15:41,513 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 14:15:41,513 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 14:15:41,513 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 14:15:41,514 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 14:15:41,514 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 14:15:41,522 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 14:15:41,522 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 14:15:41,523 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 14:15:41,523 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 14:15:41,523 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 14:15:41,523 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 14:15:41,523 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 14:15:41,523 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 14:15:41,523 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 14:15:41,524 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 14:15:41,524 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 14:15:41,524 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 14:15:41,524 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 14:15:41,524 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 14:15:41,524 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 14:15:41,524 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 14:15:41,524 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 14:15:41,525 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 14:15:41,525 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 14:15:41,525 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 14:15:41,525 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 14:15:41,525 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 14:15:41,525 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 14:15:41,525 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 14:15:41,525 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 14:15:41,525 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 14:15:41,550 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 14:15:41,560 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 14:15:41,563 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 14:15:41,564 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 14:15:41,564 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 14:15:41,565 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-fail.bpl
[2020-11-25 14:15:41,565 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-fail.bpl'
[2020-11-25 14:15:41,668 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 14:15:41,669 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 14:15:41,670 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 14:15:41,670 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 14:15:41,670 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 14:15:41,686 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:15:41" (1/1) ...
[2020-11-25 14:15:41,688 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:15:41" (1/1) ...
[2020-11-25 14:15:41,724 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:15:41" (1/1) ...
[2020-11-25 14:15:41,725 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:15:41" (1/1) ...
[2020-11-25 14:15:41,754 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:15:41" (1/1) ...
[2020-11-25 14:15:41,767 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:15:41" (1/1) ...
[2020-11-25 14:15:41,778 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:15:41" (1/1) ...
[2020-11-25 14:15:41,793 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 14:15:41,794 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 14:15:41,794 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 14:15:41,796 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 14:15:41,800 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:15:41" (1/1) ...
[2020-11-25 14:15:41,821 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(DkargoToken.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(DkargoToken.transfer)))
[2020-11-25 14:15:41,827 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(DkargoToken.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(DkargoToken.transfer)))
[2020-11-25 14:15:41,834 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(DkargoToken.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(DkargoToken.transfer)))
[2020-11-25 14:15:41,844 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender!=to_s1257 && ( value_s1257>_balances_ERC20[this][msg.sender] || ( _balances_ERC20[this][to_s1257] + value_s1257 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && value_s1257>=0 ) && value_s1257<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s1257]>=0 ) && _balances_ERC20[this][to_s1257]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>],IdentifierExpression[to_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[value_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],[IdentifierExpression[to_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],IdentifierExpression[value_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],[IdentifierExpression[to_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],[IdentifierExpression[to_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 14:15:41,852 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(DkargoToken.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(DkargoToken.transfer)))
[2020-11-25 14:15:41,852 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_DkargoToken0) ==> ( <>AP(fail_transfer_DkargoToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 14:15:41,868 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:15:41 PropertyContainer
[2020-11-25 14:15:41,868 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 14:15:41,869 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 14:15:41,869 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 14:15:41,869 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 14:15:41,870 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:15:41" (1/2) ...
[2020-11-25 14:15:41,870 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 14:15:41,870 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 14:15:41,893 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:15:41" (2/2) ...
[2020-11-25 14:15:41,893 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 14:15:41,894 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 14:15:41,894 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 14:15:41,894 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 14:15:41,895 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:15:41" (1/2) ...
[2020-11-25 14:15:41,952 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 14:15:41,952 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeInfo_ctor__success
[2020-11-25 14:15:41,953 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeList_ctor__success
[2020-11-25 14:15:41,953 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__success
[2020-11-25 14:15:41,953 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix
[2020-11-25 14:15:41,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix
[2020-11-25 14:15:41,954 INFO  L130     BoogieDeclarations]: Found specification of procedure getDkargoPrefix_DkargoPrefix
[2020-11-25 14:15:41,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure getDkargoPrefix_DkargoPrefix
[2020-11-25 14:15:41,954 INFO  L130     BoogieDeclarations]: Found specification of procedure _setDkargoPrefix~string_DkargoPrefix__success
[2020-11-25 14:15:41,955 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership_NoBaseCtor__success
[2020-11-25 14:15:41,955 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership
[2020-11-25 14:15:41,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership
[2020-11-25 14:15:41,955 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownership
[2020-11-25 14:15:41,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownership
[2020-11-25 14:15:41,956 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownership
[2020-11-25 14:15:41,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownership
[2020-11-25 14:15:41,956 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownership
[2020-11-25 14:15:41,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownership
[2020-11-25 14:15:41,956 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:15:41,956 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 14:15:41,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 14:15:41,956 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 14:15:41,956 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 14:15:41,956 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 14:15:41,956 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 14:15:41,956 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 14:15:41,956 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain_NoBaseCtor__success
[2020-11-25 14:15:41,957 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain
[2020-11-25 14:15:41,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain
[2020-11-25 14:15:41,957 INFO  L130     BoogieDeclarations]: Found specification of procedure count_AddressChain
[2020-11-25 14:15:41,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure count_AddressChain
[2020-11-25 14:15:41,957 INFO  L130     BoogieDeclarations]: Found specification of procedure head_AddressChain
[2020-11-25 14:15:41,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure head_AddressChain
[2020-11-25 14:15:41,957 INFO  L130     BoogieDeclarations]: Found specification of procedure tail_AddressChain
[2020-11-25 14:15:41,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure tail_AddressChain
[2020-11-25 14:15:41,957 INFO  L130     BoogieDeclarations]: Found specification of procedure nextOf~address_AddressChain
[2020-11-25 14:15:41,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure nextOf~address_AddressChain
[2020-11-25 14:15:41,957 INFO  L130     BoogieDeclarations]: Found specification of procedure prevOf~address_AddressChain
[2020-11-25 14:15:41,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure prevOf~address_AddressChain
[2020-11-25 14:15:41,958 INFO  L130     BoogieDeclarations]: Found specification of procedure isLinked~address_AddressChain
[2020-11-25 14:15:41,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLinked~address_AddressChain
[2020-11-25 14:15:41,958 INFO  L130     BoogieDeclarations]: Found specification of procedure _linkChain~address_AddressChain__success
[2020-11-25 14:15:41,958 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlinkChain~address_AddressChain__success
[2020-11-25 14:15:41,958 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165_NoBaseCtor__success
[2020-11-25 14:15:41,958 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165
[2020-11-25 14:15:41,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165
[2020-11-25 14:15:41,958 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_IERC165
[2020-11-25 14:15:41,958 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165_NoBaseCtor__success
[2020-11-25 14:15:41,959 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165
[2020-11-25 14:15:41,959 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165
[2020-11-25 14:15:41,959 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_ERC165
[2020-11-25 14:15:41,959 INFO  L138     BoogieDeclarations]: Found implementation of procedure supportsInterface~bytes4_ERC165
[2020-11-25 14:15:41,959 INFO  L130     BoogieDeclarations]: Found specification of procedure _registerInterface~bytes4_ERC165__success
[2020-11-25 14:15:41,959 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 14:15:41,959 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 14:15:41,959 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 14:15:41,959 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 14:15:41,959 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 14:15:41,960 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 14:15:41,960 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 14:15:41,960 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 14:15:41,960 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 14:15:41,960 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 14:15:41,960 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 14:15:41,960 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 14:15:41,960 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 14:15:41,960 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 14:15:41,960 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 14:15:41,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 14:15:41,961 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 14:15:41,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 14:15:41,961 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 14:15:41,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 14:15:41,961 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 14:15:41,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 14:15:41,961 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 14:15:41,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 14:15:41,961 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 14:15:41,962 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 14:15:41,962 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 14:15:41,962 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 14:15:41,962 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe_NoBaseCtor__success
[2020-11-25 14:15:41,962 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe
[2020-11-25 14:15:41,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe
[2020-11-25 14:15:41,962 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Safe
[2020-11-25 14:15:41,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Safe
[2020-11-25 14:15:41,962 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Safe
[2020-11-25 14:15:41,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Safe
[2020-11-25 14:15:41,963 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Safe
[2020-11-25 14:15:41,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Safe
[2020-11-25 14:15:41,963 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken_NoBaseCtor__success
[2020-11-25 14:15:41,963 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken
[2020-11-25 14:15:41,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken
[2020-11-25 14:15:41,963 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_DkargoToken
[2020-11-25 14:15:41,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_DkargoToken
[2020-11-25 14:15:41,963 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DkargoToken
[2020-11-25 14:15:41,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DkargoToken
[2020-11-25 14:15:41,963 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DkargoToken
[2020-11-25 14:15:41,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DkargoToken
[2020-11-25 14:15:41,964 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DkargoToken
[2020-11-25 14:15:41,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DkargoToken
[2020-11-25 14:15:41,964 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DkargoToken
[2020-11-25 14:15:41,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DkargoToken
[2020-11-25 14:15:41,964 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DkargoToken
[2020-11-25 14:15:41,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DkargoToken
[2020-11-25 14:15:41,964 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 14:15:41,964 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 14:15:41,964 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 14:15:41,964 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 14:15:41,964 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DkargoPrefix
[2020-11-25 14:15:41,965 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_DkargoPrefix
[2020-11-25 14:15:41,965 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownership
[2020-11-25 14:15:41,965 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownership
[2020-11-25 14:15:41,965 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 14:15:41,965 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 14:15:41,965 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_AddressChain
[2020-11-25 14:15:41,965 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_AddressChain
[2020-11-25 14:15:41,965 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC165
[2020-11-25 14:15:41,965 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC165
[2020-11-25 14:15:41,965 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC165
[2020-11-25 14:15:41,966 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC165
[2020-11-25 14:15:41,966 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 14:15:41,966 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 14:15:41,966 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 14:15:41,966 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 14:15:41,966 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Safe
[2020-11-25 14:15:41,966 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Safe
[2020-11-25 14:15:41,966 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DkargoToken
[2020-11-25 14:15:41,966 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 14:15:41,966 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 14:15:41,967 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeInfo_ctor__fail
[2020-11-25 14:15:41,967 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeList_ctor__fail
[2020-11-25 14:15:41,967 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__fail
[2020-11-25 14:15:41,967 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix__success
[2020-11-25 14:15:41,967 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix__fail
[2020-11-25 14:15:41,967 INFO  L130     BoogieDeclarations]: Found specification of procedure getDkargoPrefix_DkargoPrefix__success
[2020-11-25 14:15:41,967 INFO  L130     BoogieDeclarations]: Found specification of procedure getDkargoPrefix_DkargoPrefix__fail
[2020-11-25 14:15:41,967 INFO  L130     BoogieDeclarations]: Found specification of procedure _setDkargoPrefix~string_DkargoPrefix__fail
[2020-11-25 14:15:41,967 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership_NoBaseCtor__fail
[2020-11-25 14:15:41,967 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership__success
[2020-11-25 14:15:41,968 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership__fail
[2020-11-25 14:15:41,968 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownership__success
[2020-11-25 14:15:41,968 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownership__fail
[2020-11-25 14:15:41,968 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownership__success
[2020-11-25 14:15:41,968 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownership__fail
[2020-11-25 14:15:41,968 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownership__success
[2020-11-25 14:15:41,968 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownership__fail
[2020-11-25 14:15:41,968 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:15:41,968 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 14:15:41,968 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 14:15:41,969 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 14:15:41,969 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 14:15:41,969 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 14:15:41,969 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 14:15:41,969 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 14:15:41,969 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain_NoBaseCtor__fail
[2020-11-25 14:15:41,969 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain__success
[2020-11-25 14:15:41,969 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain__fail
[2020-11-25 14:15:41,969 INFO  L130     BoogieDeclarations]: Found specification of procedure count_AddressChain__success
[2020-11-25 14:15:41,969 INFO  L130     BoogieDeclarations]: Found specification of procedure count_AddressChain__fail
[2020-11-25 14:15:41,970 INFO  L130     BoogieDeclarations]: Found specification of procedure head_AddressChain__success
[2020-11-25 14:15:41,970 INFO  L130     BoogieDeclarations]: Found specification of procedure head_AddressChain__fail
[2020-11-25 14:15:41,970 INFO  L130     BoogieDeclarations]: Found specification of procedure tail_AddressChain__success
[2020-11-25 14:15:41,970 INFO  L130     BoogieDeclarations]: Found specification of procedure tail_AddressChain__fail
[2020-11-25 14:15:41,970 INFO  L130     BoogieDeclarations]: Found specification of procedure nextOf~address_AddressChain__success
[2020-11-25 14:15:41,970 INFO  L130     BoogieDeclarations]: Found specification of procedure nextOf~address_AddressChain__fail
[2020-11-25 14:15:41,970 INFO  L130     BoogieDeclarations]: Found specification of procedure prevOf~address_AddressChain__success
[2020-11-25 14:15:41,970 INFO  L130     BoogieDeclarations]: Found specification of procedure prevOf~address_AddressChain__fail
[2020-11-25 14:15:41,970 INFO  L130     BoogieDeclarations]: Found specification of procedure isLinked~address_AddressChain__success
[2020-11-25 14:15:41,970 INFO  L130     BoogieDeclarations]: Found specification of procedure isLinked~address_AddressChain__fail
[2020-11-25 14:15:41,970 INFO  L130     BoogieDeclarations]: Found specification of procedure _linkChain~address_AddressChain__fail
[2020-11-25 14:15:41,971 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlinkChain~address_AddressChain__fail
[2020-11-25 14:15:41,971 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165_NoBaseCtor__fail
[2020-11-25 14:15:41,971 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165__success
[2020-11-25 14:15:41,971 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165__fail
[2020-11-25 14:15:41,971 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165_NoBaseCtor__fail
[2020-11-25 14:15:41,971 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165__success
[2020-11-25 14:15:41,971 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165__fail
[2020-11-25 14:15:41,971 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_ERC165__success
[2020-11-25 14:15:41,971 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_ERC165__fail
[2020-11-25 14:15:41,971 INFO  L130     BoogieDeclarations]: Found specification of procedure _registerInterface~bytes4_ERC165__fail
[2020-11-25 14:15:41,971 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 14:15:41,971 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 14:15:41,972 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 14:15:41,972 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 14:15:41,972 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 14:15:41,972 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 14:15:41,972 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 14:15:41,972 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 14:15:41,972 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 14:15:41,972 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 14:15:41,972 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 14:15:41,972 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 14:15:41,972 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 14:15:41,972 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 14:15:41,973 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 14:15:41,973 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 14:15:41,973 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 14:15:41,973 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 14:15:41,973 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 14:15:41,973 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 14:15:41,973 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 14:15:41,973 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 14:15:41,973 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe_NoBaseCtor__fail
[2020-11-25 14:15:41,973 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe__success
[2020-11-25 14:15:41,973 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe__fail
[2020-11-25 14:15:41,973 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Safe__success
[2020-11-25 14:15:41,974 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Safe__fail
[2020-11-25 14:15:41,974 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 14:15:41,974 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 14:15:41,974 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 14:15:41,974 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 14:15:41,974 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken_NoBaseCtor__fail
[2020-11-25 14:15:41,974 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken__success
[2020-11-25 14:15:41,974 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken__fail
[2020-11-25 14:15:41,974 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_DkargoToken__success
[2020-11-25 14:15:41,974 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_DkargoToken__fail
[2020-11-25 14:15:41,974 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DkargoToken__success
[2020-11-25 14:15:41,975 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DkargoToken__fail
[2020-11-25 14:15:41,975 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DkargoToken__success
[2020-11-25 14:15:41,975 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DkargoToken__fail
[2020-11-25 14:15:41,975 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DkargoToken__success
[2020-11-25 14:15:41,975 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DkargoToken__fail
[2020-11-25 14:15:41,975 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DkargoToken__success
[2020-11-25 14:15:41,975 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DkargoToken__fail
[2020-11-25 14:15:41,975 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DkargoToken__success
[2020-11-25 14:15:41,975 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DkargoToken__fail
[2020-11-25 14:15:41,975 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 14:15:41,975 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 14:15:41,975 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 14:15:41,976 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 14:15:41,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 14:15:41,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 14:15:41,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeInfo_ctor__fail
[2020-11-25 14:15:41,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeInfo_ctor__success
[2020-11-25 14:15:41,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeList_ctor__fail
[2020-11-25 14:15:41,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeList_ctor__success
[2020-11-25 14:15:41,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__fail
[2020-11-25 14:15:41,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__success
[2020-11-25 14:15:41,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix__fail
[2020-11-25 14:15:41,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix__success
[2020-11-25 14:15:41,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure getDkargoPrefix_DkargoPrefix__fail
[2020-11-25 14:15:41,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure getDkargoPrefix_DkargoPrefix__success
[2020-11-25 14:15:41,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setDkargoPrefix~string_DkargoPrefix__fail
[2020-11-25 14:15:41,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setDkargoPrefix~string_DkargoPrefix__success
[2020-11-25 14:15:41,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership_NoBaseCtor__fail
[2020-11-25 14:15:41,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership_NoBaseCtor__success
[2020-11-25 14:15:41,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership__fail
[2020-11-25 14:15:41,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership__success
[2020-11-25 14:15:41,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownership__fail
[2020-11-25 14:15:41,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownership__success
[2020-11-25 14:15:41,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownership__fail
[2020-11-25 14:15:41,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownership__success
[2020-11-25 14:15:41,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownership__fail
[2020-11-25 14:15:41,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownership__success
[2020-11-25 14:15:41,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:15:41,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:15:41,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 14:15:41,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 14:15:41,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 14:15:41,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 14:15:41,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 14:15:41,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 14:15:41,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 14:15:41,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 14:15:41,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 14:15:41,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 14:15:41,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 14:15:41,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 14:15:41,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain_NoBaseCtor__fail
[2020-11-25 14:15:41,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain_NoBaseCtor__success
[2020-11-25 14:15:41,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain__fail
[2020-11-25 14:15:41,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain__success
[2020-11-25 14:15:41,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure count_AddressChain__fail
[2020-11-25 14:15:41,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure count_AddressChain__success
[2020-11-25 14:15:41,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure head_AddressChain__fail
[2020-11-25 14:15:41,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure head_AddressChain__success
[2020-11-25 14:15:41,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure tail_AddressChain__fail
[2020-11-25 14:15:41,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure tail_AddressChain__success
[2020-11-25 14:15:41,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure nextOf~address_AddressChain__fail
[2020-11-25 14:15:41,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure nextOf~address_AddressChain__success
[2020-11-25 14:15:41,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure prevOf~address_AddressChain__fail
[2020-11-25 14:15:41,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure prevOf~address_AddressChain__success
[2020-11-25 14:15:41,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLinked~address_AddressChain__fail
[2020-11-25 14:15:41,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLinked~address_AddressChain__success
[2020-11-25 14:15:41,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure _linkChain~address_AddressChain__fail
[2020-11-25 14:15:41,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure _linkChain~address_AddressChain__success
[2020-11-25 14:15:41,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlinkChain~address_AddressChain__fail
[2020-11-25 14:15:41,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlinkChain~address_AddressChain__success
[2020-11-25 14:15:41,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165_NoBaseCtor__fail
[2020-11-25 14:15:41,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165_NoBaseCtor__success
[2020-11-25 14:15:41,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165__fail
[2020-11-25 14:15:41,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165__success
[2020-11-25 14:15:41,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165_NoBaseCtor__fail
[2020-11-25 14:15:41,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165_NoBaseCtor__success
[2020-11-25 14:15:41,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165__fail
[2020-11-25 14:15:41,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165__success
[2020-11-25 14:15:41,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure supportsInterface~bytes4_ERC165__fail
[2020-11-25 14:15:41,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure supportsInterface~bytes4_ERC165__success
[2020-11-25 14:15:41,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure _registerInterface~bytes4_ERC165__fail
[2020-11-25 14:15:41,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure _registerInterface~bytes4_ERC165__success
[2020-11-25 14:15:41,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 14:15:41,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 14:15:41,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 14:15:41,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 14:15:41,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 14:15:41,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 14:15:41,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 14:15:41,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 14:15:41,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 14:15:41,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 14:15:41,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 14:15:41,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 14:15:41,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 14:15:41,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 14:15:41,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 14:15:41,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 14:15:41,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 14:15:41,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 14:15:41,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 14:15:41,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 14:15:41,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 14:15:41,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 14:15:41,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 14:15:41,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 14:15:41,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 14:15:41,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 14:15:41,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 14:15:41,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 14:15:41,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe_NoBaseCtor__fail
[2020-11-25 14:15:41,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe_NoBaseCtor__success
[2020-11-25 14:15:41,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe__fail
[2020-11-25 14:15:41,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe__success
[2020-11-25 14:15:41,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Safe__fail
[2020-11-25 14:15:41,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Safe__success
[2020-11-25 14:15:41,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 14:15:41,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 14:15:41,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 14:15:41,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 14:15:41,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken_NoBaseCtor__fail
[2020-11-25 14:15:41,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken_NoBaseCtor__success
[2020-11-25 14:15:41,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken__fail
[2020-11-25 14:15:41,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken__success
[2020-11-25 14:15:41,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_DkargoToken__fail
[2020-11-25 14:15:41,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_DkargoToken__success
[2020-11-25 14:15:41,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DkargoToken__fail
[2020-11-25 14:15:41,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DkargoToken__success
[2020-11-25 14:15:41,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DkargoToken__fail
[2020-11-25 14:15:41,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DkargoToken__success
[2020-11-25 14:15:41,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DkargoToken__fail
[2020-11-25 14:15:41,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DkargoToken__success
[2020-11-25 14:15:41,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DkargoToken__fail
[2020-11-25 14:15:41,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DkargoToken__success
[2020-11-25 14:15:41,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DkargoToken__fail
[2020-11-25 14:15:41,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DkargoToken__success
[2020-11-25 14:15:41,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 14:15:41,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 14:15:41,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 14:15:41,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 14:15:41,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 14:15:41,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 14:15:41,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 14:15:41,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 14:15:41,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DkargoPrefix
[2020-11-25 14:15:41,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_DkargoPrefix
[2020-11-25 14:15:41,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownership
[2020-11-25 14:15:41,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownership
[2020-11-25 14:15:41,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 14:15:41,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 14:15:41,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_AddressChain
[2020-11-25 14:15:41,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_AddressChain
[2020-11-25 14:15:41,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC165
[2020-11-25 14:15:41,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC165
[2020-11-25 14:15:41,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC165
[2020-11-25 14:15:41,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC165
[2020-11-25 14:15:41,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 14:15:41,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 14:15:41,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 14:15:41,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 14:15:41,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Safe
[2020-11-25 14:15:41,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Safe
[2020-11-25 14:15:41,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DkargoToken
[2020-11-25 14:15:41,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 14:15:41,992 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 14:15:41,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 14:15:42,470 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:15:42,470 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:15:43,050 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 14:15:43,051 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 14:15:43,053 INFO  L202        PluginConnector]: Adding new model DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:15:43 BoogieIcfgContainer
[2020-11-25 14:15:43,053 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:15:41" (2/2) ...
[2020-11-25 14:15:43,053 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 14:15:43,054 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@70d90f7 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:15:43, skipping insertion in model container
[2020-11-25 14:15:43,054 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 14:15:43,054 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 14:15:43,054 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 14:15:43,055 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 14:15:43,055 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:15:41" (1/3) ...
[2020-11-25 14:15:43,056 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@3d7f4685 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:15:43, skipping insertion in model container
[2020-11-25 14:15:43,056 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:15:41" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 14:15:43,088 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:15:43 NWAContainer
[2020-11-25 14:15:43,088 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 14:15:43,088 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 14:15:43,089 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 14:15:43,089 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 14:15:43,090 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:15:43" (3/4) ...
[2020-11-25 14:15:43,091 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@536b22a4 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:15:43, skipping insertion in model container
[2020-11-25 14:15:43,091 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:15:43" (4/4) ...
[2020-11-25 14:15:43,093 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 14:15:43,099 INFO  L110   BuchiProductObserver]: Initial RCFG 3098 locations, 4215 edges
[2020-11-25 14:15:43,099 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 14:15:43,111 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 14:15:45,314 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 14:15:45,324 INFO  L110   BuchiProductObserver]: BuchiProgram size 7642 locations, 13678 edges
[2020-11-25 14:15:45,324 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:15:45 BoogieIcfgContainer
[2020-11-25 14:15:45,324 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 14:15:45,324 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 14:15:45,324 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 14:15:45,326 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 14:15:45,326 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:15:45" (1/1) ...
[2020-11-25 14:15:45,452 INFO  L313           BlockEncoder]: Initial Icfg 7642 locations, 13678 edges
[2020-11-25 14:15:45,452 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 14:15:45,453 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 14:15:45,453 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 14:15:45,453 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 14:15:45,470 INFO  L70    emoveInfeasibleEdges]: Removed 291 edges and 24 locations because of local infeasibility
[2020-11-25 14:15:45,483 INFO  L70        RemoveSinkStates]: Removed 326 edges and 196 locations by removing sink states
[2020-11-25 14:15:45,499 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 14:15:45,504 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 14:15:45,508 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 14:15:45,509 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 14:15:45,512 INFO  L313           BlockEncoder]: Encoded RCFG 7386 locations, 13008 edges
[2020-11-25 14:15:45,513 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:15:45 BasicIcfg
[2020-11-25 14:15:45,513 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 14:15:45,513 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 14:15:45,513 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 14:15:45,515 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 14:15:45,515 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:15:45,516 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:15:41" (1/6) ...
[2020-11-25 14:15:45,517 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2b815380 and model type DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:15:45, skipping insertion in model container
[2020-11-25 14:15:45,517 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:15:45,517 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:15:41" (2/6) ...
[2020-11-25 14:15:45,517 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2b815380 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:15:45, skipping insertion in model container
[2020-11-25 14:15:45,517 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:15:45,517 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:15:43" (3/6) ...
[2020-11-25 14:15:45,518 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2b815380 and model type DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:15:45, skipping insertion in model container
[2020-11-25 14:15:45,518 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:15:45,518 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:15:43" (4/6) ...
[2020-11-25 14:15:45,518 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2b815380 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:15:45, skipping insertion in model container
[2020-11-25 14:15:45,518 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:15:45,518 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:15:45" (5/6) ...
[2020-11-25 14:15:45,518 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2b815380 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:15:45, skipping insertion in model container
[2020-11-25 14:15:45,518 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:15:45,518 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:15:45" (6/6) ...
[2020-11-25 14:15:45,519 INFO  L404   chiAutomizerObserver]: Analyzing ICFG DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-fail.bpl_BEv2
[2020-11-25 14:15:45,545 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 14:15:45,546 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 14:15:45,546 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 14:15:45,546 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 14:15:45,546 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 14:15:45,546 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 14:15:45,546 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 14:15:45,546 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 14:15:45,546 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 14:15:45,597 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7386 states.
[2020-11-25 14:15:45,659 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:15:45,659 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:15:45,660 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:15:45,667 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:15:45,667 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:15:45,668 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 14:15:45,668 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7386 states.
[2020-11-25 14:15:45,696 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:15:45,696 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:15:45,696 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:15:45,698 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:15:45,698 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND TRUE   revert
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND TRUE   choice == 23
[L8286]              gas := gas - 21000;
[L8287]  COND FALSE  !(gas >= 0)
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:15:45,711 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:15:45,712 INFO  L82        PathProgramCache]: Analyzing trace with hash 1684141323, now seen corresponding path program 1 times
[2020-11-25 14:15:45,716 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:15:45,738 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:15:45,788 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:15:45,790 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:15:45,791 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:15:46,176 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:15:46,184 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:15:46,185 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:15:46,186 INFO  L87              Difference]: Start difference. First operand 7386 states. Second operand 4 states.
[2020-11-25 14:15:46,908 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:15:46,908 INFO  L93              Difference]: Finished difference Result 4448 states and 5161 transitions.
[2020-11-25 14:15:46,908 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:15:46,910 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4448 states and 5161 transitions.
[2020-11-25 14:15:46,933 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:15:46,961 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4448 states to 4448 states and 5161 transitions.
[2020-11-25 14:15:46,962 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 14:15:46,964 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1111
[2020-11-25 14:15:46,965 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4448 states and 5161 transitions.
[2020-11-25 14:15:46,974 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:15:46,975 INFO  L728         BuchiCegarLoop]: Abstraction has 4448 states and 5161 transitions.
[2020-11-25 14:15:46,992 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4448 states and 5161 transitions.
[2020-11-25 14:15:47,059 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4448 to 4448.
[2020-11-25 14:15:47,059 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4448 states.
[2020-11-25 14:15:47,068 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4448 states to 4448 states and 5161 transitions.
[2020-11-25 14:15:47,069 INFO  L751         BuchiCegarLoop]: Abstraction has 4448 states and 5161 transitions.
[2020-11-25 14:15:47,069 INFO  L631         BuchiCegarLoop]: Abstraction has 4448 states and 5161 transitions.
[2020-11-25 14:15:47,069 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 14:15:47,069 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4448 states and 5161 transitions.
[2020-11-25 14:15:47,083 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:15:47,083 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:15:47,083 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:15:47,086 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:15:47,086 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND TRUE   revert
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s1257 && (value_s1257 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1257] + value_s1257 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND FALSE  !(__exception)
[L2596]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5896]  COND TRUE   DType[this] == DkargoToken
[L5897]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4997]  COND TRUE   DType[this] == DkargoToken
[L4998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5226]              __var_20 := null;
[L5227]  COND TRUE   !(sender_s956 != null)
[L5228]              revert := true;
[L4998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4999]  COND TRUE   revert
[L5897]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5898]  COND TRUE   revert
[L2596]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2597]              assume !revert && gas >= 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s1257 && (value_s1257 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1257] + value_s1257 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND FALSE  !(__exception)
[L2596]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5896]  COND TRUE   DType[this] == DkargoToken
[L5897]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4997]  COND TRUE   DType[this] == DkargoToken
[L4998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5226]              __var_20 := null;
[L5227]  COND TRUE   !(sender_s956 != null)
[L5228]              revert := true;
[L4998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4999]  COND TRUE   revert
[L5897]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5898]  COND TRUE   revert
[L2596]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2597]              assume !revert && gas >= 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:15:47,090 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:15:47,090 INFO  L82        PathProgramCache]: Analyzing trace with hash 565482066, now seen corresponding path program 1 times
[2020-11-25 14:15:47,092 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:15:47,102 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:15:47,128 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:15:47,128 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:15:47,128 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 14:15:47,129 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:15:47,129 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 14:15:47,129 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 14:15:47,129 INFO  L87              Difference]: Start difference. First operand 4448 states and 5161 transitions. cyclomatic complexity: 715 Second operand 3 states.
[2020-11-25 14:15:47,254 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:15:47,254 INFO  L93              Difference]: Finished difference Result 5530 states and 6391 transitions.
[2020-11-25 14:15:47,254 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 14:15:47,255 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5530 states and 6391 transitions.
[2020-11-25 14:15:47,271 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:15:47,292 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5530 states to 5530 states and 6391 transitions.
[2020-11-25 14:15:47,292 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1363
[2020-11-25 14:15:47,293 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1363
[2020-11-25 14:15:47,293 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5530 states and 6391 transitions.
[2020-11-25 14:15:47,299 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:15:47,299 INFO  L728         BuchiCegarLoop]: Abstraction has 5530 states and 6391 transitions.
[2020-11-25 14:15:47,305 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5530 states and 6391 transitions.
[2020-11-25 14:15:47,358 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5530 to 5031.
[2020-11-25 14:15:47,359 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5031 states.
[2020-11-25 14:15:47,365 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5031 states to 5031 states and 5784 transitions.
[2020-11-25 14:15:47,365 INFO  L751         BuchiCegarLoop]: Abstraction has 5031 states and 5784 transitions.
[2020-11-25 14:15:47,366 INFO  L631         BuchiCegarLoop]: Abstraction has 5031 states and 5784 transitions.
[2020-11-25 14:15:47,366 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 14:15:47,366 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5031 states and 5784 transitions.
[2020-11-25 14:15:47,372 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:15:47,373 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:15:47,373 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:15:47,374 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:15:47,375 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND TRUE   !(account_s999 != null)
[L5284]              revert := true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND TRUE   revert
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND TRUE   revert
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND TRUE   revert
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s1257 && (value_s1257 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1257] + value_s1257 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND FALSE  !(__exception)
[L2596]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5896]  COND TRUE   DType[this] == DkargoToken
[L5897]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4997]  COND TRUE   DType[this] == DkargoToken
[L4998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5226]              __var_20 := null;
[L5227]  COND TRUE   !(sender_s956 != null)
[L5228]              revert := true;
[L4998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4999]  COND TRUE   revert
[L5897]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5898]  COND TRUE   revert
[L2596]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2597]              assume !revert && gas >= 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s1257 && (value_s1257 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1257] + value_s1257 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND FALSE  !(__exception)
[L2596]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5896]  COND TRUE   DType[this] == DkargoToken
[L5897]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4997]  COND TRUE   DType[this] == DkargoToken
[L4998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5226]              __var_20 := null;
[L5227]  COND TRUE   !(sender_s956 != null)
[L5228]              revert := true;
[L4998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4999]  COND TRUE   revert
[L5897]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5898]  COND TRUE   revert
[L2596]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2597]              assume !revert && gas >= 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:15:47,379 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:15:47,379 INFO  L82        PathProgramCache]: Analyzing trace with hash -1478762674, now seen corresponding path program 1 times
[2020-11-25 14:15:47,380 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:15:47,390 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:15:47,433 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 14:15:47,433 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:15:47,433 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 14:15:47,433 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:15:47,434 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 14:15:47,434 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 14:15:47,434 INFO  L87              Difference]: Start difference. First operand 5031 states and 5784 transitions. cyclomatic complexity: 755 Second operand 8 states.
[2020-11-25 14:15:47,524 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:15:47,524 INFO  L93              Difference]: Finished difference Result 5051 states and 5808 transitions.
[2020-11-25 14:15:47,525 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 14:15:47,525 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5051 states and 5808 transitions.
[2020-11-25 14:15:47,539 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:15:47,556 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5051 states to 5030 states and 5782 transitions.
[2020-11-25 14:15:47,556 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1259
[2020-11-25 14:15:47,556 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1259
[2020-11-25 14:15:47,557 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5030 states and 5782 transitions.
[2020-11-25 14:15:47,561 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:15:47,561 INFO  L728         BuchiCegarLoop]: Abstraction has 5030 states and 5782 transitions.
[2020-11-25 14:15:47,566 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5030 states and 5782 transitions.
[2020-11-25 14:15:47,612 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5030 to 5030.
[2020-11-25 14:15:47,612 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5030 states.
[2020-11-25 14:15:47,619 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5030 states to 5030 states and 5782 transitions.
[2020-11-25 14:15:47,620 INFO  L751         BuchiCegarLoop]: Abstraction has 5030 states and 5782 transitions.
[2020-11-25 14:15:47,620 INFO  L631         BuchiCegarLoop]: Abstraction has 5030 states and 5782 transitions.
[2020-11-25 14:15:47,620 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 14:15:47,620 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5030 states and 5782 transitions.
[2020-11-25 14:15:47,629 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:15:47,629 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:15:47,629 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:15:47,631 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:15:47,631 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND TRUE   !(c_s130 >= a_s130)
[L4214]              revert := true;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND TRUE   revert
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND TRUE   revert
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND TRUE   revert
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND TRUE   revert
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s1257 && (value_s1257 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1257] + value_s1257 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND FALSE  !(__exception)
[L2596]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5896]  COND TRUE   DType[this] == DkargoToken
[L5897]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4997]  COND TRUE   DType[this] == DkargoToken
[L4998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5226]              __var_20 := null;
[L5227]  COND TRUE   !(sender_s956 != null)
[L5228]              revert := true;
[L4998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4999]  COND TRUE   revert
[L5897]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5898]  COND TRUE   revert
[L2596]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2597]              assume !revert && gas >= 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s1257 && (value_s1257 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1257] + value_s1257 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND FALSE  !(__exception)
[L2596]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5896]  COND TRUE   DType[this] == DkargoToken
[L5897]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4997]  COND TRUE   DType[this] == DkargoToken
[L4998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5226]              __var_20 := null;
[L5227]  COND TRUE   !(sender_s956 != null)
[L5228]              revert := true;
[L4998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4999]  COND TRUE   revert
[L5897]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5898]  COND TRUE   revert
[L2596]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2597]              assume !revert && gas >= 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:15:47,634 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:15:47,635 INFO  L82        PathProgramCache]: Analyzing trace with hash -649959415, now seen corresponding path program 1 times
[2020-11-25 14:15:47,636 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:15:47,647 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:15:47,693 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 14:15:47,694 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:15:47,694 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 14:15:47,694 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:15:47,694 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 14:15:47,694 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 14:15:47,695 INFO  L87              Difference]: Start difference. First operand 5030 states and 5782 transitions. cyclomatic complexity: 754 Second operand 3 states.
[2020-11-25 14:15:47,836 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:15:47,837 INFO  L93              Difference]: Finished difference Result 5532 states and 6229 transitions.
[2020-11-25 14:15:47,837 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 14:15:47,837 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5532 states and 6229 transitions.
[2020-11-25 14:15:47,854 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:15:47,874 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5532 states to 5165 states and 5785 transitions.
[2020-11-25 14:15:47,874 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1291
[2020-11-25 14:15:47,875 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1296
[2020-11-25 14:15:47,875 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5165 states and 5785 transitions.
[2020-11-25 14:15:47,882 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:15:47,882 INFO  L728         BuchiCegarLoop]: Abstraction has 5165 states and 5785 transitions.
[2020-11-25 14:15:47,888 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5165 states and 5785 transitions.
[2020-11-25 14:15:47,929 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5165 to 4735.
[2020-11-25 14:15:47,930 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4735 states.
[2020-11-25 14:15:47,936 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4735 states to 4735 states and 5247 transitions.
[2020-11-25 14:15:47,936 INFO  L751         BuchiCegarLoop]: Abstraction has 4735 states and 5247 transitions.
[2020-11-25 14:15:47,936 INFO  L631         BuchiCegarLoop]: Abstraction has 4735 states and 5247 transitions.
[2020-11-25 14:15:47,936 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 14:15:47,936 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4735 states and 5247 transitions.
[2020-11-25 14:15:47,944 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:15:47,944 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:15:47,944 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:15:47,949 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:15:47,949 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s1257 && (value_s1257 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1257] + value_s1257 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND FALSE  !(__exception)
[L2596]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5896]  COND TRUE   DType[this] == DkargoToken
[L5897]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4997]  COND TRUE   DType[this] == DkargoToken
[L4998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4999]  COND FALSE  !(revert)
[L5015]              __ret_0_ := true;
[L5897]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5898]  COND FALSE  !(revert)
[L5904]              ret_s1257 := ret_s1257;
[L5905]  COND TRUE   DType[this] == DkargoToken
[L5906]  CALL        call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L5906]  RET         call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5907]  COND FALSE  !(revert)
[L5913]  COND TRUE   DType[this] == DkargoToken
[L5914]  CALL        call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5914]  RET         call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5915]  COND FALSE  !(revert)
[L5921]  COND FALSE  !(__var_41 && __var_42 == 0)
[L5931]  COND TRUE   DType[this] == DkargoToken
[L5932]  CALL        call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L5932]  RET         call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5933]  COND FALSE  !(revert)
[L5939]  COND TRUE   DType[this] == DkargoToken
[L5940]  CALL        call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5940]  RET         call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5941]  COND FALSE  !(revert)
[L5947]  COND FALSE  !(!__var_43 && __var_44 > 0)
[L5957]              __ret_0_ := ret_s1257;
[L2596]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2597]              assume !revert && gas >= 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s1257 && (value_s1257 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1257] + value_s1257 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND FALSE  !(__exception)
[L2596]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5896]  COND TRUE   DType[this] == DkargoToken
[L5897]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4997]  COND TRUE   DType[this] == DkargoToken
[L4998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4999]  COND FALSE  !(revert)
[L5015]              __ret_0_ := true;
[L5897]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5898]  COND FALSE  !(revert)
[L5904]              ret_s1257 := ret_s1257;
[L5905]  COND TRUE   DType[this] == DkargoToken
[L5906]  CALL        call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L5906]  RET         call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5907]  COND FALSE  !(revert)
[L5913]  COND TRUE   DType[this] == DkargoToken
[L5914]  CALL        call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5914]  RET         call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5915]  COND FALSE  !(revert)
[L5921]  COND FALSE  !(__var_41 && __var_42 == 0)
[L5931]  COND TRUE   DType[this] == DkargoToken
[L5932]  CALL        call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L5932]  RET         call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5933]  COND FALSE  !(revert)
[L5939]  COND TRUE   DType[this] == DkargoToken
[L5940]  CALL        call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5940]  RET         call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5941]  COND FALSE  !(revert)
[L5947]  COND FALSE  !(!__var_43 && __var_44 > 0)
[L5957]              __ret_0_ := ret_s1257;
[L2596]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2597]              assume !revert && gas >= 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:15:47,957 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:15:47,957 INFO  L82        PathProgramCache]: Analyzing trace with hash -1921165663, now seen corresponding path program 1 times
[2020-11-25 14:15:47,958 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:15:47,982 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:15:48,087 INFO  L134       CoverageAnalysis]: Checked inductivity of 72 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 72 trivial. 0 not checked.
[2020-11-25 14:15:48,087 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:15:48,087 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:15:48,088 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:15:48,088 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:15:48,088 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:15:48,088 INFO  L87              Difference]: Start difference. First operand 4735 states and 5247 transitions. cyclomatic complexity: 514 Second operand 4 states.
[2020-11-25 14:15:48,110 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:15:48,110 INFO  L93              Difference]: Finished difference Result 4749 states and 5275 transitions.
[2020-11-25 14:15:48,110 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:15:48,110 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4749 states and 5275 transitions.
[2020-11-25 14:15:48,118 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:15:48,129 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4749 states to 4739 states and 5263 transitions.
[2020-11-25 14:15:48,129 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1220
[2020-11-25 14:15:48,130 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1220
[2020-11-25 14:15:48,130 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4739 states and 5263 transitions.
[2020-11-25 14:15:48,133 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:15:48,133 INFO  L728         BuchiCegarLoop]: Abstraction has 4739 states and 5263 transitions.
[2020-11-25 14:15:48,136 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4739 states and 5263 transitions.
[2020-11-25 14:15:48,159 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4739 to 4739.
[2020-11-25 14:15:48,159 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4739 states.
[2020-11-25 14:15:48,163 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4739 states to 4739 states and 5263 transitions.
[2020-11-25 14:15:48,163 INFO  L751         BuchiCegarLoop]: Abstraction has 4739 states and 5263 transitions.
[2020-11-25 14:15:48,163 INFO  L631         BuchiCegarLoop]: Abstraction has 4739 states and 5263 transitions.
[2020-11-25 14:15:48,163 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 14:15:48,163 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4739 states and 5263 transitions.
[2020-11-25 14:15:48,168 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:15:48,168 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:15:48,168 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:15:48,172 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:15:48,172 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s1257 && (value_s1257 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1257] + value_s1257 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND FALSE  !(__exception)
[L2596]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5896]  COND TRUE   DType[this] == DkargoToken
[L5897]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4997]  COND TRUE   DType[this] == DkargoToken
[L4998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4999]  COND FALSE  !(revert)
[L5015]              __ret_0_ := true;
[L5897]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5898]  COND FALSE  !(revert)
[L5904]              ret_s1257 := ret_s1257;
[L5905]  COND TRUE   DType[this] == DkargoToken
[L5906]  CALL        call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L5906]  RET         call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5907]  COND FALSE  !(revert)
[L5913]  COND TRUE   DType[this] == DkargoToken
[L5914]  CALL        call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5914]  RET         call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5915]  COND FALSE  !(revert)
[L5921]  COND FALSE  !(__var_41 && __var_42 == 0)
[L5931]  COND TRUE   DType[this] == DkargoToken
[L5932]  CALL        call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L5932]  RET         call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5933]  COND FALSE  !(revert)
[L5939]  COND TRUE   DType[this] == DkargoToken
[L5940]  CALL        call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5940]  RET         call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5941]  COND FALSE  !(revert)
[L5947]  COND FALSE  !(!__var_43 && __var_44 > 0)
[L5957]              __ret_0_ := ret_s1257;
[L2596]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2597]              assume !revert && gas >= 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s1257 && (value_s1257 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1257] + value_s1257 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND FALSE  !(__exception)
[L2596]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5896]  COND TRUE   DType[this] == DkargoToken
[L5897]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4997]  COND TRUE   DType[this] == DkargoToken
[L4998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4999]  COND FALSE  !(revert)
[L5015]              __ret_0_ := true;
[L5897]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5898]  COND FALSE  !(revert)
[L5904]              ret_s1257 := ret_s1257;
[L5905]  COND TRUE   DType[this] == DkargoToken
[L5906]  CALL        call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L5906]  RET         call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5907]  COND FALSE  !(revert)
[L5913]  COND TRUE   DType[this] == DkargoToken
[L5914]  CALL        call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5914]  RET         call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5915]  COND FALSE  !(revert)
[L5921]  COND FALSE  !(__var_41 && __var_42 == 0)
[L5931]  COND TRUE   DType[this] == DkargoToken
[L5932]  CALL        call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L5932]  RET         call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5933]  COND FALSE  !(revert)
[L5939]  COND TRUE   DType[this] == DkargoToken
[L5940]  CALL        call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5940]  RET         call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5941]  COND FALSE  !(revert)
[L5947]  COND FALSE  !(!__var_43 && __var_44 > 0)
[L5957]              __ret_0_ := ret_s1257;
[L2596]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2597]              assume !revert && gas >= 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:15:48,177 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:15:48,177 INFO  L82        PathProgramCache]: Analyzing trace with hash -225060552, now seen corresponding path program 1 times
[2020-11-25 14:15:48,178 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:15:48,195 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:15:48,301 INFO  L134       CoverageAnalysis]: Checked inductivity of 72 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 72 trivial. 0 not checked.
[2020-11-25 14:15:48,301 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:15:48,301 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 14:15:48,302 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:15:48,302 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 14:15:48,302 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 14:15:48,302 INFO  L87              Difference]: Start difference. First operand 4739 states and 5263 transitions. cyclomatic complexity: 526 Second operand 6 states.
[2020-11-25 14:15:48,395 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:15:48,395 INFO  L93              Difference]: Finished difference Result 4874 states and 5426 transitions.
[2020-11-25 14:15:48,395 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 14:15:48,395 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4874 states and 5426 transitions.
[2020-11-25 14:15:48,405 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:15:48,420 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4874 states to 4874 states and 5426 transitions.
[2020-11-25 14:15:48,420 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1236
[2020-11-25 14:15:48,420 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1236
[2020-11-25 14:15:48,420 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4874 states and 5426 transitions.
[2020-11-25 14:15:48,424 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:15:48,424 INFO  L728         BuchiCegarLoop]: Abstraction has 4874 states and 5426 transitions.
[2020-11-25 14:15:48,428 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4874 states and 5426 transitions.
[2020-11-25 14:15:48,469 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4874 to 4799.
[2020-11-25 14:15:48,469 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4799 states.
[2020-11-25 14:15:48,474 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4799 states to 4799 states and 5340 transitions.
[2020-11-25 14:15:48,474 INFO  L751         BuchiCegarLoop]: Abstraction has 4799 states and 5340 transitions.
[2020-11-25 14:15:48,474 INFO  L631         BuchiCegarLoop]: Abstraction has 4799 states and 5340 transitions.
[2020-11-25 14:15:48,474 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 14:15:48,474 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4799 states and 5340 transitions.
[2020-11-25 14:15:48,479 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:15:48,479 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:15:48,479 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:15:48,482 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:15:48,482 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s1257 && (value_s1257 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1257] + value_s1257 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND FALSE  !(__exception)
[L2596]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5896]  COND TRUE   DType[this] == DkargoToken
[L5897]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4997]  COND TRUE   DType[this] == DkargoToken
[L4998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4999]  COND FALSE  !(revert)
[L5015]              __ret_0_ := true;
[L5897]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5898]  COND FALSE  !(revert)
[L5904]              ret_s1257 := ret_s1257;
[L5905]  COND TRUE   DType[this] == DkargoToken
[L5906]  CALL        call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L5906]  RET         call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5907]  COND FALSE  !(revert)
[L5913]  COND TRUE   DType[this] == DkargoToken
[L5914]  CALL        call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5914]  RET         call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5915]  COND FALSE  !(revert)
[L5921]  COND FALSE  !(__var_41 && __var_42 == 0)
[L5931]  COND TRUE   DType[this] == DkargoToken
[L5932]  CALL        call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L5932]  RET         call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5933]  COND FALSE  !(revert)
[L5939]  COND TRUE   DType[this] == DkargoToken
[L5940]  CALL        call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5940]  RET         call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5941]  COND FALSE  !(revert)
[L5947]  COND FALSE  !(!__var_43 && __var_44 > 0)
[L5957]              __ret_0_ := ret_s1257;
[L2596]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2597]              assume !revert && gas >= 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s1257 && (value_s1257 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1257] + value_s1257 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND FALSE  !(__exception)
[L2596]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5896]  COND TRUE   DType[this] == DkargoToken
[L5897]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4997]  COND TRUE   DType[this] == DkargoToken
[L4998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4999]  COND FALSE  !(revert)
[L5015]              __ret_0_ := true;
[L5897]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5898]  COND FALSE  !(revert)
[L5904]              ret_s1257 := ret_s1257;
[L5905]  COND TRUE   DType[this] == DkargoToken
[L5906]  CALL        call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L5906]  RET         call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5907]  COND FALSE  !(revert)
[L5913]  COND TRUE   DType[this] == DkargoToken
[L5914]  CALL        call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5914]  RET         call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5915]  COND FALSE  !(revert)
[L5921]  COND FALSE  !(__var_41 && __var_42 == 0)
[L5931]  COND TRUE   DType[this] == DkargoToken
[L5932]  CALL        call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L5932]  RET         call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5933]  COND FALSE  !(revert)
[L5939]  COND TRUE   DType[this] == DkargoToken
[L5940]  CALL        call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5940]  RET         call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5941]  COND FALSE  !(revert)
[L5947]  COND FALSE  !(!__var_43 && __var_44 > 0)
[L5957]              __ret_0_ := ret_s1257;
[L2596]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2597]              assume !revert && gas >= 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:15:48,487 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:15:48,487 INFO  L82        PathProgramCache]: Analyzing trace with hash 512861976, now seen corresponding path program 1 times
[2020-11-25 14:15:48,488 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:15:48,505 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:15:48,960 INFO  L134       CoverageAnalysis]: Checked inductivity of 71 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 69 trivial. 0 not checked.
[2020-11-25 14:15:48,960 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:15:48,961 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 14:15:48,961 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:15:48,961 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 14:15:48,961 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=60, Invalid=590, Unknown=0, NotChecked=0, Total=650
[2020-11-25 14:15:48,962 INFO  L87              Difference]: Start difference. First operand 4799 states and 5340 transitions. cyclomatic complexity: 543 Second operand 26 states.
[2020-11-25 14:15:57,428 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:15:57,428 INFO  L93              Difference]: Finished difference Result 5020 states and 5622 transitions.
[2020-11-25 14:15:57,428 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-11-25 14:15:57,428 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5020 states and 5622 transitions.
[2020-11-25 14:15:57,438 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:15:57,449 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5020 states to 5020 states and 5622 transitions.
[2020-11-25 14:15:57,449 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1256
[2020-11-25 14:15:57,450 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1256
[2020-11-25 14:15:57,450 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5020 states and 5622 transitions.
[2020-11-25 14:15:57,453 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:15:57,453 INFO  L728         BuchiCegarLoop]: Abstraction has 5020 states and 5622 transitions.
[2020-11-25 14:15:57,458 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5020 states and 5622 transitions.
[2020-11-25 14:15:57,484 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5020 to 4701.
[2020-11-25 14:15:57,484 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4701 states.
[2020-11-25 14:15:57,489 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4701 states to 4701 states and 5213 transitions.
[2020-11-25 14:15:57,489 INFO  L751         BuchiCegarLoop]: Abstraction has 4701 states and 5213 transitions.
[2020-11-25 14:15:57,489 INFO  L631         BuchiCegarLoop]: Abstraction has 4701 states and 5213 transitions.
[2020-11-25 14:15:57,489 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 14:15:57,489 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4701 states and 5213 transitions.
[2020-11-25 14:15:57,494 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:15:57,494 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:15:57,494 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:15:57,495 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:15:57,496 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s1257 && (value_s1257 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1257] + value_s1257 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND FALSE  !(__exception)
[L2596]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5896]  COND TRUE   DType[this] == DkargoToken
[L5897]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4997]  COND TRUE   DType[this] == DkargoToken
[L4998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4999]  COND FALSE  !(revert)
[L5015]              __ret_0_ := true;
[L5897]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5898]  COND FALSE  !(revert)
[L5904]              ret_s1257 := ret_s1257;
[L5905]  COND TRUE   DType[this] == DkargoToken
[L5906]  CALL        call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L5906]  RET         call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5907]  COND FALSE  !(revert)
[L5913]  COND TRUE   DType[this] == DkargoToken
[L5914]  CALL        call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5914]  RET         call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5915]  COND FALSE  !(revert)
[L5921]  COND FALSE  !(__var_41 && __var_42 == 0)
[L5931]  COND TRUE   DType[this] == DkargoToken
[L5932]  CALL        call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L5932]  RET         call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5933]  COND FALSE  !(revert)
[L5939]  COND TRUE   DType[this] == DkargoToken
[L5940]  CALL        call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5940]  RET         call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5941]  COND FALSE  !(revert)
[L5947]  COND FALSE  !(!__var_43 && __var_44 > 0)
[L5957]              __ret_0_ := ret_s1257;
[L2596]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2597]              assume !revert && gas >= 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s1257 && (value_s1257 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1257] + value_s1257 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND FALSE  !(__exception)
[L2596]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5896]  COND TRUE   DType[this] == DkargoToken
[L5897]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4997]  COND TRUE   DType[this] == DkargoToken
[L4998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4999]  COND FALSE  !(revert)
[L5015]              __ret_0_ := true;
[L5897]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5898]  COND FALSE  !(revert)
[L5904]              ret_s1257 := ret_s1257;
[L5905]  COND TRUE   DType[this] == DkargoToken
[L5906]  CALL        call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L5906]  RET         call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5907]  COND FALSE  !(revert)
[L5913]  COND TRUE   DType[this] == DkargoToken
[L5914]  CALL        call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5914]  RET         call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5915]  COND FALSE  !(revert)
[L5921]  COND FALSE  !(__var_41 && __var_42 == 0)
[L5931]  COND TRUE   DType[this] == DkargoToken
[L5932]  CALL        call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L5932]  RET         call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5933]  COND FALSE  !(revert)
[L5939]  COND TRUE   DType[this] == DkargoToken
[L5940]  CALL        call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5940]  RET         call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5941]  COND FALSE  !(revert)
[L5947]  COND FALSE  !(!__var_43 && __var_44 > 0)
[L5957]              __ret_0_ := ret_s1257;
[L2596]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2597]              assume !revert && gas >= 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:15:57,501 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:15:57,501 INFO  L82        PathProgramCache]: Analyzing trace with hash -199751720, now seen corresponding path program 2 times
[2020-11-25 14:15:57,502 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:15:57,516 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:15:57,783 INFO  L134       CoverageAnalysis]: Checked inductivity of 71 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 69 trivial. 0 not checked.
[2020-11-25 14:15:57,784 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:15:57,784 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [23] imperfect sequences [] total 23
[2020-11-25 14:15:57,784 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:15:57,784 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-11-25 14:15:57,784 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=53, Invalid=499, Unknown=0, NotChecked=0, Total=552
[2020-11-25 14:15:57,784 INFO  L87              Difference]: Start difference. First operand 4701 states and 5213 transitions. cyclomatic complexity: 515 Second operand 24 states.
[2020-11-25 14:16:05,847 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:16:05,847 INFO  L93              Difference]: Finished difference Result 4942 states and 5522 transitions.
[2020-11-25 14:16:05,847 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 14:16:05,847 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4942 states and 5522 transitions.
[2020-11-25 14:16:05,856 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:16:05,865 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4942 states to 4942 states and 5522 transitions.
[2020-11-25 14:16:05,865 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1214
[2020-11-25 14:16:05,866 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1214
[2020-11-25 14:16:05,866 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4942 states and 5522 transitions.
[2020-11-25 14:16:05,869 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:16:05,869 INFO  L728         BuchiCegarLoop]: Abstraction has 4942 states and 5522 transitions.
[2020-11-25 14:16:05,873 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4942 states and 5522 transitions.
[2020-11-25 14:16:05,897 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4942 to 4743.
[2020-11-25 14:16:05,898 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4743 states.
[2020-11-25 14:16:05,902 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4743 states to 4743 states and 5269 transitions.
[2020-11-25 14:16:05,902 INFO  L751         BuchiCegarLoop]: Abstraction has 4743 states and 5269 transitions.
[2020-11-25 14:16:05,902 INFO  L631         BuchiCegarLoop]: Abstraction has 4743 states and 5269 transitions.
[2020-11-25 14:16:05,902 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 14:16:05,902 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4743 states and 5269 transitions.
[2020-11-25 14:16:05,907 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:16:05,907 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:16:05,907 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:16:05,908 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:16:05,909 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s1257 && (value_s1257 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1257] + value_s1257 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND FALSE  !(__exception)
[L2596]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5896]  COND TRUE   DType[this] == DkargoToken
[L5897]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4997]  COND TRUE   DType[this] == DkargoToken
[L4998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4999]  COND FALSE  !(revert)
[L5015]              __ret_0_ := true;
[L5897]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5898]  COND FALSE  !(revert)
[L5904]              ret_s1257 := ret_s1257;
[L5905]  COND TRUE   DType[this] == DkargoToken
[L5906]  CALL        call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L5906]  RET         call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5907]  COND FALSE  !(revert)
[L5913]  COND TRUE   DType[this] == DkargoToken
[L5914]  CALL        call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5914]  RET         call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5915]  COND FALSE  !(revert)
[L5921]  COND FALSE  !(__var_41 && __var_42 == 0)
[L5931]  COND TRUE   DType[this] == DkargoToken
[L5932]  CALL        call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L5932]  RET         call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5933]  COND FALSE  !(revert)
[L5939]  COND TRUE   DType[this] == DkargoToken
[L5940]  CALL        call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5940]  RET         call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5941]  COND FALSE  !(revert)
[L5947]  COND FALSE  !(!__var_43 && __var_44 > 0)
[L5957]              __ret_0_ := ret_s1257;
[L2596]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2597]              assume !revert && gas >= 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s1257 && (value_s1257 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1257] + value_s1257 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND FALSE  !(__exception)
[L2596]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5896]  COND TRUE   DType[this] == DkargoToken
[L5897]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4997]  COND TRUE   DType[this] == DkargoToken
[L4998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4999]  COND FALSE  !(revert)
[L5015]              __ret_0_ := true;
[L5897]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5898]  COND FALSE  !(revert)
[L5904]              ret_s1257 := ret_s1257;
[L5905]  COND TRUE   DType[this] == DkargoToken
[L5906]  CALL        call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L5906]  RET         call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5907]  COND FALSE  !(revert)
[L5913]  COND TRUE   DType[this] == DkargoToken
[L5914]  CALL        call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5914]  RET         call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5915]  COND FALSE  !(revert)
[L5921]  COND FALSE  !(__var_41 && __var_42 == 0)
[L5931]  COND TRUE   DType[this] == DkargoToken
[L5932]  CALL        call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L5932]  RET         call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5933]  COND FALSE  !(revert)
[L5939]  COND TRUE   DType[this] == DkargoToken
[L5940]  CALL        call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5940]  RET         call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5941]  COND FALSE  !(revert)
[L5947]  COND FALSE  !(!__var_43 && __var_44 > 0)
[L5957]              __ret_0_ := ret_s1257;
[L2596]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2597]              assume !revert && gas >= 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:16:05,913 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:16:05,913 INFO  L82        PathProgramCache]: Analyzing trace with hash -935154248, now seen corresponding path program 1 times
[2020-11-25 14:16:05,914 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:16:05,929 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:16:06,201 INFO  L134       CoverageAnalysis]: Checked inductivity of 74 backedges. 4 proven. 4 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 14:16:06,202 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:16:06,202 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [21] total 21
[2020-11-25 14:16:06,202 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:16:06,202 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-25 14:16:06,203 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=47, Invalid=415, Unknown=0, NotChecked=0, Total=462
[2020-11-25 14:16:06,203 INFO  L87              Difference]: Start difference. First operand 4743 states and 5269 transitions. cyclomatic complexity: 529 Second operand 22 states.
[2020-11-25 14:16:12,912 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:16:12,912 INFO  L93              Difference]: Finished difference Result 4794 states and 5326 transitions.
[2020-11-25 14:16:12,912 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 23 states. 
[2020-11-25 14:16:12,912 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4794 states and 5326 transitions.
[2020-11-25 14:16:12,921 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:16:12,930 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4794 states to 4794 states and 5326 transitions.
[2020-11-25 14:16:12,930 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1178
[2020-11-25 14:16:12,931 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1178
[2020-11-25 14:16:12,931 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4794 states and 5326 transitions.
[2020-11-25 14:16:12,934 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:16:12,934 INFO  L728         BuchiCegarLoop]: Abstraction has 4794 states and 5326 transitions.
[2020-11-25 14:16:12,938 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4794 states and 5326 transitions.
[2020-11-25 14:16:12,958 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4794 to 4652.
[2020-11-25 14:16:12,958 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4652 states.
[2020-11-25 14:16:12,963 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4652 states to 4652 states and 5147 transitions.
[2020-11-25 14:16:12,963 INFO  L751         BuchiCegarLoop]: Abstraction has 4652 states and 5147 transitions.
[2020-11-25 14:16:12,963 INFO  L631         BuchiCegarLoop]: Abstraction has 4652 states and 5147 transitions.
[2020-11-25 14:16:12,963 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 14:16:12,963 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4652 states and 5147 transitions.
[2020-11-25 14:16:12,968 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:16:12,968 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:16:12,968 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:16:12,969 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:16:12,969 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND TRUE   __exception
[L2406]              __tmp__Balance := Balance;
[L2407]              __tmp__DType := DType;
[L2408]              __tmp__Alloc := Alloc;
[L2409]              __tmp__balance_ADDR := balance_ADDR;
[L2410]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2411]              __tmp__sum := sum;
[L2412]              __tmp__M_int_bool := M_int_bool;
[L2413]              __tmp__sum__infcs0 := sum__infcs0;
[L2414]              __tmp__M_Ref_int := M_Ref_int;
[L2415]              __tmp__sum__balances1 := sum__balances1;
[L2416]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2417]              __tmp__sum__allowances2 := sum__allowances2;
[L2418]              __tmp__Length := Length;
[L2419]              __tmp__now := now;
[L2420]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2421]              __tmp___owner_Ownership := _owner_Ownership;
[L2422]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2423]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2424]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2425]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2426]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2427]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2428]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2429]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2430]              __tmp___supply_ERC20 := _supply_ERC20;
[L2431]              __tmp___balances_ERC20 := _balances_ERC20;
[L2432]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2433]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2434]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2435]  CALL        call DkargoToken_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5712]  CALL        call Ownership_Ownership__fail(this, msgsender_MSG, msgvalue_MSG);
[L4096]  CALL        call Ownership_Ownership_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4076]              assume msgsender_MSG != null;
[L4077]              __tmp__Balance[this] := 0;
[L4078]              __tmp___owner_Ownership[this] := null;
[L4080]              __tmp___owner_Ownership[this] := msgsender_MSG;
[L4096]  RET         call Ownership_Ownership_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4097]  COND FALSE  !(revert)
[L5712]  RET         call Ownership_Ownership__fail(this, msgsender_MSG, msgvalue_MSG);
[L5713]  COND FALSE  !(revert)
[L5716]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4817]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4802]              assume msgsender_MSG != null;
[L4803]              __tmp__Balance[this] := 0;
[L4817]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4818]  COND FALSE  !(revert)
[L5716]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5717]  COND FALSE  !(revert)
[L5720]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4900]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4817]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4802]              assume msgsender_MSG != null;
[L4803]              __tmp__Balance[this] := 0;
[L4817]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4818]  COND FALSE  !(revert)
[L4900]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]  COND FALSE  !(revert)
[L4904]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4835]              assume msgsender_MSG != null;
[L4836]              __tmp__Balance[this] := 0;
[L4837]              __tmp___supply_ERC20[this] := 0;
[L4838]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4839]              __tmp__sum__balances1[this] := 0;
[L4840]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4841]              __tmp__sum__allowances2[this] := 0;
[L4843]              pebs_s747 := supply_s747;
[L4844]  COND FALSE  !(__tmp__DType[this] == DkargoToken)
[L4849]  COND TRUE   __tmp__DType[this] == ERC20Safe
[L4850]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5258]              __var_24 := null;
[L5259]  COND FALSE  !(!(account_s999 != null))
[L5263]  CALL        call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___supply_ERC20[this], amount_s999);
[L4200]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4201]  COND FALSE  !(!(c_s130 >= a_s130))
[L4205]              __ret_0_ := c_s130;
[L5263]  RET         call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___supply_ERC20[this], amount_s999);
[L5264]  COND FALSE  !(revert)
[L5267]              __tmp___supply_ERC20[this] := __var_25;
[L5268]  CALL        call __var_26 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s999], amount_s999);
[L4200]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4201]  COND FALSE  !(!(c_s130 >= a_s130))
[L4205]              __ret_0_ := c_s130;
[L5268]  RET         call __var_26 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s999], amount_s999);
[L5269]  COND FALSE  !(revert)
[L5272]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][account_s999];
[L5273]              __tmp___balances_ERC20[this][account_s999] := __var_26;
[L5274]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][account_s999];
[L4850]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4851]  COND FALSE  !(revert)
[L4904]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4905]  COND FALSE  !(revert)
[L5720]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5721]  COND FALSE  !(revert)
[L5724]  CALL        call ERC20Safe_ERC20Safe__fail(this, msgsender_MSG, msgvalue_MSG);
[L5369]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4817]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4802]              assume msgsender_MSG != null;
[L4803]              __tmp__Balance[this] := 0;
[L4817]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4818]  COND FALSE  !(revert)
[L5369]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5370]  COND FALSE  !(revert)
[L5373]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5354]              assume msgsender_MSG != null;
[L5355]              __tmp__Balance[this] := 0;
[L5373]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5374]  COND FALSE  !(revert)
[L5724]  RET         call ERC20Safe_ERC20Safe__fail(this, msgsender_MSG, msgvalue_MSG);
[L5725]  COND FALSE  !(revert)
[L5728]  CALL        call AddressChain_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG);
[L4353]  CALL        call AddressChain_AddressChain_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4325]              assume msgsender_MSG != null;
[L4326]              __tmp__Balance[this] := 0;
[L4328]  CALL        call __var_3 := FreshRefGenerator__fail();
[L3975]              havoc newRef;
[L3976]              assume __tmp__Alloc[newRef] == false;
[L3977]              __tmp__Alloc[newRef] := true;
[L3978]              assume newRef != null;
[L4328]  RET         call __var_3 := FreshRefGenerator__fail();
[L4329]  COND FALSE  !(revert)
[L4332]              __tmp___slist_AddressChain[this] := __var_3;
[L4353]  RET         call AddressChain_AddressChain_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4354]  COND FALSE  !(revert)
[L5728]  RET         call AddressChain_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG);
[L5729]  COND FALSE  !(revert)
[L5732]  CALL        call IERC165_IERC165__fail(this, msgsender_MSG, msgvalue_MSG);
[L4681]  CALL        call IERC165_IERC165_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4666]              assume msgsender_MSG != null;
[L4667]              __tmp__Balance[this] := 0;
[L4681]  RET         call IERC165_IERC165_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4682]  COND FALSE  !(revert)
[L5732]  RET         call IERC165_IERC165__fail(this, msgsender_MSG, msgvalue_MSG);
[L5733]  COND FALSE  !(revert)
[L5736]  CALL        call ERC165_ERC165__fail(this, msgsender_MSG, msgvalue_MSG);
[L4746]  CALL        call IERC165_IERC165__fail(this, msgsender_MSG, msgvalue_MSG);
[L4681]  CALL        call IERC165_IERC165_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4666]              assume msgsender_MSG != null;
[L4667]              __tmp__Balance[this] := 0;
[L4681]  RET         call IERC165_IERC165_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4682]  COND FALSE  !(revert)
[L4746]  RET         call IERC165_IERC165__fail(this, msgsender_MSG, msgvalue_MSG);
[L4747]  COND FALSE  !(revert)
[L4750]  CALL        call ERC165_ERC165_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4699]              assume msgsender_MSG != null;
[L4700]              __tmp__Balance[this] := 0;
[L4701]              __tmp___infcs_ERC165[this] := zerointboolArr();
[L4703]              __var_16 := 33540519;
[L4704]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4705]  CALL        call _registerInterface~bytes4_ERC165__fail(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4783]  COND FALSE  !(!(infcid_s644 != -1))
[L4787]              __tmp___infcs_ERC165[this][infcid_s644] := true;
[L4705]  RET         call _registerInterface~bytes4_ERC165__fail(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4706]  COND FALSE  !(revert)
[L4750]  RET         call ERC165_ERC165_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4751]  COND FALSE  !(revert)
[L5736]  RET         call ERC165_ERC165__fail(this, msgsender_MSG, msgvalue_MSG);
[L5737]  COND FALSE  !(revert)
[L5740]  CALL        call DkargoPrefix_DkargoPrefix__fail(this, msgsender_MSG, msgvalue_MSG);
[L4037]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4020]              assume msgsender_MSG != null;
[L4021]              __tmp__Balance[this] := 0;
[L4022]              __tmp___dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4037]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4038]  COND FALSE  !(revert)
[L5740]  RET         call DkargoPrefix_DkargoPrefix__fail(this, msgsender_MSG, msgvalue_MSG);
[L5741]  COND FALSE  !(revert)
[L5744]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5637]              assume msgsender_MSG != null;
[L5638]              __tmp__Balance[this] := 0;
[L5639]              __tmp___name_DkargoToken[this] := -1676636045;
[L5640]              __tmp___symbol_DkargoToken[this] := -1676636045;
[L5642]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5643]  CALL        call _setDkargoPrefix~string_DkargoPrefix__fail(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4065]              __tmp___dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5643]  RET         call _setDkargoPrefix~string_DkargoPrefix__fail(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5644]  COND FALSE  !(revert)
[L5650]              __var_39 := -1804674067;
[L5651]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5652]  CALL        call _registerInterface~bytes4_ERC165__fail(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4783]  COND FALSE  !(!(infcid_s644 != -1))
[L4787]              __tmp___infcs_ERC165[this][infcid_s644] := true;
[L5652]  RET         call _registerInterface~bytes4_ERC165__fail(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5653]  COND FALSE  !(revert)
[L5659]              __tmp___name_DkargoToken[this] := name_s1191;
[L5660]              __tmp___symbol_DkargoToken[this] := symbol_s1191;
[L5661]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5662]  CALL        call _linkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4462]              __var_6 := null;
[L4463]  COND FALSE  !(!(node_s455 != null))
[L4467]  COND FALSE  !(__tmp__DType[this] == DkargoToken)
[L4472]  COND TRUE   __tmp__DType[this] == AddressChain
[L4473]  CALL        call __var_7 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4431]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L4432]              __ret_0_ := true;
[L4473]  RET         call __var_7 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4474]  COND FALSE  !(revert)
[L4480]  COND FALSE  !(!!__var_7)
[L4484]  COND TRUE   __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 0
[L4485]              __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] := node_s455;
[L4486]              __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] := node_s455;
[L4492]  CALL        call __var_8 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]], 1);
[L4200]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4201]  COND FALSE  !(!(c_s130 >= a_s130))
[L4205]              __ret_0_ := c_s130;
[L4492]  RET         call __var_8 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]], 1);
[L4493]  COND FALSE  !(revert)
[L4496]              __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] := __var_8;
[L5662]  RET         call _linkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5663]  COND FALSE  !(revert)
[L5744]  RET         call DkargoToken_DkargoToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5745]  COND FALSE  !(revert)
[L2435]  RET         call DkargoToken_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2436]              assume revert || gas < 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s1257 && (value_s1257 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1257] + value_s1257 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND FALSE  !(__exception)
[L2596]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5896]  COND TRUE   DType[this] == DkargoToken
[L5897]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4997]  COND TRUE   DType[this] == DkargoToken
[L4998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4999]  COND FALSE  !(revert)
[L5015]              __ret_0_ := true;
[L5897]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5898]  COND FALSE  !(revert)
[L5904]              ret_s1257 := ret_s1257;
[L5905]  COND TRUE   DType[this] == DkargoToken
[L5906]  CALL        call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L5906]  RET         call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5907]  COND FALSE  !(revert)
[L5913]  COND TRUE   DType[this] == DkargoToken
[L5914]  CALL        call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5914]  RET         call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5915]  COND FALSE  !(revert)
[L5921]  COND FALSE  !(__var_41 && __var_42 == 0)
[L5931]  COND TRUE   DType[this] == DkargoToken
[L5932]  CALL        call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L5932]  RET         call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5933]  COND FALSE  !(revert)
[L5939]  COND TRUE   DType[this] == DkargoToken
[L5940]  CALL        call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5940]  RET         call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5941]  COND FALSE  !(revert)
[L5947]  COND FALSE  !(!__var_43 && __var_44 > 0)
[L5957]              __ret_0_ := ret_s1257;
[L2596]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2597]              assume !revert && gas >= 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND TRUE   choice == 23
[L8286]              gas := gas - 21000;
[L8287]  COND FALSE  !(gas >= 0)
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:16:12,973 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:16:12,973 INFO  L82        PathProgramCache]: Analyzing trace with hash -806887027, now seen corresponding path program 1 times
[2020-11-25 14:16:12,974 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:16:12,984 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:16:13,098 INFO  L134       CoverageAnalysis]: Checked inductivity of 65 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 65 trivial. 0 not checked.
[2020-11-25 14:16:13,098 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:16:13,098 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 14:16:13,099 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:16:13,099 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 14:16:13,099 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 14:16:13,099 INFO  L87              Difference]: Start difference. First operand 4652 states and 5147 transitions. cyclomatic complexity: 498 Second operand 8 states.
[2020-11-25 14:16:13,873 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:16:13,873 INFO  L93              Difference]: Finished difference Result 6628 states and 7489 transitions.
[2020-11-25 14:16:13,873 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 14:16:13,873 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6628 states and 7489 transitions.
[2020-11-25 14:16:13,887 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:16:13,902 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6628 states to 6586 states and 7438 transitions.
[2020-11-25 14:16:13,902 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1598
[2020-11-25 14:16:13,903 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1598
[2020-11-25 14:16:13,903 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6586 states and 7438 transitions.
[2020-11-25 14:16:13,907 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:16:13,907 INFO  L728         BuchiCegarLoop]: Abstraction has 6586 states and 7438 transitions.
[2020-11-25 14:16:13,911 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6586 states and 7438 transitions.
[2020-11-25 14:16:13,943 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6586 to 6498.
[2020-11-25 14:16:13,944 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6498 states.
[2020-11-25 14:16:13,952 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6498 states to 6498 states and 7350 transitions.
[2020-11-25 14:16:13,952 INFO  L751         BuchiCegarLoop]: Abstraction has 6498 states and 7350 transitions.
[2020-11-25 14:16:13,952 INFO  L631         BuchiCegarLoop]: Abstraction has 6498 states and 7350 transitions.
[2020-11-25 14:16:13,952 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 14:16:13,952 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6498 states and 7350 transitions.
[2020-11-25 14:16:13,959 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:16:13,959 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:16:13,959 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:16:13,960 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:16:13,961 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND TRUE   __exception
[L2406]              __tmp__Balance := Balance;
[L2407]              __tmp__DType := DType;
[L2408]              __tmp__Alloc := Alloc;
[L2409]              __tmp__balance_ADDR := balance_ADDR;
[L2410]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2411]              __tmp__sum := sum;
[L2412]              __tmp__M_int_bool := M_int_bool;
[L2413]              __tmp__sum__infcs0 := sum__infcs0;
[L2414]              __tmp__M_Ref_int := M_Ref_int;
[L2415]              __tmp__sum__balances1 := sum__balances1;
[L2416]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2417]              __tmp__sum__allowances2 := sum__allowances2;
[L2418]              __tmp__Length := Length;
[L2419]              __tmp__now := now;
[L2420]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2421]              __tmp___owner_Ownership := _owner_Ownership;
[L2422]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2423]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2424]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2425]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2426]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2427]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2428]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2429]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2430]              __tmp___supply_ERC20 := _supply_ERC20;
[L2431]              __tmp___balances_ERC20 := _balances_ERC20;
[L2432]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2433]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2434]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2435]  CALL        call DkargoToken_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5712]  CALL        call Ownership_Ownership__fail(this, msgsender_MSG, msgvalue_MSG);
[L4096]  CALL        call Ownership_Ownership_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4076]              assume msgsender_MSG != null;
[L4077]              __tmp__Balance[this] := 0;
[L4078]              __tmp___owner_Ownership[this] := null;
[L4080]              __tmp___owner_Ownership[this] := msgsender_MSG;
[L4096]  RET         call Ownership_Ownership_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4097]  COND FALSE  !(revert)
[L5712]  RET         call Ownership_Ownership__fail(this, msgsender_MSG, msgvalue_MSG);
[L5713]  COND FALSE  !(revert)
[L5716]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4817]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4802]              assume msgsender_MSG != null;
[L4803]              __tmp__Balance[this] := 0;
[L4817]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4818]  COND FALSE  !(revert)
[L5716]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5717]  COND FALSE  !(revert)
[L5720]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4900]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4817]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4802]              assume msgsender_MSG != null;
[L4803]              __tmp__Balance[this] := 0;
[L4817]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4818]  COND FALSE  !(revert)
[L4900]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]  COND FALSE  !(revert)
[L4904]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4835]              assume msgsender_MSG != null;
[L4836]              __tmp__Balance[this] := 0;
[L4837]              __tmp___supply_ERC20[this] := 0;
[L4838]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4839]              __tmp__sum__balances1[this] := 0;
[L4840]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4841]              __tmp__sum__allowances2[this] := 0;
[L4843]              pebs_s747 := supply_s747;
[L4844]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4845]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5258]              __var_24 := null;
[L5259]  COND FALSE  !(!(account_s999 != null))
[L5263]  CALL        call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___supply_ERC20[this], amount_s999);
[L4200]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4201]  COND FALSE  !(!(c_s130 >= a_s130))
[L4205]              __ret_0_ := c_s130;
[L5263]  RET         call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___supply_ERC20[this], amount_s999);
[L5264]  COND FALSE  !(revert)
[L5267]              __tmp___supply_ERC20[this] := __var_25;
[L5268]  CALL        call __var_26 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s999], amount_s999);
[L4200]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4201]  COND FALSE  !(!(c_s130 >= a_s130))
[L4205]              __ret_0_ := c_s130;
[L5268]  RET         call __var_26 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s999], amount_s999);
[L5269]  COND FALSE  !(revert)
[L5272]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][account_s999];
[L5273]              __tmp___balances_ERC20[this][account_s999] := __var_26;
[L5274]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][account_s999];
[L4845]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4846]  COND FALSE  !(revert)
[L4904]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4905]  COND FALSE  !(revert)
[L5720]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5721]  COND FALSE  !(revert)
[L5724]  CALL        call ERC20Safe_ERC20Safe__fail(this, msgsender_MSG, msgvalue_MSG);
[L5369]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4817]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4802]              assume msgsender_MSG != null;
[L4803]              __tmp__Balance[this] := 0;
[L4817]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4818]  COND FALSE  !(revert)
[L5369]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5370]  COND FALSE  !(revert)
[L5373]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5354]              assume msgsender_MSG != null;
[L5355]              __tmp__Balance[this] := 0;
[L5373]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5374]  COND FALSE  !(revert)
[L5724]  RET         call ERC20Safe_ERC20Safe__fail(this, msgsender_MSG, msgvalue_MSG);
[L5725]  COND FALSE  !(revert)
[L5728]  CALL        call AddressChain_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG);
[L4353]  CALL        call AddressChain_AddressChain_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4325]              assume msgsender_MSG != null;
[L4326]              __tmp__Balance[this] := 0;
[L4328]  CALL        call __var_3 := FreshRefGenerator__fail();
[L3975]              havoc newRef;
[L3976]              assume __tmp__Alloc[newRef] == false;
[L3977]              __tmp__Alloc[newRef] := true;
[L3978]              assume newRef != null;
[L4328]  RET         call __var_3 := FreshRefGenerator__fail();
[L4329]  COND FALSE  !(revert)
[L4332]              __tmp___slist_AddressChain[this] := __var_3;
[L4353]  RET         call AddressChain_AddressChain_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4354]  COND FALSE  !(revert)
[L5728]  RET         call AddressChain_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG);
[L5729]  COND FALSE  !(revert)
[L5732]  CALL        call IERC165_IERC165__fail(this, msgsender_MSG, msgvalue_MSG);
[L4681]  CALL        call IERC165_IERC165_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4666]              assume msgsender_MSG != null;
[L4667]              __tmp__Balance[this] := 0;
[L4681]  RET         call IERC165_IERC165_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4682]  COND FALSE  !(revert)
[L5732]  RET         call IERC165_IERC165__fail(this, msgsender_MSG, msgvalue_MSG);
[L5733]  COND FALSE  !(revert)
[L5736]  CALL        call ERC165_ERC165__fail(this, msgsender_MSG, msgvalue_MSG);
[L4746]  CALL        call IERC165_IERC165__fail(this, msgsender_MSG, msgvalue_MSG);
[L4681]  CALL        call IERC165_IERC165_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4666]              assume msgsender_MSG != null;
[L4667]              __tmp__Balance[this] := 0;
[L4681]  RET         call IERC165_IERC165_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4682]  COND FALSE  !(revert)
[L4746]  RET         call IERC165_IERC165__fail(this, msgsender_MSG, msgvalue_MSG);
[L4747]  COND FALSE  !(revert)
[L4750]  CALL        call ERC165_ERC165_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4699]              assume msgsender_MSG != null;
[L4700]              __tmp__Balance[this] := 0;
[L4701]              __tmp___infcs_ERC165[this] := zerointboolArr();
[L4703]              __var_16 := 33540519;
[L4704]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4705]  CALL        call _registerInterface~bytes4_ERC165__fail(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4783]  COND FALSE  !(!(infcid_s644 != -1))
[L4787]              __tmp___infcs_ERC165[this][infcid_s644] := true;
[L4705]  RET         call _registerInterface~bytes4_ERC165__fail(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4706]  COND FALSE  !(revert)
[L4750]  RET         call ERC165_ERC165_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4751]  COND FALSE  !(revert)
[L5736]  RET         call ERC165_ERC165__fail(this, msgsender_MSG, msgvalue_MSG);
[L5737]  COND FALSE  !(revert)
[L5740]  CALL        call DkargoPrefix_DkargoPrefix__fail(this, msgsender_MSG, msgvalue_MSG);
[L4037]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4020]              assume msgsender_MSG != null;
[L4021]              __tmp__Balance[this] := 0;
[L4022]              __tmp___dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4037]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4038]  COND FALSE  !(revert)
[L5740]  RET         call DkargoPrefix_DkargoPrefix__fail(this, msgsender_MSG, msgvalue_MSG);
[L5741]  COND FALSE  !(revert)
[L5744]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5637]              assume msgsender_MSG != null;
[L5638]              __tmp__Balance[this] := 0;
[L5639]              __tmp___name_DkargoToken[this] := -1676636045;
[L5640]              __tmp___symbol_DkargoToken[this] := -1676636045;
[L5642]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5643]  CALL        call _setDkargoPrefix~string_DkargoPrefix__fail(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4065]              __tmp___dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5643]  RET         call _setDkargoPrefix~string_DkargoPrefix__fail(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5644]  COND FALSE  !(revert)
[L5650]              __var_39 := -1804674067;
[L5651]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5652]  CALL        call _registerInterface~bytes4_ERC165__fail(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4783]  COND FALSE  !(!(infcid_s644 != -1))
[L4787]              __tmp___infcs_ERC165[this][infcid_s644] := true;
[L5652]  RET         call _registerInterface~bytes4_ERC165__fail(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5653]  COND FALSE  !(revert)
[L5659]              __tmp___name_DkargoToken[this] := name_s1191;
[L5660]              __tmp___symbol_DkargoToken[this] := symbol_s1191;
[L5661]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5662]  CALL        call _linkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4462]              __var_6 := null;
[L4463]  COND FALSE  !(!(node_s455 != null))
[L4467]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4468]  CALL        call __var_7 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4431]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L4432]              __ret_0_ := true;
[L4468]  RET         call __var_7 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4469]  COND FALSE  !(revert)
[L4480]  COND FALSE  !(!!__var_7)
[L4484]  COND TRUE   __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 0
[L4485]              __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] := node_s455;
[L4486]              __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] := node_s455;
[L4492]  CALL        call __var_8 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]], 1);
[L4200]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4201]  COND FALSE  !(!(c_s130 >= a_s130))
[L4205]              __ret_0_ := c_s130;
[L4492]  RET         call __var_8 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]], 1);
[L4493]  COND FALSE  !(revert)
[L4496]              __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] := __var_8;
[L5662]  RET         call _linkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5663]  COND FALSE  !(revert)
[L5744]  RET         call DkargoToken_DkargoToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5745]  COND FALSE  !(revert)
[L2435]  RET         call DkargoToken_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2436]              assume revert || gas < 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s1257 && (value_s1257 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1257] + value_s1257 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND FALSE  !(__exception)
[L2596]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5896]  COND TRUE   DType[this] == DkargoToken
[L5897]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4997]  COND TRUE   DType[this] == DkargoToken
[L4998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4999]  COND FALSE  !(revert)
[L5015]              __ret_0_ := true;
[L5897]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5898]  COND FALSE  !(revert)
[L5904]              ret_s1257 := ret_s1257;
[L5905]  COND TRUE   DType[this] == DkargoToken
[L5906]  CALL        call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L5906]  RET         call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5907]  COND FALSE  !(revert)
[L5913]  COND TRUE   DType[this] == DkargoToken
[L5914]  CALL        call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5914]  RET         call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5915]  COND FALSE  !(revert)
[L5921]  COND FALSE  !(__var_41 && __var_42 == 0)
[L5931]  COND TRUE   DType[this] == DkargoToken
[L5932]  CALL        call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L5932]  RET         call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5933]  COND FALSE  !(revert)
[L5939]  COND TRUE   DType[this] == DkargoToken
[L5940]  CALL        call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5940]  RET         call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5941]  COND FALSE  !(revert)
[L5947]  COND FALSE  !(!__var_43 && __var_44 > 0)
[L5957]              __ret_0_ := ret_s1257;
[L2596]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2597]              assume !revert && gas >= 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s1257 && (value_s1257 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1257] + value_s1257 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND FALSE  !(__exception)
[L2596]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5896]  COND TRUE   DType[this] == DkargoToken
[L5897]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4997]  COND TRUE   DType[this] == DkargoToken
[L4998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4999]  COND FALSE  !(revert)
[L5015]              __ret_0_ := true;
[L5897]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5898]  COND FALSE  !(revert)
[L5904]              ret_s1257 := ret_s1257;
[L5905]  COND TRUE   DType[this] == DkargoToken
[L5906]  CALL        call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L5906]  RET         call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5907]  COND FALSE  !(revert)
[L5913]  COND TRUE   DType[this] == DkargoToken
[L5914]  CALL        call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5914]  RET         call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5915]  COND FALSE  !(revert)
[L5921]  COND FALSE  !(__var_41 && __var_42 == 0)
[L5931]  COND TRUE   DType[this] == DkargoToken
[L5932]  CALL        call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L5932]  RET         call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5933]  COND FALSE  !(revert)
[L5939]  COND TRUE   DType[this] == DkargoToken
[L5940]  CALL        call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5940]  RET         call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5941]  COND FALSE  !(revert)
[L5947]  COND FALSE  !(!__var_43 && __var_44 > 0)
[L5957]              __ret_0_ := ret_s1257;
[L2596]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2597]              assume !revert && gas >= 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:16:13,965 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:16:13,965 INFO  L82        PathProgramCache]: Analyzing trace with hash -498236658, now seen corresponding path program 1 times
[2020-11-25 14:16:13,966 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:16:13,978 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:16:14,051 INFO  L134       CoverageAnalysis]: Checked inductivity of 65 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 65 trivial. 0 not checked.
[2020-11-25 14:16:14,051 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:16:14,051 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:16:14,052 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:16:14,052 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:16:14,052 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:16:14,052 INFO  L87              Difference]: Start difference. First operand 6498 states and 7350 transitions. cyclomatic complexity: 858 Second operand 4 states.
[2020-11-25 14:16:14,326 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:16:14,326 INFO  L93              Difference]: Finished difference Result 7558 states and 8687 transitions.
[2020-11-25 14:16:14,326 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 14:16:14,326 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7558 states and 8687 transitions.
[2020-11-25 14:16:14,344 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 12
[2020-11-25 14:16:14,362 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7558 states to 7307 states and 8427 transitions.
[2020-11-25 14:16:14,363 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1789
[2020-11-25 14:16:14,363 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1789
[2020-11-25 14:16:14,363 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7307 states and 8427 transitions.
[2020-11-25 14:16:14,368 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:16:14,368 INFO  L728         BuchiCegarLoop]: Abstraction has 7307 states and 8427 transitions.
[2020-11-25 14:16:14,372 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7307 states and 8427 transitions.
[2020-11-25 14:16:14,411 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7307 to 6742.
[2020-11-25 14:16:14,411 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6742 states.
[2020-11-25 14:16:14,419 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6742 states to 6742 states and 7708 transitions.
[2020-11-25 14:16:14,419 INFO  L751         BuchiCegarLoop]: Abstraction has 6742 states and 7708 transitions.
[2020-11-25 14:16:14,419 INFO  L631         BuchiCegarLoop]: Abstraction has 6742 states and 7708 transitions.
[2020-11-25 14:16:14,419 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 14:16:14,419 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6742 states and 7708 transitions.
[2020-11-25 14:16:14,426 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 14:16:14,426 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:16:14,427 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:16:14,428 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:16:14,428 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND FALSE  !(choice == 10)
[L8372]  COND FALSE  !(choice == 9)
[L8378]  COND FALSE  !(choice == 8)
[L8384]  COND FALSE  !(choice == 7)
[L8390]  COND FALSE  !(choice == 6)
[L8397]  COND FALSE  !(choice == 5)
[L8404]  COND TRUE   choice == 4
[L8405]              gas := gas - 21000;
[L8406]  COND TRUE   gas >= 0
[L8407]              assume amount_s1203 >= 0 && amount_s1203 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8408]              assume msgvalue_MSG == 0;
[L8409]  CALL        call burn~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, amount_s1203);
[L2480]              havoc __exception;
[L2481]              revert := false;
[L2482]  COND FALSE  !(__exception)
[L2515]  CALL        call burn~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, amount_s1203);
[L5805]  COND TRUE   DType[this] == DkargoToken
[L5806]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1203);
[L5331]              __var_27 := null;
[L5332]  COND FALSE  !(!(account_s1044 != null))
[L5336]  CALL        call __var_28 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s1044], value_s1044, -1607875231);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5336]  RET         call __var_28 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s1044], value_s1044, -1607875231);
[L5337]  COND FALSE  !(revert)
[L5340]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s1044];
[L5341]              _balances_ERC20[this][account_s1044] := __var_28;
[L5342]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s1044];
[L5343]  CALL        call __var_29 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _supply_ERC20[this], value_s1044, -1676636045);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5343]  RET         call __var_29 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _supply_ERC20[this], value_s1044, -1676636045);
[L5344]  COND FALSE  !(revert)
[L5347]              _supply_ERC20[this] := __var_29;
[L5348]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5806]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s1203);
[L5807]  COND FALSE  !(revert)
[L2515]  RET         call burn~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, amount_s1203);
[L2516]              assume !revert && gas >= 0;
[L8409]  RET         call burn~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, amount_s1203);
[L8450]  RET         call CorralChoice_DkargoToken(this);
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND TRUE   choice == 12
[L8352]              gas := gas - 21000;
[L8353]  COND TRUE   gas >= 0
[L8354]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8355]              assume msgvalue_MSG == 0;
[L8356]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s1257 && (value_s1257 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s1257] + value_s1257 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2561]              havoc __exception;
[L2562]              revert := false;
[L2563]  COND FALSE  !(__exception)
[L2596]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5896]  COND TRUE   DType[this] == DkargoToken
[L5897]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4997]  COND TRUE   DType[this] == DkargoToken
[L4998]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4998]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4999]  COND FALSE  !(revert)
[L5015]              __ret_0_ := true;
[L5897]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5898]  COND FALSE  !(revert)
[L5904]              ret_s1257 := ret_s1257;
[L5905]  COND TRUE   DType[this] == DkargoToken
[L5906]  CALL        call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L5906]  RET         call __var_41 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5907]  COND FALSE  !(revert)
[L5913]  COND TRUE   DType[this] == DkargoToken
[L5914]  CALL        call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5914]  RET         call __var_42 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5915]  COND FALSE  !(revert)
[L5921]  COND FALSE  !(__var_41 && __var_42 == 0)
[L5931]  COND TRUE   DType[this] == DkargoToken
[L5932]  CALL        call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L5932]  RET         call __var_43 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5933]  COND FALSE  !(revert)
[L5939]  COND TRUE   DType[this] == DkargoToken
[L5940]  CALL        call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L5940]  RET         call __var_44 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L5941]  COND FALSE  !(revert)
[L5947]  COND FALSE  !(!__var_43 && __var_44 > 0)
[L5957]              __ret_0_ := ret_s1257;
[L2596]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2597]              assume !revert && gas >= 0;
[L8356]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND TRUE   choice == 23
[L8286]              gas := gas - 21000;
[L8287]  COND FALSE  !(gas >= 0)
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:16:14,433 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:16:14,433 INFO  L82        PathProgramCache]: Analyzing trace with hash 1542507989, now seen corresponding path program 1 times
[2020-11-25 14:16:14,434 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:16:14,461 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:16:14,690 INFO  L134       CoverageAnalysis]: Checked inductivity of 155 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 155 trivial. 0 not checked.
[2020-11-25 14:16:14,690 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:16:14,690 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-25 14:16:14,691 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:16:14,691 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 14:16:14,691 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=179, Unknown=0, NotChecked=0, Total=210
[2020-11-25 14:16:14,691 INFO  L87              Difference]: Start difference. First operand 6742 states and 7708 transitions. cyclomatic complexity: 972 Second operand 15 states.
[2020-11-25 14:16:17,268 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:16:17,268 INFO  L93              Difference]: Finished difference Result 4137 states and 4745 transitions.
[2020-11-25 14:16:17,268 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 14:16:17,269 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4137 states and 4745 transitions.
[2020-11-25 14:16:17,276 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 14:16:17,276 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4137 states to 0 states and 0 transitions.
[2020-11-25 14:16:17,277 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 14:16:17,277 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 14:16:17,277 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 14:16:17,277 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:16:17,277 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 14:16:17,277 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 14:16:17,277 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 14:16:17,277 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 14:16:17,277 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 14:16:17,277 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 14:16:17,277 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 14:16:17,280 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:16:17 BasicIcfg
[2020-11-25 14:16:17,280 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 14:16:17,280 INFO  L168              Benchmark]: Toolchain (without parser) took 35611.62 ms. Allocated memory was 1.0 GB in the beginning and 2.9 GB in the end (delta: 1.8 GB). Free memory was 929.8 MB in the beginning and 1.4 GB in the end (delta: -442.0 MB). Peak memory consumption was 1.4 GB. Max. memory is 15.3 GB.
[2020-11-25 14:16:17,281 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 14:16:17,281 INFO  L168              Benchmark]: Boogie Preprocessor took 123.37 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 14:16:17,282 INFO  L168              Benchmark]: UtopiaSpecLang took 74.88 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 14:16:17,282 INFO  L168              Benchmark]: Boogie Printer took 24.72 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 14:16:17,282 INFO  L168              Benchmark]: RCFGBuilder took 1160.01 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 45.6 MB). Free memory was 897.6 MB in the beginning and 907.0 MB in the end (delta: -9.4 MB). Peak memory consumption was 184.5 MB. Max. memory is 15.3 GB.
[2020-11-25 14:16:17,282 INFO  L168              Benchmark]: UtopiaLTL2Aut took 34.61 ms. Allocated memory is still 1.1 GB. Free memory was 907.0 MB in the beginning and 900.4 MB in the end (delta: 6.6 MB). Peak memory consumption was 6.6 MB. Max. memory is 15.3 GB.
[2020-11-25 14:16:17,283 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2235.46 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 207.1 MB). Free memory was 900.4 MB in the beginning and 954.3 MB in the end (delta: -53.9 MB). Peak memory consumption was 471.7 MB. Max. memory is 15.3 GB.
[2020-11-25 14:16:17,283 INFO  L168              Benchmark]: BlockEncodingV2 took 188.74 ms. Allocated memory is still 1.3 GB. Free memory was 954.3 MB in the beginning and 844.5 MB in the end (delta: 109.8 MB). Peak memory consumption was 109.8 MB. Max. memory is 15.3 GB.
[2020-11-25 14:16:17,283 INFO  L168              Benchmark]: BuchiAutomizer took 31766.91 ms. Allocated memory was 1.3 GB in the beginning and 2.9 GB in the end (delta: 1.6 GB). Free memory was 844.5 MB in the beginning and 1.4 GB in the end (delta: -527.3 MB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
[2020-11-25 14:16:17,286 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    7642 locations, 13678 edges
  - StatisticsResult: Encoded RCFG
    7386 locations, 13008 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 123.37 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 74.88 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 24.72 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1160.01 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 45.6 MB). Free memory was 897.6 MB in the beginning and 907.0 MB in the end (delta: -9.4 MB). Peak memory consumption was 184.5 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 34.61 ms. Allocated memory is still 1.1 GB. Free memory was 907.0 MB in the beginning and 900.4 MB in the end (delta: 6.6 MB). Peak memory consumption was 6.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2235.46 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 207.1 MB). Free memory was 900.4 MB in the beginning and 954.3 MB in the end (delta: -53.9 MB). Peak memory consumption was 471.7 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 188.74 ms. Allocated memory is still 1.3 GB. Free memory was 954.3 MB in the beginning and 844.5 MB in the end (delta: 109.8 MB). Peak memory consumption was 109.8 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 31766.91 ms. Allocated memory was 1.3 GB in the beginning and 2.9 GB in the end (delta: 1.6 GB). Free memory was 844.5 MB in the beginning and 1.4 GB in the end (delta: -527.3 MB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3098 locations, 4215 edges
  - StatisticsResult: BuchiProgram size
    7642 locations, 13678 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 12 terminating modules (12 trivial, 0 deterministic, 0 nondeterministic). 12 modules have a trivial ranking function, the largest among these consists of 26 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 31.7s and 13 iterations.  TraceHistogramMax:3. Analysis of lassos took 2.4s. Construction of modules took 21.8s. BÃ¼chi inclusion checks took 6.2s. Highest rank in rank-based complementation 0. Minimization of det autom 12. Minimization of nondet autom 0. Automata minimization 0.5s AutomataMinimizationTime, 11 MinimizatonAttempts, 2317 StatesRemovedByMinimization, 8 NontrivialMinimizations. Non-live state removal took 0.3s Buchi closure took 0.0s. Biggest automaton had 6742 states and ocurred in iteration 11.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 57875 SDtfs, 35375 SDslu, 164697 SDs, 0 SdLazy, 248206 SolverSat, 5080 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 21.8s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU12 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_DkargoToken0) ==> ( <>(fail_transfer_DkargoToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
