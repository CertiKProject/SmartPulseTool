This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 04:30:55,000 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 04:30:55,001 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 04:30:55,012 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 04:30:55,013 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 04:30:55,013 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 04:30:55,014 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 04:30:55,016 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 04:30:55,017 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 04:30:55,018 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 04:30:55,019 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 04:30:55,019 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 04:30:55,020 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 04:30:55,021 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 04:30:55,022 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 04:30:55,022 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 04:30:55,023 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 04:30:55,024 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 04:30:55,026 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 04:30:55,027 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 04:30:55,028 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 04:30:55,028 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 04:30:55,030 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 04:30:55,030 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 04:30:55,030 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 04:30:55,031 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 04:30:55,031 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 04:30:55,032 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 04:30:55,032 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 04:30:55,032 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 04:30:55,033 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 04:30:55,033 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 04:30:55,034 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 04:30:55,034 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 04:30:55,035 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 04:30:55,035 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 04:30:55,035 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 04:30:55,036 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 04:30:55,036 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 04:30:55,036 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 04:30:55,037 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 04:30:55,037 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 04:30:55,045 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 04:30:55,045 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 04:30:55,046 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 04:30:55,046 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 04:30:55,046 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 04:30:55,046 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 04:30:55,046 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 04:30:55,047 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 04:30:55,047 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 04:30:55,047 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 04:30:55,047 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 04:30:55,047 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 04:30:55,047 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 04:30:55,047 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 04:30:55,047 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 04:30:55,047 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 04:30:55,048 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 04:30:55,048 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 04:30:55,048 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 04:30:55,048 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 04:30:55,048 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 04:30:55,048 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 04:30:55,048 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 04:30:55,048 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 04:30:55,048 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 04:30:55,048 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 04:30:55,075 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 04:30:55,087 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 04:30:55,090 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 04:30:55,091 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 04:30:55,091 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 04:30:55,092 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-normal.bpl
[2020-11-25 04:30:55,092 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-normal.bpl'
[2020-11-25 04:30:55,150 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 04:30:55,151 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 04:30:55,151 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 04:30:55,151 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 04:30:55,151 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 04:30:55,162 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:30:55" (1/1) ...
[2020-11-25 04:30:55,163 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:30:55" (1/1) ...
[2020-11-25 04:30:55,182 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:30:55" (1/1) ...
[2020-11-25 04:30:55,183 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:30:55" (1/1) ...
[2020-11-25 04:30:55,197 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:30:55" (1/1) ...
[2020-11-25 04:30:55,204 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:30:55" (1/1) ...
[2020-11-25 04:30:55,207 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:30:55" (1/1) ...
[2020-11-25 04:30:55,211 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 04:30:55,212 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 04:30:55,212 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 04:30:55,214 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 04:30:55,216 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:30:55" (1/1) ...
[2020-11-25 04:30:55,229 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(SpaghettiToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balanceOf_SpaghettiToken[this][from] && value <= allowance_SpaghettiToken[this][from][msg.sender] && balanceOf_SpaghettiToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][to] >= 0 && balanceOf_SpaghettiToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][from] >= 0 &&  balanceOf_SpaghettiToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_SpaghettiToken[this][from][msg.sender] >= 0 && allowance_SpaghettiToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(SpaghettiToken.transferFrom(from, to, value), return == true && balanceOf_SpaghettiToken[this][from] == old(balanceOf_SpaghettiToken[this][from]) - value && balanceOf_SpaghettiToken[this][to] == old(balanceOf_SpaghettiToken[this][to]) + value && allowance_SpaghettiToken[this][from][msg.sender] == old(allowance_SpaghettiToken[this][from][msg.sender]) - value && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this]) && balanceOf_SpaghettiToken[this][p1] == old(balanceOf_SpaghettiToken[this][p1]) && allowance_SpaghettiToken[this][p2][p3] == old(allowance_SpaghettiToken[this][p2][p3]) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this]) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this]) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]))))
[2020-11-25 04:30:55,233 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(SpaghettiToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balanceOf_SpaghettiToken[this][from] && value <= allowance_SpaghettiToken[this][from][msg.sender] && balanceOf_SpaghettiToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][to] >= 0 && balanceOf_SpaghettiToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][from] >= 0 &&  balanceOf_SpaghettiToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_SpaghettiToken[this][from][msg.sender] >= 0 && allowance_SpaghettiToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(SpaghettiToken.transferFrom(from, to, value), return == true && balanceOf_SpaghettiToken[this][from] == old(balanceOf_SpaghettiToken[this][from]) - value && balanceOf_SpaghettiToken[this][to] == old(balanceOf_SpaghettiToken[this][to]) + value && allowance_SpaghettiToken[this][from][msg.sender] == old(allowance_SpaghettiToken[this][from][msg.sender]) - value && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this]) && balanceOf_SpaghettiToken[this][p1] == old(balanceOf_SpaghettiToken[this][p1]) && allowance_SpaghettiToken[this][p2][p3] == old(allowance_SpaghettiToken[this][p2][p3]) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this]) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this]) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]))))
[2020-11-25 04:30:55,238 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(SpaghettiToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balanceOf_SpaghettiToken[this][from] && value <= allowance_SpaghettiToken[this][from][msg.sender] && balanceOf_SpaghettiToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][to] >= 0 && balanceOf_SpaghettiToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][from] >= 0 &&  balanceOf_SpaghettiToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_SpaghettiToken[this][from][msg.sender] >= 0 && allowance_SpaghettiToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(SpaghettiToken.transferFrom(from, to, value), return == true && balanceOf_SpaghettiToken[this][from] == old(balanceOf_SpaghettiToken[this][from]) - value && balanceOf_SpaghettiToken[this][to] == old(balanceOf_SpaghettiToken[this][to]) + value && allowance_SpaghettiToken[this][from][msg.sender] == old(allowance_SpaghettiToken[this][from][msg.sender]) - value && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this]) && balanceOf_SpaghettiToken[this][p1] == old(balanceOf_SpaghettiToken[this][p1]) && allowance_SpaghettiToken[this][p2][p3] == old(allowance_SpaghettiToken[this][p2][p3]) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this]) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this]) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]))))
[2020-11-25 04:30:55,245 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( p1!=src_s309 && p1!=dst_s309 ) && ( p2!=src_s309 || p3!=msg.sender ) ) && src_s309!=dst_s309 ) && wad_s309<=balanceOf_SpaghettiToken[this][src_s309] ) && wad_s309<=allowance_SpaghettiToken[this][src_s309][msg.sender] ) && ( balanceOf_SpaghettiToken[this][dst_s309] + wad_s309 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && wad_s309>=0 ) && wad_s309<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_SpaghettiToken[this][dst_s309]>=0 ) && balanceOf_SpaghettiToken[this][dst_s309]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_SpaghettiToken[this][src_s309]>=0 ) && balanceOf_SpaghettiToken[this][src_s309]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowance_SpaghettiToken[this][src_s309][msg.sender]>=0 ) && allowance_SpaghettiToken[this][src_s309][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[src_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[dst_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[src_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p3,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]]],BinaryExpression[COMPNEQ,IdentifierExpression[src_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>],IdentifierExpression[dst_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],BinaryExpression[COMPLEQ,IdentifierExpression[wad_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[src_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[wad_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[src_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[dst_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],IdentifierExpression[wad_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[wad_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[wad_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[dst_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[dst_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[src_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[src_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[src_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[src_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 04:30:55,248 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( __ret_0_==true && balanceOf_SpaghettiToken[this][src_s309]==( ( old(balanceOf_SpaghettiToken[this][src_s309]) ) - wad_s309 ) ) && balanceOf_SpaghettiToken[this][dst_s309]==( ( old(balanceOf_SpaghettiToken[this][dst_s309]) ) + wad_s309 ) ) && allowance_SpaghettiToken[this][src_s309][msg.sender]==( ( old(allowance_SpaghettiToken[this][src_s309][msg.sender]) ) - wad_s309 ) ) && totalSupply_SpaghettiToken[this]==( old(totalSupply_SpaghettiToken[this]) ) ) && balanceOf_SpaghettiToken[this][p1]==( old(balanceOf_SpaghettiToken[this][p1]) ) ) && allowance_SpaghettiToken[this][p2][p3]==( old(allowance_SpaghettiToken[this][p2][p3]) ) ) && symbol_SpaghettiToken[this]==( old(symbol_SpaghettiToken[this]) ) ) && decimals_SpaghettiToken[this]==( old(decimals_SpaghettiToken[this]) ) ) && name_SpaghettiToken[this]==( old(name_SpaghettiToken[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_SpaghettiToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[src_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[src_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]]],IdentifierExpression[wad_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[dst_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[dst_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]]],IdentifierExpression[wad_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[src_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[src_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]]],IdentifierExpression[wad_s309,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_SpaghettiToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_SpaghettiToken>]]]]]]
[2020-11-25 04:30:55,251 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(SpaghettiToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balanceOf_SpaghettiToken[this][from] && value <= allowance_SpaghettiToken[this][from][msg.sender] && balanceOf_SpaghettiToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][to] >= 0 && balanceOf_SpaghettiToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiToken[this][from] >= 0 &&  balanceOf_SpaghettiToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_SpaghettiToken[this][from][msg.sender] >= 0 && allowance_SpaghettiToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(SpaghettiToken.transferFrom(from, to, value), return == true && balanceOf_SpaghettiToken[this][from] == old(balanceOf_SpaghettiToken[this][from]) - value && balanceOf_SpaghettiToken[this][to] == old(balanceOf_SpaghettiToken[this][to]) + value && allowance_SpaghettiToken[this][from][msg.sender] == old(allowance_SpaghettiToken[this][from][msg.sender]) - value && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this]) && balanceOf_SpaghettiToken[this][p1] == old(balanceOf_SpaghettiToken[this][p1]) && allowance_SpaghettiToken[this][p2][p3] == old(allowance_SpaghettiToken[this][p2][p3]) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this]) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this]) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]))))
[2020-11-25 04:30:55,251 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_SpaghettiToken0) ==> ( <>AP(success_transferFrom_SpaghettiToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 04:30:55,255 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:30:55 PropertyContainer
[2020-11-25 04:30:55,255 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 04:30:55,255 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 04:30:55,255 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 04:30:55,255 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 04:30:55,256 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:30:55" (1/2) ...
[2020-11-25 04:30:55,256 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 04:30:55,256 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 04:30:55,264 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:30:55" (2/2) ...
[2020-11-25 04:30:55,264 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 04:30:55,264 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 04:30:55,264 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 04:30:55,264 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 04:30:55,265 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:30:55" (1/2) ...
[2020-11-25 04:30:55,305 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 04:30:55,305 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath_NoBaseCtor__success
[2020-11-25 04:30:55,305 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath
[2020-11-25 04:30:55,305 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath
[2020-11-25 04:30:55,305 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_DSMath__success
[2020-11-25 04:30:55,305 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_DSMath__success
[2020-11-25 04:30:55,305 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_DSMath__success
[2020-11-25 04:30:55,305 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiToken_SpaghettiToken_NoBaseCtor__success
[2020-11-25 04:30:55,305 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiToken_SpaghettiToken
[2020-11-25 04:30:55,306 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiToken_SpaghettiToken
[2020-11-25 04:30:55,306 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address_SpaghettiToken
[2020-11-25 04:30:55,306 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address_SpaghettiToken
[2020-11-25 04:30:55,306 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_SpaghettiToken
[2020-11-25 04:30:55,306 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_SpaghettiToken
[2020-11-25 04:30:55,306 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_SpaghettiToken
[2020-11-25 04:30:55,306 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_SpaghettiToken
[2020-11-25 04:30:55,306 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_SpaghettiToken
[2020-11-25 04:30:55,307 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_SpaghettiToken
[2020-11-25 04:30:55,307 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_SpaghettiToken__success
[2020-11-25 04:30:55,307 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_SpaghettiToken
[2020-11-25 04:30:55,307 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_SpaghettiToken
[2020-11-25 04:30:55,307 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_SpaghettiToken
[2020-11-25 04:30:55,307 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_SpaghettiToken
[2020-11-25 04:30:55,307 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_SpaghettiToken
[2020-11-25 04:30:55,307 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_SpaghettiToken
[2020-11-25 04:30:55,307 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_SpaghettiToken
[2020-11-25 04:30:55,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_SpaghettiToken
[2020-11-25 04:30:55,308 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_SpaghettiToken
[2020-11-25 04:30:55,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_SpaghettiToken
[2020-11-25 04:30:55,308 INFO  L130     BoogieDeclarations]: Found specification of procedure name_SpaghettiToken
[2020-11-25 04:30:55,308 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_SpaghettiToken
[2020-11-25 04:30:55,308 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 04:30:55,308 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 04:30:55,308 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 04:30:55,308 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DSMath
[2020-11-25 04:30:55,308 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_DSMath
[2020-11-25 04:30:55,308 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SpaghettiToken
[2020-11-25 04:30:55,308 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 04:30:55,309 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 04:30:55,309 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath_NoBaseCtor__fail
[2020-11-25 04:30:55,309 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath__success
[2020-11-25 04:30:55,309 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath__fail
[2020-11-25 04:30:55,309 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_DSMath__fail
[2020-11-25 04:30:55,309 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_DSMath__fail
[2020-11-25 04:30:55,309 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_DSMath__fail
[2020-11-25 04:30:55,309 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiToken_SpaghettiToken_NoBaseCtor__fail
[2020-11-25 04:30:55,309 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiToken_SpaghettiToken__success
[2020-11-25 04:30:55,309 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiToken_SpaghettiToken__fail
[2020-11-25 04:30:55,309 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address_SpaghettiToken__success
[2020-11-25 04:30:55,309 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address_SpaghettiToken__fail
[2020-11-25 04:30:55,309 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_SpaghettiToken__success
[2020-11-25 04:30:55,310 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_SpaghettiToken__fail
[2020-11-25 04:30:55,310 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_SpaghettiToken__success
[2020-11-25 04:30:55,310 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_SpaghettiToken__fail
[2020-11-25 04:30:55,310 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_SpaghettiToken__success
[2020-11-25 04:30:55,310 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_SpaghettiToken__fail
[2020-11-25 04:30:55,310 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_SpaghettiToken__fail
[2020-11-25 04:30:55,310 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_SpaghettiToken__success
[2020-11-25 04:30:55,310 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_SpaghettiToken__fail
[2020-11-25 04:30:55,310 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_SpaghettiToken__success
[2020-11-25 04:30:55,310 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_SpaghettiToken__fail
[2020-11-25 04:30:55,310 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_SpaghettiToken__success
[2020-11-25 04:30:55,310 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_SpaghettiToken__fail
[2020-11-25 04:30:55,310 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_SpaghettiToken__success
[2020-11-25 04:30:55,311 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_SpaghettiToken__fail
[2020-11-25 04:30:55,311 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_SpaghettiToken__success
[2020-11-25 04:30:55,311 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_SpaghettiToken__fail
[2020-11-25 04:30:55,311 INFO  L130     BoogieDeclarations]: Found specification of procedure name_SpaghettiToken__success
[2020-11-25 04:30:55,311 INFO  L130     BoogieDeclarations]: Found specification of procedure name_SpaghettiToken__fail
[2020-11-25 04:30:55,311 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 04:30:55,311 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 04:30:55,311 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 04:30:55,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 04:30:55,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 04:30:55,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath_NoBaseCtor__fail
[2020-11-25 04:30:55,311 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath_NoBaseCtor__success
[2020-11-25 04:30:55,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath__fail
[2020-11-25 04:30:55,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath__success
[2020-11-25 04:30:55,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_DSMath__fail
[2020-11-25 04:30:55,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_DSMath__success
[2020-11-25 04:30:55,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_DSMath__fail
[2020-11-25 04:30:55,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_DSMath__success
[2020-11-25 04:30:55,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_DSMath__fail
[2020-11-25 04:30:55,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_DSMath__success
[2020-11-25 04:30:55,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiToken_SpaghettiToken_NoBaseCtor__fail
[2020-11-25 04:30:55,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiToken_SpaghettiToken_NoBaseCtor__success
[2020-11-25 04:30:55,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiToken_SpaghettiToken__fail
[2020-11-25 04:30:55,312 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiToken_SpaghettiToken__success
[2020-11-25 04:30:55,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address_SpaghettiToken__fail
[2020-11-25 04:30:55,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address_SpaghettiToken__success
[2020-11-25 04:30:55,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_SpaghettiToken__fail
[2020-11-25 04:30:55,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_SpaghettiToken__success
[2020-11-25 04:30:55,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_SpaghettiToken__fail
[2020-11-25 04:30:55,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_SpaghettiToken__success
[2020-11-25 04:30:55,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_SpaghettiToken__fail
[2020-11-25 04:30:55,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_SpaghettiToken__success
[2020-11-25 04:30:55,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_SpaghettiToken__fail
[2020-11-25 04:30:55,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_SpaghettiToken__success
[2020-11-25 04:30:55,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_SpaghettiToken__fail
[2020-11-25 04:30:55,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_SpaghettiToken__success
[2020-11-25 04:30:55,313 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_SpaghettiToken__fail
[2020-11-25 04:30:55,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_SpaghettiToken__success
[2020-11-25 04:30:55,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_SpaghettiToken__fail
[2020-11-25 04:30:55,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_SpaghettiToken__success
[2020-11-25 04:30:55,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_SpaghettiToken__fail
[2020-11-25 04:30:55,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_SpaghettiToken__success
[2020-11-25 04:30:55,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_SpaghettiToken__fail
[2020-11-25 04:30:55,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_SpaghettiToken__success
[2020-11-25 04:30:55,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_SpaghettiToken__fail
[2020-11-25 04:30:55,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_SpaghettiToken__success
[2020-11-25 04:30:55,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 04:30:55,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 04:30:55,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 04:30:55,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 04:30:55,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 04:30:55,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 04:30:55,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DSMath
[2020-11-25 04:30:55,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_DSMath
[2020-11-25 04:30:55,314 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SpaghettiToken
[2020-11-25 04:30:55,315 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 04:30:55,315 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 04:30:55,315 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 04:30:55,436 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 04:30:55,543 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 04:30:55,543 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 04:30:55,543 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 04:30:55,688 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 04:30:55,689 INFO  L286             CfgBuilder]: Removed 2 assue(true) statements.
[2020-11-25 04:30:55,690 INFO  L202        PluginConnector]: Adding new model SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:30:55 BoogieIcfgContainer
[2020-11-25 04:30:55,690 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:30:55" (2/2) ...
[2020-11-25 04:30:55,690 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 04:30:55,691 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@3ca79839 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:30:55, skipping insertion in model container
[2020-11-25 04:30:55,691 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 04:30:55,691 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 04:30:55,691 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 04:30:55,692 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 04:30:55,692 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:30:55" (1/3) ...
[2020-11-25 04:30:55,693 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@33e98b68 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:30:55, skipping insertion in model container
[2020-11-25 04:30:55,693 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:30:55" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 04:30:55,725 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:30:55 NWAContainer
[2020-11-25 04:30:55,725 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 04:30:55,725 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 04:30:55,725 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 04:30:55,726 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 04:30:55,727 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:30:55" (3/4) ...
[2020-11-25 04:30:55,728 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@3de441d3 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:30:55, skipping insertion in model container
[2020-11-25 04:30:55,728 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:30:55" (4/4) ...
[2020-11-25 04:30:55,731 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 04:30:55,734 INFO  L110   BuchiProductObserver]: Initial RCFG 747 locations, 937 edges
[2020-11-25 04:30:55,734 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 04:30:55,743 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 04:30:56,602 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 04:30:56,604 INFO  L110   BuchiProductObserver]: BuchiProgram size 1782 locations, 3025 edges
[2020-11-25 04:30:56,604 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:30:56 BoogieIcfgContainer
[2020-11-25 04:30:56,604 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 04:30:56,605 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 04:30:56,605 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 04:30:56,606 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 04:30:56,607 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:30:56" (1/1) ...
[2020-11-25 04:30:56,647 INFO  L313           BlockEncoder]: Initial Icfg 1782 locations, 3025 edges
[2020-11-25 04:30:56,647 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 04:30:56,648 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 04:30:56,648 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 04:30:56,648 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 04:30:56,655 INFO  L70    emoveInfeasibleEdges]: Removed 57 edges and 7 locations because of local infeasibility
[2020-11-25 04:30:56,658 INFO  L70        RemoveSinkStates]: Removed 32 edges and 21 locations by removing sink states
[2020-11-25 04:30:56,664 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 04:30:56,666 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 04:30:56,667 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 04:30:56,667 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 04:30:56,669 INFO  L313           BlockEncoder]: Encoded RCFG 1744 locations, 2922 edges
[2020-11-25 04:30:56,669 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:30:56 BasicIcfg
[2020-11-25 04:30:56,669 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 04:30:56,670 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 04:30:56,670 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 04:30:56,671 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 04:30:56,672 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:30:56,672 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:30:55" (1/6) ...
[2020-11-25 04:30:56,673 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1cd4f061 and model type SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:30:56, skipping insertion in model container
[2020-11-25 04:30:56,673 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:30:56,674 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:30:55" (2/6) ...
[2020-11-25 04:30:56,674 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1cd4f061 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:30:56, skipping insertion in model container
[2020-11-25 04:30:56,674 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:30:56,674 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:30:55" (3/6) ...
[2020-11-25 04:30:56,674 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1cd4f061 and model type SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:30:56, skipping insertion in model container
[2020-11-25 04:30:56,674 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:30:56,674 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:30:55" (4/6) ...
[2020-11-25 04:30:56,674 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1cd4f061 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:30:56, skipping insertion in model container
[2020-11-25 04:30:56,674 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:30:56,674 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:30:56" (5/6) ...
[2020-11-25 04:30:56,674 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1cd4f061 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 04:30:56, skipping insertion in model container
[2020-11-25 04:30:56,674 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 04:30:56,675 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:30:56" (6/6) ...
[2020-11-25 04:30:56,675 INFO  L404   chiAutomizerObserver]: Analyzing ICFG SpaghettiToken_0x08a2e41fb99a7599725190b9c970ad3893fa33cf_transferfrom-normal.bpl_BEv2
[2020-11-25 04:30:56,706 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 04:30:56,707 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 04:30:56,707 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 04:30:56,707 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 04:30:56,707 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 04:30:56,707 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 04:30:56,707 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 04:30:56,707 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 04:30:56,707 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 04:30:56,727 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1744 states.
[2020-11-25 04:30:56,764 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:30:56,764 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:30:56,764 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:30:56,772 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:30:56,772 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:30:56,772 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 04:30:56,772 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1744 states.
[2020-11-25 04:30:56,783 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:30:56,783 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:30:56,783 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:30:56,784 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:30:56,784 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND TRUE   revert
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND TRUE   choice == 10
[L1946]              gas := gas - 21000;
[L1947]  COND FALSE  !(gas >= 0)
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:30:56,798 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:30:56,798 INFO  L82        PathProgramCache]: Analyzing trace with hash 161888331, now seen corresponding path program 1 times
[2020-11-25 04:30:56,802 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:30:56,819 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:30:56,868 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 04:30:56,870 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:30:56,870 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 04:30:56,874 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:30:56,974 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 04:30:56,975 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 04:30:56,978 INFO  L87              Difference]: Start difference. First operand 1744 states. Second operand 4 states.
[2020-11-25 04:30:57,204 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:30:57,204 INFO  L93              Difference]: Finished difference Result 1382 states and 1527 transitions.
[2020-11-25 04:30:57,204 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 04:30:57,205 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1382 states and 1527 transitions.
[2020-11-25 04:30:57,213 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:30:57,224 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1382 states to 1382 states and 1527 transitions.
[2020-11-25 04:30:57,225 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 04:30:57,226 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 425
[2020-11-25 04:30:57,226 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1382 states and 1527 transitions.
[2020-11-25 04:30:57,230 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:30:57,231 INFO  L728         BuchiCegarLoop]: Abstraction has 1382 states and 1527 transitions.
[2020-11-25 04:30:57,243 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1382 states and 1527 transitions.
[2020-11-25 04:30:57,274 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1382 to 1382.
[2020-11-25 04:30:57,275 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1382 states.
[2020-11-25 04:30:57,278 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1382 states to 1382 states and 1527 transitions.
[2020-11-25 04:30:57,279 INFO  L751         BuchiCegarLoop]: Abstraction has 1382 states and 1527 transitions.
[2020-11-25 04:30:57,279 INFO  L631         BuchiCegarLoop]: Abstraction has 1382 states and 1527 transitions.
[2020-11-25 04:30:57,279 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 04:30:57,279 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1382 states and 1527 transitions.
[2020-11-25 04:30:57,283 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:30:57,284 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:30:57,284 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:30:57,285 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:30:57,285 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND TRUE   revert
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != src_s309 && p1 != dst_s309) && (p2 != src_s309 || p3 != msgsender_MSG)) && src_s309 != dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s309] + wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND FALSE  !(__exception)
[L382]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1266]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1267]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1284]  COND TRUE   !(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309)
[L1285]              revert := true;
[L382]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L383]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && balanceOf_SpaghettiToken[this][src_s309] == old(balanceOf_SpaghettiToken[this][src_s309]) - wad_s309) && balanceOf_SpaghettiToken[this][dst_s309] == old(balanceOf_SpaghettiToken[this][dst_s309]) + wad_s309) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] == old(allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) - wad_s309) && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this])) && balanceOf_SpaghettiToken[this][p1] == old(balanceOf_SpaghettiToken[this][p1])) && allowance_SpaghettiToken[this][p2][p3] == old(allowance_SpaghettiToken[this][p2][p3])) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this])) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this])) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]));
[L3]                 revert := revert_hold;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != src_s309 && p1 != dst_s309) && (p2 != src_s309 || p3 != msgsender_MSG)) && src_s309 != dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s309] + wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND FALSE  !(__exception)
[L382]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1266]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1267]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1284]  COND TRUE   !(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309)
[L1285]              revert := true;
[L382]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L383]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && balanceOf_SpaghettiToken[this][src_s309] == old(balanceOf_SpaghettiToken[this][src_s309]) - wad_s309) && balanceOf_SpaghettiToken[this][dst_s309] == old(balanceOf_SpaghettiToken[this][dst_s309]) + wad_s309) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] == old(allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) - wad_s309) && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this])) && balanceOf_SpaghettiToken[this][p1] == old(balanceOf_SpaghettiToken[this][p1])) && allowance_SpaghettiToken[this][p2][p3] == old(allowance_SpaghettiToken[this][p2][p3])) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this])) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this])) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]));
[L3]                 revert := revert_hold;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:30:57,289 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:30:57,289 INFO  L82        PathProgramCache]: Analyzing trace with hash -2010585749, now seen corresponding path program 1 times
[2020-11-25 04:30:57,290 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:30:57,298 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:30:57,318 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 04:30:57,318 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:30:57,318 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 04:30:57,319 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:30:57,319 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 04:30:57,319 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 04:30:57,320 INFO  L87              Difference]: Start difference. First operand 1382 states and 1527 transitions. cyclomatic complexity: 147 Second operand 4 states.
[2020-11-25 04:30:57,564 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:30:57,564 INFO  L93              Difference]: Finished difference Result 2000 states and 2279 transitions.
[2020-11-25 04:30:57,565 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 04:30:57,565 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2000 states and 2279 transitions.
[2020-11-25 04:30:57,575 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 04:30:57,585 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2000 states to 1936 states and 2203 transitions.
[2020-11-25 04:30:57,585 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 588
[2020-11-25 04:30:57,586 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 602
[2020-11-25 04:30:57,586 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1936 states and 2203 transitions.
[2020-11-25 04:30:57,589 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:30:57,589 INFO  L728         BuchiCegarLoop]: Abstraction has 1936 states and 2203 transitions.
[2020-11-25 04:30:57,591 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1936 states and 2203 transitions.
[2020-11-25 04:30:57,607 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1936 to 1418.
[2020-11-25 04:30:57,607 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1418 states.
[2020-11-25 04:30:57,610 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1418 states to 1418 states and 1525 transitions.
[2020-11-25 04:30:57,611 INFO  L751         BuchiCegarLoop]: Abstraction has 1418 states and 1525 transitions.
[2020-11-25 04:30:57,611 INFO  L631         BuchiCegarLoop]: Abstraction has 1418 states and 1525 transitions.
[2020-11-25 04:30:57,611 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 04:30:57,611 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1418 states and 1525 transitions.
[2020-11-25 04:30:57,615 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:30:57,615 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:30:57,615 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:30:57,618 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:30:57,618 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != src_s309 && p1 != dst_s309) && (p2 != src_s309 || p3 != msgsender_MSG)) && src_s309 != dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s309] + wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND TRUE   src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L1198]  COND TRUE   !(__tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= wad_s309)
[L1199]              revert := true;
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != src_s309 && p1 != dst_s309) && (p2 != src_s309 || p3 != msgsender_MSG)) && src_s309 != dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s309] + wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND TRUE   src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L1198]  COND TRUE   !(__tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= wad_s309)
[L1199]              revert := true;
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:30:57,622 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:30:57,622 INFO  L82        PathProgramCache]: Analyzing trace with hash 842591501, now seen corresponding path program 1 times
[2020-11-25 04:30:57,623 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:30:57,640 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:30:57,705 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 04:30:57,705 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:30:57,705 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 04:30:57,706 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:30:57,706 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 04:30:57,706 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 04:30:57,706 INFO  L87              Difference]: Start difference. First operand 1418 states and 1525 transitions. cyclomatic complexity: 109 Second operand 6 states.
[2020-11-25 04:30:58,414 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:30:58,415 INFO  L93              Difference]: Finished difference Result 1646 states and 1798 transitions.
[2020-11-25 04:30:58,415 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 04:30:58,415 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1646 states and 1798 transitions.
[2020-11-25 04:30:58,422 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 04:30:58,429 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1646 states to 1646 states and 1798 transitions.
[2020-11-25 04:30:58,430 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 515
[2020-11-25 04:30:58,430 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 515
[2020-11-25 04:30:58,430 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1646 states and 1798 transitions.
[2020-11-25 04:30:58,432 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:30:58,432 INFO  L728         BuchiCegarLoop]: Abstraction has 1646 states and 1798 transitions.
[2020-11-25 04:30:58,434 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1646 states and 1798 transitions.
[2020-11-25 04:30:58,451 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1646 to 1470.
[2020-11-25 04:30:58,451 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1470 states.
[2020-11-25 04:30:58,454 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1470 states to 1470 states and 1585 transitions.
[2020-11-25 04:30:58,454 INFO  L751         BuchiCegarLoop]: Abstraction has 1470 states and 1585 transitions.
[2020-11-25 04:30:58,454 INFO  L631         BuchiCegarLoop]: Abstraction has 1470 states and 1585 transitions.
[2020-11-25 04:30:58,454 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 04:30:58,454 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1470 states and 1585 transitions.
[2020-11-25 04:30:58,458 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:30:58,458 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:30:58,458 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:30:58,460 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:30:58,460 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != src_s309 && p1 != dst_s309) && (p2 != src_s309 || p3 != msgsender_MSG)) && src_s309 != dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s309] + wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND TRUE   !(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309)
[L1215]              revert := true;
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != src_s309 && p1 != dst_s309) && (p2 != src_s309 || p3 != msgsender_MSG)) && src_s309 != dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s309] + wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND TRUE   !(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309)
[L1215]              revert := true;
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:30:58,463 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:30:58,463 INFO  L82        PathProgramCache]: Analyzing trace with hash -1075868531, now seen corresponding path program 1 times
[2020-11-25 04:30:58,464 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:30:58,475 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:30:58,517 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 04:30:58,517 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:30:58,517 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 04:30:58,517 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:30:58,518 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 04:30:58,518 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 04:30:58,518 INFO  L87              Difference]: Start difference. First operand 1470 states and 1585 transitions. cyclomatic complexity: 117 Second operand 6 states.
[2020-11-25 04:30:58,858 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:30:58,858 INFO  L93              Difference]: Finished difference Result 1572 states and 1704 transitions.
[2020-11-25 04:30:58,858 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 04:30:58,858 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1572 states and 1704 transitions.
[2020-11-25 04:30:58,863 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 04:30:58,868 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1572 states to 1572 states and 1704 transitions.
[2020-11-25 04:30:58,868 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 500
[2020-11-25 04:30:58,869 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 500
[2020-11-25 04:30:58,869 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1572 states and 1704 transitions.
[2020-11-25 04:30:58,870 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:30:58,870 INFO  L728         BuchiCegarLoop]: Abstraction has 1572 states and 1704 transitions.
[2020-11-25 04:30:58,872 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1572 states and 1704 transitions.
[2020-11-25 04:30:58,883 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1572 to 1470.
[2020-11-25 04:30:58,883 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1470 states.
[2020-11-25 04:30:58,884 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1470 states to 1470 states and 1585 transitions.
[2020-11-25 04:30:58,885 INFO  L751         BuchiCegarLoop]: Abstraction has 1470 states and 1585 transitions.
[2020-11-25 04:30:58,885 INFO  L631         BuchiCegarLoop]: Abstraction has 1470 states and 1585 transitions.
[2020-11-25 04:30:58,885 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 04:30:58,885 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1470 states and 1585 transitions.
[2020-11-25 04:30:58,887 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 04:30:58,887 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:30:58,887 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:30:58,889 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:30:58,889 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != src_s309 && p1 != dst_s309) && (p2 != src_s309 || p3 != msgsender_MSG)) && src_s309 != dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s309] + wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND TRUE   src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L1198]  COND FALSE  !(!(__tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= wad_s309))
[L1202]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1203]  CALL        call __var_5 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND TRUE   !((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45)
[L1025]              revert := true;
[L1203]  RET         call __var_5 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1204]  COND TRUE   revert
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != src_s309 && p1 != dst_s309) && (p2 != src_s309 || p3 != msgsender_MSG)) && src_s309 != dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s309] + wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND TRUE   src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L1198]  COND FALSE  !(!(__tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= wad_s309))
[L1202]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1203]  CALL        call __var_5 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND TRUE   !((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45)
[L1025]              revert := true;
[L1203]  RET         call __var_5 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1204]  COND TRUE   revert
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:30:58,891 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:30:58,891 INFO  L82        PathProgramCache]: Analyzing trace with hash 658971756, now seen corresponding path program 1 times
[2020-11-25 04:30:58,892 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:30:58,902 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:30:59,017 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 04:30:59,017 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:30:59,017 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 04:30:59,017 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:30:59,018 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 04:30:59,018 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=156, Unknown=0, NotChecked=0, Total=182
[2020-11-25 04:30:59,018 INFO  L87              Difference]: Start difference. First operand 1470 states and 1585 transitions. cyclomatic complexity: 117 Second operand 14 states.
[2020-11-25 04:31:00,247 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:31:00,247 INFO  L93              Difference]: Finished difference Result 1800 states and 2014 transitions.
[2020-11-25 04:31:00,248 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 04:31:00,248 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1800 states and 2014 transitions.
[2020-11-25 04:31:00,253 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 04:31:00,258 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1800 states to 1800 states and 2014 transitions.
[2020-11-25 04:31:00,258 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 569
[2020-11-25 04:31:00,259 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 569
[2020-11-25 04:31:00,259 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1800 states and 2014 transitions.
[2020-11-25 04:31:00,260 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:31:00,261 INFO  L728         BuchiCegarLoop]: Abstraction has 1800 states and 2014 transitions.
[2020-11-25 04:31:00,262 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1800 states and 2014 transitions.
[2020-11-25 04:31:00,276 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1800 to 1615.
[2020-11-25 04:31:00,276 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1615 states.
[2020-11-25 04:31:00,278 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1615 states to 1615 states and 1757 transitions.
[2020-11-25 04:31:00,278 INFO  L751         BuchiCegarLoop]: Abstraction has 1615 states and 1757 transitions.
[2020-11-25 04:31:00,278 INFO  L631         BuchiCegarLoop]: Abstraction has 1615 states and 1757 transitions.
[2020-11-25 04:31:00,278 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 04:31:00,278 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1615 states and 1757 transitions.
[2020-11-25 04:31:00,281 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 04:31:00,281 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:31:00,281 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:31:00,282 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:31:00,282 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != src_s309 && p1 != dst_s309) && (p2 != src_s309 || p3 != msgsender_MSG)) && src_s309 != dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s309] + wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND FALSE  !(!(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1218]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1219]  CALL        call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND TRUE   !((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45)
[L1025]              revert := true;
[L1219]  RET         call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1220]  COND TRUE   revert
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != src_s309 && p1 != dst_s309) && (p2 != src_s309 || p3 != msgsender_MSG)) && src_s309 != dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s309] + wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND FALSE  !(!(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1218]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1219]  CALL        call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND TRUE   !((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45)
[L1025]              revert := true;
[L1219]  RET         call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1220]  COND TRUE   revert
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:31:00,285 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:31:00,285 INFO  L82        PathProgramCache]: Analyzing trace with hash 1955020243, now seen corresponding path program 1 times
[2020-11-25 04:31:00,285 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:31:00,294 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:31:00,329 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 04:31:00,329 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:31:00,329 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 04:31:00,329 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:31:00,330 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 04:31:00,330 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 04:31:00,330 INFO  L87              Difference]: Start difference. First operand 1615 states and 1757 transitions. cyclomatic complexity: 146 Second operand 7 states.
[2020-11-25 04:31:00,734 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:31:00,734 INFO  L93              Difference]: Finished difference Result 1698 states and 1872 transitions.
[2020-11-25 04:31:00,734 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 04:31:00,734 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1698 states and 1872 transitions.
[2020-11-25 04:31:00,739 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 04:31:00,743 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1698 states to 1698 states and 1872 transitions.
[2020-11-25 04:31:00,743 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 544
[2020-11-25 04:31:00,743 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 544
[2020-11-25 04:31:00,743 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1698 states and 1872 transitions.
[2020-11-25 04:31:00,745 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:31:00,745 INFO  L728         BuchiCegarLoop]: Abstraction has 1698 states and 1872 transitions.
[2020-11-25 04:31:00,746 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1698 states and 1872 transitions.
[2020-11-25 04:31:00,758 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1698 to 1615.
[2020-11-25 04:31:00,758 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1615 states.
[2020-11-25 04:31:00,759 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1615 states to 1615 states and 1757 transitions.
[2020-11-25 04:31:00,759 INFO  L751         BuchiCegarLoop]: Abstraction has 1615 states and 1757 transitions.
[2020-11-25 04:31:00,759 INFO  L631         BuchiCegarLoop]: Abstraction has 1615 states and 1757 transitions.
[2020-11-25 04:31:00,759 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 04:31:00,760 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1615 states and 1757 transitions.
[2020-11-25 04:31:00,762 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 04:31:00,762 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:31:00,762 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:31:00,763 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:31:00,763 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != src_s309 && p1 != dst_s309) && (p2 != src_s309 || p3 != msgsender_MSG)) && src_s309 != dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s309] + wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND FALSE  !(!(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1218]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1219]  CALL        call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1219]  RET         call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1220]  COND FALSE  !(revert)
[L1226]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1227]              __tmp__balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1228]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1229]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1230]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1231]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1231]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1232]  COND FALSE  !(revert)
[L1238]              ninetynine_s309 := ninetynine_s309;
[L1239]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1240]  CALL        call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1005]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1006]  COND TRUE   !((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23)
[L1007]              revert := true;
[L1240]  RET         call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1241]  COND TRUE   revert
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != src_s309 && p1 != dst_s309) && (p2 != src_s309 || p3 != msgsender_MSG)) && src_s309 != dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s309] + wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND FALSE  !(!(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1218]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1219]  CALL        call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1219]  RET         call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1220]  COND FALSE  !(revert)
[L1226]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1227]              __tmp__balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1228]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1229]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1230]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1231]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1231]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1232]  COND FALSE  !(revert)
[L1238]              ninetynine_s309 := ninetynine_s309;
[L1239]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1240]  CALL        call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1005]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1006]  COND TRUE   !((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23)
[L1007]              revert := true;
[L1240]  RET         call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1241]  COND TRUE   revert
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:31:00,765 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:31:00,765 INFO  L82        PathProgramCache]: Analyzing trace with hash -290505221, now seen corresponding path program 1 times
[2020-11-25 04:31:00,766 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:31:00,775 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:31:00,909 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 3 proven. 0 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 04:31:00,909 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:31:00,909 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [19] imperfect sequences [] total 19
[2020-11-25 04:31:00,909 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:31:00,910 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-11-25 04:31:00,910 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=40, Invalid=340, Unknown=0, NotChecked=0, Total=380
[2020-11-25 04:31:00,910 INFO  L87              Difference]: Start difference. First operand 1615 states and 1757 transitions. cyclomatic complexity: 146 Second operand 20 states.
[2020-11-25 04:31:02,772 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:31:02,772 INFO  L93              Difference]: Finished difference Result 1740 states and 2009 transitions.
[2020-11-25 04:31:02,772 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 23 states. 
[2020-11-25 04:31:02,772 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1740 states and 2009 transitions.
[2020-11-25 04:31:02,776 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 14
[2020-11-25 04:31:02,781 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1740 states to 1740 states and 2009 transitions.
[2020-11-25 04:31:02,781 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 563
[2020-11-25 04:31:02,782 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 563
[2020-11-25 04:31:02,782 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1740 states and 2009 transitions.
[2020-11-25 04:31:02,783 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:31:02,783 INFO  L728         BuchiCegarLoop]: Abstraction has 1740 states and 2009 transitions.
[2020-11-25 04:31:02,785 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1740 states and 2009 transitions.
[2020-11-25 04:31:02,797 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1740 to 1683.
[2020-11-25 04:31:02,797 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1683 states.
[2020-11-25 04:31:02,799 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1683 states to 1683 states and 1869 transitions.
[2020-11-25 04:31:02,799 INFO  L751         BuchiCegarLoop]: Abstraction has 1683 states and 1869 transitions.
[2020-11-25 04:31:02,799 INFO  L631         BuchiCegarLoop]: Abstraction has 1683 states and 1869 transitions.
[2020-11-25 04:31:02,799 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 04:31:02,799 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1683 states and 1869 transitions.
[2020-11-25 04:31:02,801 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 04:31:02,801 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:31:02,801 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:31:02,802 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:31:02,802 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != src_s309 && p1 != dst_s309) && (p2 != src_s309 || p3 != msgsender_MSG)) && src_s309 != dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s309] + wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND FALSE  !(!(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1218]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1219]  CALL        call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1219]  RET         call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1220]  COND FALSE  !(revert)
[L1226]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1227]              __tmp__balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1228]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1229]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1230]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1231]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND TRUE   !((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45)
[L1025]              revert := true;
[L1231]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1232]  COND TRUE   revert
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != src_s309 && p1 != dst_s309) && (p2 != src_s309 || p3 != msgsender_MSG)) && src_s309 != dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s309] + wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND FALSE  !(!(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1218]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1219]  CALL        call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1219]  RET         call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1220]  COND FALSE  !(revert)
[L1226]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1227]              __tmp__balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1228]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1229]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1230]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1231]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND TRUE   !((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45)
[L1025]              revert := true;
[L1231]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1232]  COND TRUE   revert
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:31:02,805 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:31:02,805 INFO  L82        PathProgramCache]: Analyzing trace with hash -846178040, now seen corresponding path program 1 times
[2020-11-25 04:31:02,805 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:31:02,832 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:31:02,860 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 2 trivial. 0 not checked.
[2020-11-25 04:31:02,860 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:31:02,861 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 04:31:02,861 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:31:02,861 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 04:31:02,861 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 04:31:02,861 INFO  L87              Difference]: Start difference. First operand 1683 states and 1869 transitions. cyclomatic complexity: 194 Second operand 6 states.
[2020-11-25 04:31:02,907 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:31:02,907 INFO  L93              Difference]: Finished difference Result 1720 states and 1912 transitions.
[2020-11-25 04:31:02,907 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 04:31:02,907 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1720 states and 1912 transitions.
[2020-11-25 04:31:02,910 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 04:31:02,914 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1720 states to 1720 states and 1912 transitions.
[2020-11-25 04:31:02,914 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 559
[2020-11-25 04:31:02,914 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 559
[2020-11-25 04:31:02,914 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1720 states and 1912 transitions.
[2020-11-25 04:31:02,915 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:31:02,916 INFO  L728         BuchiCegarLoop]: Abstraction has 1720 states and 1912 transitions.
[2020-11-25 04:31:02,917 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1720 states and 1912 transitions.
[2020-11-25 04:31:02,926 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1720 to 1691.
[2020-11-25 04:31:02,926 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1691 states.
[2020-11-25 04:31:02,927 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1691 states to 1691 states and 1877 transitions.
[2020-11-25 04:31:02,927 INFO  L751         BuchiCegarLoop]: Abstraction has 1691 states and 1877 transitions.
[2020-11-25 04:31:02,927 INFO  L631         BuchiCegarLoop]: Abstraction has 1691 states and 1877 transitions.
[2020-11-25 04:31:02,927 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 04:31:02,928 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1691 states and 1877 transitions.
[2020-11-25 04:31:02,929 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 04:31:02,929 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:31:02,929 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:31:02,930 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:31:02,930 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != src_s309 && p1 != dst_s309) && (p2 != src_s309 || p3 != msgsender_MSG)) && src_s309 != dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s309] + wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND FALSE  !(__exception)
[L382]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1266]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1267]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1284]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1288]  COND TRUE   DType[this] == SpaghettiToken
[L1289]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1289]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1290]  COND FALSE  !(revert)
[L1296]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1297]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1298]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1299]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1300]  COND TRUE   DType[this] == SpaghettiToken
[L1301]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1301]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1302]  COND FALSE  !(revert)
[L1308]              ninetynine_s309 := ninetynine_s309;
[L1309]  COND TRUE   DType[this] == SpaghettiToken
[L1310]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1014]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1015]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1310]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1311]  COND FALSE  !(revert)
[L1317]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1318]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1319]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1320]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1346]  COND TRUE   DType[this] == SpaghettiToken
[L1347]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1347]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1348]  COND FALSE  !(revert)
[L1354]              totalSupply_SpaghettiToken[this] := __var_8;
[L1355]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1320]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1321]  COND FALSE  !(revert)
[L1324]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1325]              __ret_0_ := true;
[L382]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L383]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && balanceOf_SpaghettiToken[this][src_s309] == old(balanceOf_SpaghettiToken[this][src_s309]) - wad_s309) && balanceOf_SpaghettiToken[this][dst_s309] == old(balanceOf_SpaghettiToken[this][dst_s309]) + wad_s309) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] == old(allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) - wad_s309) && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this])) && balanceOf_SpaghettiToken[this][p1] == old(balanceOf_SpaghettiToken[this][p1])) && allowance_SpaghettiToken[this][p2][p3] == old(allowance_SpaghettiToken[this][p2][p3])) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this])) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this])) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]));
[L3]                 revert := revert_hold;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND TRUE   choice == 10
[L1946]              gas := gas - 21000;
[L1947]  COND FALSE  !(gas >= 0)
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:31:02,933 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:31:02,933 INFO  L82        PathProgramCache]: Analyzing trace with hash -67321286, now seen corresponding path program 1 times
[2020-11-25 04:31:02,933 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:31:02,957 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:31:04,152 WARN  L188               SmtUtils]: Spent 193.00 ms on a formula simplification. DAG size of input: 157 DAG size of output: 112
[2020-11-25 04:31:04,351 WARN  L188               SmtUtils]: Spent 152.00 ms on a formula simplification. DAG size of input: 145 DAG size of output: 101
[2020-11-25 04:31:04,840 WARN  L188               SmtUtils]: Spent 105.00 ms on a formula simplification. DAG size of input: 182 DAG size of output: 88
[2020-11-25 04:31:05,102 INFO  L134       CoverageAnalysis]: Checked inductivity of 12 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 3 trivial. 0 not checked.
[2020-11-25 04:31:05,102 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 04:31:05,102 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [40] total 40
[2020-11-25 04:31:05,103 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:31:05,103 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 41 interpolants.
[2020-11-25 04:31:05,103 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=132, Invalid=1508, Unknown=0, NotChecked=0, Total=1640
[2020-11-25 04:31:05,103 INFO  L87              Difference]: Start difference. First operand 1691 states and 1877 transitions. cyclomatic complexity: 194 Second operand 41 states.
[2020-11-25 04:31:10,162 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:31:10,162 INFO  L93              Difference]: Finished difference Result 1711 states and 1961 transitions.
[2020-11-25 04:31:10,162 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 37 states. 
[2020-11-25 04:31:10,163 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1711 states and 1961 transitions.
[2020-11-25 04:31:10,166 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 14
[2020-11-25 04:31:10,170 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1711 states to 1711 states and 1961 transitions.
[2020-11-25 04:31:10,170 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 556
[2020-11-25 04:31:10,170 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 556
[2020-11-25 04:31:10,171 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1711 states and 1961 transitions.
[2020-11-25 04:31:10,172 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:31:10,172 INFO  L728         BuchiCegarLoop]: Abstraction has 1711 states and 1961 transitions.
[2020-11-25 04:31:10,173 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1711 states and 1961 transitions.
[2020-11-25 04:31:10,184 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1711 to 1690.
[2020-11-25 04:31:10,185 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1690 states.
[2020-11-25 04:31:10,186 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1690 states to 1690 states and 1880 transitions.
[2020-11-25 04:31:10,186 INFO  L751         BuchiCegarLoop]: Abstraction has 1690 states and 1880 transitions.
[2020-11-25 04:31:10,186 INFO  L631         BuchiCegarLoop]: Abstraction has 1690 states and 1880 transitions.
[2020-11-25 04:31:10,186 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 04:31:10,186 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1690 states and 1880 transitions.
[2020-11-25 04:31:10,188 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 04:31:10,188 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:31:10,188 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:31:10,189 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:31:10,190 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != src_s309 && p1 != dst_s309) && (p2 != src_s309 || p3 != msgsender_MSG)) && src_s309 != dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s309] + wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND FALSE  !(!(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1218]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1219]  CALL        call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1219]  RET         call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1220]  COND FALSE  !(revert)
[L1226]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1227]              __tmp__balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1228]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1229]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1230]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1231]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1231]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1232]  COND FALSE  !(revert)
[L1238]              ninetynine_s309 := ninetynine_s309;
[L1239]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1240]  CALL        call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1005]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1006]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1240]  RET         call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1241]  COND FALSE  !(revert)
[L1247]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiToken[this][dst_s309];
[L1248]              __tmp__balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1249]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiToken[this][dst_s309];
[L1250]  CALL        call burn~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1332]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1333]  CALL        call __var_8 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__totalSupply_SpaghettiToken[this], wad_s326);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1333]  RET         call __var_8 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__totalSupply_SpaghettiToken[this], wad_s326);
[L1334]  COND FALSE  !(revert)
[L1340]              __tmp__totalSupply_SpaghettiToken[this] := __var_8;
[L1250]  RET         call burn~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1251]  COND FALSE  !(revert)
[L1254]              __ret_0_ := true;
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != src_s309 && p1 != dst_s309) && (p2 != src_s309 || p3 != msgsender_MSG)) && src_s309 != dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s309] + wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND FALSE  !(!(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1218]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1219]  CALL        call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1219]  RET         call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1220]  COND FALSE  !(revert)
[L1226]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1227]              __tmp__balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1228]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1229]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1230]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1231]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1231]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1232]  COND FALSE  !(revert)
[L1238]              ninetynine_s309 := ninetynine_s309;
[L1239]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1240]  CALL        call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1005]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1006]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1240]  RET         call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1241]  COND FALSE  !(revert)
[L1247]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiToken[this][dst_s309];
[L1248]              __tmp__balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1249]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiToken[this][dst_s309];
[L1250]  CALL        call burn~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1332]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1333]  CALL        call __var_8 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__totalSupply_SpaghettiToken[this], wad_s326);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1333]  RET         call __var_8 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__totalSupply_SpaghettiToken[this], wad_s326);
[L1334]  COND FALSE  !(revert)
[L1340]              __tmp__totalSupply_SpaghettiToken[this] := __var_8;
[L1250]  RET         call burn~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1251]  COND FALSE  !(revert)
[L1254]              __ret_0_ := true;
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:31:10,193 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:31:10,193 INFO  L82        PathProgramCache]: Analyzing trace with hash 1274997032, now seen corresponding path program 1 times
[2020-11-25 04:31:10,193 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:31:10,200 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:31:10,222 INFO  L134       CoverageAnalysis]: Checked inductivity of 12 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 12 trivial. 0 not checked.
[2020-11-25 04:31:10,222 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:31:10,222 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 04:31:10,222 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:31:10,222 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 04:31:10,223 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 04:31:10,223 INFO  L87              Difference]: Start difference. First operand 1690 states and 1880 transitions. cyclomatic complexity: 198 Second operand 5 states.
[2020-11-25 04:31:10,342 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:31:10,342 INFO  L93              Difference]: Finished difference Result 2082 states and 2604 transitions.
[2020-11-25 04:31:10,342 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 04:31:10,342 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2082 states and 2604 transitions.
[2020-11-25 04:31:10,347 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 32
[2020-11-25 04:31:10,353 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2082 states to 1581 states and 2100 transitions.
[2020-11-25 04:31:10,354 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 411
[2020-11-25 04:31:10,354 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 411
[2020-11-25 04:31:10,354 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1581 states and 2100 transitions.
[2020-11-25 04:31:10,356 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:31:10,356 INFO  L728         BuchiCegarLoop]: Abstraction has 1581 states and 2100 transitions.
[2020-11-25 04:31:10,356 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1581 states and 2100 transitions.
[2020-11-25 04:31:10,373 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1581 to 1173.
[2020-11-25 04:31:10,373 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1173 states.
[2020-11-25 04:31:10,374 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1173 states to 1173 states and 1338 transitions.
[2020-11-25 04:31:10,374 INFO  L751         BuchiCegarLoop]: Abstraction has 1173 states and 1338 transitions.
[2020-11-25 04:31:10,374 INFO  L631         BuchiCegarLoop]: Abstraction has 1173 states and 1338 transitions.
[2020-11-25 04:31:10,374 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 04:31:10,374 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1173 states and 1338 transitions.
[2020-11-25 04:31:10,376 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 04:31:10,376 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:31:10,376 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:31:10,376 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:31:10,376 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != src_s309 && p1 != dst_s309) && (p2 != src_s309 || p3 != msgsender_MSG)) && src_s309 != dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s309] + wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND FALSE  !(src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1214]  COND FALSE  !(!(__tmp__balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1218]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1219]  CALL        call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1219]  RET         call __var_6 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1220]  COND FALSE  !(revert)
[L1226]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1227]              __tmp__balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1228]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiToken[this][src_s309];
[L1229]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1230]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1231]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1231]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1232]  COND FALSE  !(revert)
[L1238]              ninetynine_s309 := ninetynine_s309;
[L1239]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1240]  CALL        call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1005]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1006]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1240]  RET         call __var_7 := add~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1241]  COND FALSE  !(revert)
[L1247]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiToken[this][dst_s309];
[L1248]              __tmp__balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1249]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiToken[this][dst_s309];
[L1250]  CALL        call burn~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1332]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1333]  CALL        call __var_8 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__totalSupply_SpaghettiToken[this], wad_s326);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND TRUE   !((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45)
[L1025]              revert := true;
[L1333]  RET         call __var_8 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__totalSupply_SpaghettiToken[this], wad_s326);
[L1334]  COND TRUE   revert
[L1250]  RET         call burn~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1251]  COND TRUE   revert
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND TRUE   choice == 10
[L1946]              gas := gas - 21000;
[L1947]  COND FALSE  !(gas >= 0)
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:31:10,378 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:31:10,378 INFO  L82        PathProgramCache]: Analyzing trace with hash -1495568837, now seen corresponding path program 1 times
[2020-11-25 04:31:10,379 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:31:10,387 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:31:10,472 INFO  L134       CoverageAnalysis]: Checked inductivity of 12 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 8 trivial. 0 not checked.
[2020-11-25 04:31:10,472 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:31:10,472 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-25 04:31:10,473 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:31:10,473 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-25 04:31:10,473 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=36, Invalid=270, Unknown=0, NotChecked=0, Total=306
[2020-11-25 04:31:10,473 INFO  L87              Difference]: Start difference. First operand 1173 states and 1338 transitions. cyclomatic complexity: 173 Second operand 18 states.
[2020-11-25 04:31:11,542 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:31:11,542 INFO  L93              Difference]: Finished difference Result 1199 states and 1428 transitions.
[2020-11-25 04:31:11,542 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 04:31:11,542 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1199 states and 1428 transitions.
[2020-11-25 04:31:11,545 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 04:31:11,548 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1199 states to 1199 states and 1428 transitions.
[2020-11-25 04:31:11,548 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 320
[2020-11-25 04:31:11,548 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 320
[2020-11-25 04:31:11,548 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1199 states and 1428 transitions.
[2020-11-25 04:31:11,550 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:31:11,550 INFO  L728         BuchiCegarLoop]: Abstraction has 1199 states and 1428 transitions.
[2020-11-25 04:31:11,550 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1199 states and 1428 transitions.
[2020-11-25 04:31:11,558 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1199 to 1179.
[2020-11-25 04:31:11,559 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1179 states.
[2020-11-25 04:31:11,560 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1179 states to 1179 states and 1340 transitions.
[2020-11-25 04:31:11,560 INFO  L751         BuchiCegarLoop]: Abstraction has 1179 states and 1340 transitions.
[2020-11-25 04:31:11,560 INFO  L631         BuchiCegarLoop]: Abstraction has 1179 states and 1340 transitions.
[2020-11-25 04:31:11,560 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 04:31:11,560 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1179 states and 1340 transitions.
[2020-11-25 04:31:11,562 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 04:31:11,562 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:31:11,562 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:31:11,563 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:31:11,563 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != src_s309 && p1 != dst_s309) && (p2 != src_s309 || p3 != msgsender_MSG)) && src_s309 != dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s309] + wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND FALSE  !(__exception)
[L382]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1266]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1267]  COND TRUE   src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L1268]  COND FALSE  !(!(allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= wad_s309))
[L1272]  COND TRUE   DType[this] == SpaghettiToken
[L1273]  CALL        call __var_5 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1273]  RET         call __var_5 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1274]  COND FALSE  !(revert)
[L1280]              sum_allowance1[src_s309] := sum_allowance1[src_s309] - allowance_SpaghettiToken[this][src_s309][msgsender_MSG];
[L1281]              allowance_SpaghettiToken[this][src_s309][msgsender_MSG] := __var_5;
[L1282]              sum_allowance1[src_s309] := sum_allowance1[src_s309] + allowance_SpaghettiToken[this][src_s309][msgsender_MSG];
[L1284]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1288]  COND TRUE   DType[this] == SpaghettiToken
[L1289]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1289]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1290]  COND FALSE  !(revert)
[L1296]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1297]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1298]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1299]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1300]  COND TRUE   DType[this] == SpaghettiToken
[L1301]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1301]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1302]  COND FALSE  !(revert)
[L1308]              ninetynine_s309 := ninetynine_s309;
[L1309]  COND TRUE   DType[this] == SpaghettiToken
[L1310]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1014]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1015]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1310]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1311]  COND FALSE  !(revert)
[L1317]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1318]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1319]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1320]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1346]  COND TRUE   DType[this] == SpaghettiToken
[L1347]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1347]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1348]  COND FALSE  !(revert)
[L1354]              totalSupply_SpaghettiToken[this] := __var_8;
[L1355]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1320]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1321]  COND FALSE  !(revert)
[L1324]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1325]              __ret_0_ := true;
[L382]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L383]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && balanceOf_SpaghettiToken[this][src_s309] == old(balanceOf_SpaghettiToken[this][src_s309]) - wad_s309) && balanceOf_SpaghettiToken[this][dst_s309] == old(balanceOf_SpaghettiToken[this][dst_s309]) + wad_s309) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] == old(allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) - wad_s309) && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this])) && balanceOf_SpaghettiToken[this][p1] == old(balanceOf_SpaghettiToken[this][p1])) && allowance_SpaghettiToken[this][p2][p3] == old(allowance_SpaghettiToken[this][p2][p3])) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this])) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this])) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]));
[L3]                 revert := revert_hold;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != src_s309 && p1 != dst_s309) && (p2 != src_s309 || p3 != msgsender_MSG)) && src_s309 != dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s309] + wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND TRUE   __exception
[L362]               __tmp__Balance := Balance;
[L363]               __tmp__DType := DType;
[L364]               __tmp__Alloc := Alloc;
[L365]               __tmp__balance_ADDR := balance_ADDR;
[L366]               __tmp__M_Ref_int := M_Ref_int;
[L367]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L368]               __tmp__alloc_allowance_SpaghettiToken_lvl0 := alloc_allowance_SpaghettiToken_lvl0;
[L369]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L370]               __tmp__sum_allowance1 := sum_allowance1;
[L371]               __tmp__Length := Length;
[L372]               __tmp__now := now;
[L373]               __tmp__totalSupply_SpaghettiToken := totalSupply_SpaghettiToken;
[L374]               __tmp__balanceOf_SpaghettiToken := balanceOf_SpaghettiToken;
[L375]               __tmp__allowance_SpaghettiToken := allowance_SpaghettiToken;
[L376]               __tmp__symbol_SpaghettiToken := symbol_SpaghettiToken;
[L377]               __tmp__decimals_SpaghettiToken := decimals_SpaghettiToken;
[L378]               __tmp__name_SpaghettiToken := name_SpaghettiToken;
[L379]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1196]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1197]  COND TRUE   src_s309 != msgsender_MSG && __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L1198]  COND FALSE  !(!(__tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= wad_s309))
[L1202]  COND TRUE   __tmp__DType[this] == SpaghettiToken
[L1203]  CALL        call __var_5 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1023]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1024]  COND TRUE   !((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45)
[L1025]              revert := true;
[L1203]  RET         call __var_5 := sub~uint256~uint256_DSMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1204]  COND TRUE   revert
[L379]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__fail(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L380]               assume revert || gas < 0;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:31:11,566 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:31:11,566 INFO  L82        PathProgramCache]: Analyzing trace with hash 1275982598, now seen corresponding path program 1 times
[2020-11-25 04:31:11,566 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:31:11,593 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:31:12,625 WARN  L188               SmtUtils]: Spent 128.00 ms on a formula simplification. DAG size of input: 218 DAG size of output: 96
[2020-11-25 04:31:12,862 INFO  L134       CoverageAnalysis]: Checked inductivity of 24 backedges. 6 proven. 12 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-11-25 04:31:12,862 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 04:31:12,862 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [40] total 40
[2020-11-25 04:31:12,863 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 04:31:12,863 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 41 interpolants.
[2020-11-25 04:31:12,863 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=126, Invalid=1514, Unknown=0, NotChecked=0, Total=1640
[2020-11-25 04:31:12,863 INFO  L87              Difference]: Start difference. First operand 1179 states and 1340 transitions. cyclomatic complexity: 168 Second operand 41 states.
[2020-11-25 04:31:16,256 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:31:16,256 INFO  L93              Difference]: Finished difference Result 1316 states and 1536 transitions.
[2020-11-25 04:31:16,256 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 36 states. 
[2020-11-25 04:31:16,256 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1316 states and 1536 transitions.
[2020-11-25 04:31:16,259 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 04:31:16,262 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1316 states to 1316 states and 1536 transitions.
[2020-11-25 04:31:16,262 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 382
[2020-11-25 04:31:16,262 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 382
[2020-11-25 04:31:16,262 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1316 states and 1536 transitions.
[2020-11-25 04:31:16,264 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:31:16,264 INFO  L728         BuchiCegarLoop]: Abstraction has 1316 states and 1536 transitions.
[2020-11-25 04:31:16,264 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1316 states and 1536 transitions.
[2020-11-25 04:31:16,274 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1316 to 1303.
[2020-11-25 04:31:16,275 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1303 states.
[2020-11-25 04:31:16,276 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1303 states to 1303 states and 1520 transitions.
[2020-11-25 04:31:16,276 INFO  L751         BuchiCegarLoop]: Abstraction has 1303 states and 1520 transitions.
[2020-11-25 04:31:16,276 INFO  L631         BuchiCegarLoop]: Abstraction has 1303 states and 1520 transitions.
[2020-11-25 04:31:16,276 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 04:31:16,276 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1303 states and 1520 transitions.
[2020-11-25 04:31:16,278 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 04:31:16,278 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:31:16,278 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:31:16,278 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:31:16,278 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND TRUE   choice == 3
[L1988]              gas := gas - 21000;
[L1989]  COND TRUE   gas >= 0
[L1990]              assume wad_s177 >= 0 && wad_s177 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1991]              assume msgvalue_MSG == 0;
[L1992]  CALL        call __ret_0_approve := approve~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L249]               havoc __exception;
[L250]               revert := false;
[L251]   COND FALSE  !(__exception)
[L272]   CALL        call __ret_0_ := approve~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L1158]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] - allowance_SpaghettiToken[this][msgsender_MSG][guy_s177];
[L1159]              allowance_SpaghettiToken[this][msgsender_MSG][guy_s177] := wad_s177;
[L1160]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] + allowance_SpaghettiToken[this][msgsender_MSG][guy_s177];
[L1161]              assert { :EventEmitted "Approval_SpaghettiToken" } true;
[L1162]              __ret_0_ := true;
[L272]   RET         call __ret_0_ := approve~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L273]               assume !revert && gas >= 0;
[L1992]  RET         call __ret_0_approve := approve~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != src_s309 && p1 != dst_s309) && (p2 != src_s309 || p3 != msgsender_MSG)) && src_s309 != dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s309] + wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND FALSE  !(__exception)
[L382]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1266]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1267]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1284]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1288]  COND TRUE   DType[this] == SpaghettiToken
[L1289]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1289]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1290]  COND FALSE  !(revert)
[L1296]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1297]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1298]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1299]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1300]  COND TRUE   DType[this] == SpaghettiToken
[L1301]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1301]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1302]  COND FALSE  !(revert)
[L1308]              ninetynine_s309 := ninetynine_s309;
[L1309]  COND TRUE   DType[this] == SpaghettiToken
[L1310]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1014]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1015]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1310]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1311]  COND FALSE  !(revert)
[L1317]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1318]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1319]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1320]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1346]  COND TRUE   DType[this] == SpaghettiToken
[L1347]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1347]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1348]  COND FALSE  !(revert)
[L1354]              totalSupply_SpaghettiToken[this] := __var_8;
[L1355]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1320]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1321]  COND FALSE  !(revert)
[L1324]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1325]              __ret_0_ := true;
[L382]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L383]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && balanceOf_SpaghettiToken[this][src_s309] == old(balanceOf_SpaghettiToken[this][src_s309]) - wad_s309) && balanceOf_SpaghettiToken[this][dst_s309] == old(balanceOf_SpaghettiToken[this][dst_s309]) + wad_s309) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] == old(allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) - wad_s309) && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this])) && balanceOf_SpaghettiToken[this][p1] == old(balanceOf_SpaghettiToken[this][p1])) && allowance_SpaghettiToken[this][p2][p3] == old(allowance_SpaghettiToken[this][p2][p3])) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this])) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this])) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]));
[L3]                 revert := revert_hold;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND TRUE   choice == 10
[L1946]              gas := gas - 21000;
[L1947]  COND FALSE  !(gas >= 0)
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:31:16,281 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:31:16,281 INFO  L82        PathProgramCache]: Analyzing trace with hash -66561811, now seen corresponding path program 1 times
[2020-11-25 04:31:16,281 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:31:16,321 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:31:16,375 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:31:16,442 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:31:16,442 INFO  L82        PathProgramCache]: Analyzing trace with hash 323720443, now seen corresponding path program 1 times
[2020-11-25 04:31:16,443 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:31:16,445 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 04:31:16,449 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 04:31:16,449 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 04:31:16,449 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 04:31:16,449 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 04:31:16,449 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 04:31:16,449 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 04:31:16,450 INFO  L87              Difference]: Start difference. First operand 1303 states and 1520 transitions. cyclomatic complexity: 226 Second operand 4 states.
[2020-11-25 04:31:16,551 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 04:31:16,551 INFO  L93              Difference]: Finished difference Result 1436 states and 1727 transitions.
[2020-11-25 04:31:16,551 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 04:31:16,551 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1436 states and 1727 transitions.
[2020-11-25 04:31:16,560 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 04:31:16,566 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1436 states to 1436 states and 1727 transitions.
[2020-11-25 04:31:16,567 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 386
[2020-11-25 04:31:16,567 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 386
[2020-11-25 04:31:16,567 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1436 states and 1727 transitions.
[2020-11-25 04:31:16,569 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 04:31:16,570 INFO  L728         BuchiCegarLoop]: Abstraction has 1436 states and 1727 transitions.
[2020-11-25 04:31:16,571 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1436 states and 1727 transitions.
[2020-11-25 04:31:16,585 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1436 to 1303.
[2020-11-25 04:31:16,585 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1303 states.
[2020-11-25 04:31:16,588 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1303 states to 1303 states and 1490 transitions.
[2020-11-25 04:31:16,588 INFO  L751         BuchiCegarLoop]: Abstraction has 1303 states and 1490 transitions.
[2020-11-25 04:31:16,588 INFO  L631         BuchiCegarLoop]: Abstraction has 1303 states and 1490 transitions.
[2020-11-25 04:31:16,588 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 04:31:16,588 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1303 states and 1490 transitions.
[2020-11-25 04:31:16,591 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 04:31:16,591 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 04:31:16,591 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 04:31:16,593 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 04:31:16,593 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_SpaghettiToken0 := false;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L2017]              assume null == 0;
[L2018]  CALL        call this := FreshRefGenerator__success();
[L965]               havoc newRef;
[L966]               assume Alloc[newRef] == false;
[L967]               Alloc[newRef] := true;
[L968]               assume newRef != null;
[L2018]  RET         call this := FreshRefGenerator__success();
[L2019]              assume now >= 0;
[L2020]              assume DType[this] == SpaghettiToken;
[L2021]              assume msgvalue_MSG == 0;
[L2022]              gas := gas - 53000;
[L2023]  CALL        call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L145]               havoc __exception;
[L146]               revert := false;
[L147]   COND FALSE  !(__exception)
[L168]   CALL        call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L997]   CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L982]               assume msgsender_MSG != null;
[L983]               Balance[this] := 0;
[L997]   RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L998]   COND FALSE  !(revert)
[L1111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  COND FALSE  !(revert)
[L1115]  CALL        call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1080]              assume msgsender_MSG != null;
[L1081]              Balance[this] := 0;
[L1082]              totalSupply_SpaghettiToken[this] := 0;
[L1083]              balanceOf_SpaghettiToken[this] := zeroRefintArr();
[L1084]              sum_balanceOf0[this] := 0;
[L1085]              allowance_SpaghettiToken[this] := zeroRefRefintArr();
[L1086]              sum_allowance1[this] := 0;
[L1087]              symbol_SpaghettiToken[this] := 2010503932;
[L1088]              decimals_SpaghettiToken[this] := 18;
[L1089]              name_SpaghettiToken[this] := 408148383;
[L1091]              totalSupply_SpaghettiToken[this] := 15000000000000000000000000;
[L1092]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][chef_s113];
[L1093]              balanceOf_SpaghettiToken[this][chef_s113] := 15000000000000000000000000;
[L1094]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][chef_s113];
[L1115]  RET         call SpaghettiToken_SpaghettiToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L1116]  COND FALSE  !(revert)
[L168]   RET         call SpaghettiToken_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L169]               assume !revert && gas >= 0;
[L2023]  RET         call SpaghettiToken_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, chef_s113);
[L2024]              assume !revert && gas >= 0;
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND TRUE   choice == 3
[L1988]              gas := gas - 21000;
[L1989]  COND TRUE   gas >= 0
[L1990]              assume wad_s177 >= 0 && wad_s177 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1991]              assume msgvalue_MSG == 0;
[L1992]  CALL        call __ret_0_approve := approve~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L249]               havoc __exception;
[L250]               revert := false;
[L251]   COND FALSE  !(__exception)
[L272]   CALL        call __ret_0_ := approve~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L1158]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] - allowance_SpaghettiToken[this][msgsender_MSG][guy_s177];
[L1159]              allowance_SpaghettiToken[this][msgsender_MSG][guy_s177] := wad_s177;
[L1160]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] + allowance_SpaghettiToken[this][msgsender_MSG][guy_s177];
[L1161]              assert { :EventEmitted "Approval_SpaghettiToken" } true;
[L1162]              __ret_0_ := true;
[L272]   RET         call __ret_0_ := approve~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L273]               assume !revert && gas >= 0;
[L1992]  RET         call __ret_0_approve := approve~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, guy_s177, wad_s177);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != src_s309 && p1 != dst_s309) && (p2 != src_s309 || p3 != msgsender_MSG)) && src_s309 != dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s309] + wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_SpaghettiToken0 := true;
[L3]                 call_transferFrom_SpaghettiToken0 := false;
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND FALSE  !(__exception)
[L382]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1266]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1267]  COND FALSE  !(src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L1284]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1288]  COND TRUE   DType[this] == SpaghettiToken
[L1289]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1289]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1290]  COND FALSE  !(revert)
[L1296]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1297]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1298]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1299]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1300]  COND TRUE   DType[this] == SpaghettiToken
[L1301]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1301]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1302]  COND FALSE  !(revert)
[L1308]              ninetynine_s309 := ninetynine_s309;
[L1309]  COND TRUE   DType[this] == SpaghettiToken
[L1310]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1014]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1015]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1310]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1311]  COND FALSE  !(revert)
[L1317]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1318]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1319]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1320]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1346]  COND TRUE   DType[this] == SpaghettiToken
[L1347]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1347]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1348]  COND FALSE  !(revert)
[L1354]              totalSupply_SpaghettiToken[this] := __var_8;
[L1355]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1320]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1321]  COND FALSE  !(revert)
[L1324]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1325]              __ret_0_ := true;
[L382]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L383]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && balanceOf_SpaghettiToken[this][src_s309] == old(balanceOf_SpaghettiToken[this][src_s309]) - wad_s309) && balanceOf_SpaghettiToken[this][dst_s309] == old(balanceOf_SpaghettiToken[this][dst_s309]) + wad_s309) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] == old(allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) - wad_s309) && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this])) && balanceOf_SpaghettiToken[this][p1] == old(balanceOf_SpaghettiToken[this][p1])) && allowance_SpaghettiToken[this][p2][p3] == old(allowance_SpaghettiToken[this][p2][p3])) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this])) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this])) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]));
[L3]                 revert := revert_hold;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

Loop:
[L2027]  CALL        call CorralChoice_SpaghettiToken(this);
[L1911]              havoc msgsender_MSG;
[L1912]              havoc msgvalue_MSG;
[L1913]              havoc choice;
[L1914]              havoc __ret_0_totalSupply;
[L1915]              havoc arg329_s0;
[L1916]              havoc __ret_0_balanceOf;
[L1917]              havoc arg330_s0;
[L1918]              havoc arg331_s0;
[L1919]              havoc __ret_0_allowance;
[L1920]              havoc __ret_0_symbol;
[L1921]              havoc __ret_0_decimals;
[L1922]              havoc __ret_0_name;
[L1923]              havoc chef_s113;
[L1924]              havoc guy_s149;
[L1925]              havoc __ret_0_approve;
[L1926]              havoc guy_s177;
[L1927]              havoc wad_s177;
[L1928]              havoc dst_s194;
[L1929]              havoc wad_s194;
[L1930]              havoc __ret_0_transfer;
[L1931]              havoc src_s309;
[L1932]              havoc dst_s309;
[L1933]              havoc wad_s309;
[L1934]              havoc __ret_0_transferFrom;
[L1935]              havoc tmpNow;
[L1936]              havoc gas;
[L1937]              assume gas > 4000000 && gas <= 8000000;
[L1938]              tmpNow := now;
[L1939]              havoc now;
[L1940]              assume now > tmpNow;
[L1941]              assume msgsender_MSG != null;
[L1942]              assume DType[msgsender_MSG] != DSMath;
[L1943]              assume DType[msgsender_MSG] != SpaghettiToken;
[L1944]              Alloc[msgsender_MSG] := true;
[L1945]  COND FALSE  !(choice == 10)
[L1951]  COND FALSE  !(choice == 9)
[L1957]  COND FALSE  !(choice == 8)
[L1963]  COND FALSE  !(choice == 7)
[L1969]  COND FALSE  !(choice == 6)
[L1975]  COND FALSE  !(choice == 5)
[L1981]  COND FALSE  !(choice == 4)
[L1987]  COND FALSE  !(choice == 3)
[L1994]  COND FALSE  !(choice == 2)
[L2001]  COND TRUE   choice == 1
[L2002]              gas := gas - 21000;
[L2003]  COND TRUE   gas >= 0
[L2004]              assume wad_s309 >= 0 && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2005]              assume msgvalue_MSG == 0;
[L2006]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != src_s309 && p1 != dst_s309) && (p2 != src_s309 || p3 != msgsender_MSG)) && src_s309 != dst_s309) && wad_s309 <= balanceOf_SpaghettiToken[this][src_s309]) && wad_s309 <= allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) && balanceOf_SpaghettiToken[this][dst_s309] + wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && wad_s309 >= 0) && wad_s309 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][dst_s309] >= 0) && balanceOf_SpaghettiToken[this][dst_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiToken[this][src_s309] >= 0) && balanceOf_SpaghettiToken[this][src_s309] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= 0) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L359]               havoc __exception;
[L360]               revert := false;
[L361]   COND FALSE  !(__exception)
[L382]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L1266]              __var_4 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1267]  COND TRUE   src_s309 != msgsender_MSG && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L1268]  COND FALSE  !(!(allowance_SpaghettiToken[this][src_s309][msgsender_MSG] >= wad_s309))
[L1272]  COND TRUE   DType[this] == SpaghettiToken
[L1273]  CALL        call __var_5 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1273]  RET         call __var_5 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, allowance_SpaghettiToken[this][src_s309][msgsender_MSG], wad_s309);
[L1274]  COND FALSE  !(revert)
[L1280]              sum_allowance1[src_s309] := sum_allowance1[src_s309] - allowance_SpaghettiToken[this][src_s309][msgsender_MSG];
[L1281]              allowance_SpaghettiToken[this][src_s309][msgsender_MSG] := __var_5;
[L1282]              sum_allowance1[src_s309] := sum_allowance1[src_s309] + allowance_SpaghettiToken[this][src_s309][msgsender_MSG];
[L1284]  COND FALSE  !(!(balanceOf_SpaghettiToken[this][src_s309] >= wad_s309))
[L1288]  COND TRUE   DType[this] == SpaghettiToken
[L1289]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1289]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][src_s309], wad_s309);
[L1290]  COND FALSE  !(revert)
[L1296]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][src_s309];
[L1297]              balanceOf_SpaghettiToken[this][src_s309] := __var_6;
[L1298]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][src_s309];
[L1299]              one_s309 := wad_s309 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1300]  COND TRUE   DType[this] == SpaghettiToken
[L1301]  CALL        call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1301]  RET         call ninetynine_s309 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s309, one_s309);
[L1302]  COND FALSE  !(revert)
[L1308]              ninetynine_s309 := ninetynine_s309;
[L1309]  COND TRUE   DType[this] == SpaghettiToken
[L1310]  CALL        call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1014]              z_s23 := (x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1015]  COND FALSE  !(!((x_s23 + y_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s23))
[L1310]  RET         call __var_7 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiToken[this][dst_s309], ninetynine_s309);
[L1311]  COND FALSE  !(revert)
[L1317]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiToken[this][dst_s309];
[L1318]              balanceOf_SpaghettiToken[this][dst_s309] := __var_7;
[L1319]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiToken[this][dst_s309];
[L1320]  CALL        call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1346]  COND TRUE   DType[this] == SpaghettiToken
[L1347]  CALL        call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1032]              z_s45 := (x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1033]  COND FALSE  !(!((x_s45 - y_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s45))
[L1347]  RET         call __var_8 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiToken[this], wad_s326);
[L1348]  COND FALSE  !(revert)
[L1354]              totalSupply_SpaghettiToken[this] := __var_8;
[L1355]              assert { :EventEmitted "Burn_SpaghettiToken" } true;
[L1320]  RET         call burn~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, one_s309);
[L1321]  COND FALSE  !(revert)
[L1324]              assert { :EventEmitted "Transfer_SpaghettiToken" } true;
[L1325]              __ret_0_ := true;
[L382]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiToken__success(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L383]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && balanceOf_SpaghettiToken[this][src_s309] == old(balanceOf_SpaghettiToken[this][src_s309]) - wad_s309) && balanceOf_SpaghettiToken[this][dst_s309] == old(balanceOf_SpaghettiToken[this][dst_s309]) + wad_s309) && allowance_SpaghettiToken[this][src_s309][msgsender_MSG] == old(allowance_SpaghettiToken[this][src_s309][msgsender_MSG]) - wad_s309) && totalSupply_SpaghettiToken[this] == old(totalSupply_SpaghettiToken[this])) && balanceOf_SpaghettiToken[this][p1] == old(balanceOf_SpaghettiToken[this][p1])) && allowance_SpaghettiToken[this][p2][p3] == old(allowance_SpaghettiToken[this][p2][p3])) && symbol_SpaghettiToken[this] == old(symbol_SpaghettiToken[this])) && decimals_SpaghettiToken[this] == old(decimals_SpaghettiToken[this])) && name_SpaghettiToken[this] == old(name_SpaghettiToken[this]));
[L3]                 revert := revert_hold;
[L2006]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiToken(this, msgsender_MSG, msgvalue_MSG, src_s309, dst_s309, wad_s309);
[L2027]  RET         call CorralChoice_SpaghettiToken(this);

[2020-11-25 04:31:16,597 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:31:16,597 INFO  L82        PathProgramCache]: Analyzing trace with hash -66561811, now seen corresponding path program 2 times
[2020-11-25 04:31:16,598 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:31:16,659 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:31:16,746 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:31:16,779 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:31:16,780 INFO  L82        PathProgramCache]: Analyzing trace with hash 713116501, now seen corresponding path program 1 times
[2020-11-25 04:31:16,780 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:31:16,796 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:31:16,818 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 04:31:16,836 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 04:31:16,836 INFO  L82        PathProgramCache]: Analyzing trace with hash -1202509847, now seen corresponding path program 1 times
[2020-11-25 04:31:16,837 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 04:31:17,067 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Received shutdown request...
[2020-11-25 04:45:53,961 FATAL L265        ToolchainWalker]: An unrecoverable error occured during an interaction with an SMT solver:
de.uni_freiburg.informatik.ultimate.logic.SMTLIBException: Timeout exceeded
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$MixedLAInterpolator.convert(Interpolator.java:1288)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.cacheConvert(TermTransformer.java:131)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.access$0(TermTransformer.java:127)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer$Convert.walk(TermTransformer.java:79)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.transform(TermTransformer.java:253)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.mixedPivotLA(Interpolator.java:1478)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.combine(Interpolator.java:359)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.access$2(Interpolator.java:328)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$CombineInterpolants.walk(Interpolator.java:153)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.interpolate(Interpolator.java:220)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.getInterpolants(Interpolator.java:201)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.smtlib2.SMTInterpol.getInterpolants(SMTInterpol.java:919)
	at de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.managedscript.ManagedScript.getInterpolants(ManagedScript.java:200)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.computeCraigInterpolants(NestedInterpolantsBuilder.java:303)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:167)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:182)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolantsTree(InterpolatingTraceCheckCraig.java:271)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolants(InterpolatingTraceCheckCraig.java:207)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.<init>(InterpolatingTraceCheckCraig.java:109)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructCraig(TraceCheckConstructor.java:211)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructTraceCheck(TraceCheckConstructor.java:183)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.get(TraceCheckConstructor.java:165)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.FixedRefinementStrategy.getTraceCheck(FixedRefinementStrategy.java:134)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.checkFeasibility(BaseRefinementStrategy.java:223)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.executeStrategy(BaseRefinementStrategy.java:197)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceAbstractionRefinementEngine.<init>(TraceAbstractionRefinementEngine.java:70)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkFeasibilityAndComputeInterpolants(LassoCheck.java:1126)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkConcatFeasibility(LassoCheck.java:1096)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:1029)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-25 04:45:53,962 INFO  L168              Benchmark]: Toolchain (without parser) took 898811.24 ms. Allocated memory was 1.0 GB in the beginning and 6.5 GB in the end (delta: 5.4 GB). Free memory was 940.6 MB in the beginning and 5.0 GB in the end (delta: -4.1 GB). Peak memory consumption was 6.1 GB. Max. memory is 15.3 GB.
[2020-11-25 04:45:53,962 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 04:45:53,962 INFO  L168              Benchmark]: Boogie Preprocessor took 61.11 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 04:45:53,963 INFO  L168              Benchmark]: UtopiaSpecLang took 42.69 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 04:45:53,963 INFO  L168              Benchmark]: Boogie Printer took 8.55 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 04:45:53,963 INFO  L168              Benchmark]: RCFGBuilder took 426.74 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 870.8 MB in the end (delta: 59.1 MB). Peak memory consumption was 59.1 MB. Max. memory is 15.3 GB.
[2020-11-25 04:45:53,963 INFO  L168              Benchmark]: UtopiaLTL2Aut took 34.14 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 867.2 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 04:45:53,964 INFO  L168              Benchmark]: BÃ¼chi Program Product took 879.31 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 68.7 MB). Free memory was 867.2 MB in the beginning and 920.2 MB in the end (delta: -53.0 MB). Peak memory consumption was 151.4 MB. Max. memory is 15.3 GB.
[2020-11-25 04:45:53,964 INFO  L168              Benchmark]: BlockEncodingV2 took 64.85 ms. Allocated memory is still 1.1 GB. Free memory was 920.2 MB in the beginning and 887.1 MB in the end (delta: 33.1 MB). Peak memory consumption was 33.1 MB. Max. memory is 15.3 GB.
[2020-11-25 04:45:53,964 INFO  L168              Benchmark]: BuchiAutomizer took 897291.53 ms. Allocated memory was 1.1 GB in the beginning and 6.5 GB in the end (delta: 5.4 GB). Free memory was 887.1 MB in the beginning and 5.0 GB in the end (delta: -4.2 GB). Peak memory consumption was 6.0 GB. Max. memory is 15.3 GB.
[2020-11-25 04:45:53,967 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    1782 locations, 3025 edges
  - StatisticsResult: Encoded RCFG
    1744 locations, 2922 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 61.11 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 42.69 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 8.55 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 426.74 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 870.8 MB in the end (delta: 59.1 MB). Peak memory consumption was 59.1 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 34.14 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 867.2 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 879.31 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 68.7 MB). Free memory was 867.2 MB in the beginning and 920.2 MB in the end (delta: -53.0 MB). Peak memory consumption was 151.4 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 64.85 ms. Allocated memory is still 1.1 GB. Free memory was 920.2 MB in the beginning and 887.1 MB in the end (delta: 33.1 MB). Peak memory consumption was 33.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 897291.53 ms. Allocated memory was 1.1 GB in the beginning and 6.5 GB in the end (delta: 5.4 GB). Free memory was 887.1 MB in the beginning and 5.0 GB in the end (delta: -4.2 GB). Peak memory consumption was 6.0 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    747 locations, 937 edges
  - StatisticsResult: BuchiProgram size
    1782 locations, 3025 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: SMTLIBException: Timeout exceeded
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: SMTLIBException: Timeout exceeded: de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Completed graceful shutdown
