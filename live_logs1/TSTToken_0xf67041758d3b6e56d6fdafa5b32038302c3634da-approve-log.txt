This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 06:41:09,201 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 06:41:09,202 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 06:41:09,213 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 06:41:09,214 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 06:41:09,214 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 06:41:09,215 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 06:41:09,217 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 06:41:09,218 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 06:41:09,219 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 06:41:09,219 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 06:41:09,220 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 06:41:09,220 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 06:41:09,221 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 06:41:09,222 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 06:41:09,222 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 06:41:09,223 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 06:41:09,224 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 06:41:09,225 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 06:41:09,227 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 06:41:09,227 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 06:41:09,228 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 06:41:09,229 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 06:41:09,230 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 06:41:09,230 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 06:41:09,230 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 06:41:09,231 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 06:41:09,231 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 06:41:09,231 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 06:41:09,232 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 06:41:09,232 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 06:41:09,232 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 06:41:09,233 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 06:41:09,233 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 06:41:09,234 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 06:41:09,234 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 06:41:09,235 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 06:41:09,235 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 06:41:09,235 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 06:41:09,236 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 06:41:09,236 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 06:41:09,236 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 06:41:09,243 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 06:41:09,244 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 06:41:09,244 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 06:41:09,245 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 06:41:09,245 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 06:41:09,245 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 06:41:09,245 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 06:41:09,245 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 06:41:09,245 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 06:41:09,245 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 06:41:09,245 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 06:41:09,245 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 06:41:09,245 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 06:41:09,246 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 06:41:09,246 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 06:41:09,246 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 06:41:09,246 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 06:41:09,246 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 06:41:09,246 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 06:41:09,246 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 06:41:09,246 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 06:41:09,246 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 06:41:09,246 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 06:41:09,247 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 06:41:09,247 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 06:41:09,247 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 06:41:09,274 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 06:41:09,286 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 06:41:09,289 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 06:41:09,290 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 06:41:09,290 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 06:41:09,291 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_approve.bpl
[2020-11-25 06:41:09,291 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_approve.bpl'
[2020-11-25 06:41:09,385 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 06:41:09,387 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 06:41:09,387 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 06:41:09,387 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 06:41:09,387 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 06:41:09,403 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:41:09" (1/1) ...
[2020-11-25 06:41:09,405 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:41:09" (1/1) ...
[2020-11-25 06:41:09,440 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:41:09" (1/1) ...
[2020-11-25 06:41:09,441 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:41:09" (1/1) ...
[2020-11-25 06:41:09,464 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:41:09" (1/1) ...
[2020-11-25 06:41:09,477 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:41:09" (1/1) ...
[2020-11-25 06:41:09,487 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:41:09" (1/1) ...
[2020-11-25 06:41:09,497 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 06:41:09,498 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 06:41:09,498 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 06:41:09,500 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 06:41:09,504 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:41:09" (1/1) ...
[2020-11-25 06:41:09,521 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && name_TSTToken[this] == old(name_TSTToken[this]) && symbol_TSTToken[this] == old(symbol_TSTToken[this]) && decimals_TSTToken[this] == old(decimals_TSTToken[this]) && cap_CappedToken[this] == old(cap_CappedToken[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 06:41:09,526 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && name_TSTToken[this] == old(name_TSTToken[this]) && symbol_TSTToken[this] == old(symbol_TSTToken[this]) && decimals_TSTToken[this] == old(decimals_TSTToken[this]) && cap_CappedToken[this] == old(cap_CappedToken[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 06:41:09,533 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && name_TSTToken[this] == old(name_TSTToken[this]) && symbol_TSTToken[this] == old(symbol_TSTToken[this]) && decimals_TSTToken[this] == old(decimals_TSTToken[this]) && cap_CappedToken[this] == old(cap_CappedToken[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 06:41:09,540 INFO  L636   opiaSpecLangObserver]: Parsed ( p1!=msg.sender || p2!=_spender_s463 ) to BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[_spender_s463,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]
[2020-11-25 06:41:09,543 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( __ret_0_==true && allowed_StandardToken[this][msg.sender][_spender_s463]==_value_s463 ) && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && balances_BasicToken[this]==( old(balances_BasicToken[this]) ) ) && allowed_StandardToken[this][p1][p2]==( old(allowed_StandardToken[this][p1][p2]) ) ) && name_TSTToken[this]==( old(name_TSTToken[this]) ) ) && symbol_TSTToken[this]==( old(symbol_TSTToken[this]) ) ) && decimals_TSTToken[this]==( old(decimals_TSTToken[this]) ) ) && cap_CappedToken[this]==( old(cap_CappedToken[this]) ) ) && mintingFinished_MintableToken[this]==( old(mintingFinished_MintableToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,approve~address~uint256_StandardToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[_spender_s463,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],IdentifierExpression[_value_s463,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_TSTToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_TSTToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_TSTToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_TSTToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_TSTToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_TSTToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[cap_CappedToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[cap_CappedToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_StandardToken>]]]]]]
[2020-11-25 06:41:09,549 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(StandardToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(StandardToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && name_TSTToken[this] == old(name_TSTToken[this]) && symbol_TSTToken[this] == old(symbol_TSTToken[this]) && decimals_TSTToken[this] == old(decimals_TSTToken[this]) && cap_CappedToken[this] == old(cap_CappedToken[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 06:41:09,549 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_approve_StandardToken0) ==> ( <>AP(success_approve_StandardToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 06:41:09,561 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:41:09 PropertyContainer
[2020-11-25 06:41:09,561 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 06:41:09,561 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 06:41:09,561 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 06:41:09,561 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 06:41:09,562 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:41:09" (1/2) ...
[2020-11-25 06:41:09,563 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 06:41:09,563 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 06:41:09,581 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:41:09" (2/2) ...
[2020-11-25 06:41:09,581 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 06:41:09,581 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 06:41:09,581 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 06:41:09,581 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 06:41:09,582 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:41:09" (1/2) ...
[2020-11-25 06:41:09,636 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 06:41:09,636 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 06:41:09,636 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 06:41:09,637 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 06:41:09,637 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 06:41:09,637 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 06:41:09,637 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 06:41:09,637 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 06:41:09,637 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 06:41:09,637 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 06:41:09,637 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 06:41:09,637 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-25 06:41:09,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-25 06:41:09,638 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 06:41:09,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 06:41:09,638 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 06:41:09,638 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 06:41:09,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 06:41:09,638 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 06:41:09,638 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-25 06:41:09,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-25 06:41:09,639 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-25 06:41:09,639 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-25 06:41:09,639 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-25 06:41:09,639 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 06:41:09,639 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-25 06:41:09,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-25 06:41:09,639 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-25 06:41:09,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-25 06:41:09,639 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-25 06:41:09,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-25 06:41:09,640 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-25 06:41:09,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-25 06:41:09,640 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 06:41:09,640 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 06:41:09,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 06:41:09,640 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 06:41:09,640 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 06:41:09,640 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 06:41:09,640 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 06:41:09,640 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-25 06:41:09,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-25 06:41:09,640 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 06:41:09,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 06:41:09,641 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-25 06:41:09,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-25 06:41:09,641 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-25 06:41:09,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-25 06:41:09,641 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 06:41:09,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 06:41:09,641 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 06:41:09,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 06:41:09,641 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 06:41:09,641 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-25 06:41:09,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-25 06:41:09,641 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-25 06:41:09,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-25 06:41:09,641 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-25 06:41:09,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-25 06:41:09,642 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-25 06:41:09,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-25 06:41:09,642 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken_NoBaseCtor__success
[2020-11-25 06:41:09,642 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken
[2020-11-25 06:41:09,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken
[2020-11-25 06:41:09,642 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_CappedToken
[2020-11-25 06:41:09,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_CappedToken
[2020-11-25 06:41:09,642 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_CappedToken
[2020-11-25 06:41:09,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_CappedToken
[2020-11-25 06:41:09,642 INFO  L130     BoogieDeclarations]: Found specification of procedure TSTToken_TSTToken_NoBaseCtor__success
[2020-11-25 06:41:09,642 INFO  L130     BoogieDeclarations]: Found specification of procedure TSTToken_TSTToken
[2020-11-25 06:41:09,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure TSTToken_TSTToken
[2020-11-25 06:41:09,643 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TSTToken
[2020-11-25 06:41:09,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TSTToken
[2020-11-25 06:41:09,643 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TSTToken
[2020-11-25 06:41:09,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TSTToken
[2020-11-25 06:41:09,643 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TSTToken
[2020-11-25 06:41:09,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TSTToken
[2020-11-25 06:41:09,643 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 06:41:09,643 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 06:41:09,643 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 06:41:09,643 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 06:41:09,643 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-25 06:41:09,644 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-25 06:41:09,644 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 06:41:09,644 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 06:41:09,644 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 06:41:09,644 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 06:41:09,644 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-25 06:41:09,644 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-25 06:41:09,644 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-25 06:41:09,644 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-25 06:41:09,644 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 06:41:09,645 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 06:41:09,645 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-25 06:41:09,645 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-25 06:41:09,645 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-25 06:41:09,645 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-25 06:41:09,645 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_CappedToken
[2020-11-25 06:41:09,645 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_CappedToken
[2020-11-25 06:41:09,645 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_TSTToken
[2020-11-25 06:41:09,645 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 06:41:09,645 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 06:41:09,646 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 06:41:09,646 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 06:41:09,646 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 06:41:09,646 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 06:41:09,646 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 06:41:09,646 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 06:41:09,646 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 06:41:09,646 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 06:41:09,646 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 06:41:09,646 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 06:41:09,647 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-25 06:41:09,647 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-25 06:41:09,647 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 06:41:09,647 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 06:41:09,647 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 06:41:09,647 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 06:41:09,647 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 06:41:09,647 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 06:41:09,647 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 06:41:09,647 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 06:41:09,648 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 06:41:09,648 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-25 06:41:09,648 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-25 06:41:09,648 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-25 06:41:09,648 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-25 06:41:09,648 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 06:41:09,648 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 06:41:09,648 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-25 06:41:09,648 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-25 06:41:09,648 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 06:41:09,649 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 06:41:09,649 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 06:41:09,649 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 06:41:09,649 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-25 06:41:09,649 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-25 06:41:09,649 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 06:41:09,649 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 06:41:09,649 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-25 06:41:09,649 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 06:41:09,649 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-25 06:41:09,650 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-25 06:41:09,650 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 06:41:09,650 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 06:41:09,650 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 06:41:09,650 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 06:41:09,650 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 06:41:09,650 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-25 06:41:09,650 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-25 06:41:09,650 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-25 06:41:09,651 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 06:41:09,651 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-25 06:41:09,651 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-25 06:41:09,651 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-25 06:41:09,651 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-25 06:41:09,651 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken_NoBaseCtor__fail
[2020-11-25 06:41:09,651 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken__success
[2020-11-25 06:41:09,651 INFO  L130     BoogieDeclarations]: Found specification of procedure CappedToken_CappedToken__fail
[2020-11-25 06:41:09,651 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_CappedToken__success
[2020-11-25 06:41:09,651 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_CappedToken__fail
[2020-11-25 06:41:09,651 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_CappedToken__success
[2020-11-25 06:41:09,652 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_CappedToken__fail
[2020-11-25 06:41:09,652 INFO  L130     BoogieDeclarations]: Found specification of procedure TSTToken_TSTToken_NoBaseCtor__fail
[2020-11-25 06:41:09,652 INFO  L130     BoogieDeclarations]: Found specification of procedure TSTToken_TSTToken__success
[2020-11-25 06:41:09,652 INFO  L130     BoogieDeclarations]: Found specification of procedure TSTToken_TSTToken__fail
[2020-11-25 06:41:09,652 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TSTToken__success
[2020-11-25 06:41:09,652 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TSTToken__fail
[2020-11-25 06:41:09,652 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TSTToken__success
[2020-11-25 06:41:09,652 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TSTToken__fail
[2020-11-25 06:41:09,652 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TSTToken__success
[2020-11-25 06:41:09,652 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TSTToken__fail
[2020-11-25 06:41:09,652 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 06:41:09,653 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 06:41:09,653 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 06:41:09,653 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 06:41:09,653 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-25 06:41:09,653 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-25 06:41:09,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 06:41:09,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 06:41:09,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 06:41:09,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 06:41:09,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 06:41:09,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 06:41:09,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 06:41:09,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 06:41:09,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 06:41:09,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 06:41:09,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 06:41:09,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 06:41:09,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 06:41:09,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 06:41:09,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 06:41:09,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 06:41:09,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 06:41:09,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 06:41:09,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-25 06:41:09,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-25 06:41:09,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 06:41:09,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 06:41:09,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 06:41:09,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 06:41:09,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 06:41:09,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 06:41:09,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 06:41:09,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 06:41:09,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 06:41:09,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 06:41:09,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 06:41:09,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 06:41:09,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-25 06:41:09,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-25 06:41:09,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-25 06:41:09,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-25 06:41:09,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 06:41:09,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 06:41:09,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-25 06:41:09,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-25 06:41:09,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 06:41:09,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 06:41:09,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 06:41:09,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 06:41:09,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 06:41:09,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 06:41:09,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-25 06:41:09,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-25 06:41:09,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 06:41:09,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 06:41:09,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 06:41:09,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-25 06:41:09,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-25 06:41:09,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-25 06:41:09,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 06:41:09,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 06:41:09,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 06:41:09,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 06:41:09,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-25 06:41:09,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-25 06:41:09,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-25 06:41:09,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-25 06:41:09,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-25 06:41:09,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-25 06:41:09,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-25 06:41:09,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-25 06:41:09,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-25 06:41:09,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-25 06:41:09,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken_NoBaseCtor__fail
[2020-11-25 06:41:09,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken_NoBaseCtor__success
[2020-11-25 06:41:09,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken__fail
[2020-11-25 06:41:09,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure CappedToken_CappedToken__success
[2020-11-25 06:41:09,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_CappedToken__fail
[2020-11-25 06:41:09,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_CappedToken__success
[2020-11-25 06:41:09,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_CappedToken__fail
[2020-11-25 06:41:09,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_CappedToken__success
[2020-11-25 06:41:09,660 INFO  L138     BoogieDeclarations]: Found implementation of procedure TSTToken_TSTToken_NoBaseCtor__fail
[2020-11-25 06:41:09,660 INFO  L138     BoogieDeclarations]: Found implementation of procedure TSTToken_TSTToken_NoBaseCtor__success
[2020-11-25 06:41:09,660 INFO  L138     BoogieDeclarations]: Found implementation of procedure TSTToken_TSTToken__fail
[2020-11-25 06:41:09,660 INFO  L138     BoogieDeclarations]: Found implementation of procedure TSTToken_TSTToken__success
[2020-11-25 06:41:09,660 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TSTToken__fail
[2020-11-25 06:41:09,660 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TSTToken__success
[2020-11-25 06:41:09,660 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TSTToken__fail
[2020-11-25 06:41:09,660 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TSTToken__success
[2020-11-25 06:41:09,660 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TSTToken__fail
[2020-11-25 06:41:09,660 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TSTToken__success
[2020-11-25 06:41:09,660 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 06:41:09,660 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 06:41:09,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 06:41:09,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 06:41:09,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 06:41:09,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 06:41:09,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 06:41:09,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 06:41:09,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-25 06:41:09,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-25 06:41:09,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-25 06:41:09,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-25 06:41:09,661 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 06:41:09,662 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 06:41:09,662 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 06:41:09,662 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 06:41:09,662 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-25 06:41:09,662 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-25 06:41:09,662 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-25 06:41:09,662 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-25 06:41:09,662 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 06:41:09,662 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 06:41:09,662 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-25 06:41:09,662 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-25 06:41:09,663 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-25 06:41:09,663 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-25 06:41:09,663 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_CappedToken
[2020-11-25 06:41:09,663 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_CappedToken
[2020-11-25 06:41:09,663 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_TSTToken
[2020-11-25 06:41:09,663 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 06:41:09,663 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 06:41:09,663 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 06:41:10,229 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 06:41:10,378 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 06:41:10,378 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 06:41:10,378 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 06:41:10,711 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 06:41:10,711 INFO  L286             CfgBuilder]: Removed 9 assue(true) statements.
[2020-11-25 06:41:10,713 INFO  L202        PluginConnector]: Adding new model TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:41:10 BoogieIcfgContainer
[2020-11-25 06:41:10,714 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:41:09" (2/2) ...
[2020-11-25 06:41:10,714 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 06:41:10,714 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@5a262aa1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:41:10, skipping insertion in model container
[2020-11-25 06:41:10,714 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 06:41:10,714 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 06:41:10,714 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 06:41:10,716 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 06:41:10,716 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:41:09" (1/3) ...
[2020-11-25 06:41:10,716 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@4131a60e and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:41:10, skipping insertion in model container
[2020-11-25 06:41:10,716 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:41:09" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 06:41:10,750 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:41:10 NWAContainer
[2020-11-25 06:41:10,750 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 06:41:10,751 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 06:41:10,751 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 06:41:10,751 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 06:41:10,752 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:41:10" (3/4) ...
[2020-11-25 06:41:10,753 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@60d8c00c and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:41:10, skipping insertion in model container
[2020-11-25 06:41:10,753 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:41:10" (4/4) ...
[2020-11-25 06:41:10,756 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 06:41:10,760 INFO  L110   BuchiProductObserver]: Initial RCFG 2304 locations, 3217 edges
[2020-11-25 06:41:10,761 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 06:41:10,772 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 06:41:12,630 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 06:41:12,637 INFO  L110   BuchiProductObserver]: BuchiProgram size 5820 locations, 10626 edges
[2020-11-25 06:41:12,638 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:41:12 BoogieIcfgContainer
[2020-11-25 06:41:12,638 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 06:41:12,638 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 06:41:12,638 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 06:41:12,639 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 06:41:12,640 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:41:12" (1/1) ...
[2020-11-25 06:41:12,756 INFO  L313           BlockEncoder]: Initial Icfg 5820 locations, 10626 edges
[2020-11-25 06:41:12,756 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 06:41:12,757 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 06:41:12,757 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 06:41:12,757 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 06:41:12,772 INFO  L70    emoveInfeasibleEdges]: Removed 102 edges and 21 locations because of local infeasibility
[2020-11-25 06:41:12,786 INFO  L70        RemoveSinkStates]: Removed 14 edges and 9 locations by removing sink states
[2020-11-25 06:41:12,799 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 06:41:12,803 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 06:41:12,807 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 06:41:12,807 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 06:41:12,810 INFO  L313           BlockEncoder]: Encoded RCFG 5752 locations, 10454 edges
[2020-11-25 06:41:12,811 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:41:12 BasicIcfg
[2020-11-25 06:41:12,811 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 06:41:12,811 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 06:41:12,811 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 06:41:12,813 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 06:41:12,813 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:41:12,813 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:41:09" (1/6) ...
[2020-11-25 06:41:12,814 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1836d85a and model type TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:41:12, skipping insertion in model container
[2020-11-25 06:41:12,815 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:41:12,815 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:41:09" (2/6) ...
[2020-11-25 06:41:12,815 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1836d85a and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:41:12, skipping insertion in model container
[2020-11-25 06:41:12,815 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:41:12,815 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:41:10" (3/6) ...
[2020-11-25 06:41:12,815 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1836d85a and model type TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 06:41:12, skipping insertion in model container
[2020-11-25 06:41:12,815 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:41:12,815 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:41:10" (4/6) ...
[2020-11-25 06:41:12,815 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1836d85a and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:41:12, skipping insertion in model container
[2020-11-25 06:41:12,815 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:41:12,815 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:41:12" (5/6) ...
[2020-11-25 06:41:12,816 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1836d85a and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 06:41:12, skipping insertion in model container
[2020-11-25 06:41:12,816 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:41:12,816 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:41:12" (6/6) ...
[2020-11-25 06:41:12,817 INFO  L404   chiAutomizerObserver]: Analyzing ICFG TSTToken_0xf67041758d3b6e56d6fdafa5b32038302c3634da_approve.bpl_BEv2
[2020-11-25 06:41:12,851 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 06:41:12,851 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 06:41:12,852 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 06:41:12,852 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 06:41:12,852 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 06:41:12,852 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 06:41:12,852 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 06:41:12,852 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 06:41:12,852 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 06:41:12,894 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5752 states.
[2020-11-25 06:41:12,957 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:41:12,958 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:41:12,958 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:41:12,967 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:41:12,968 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:41:12,968 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 06:41:12,968 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5752 states.
[2020-11-25 06:41:12,995 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:41:12,995 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:41:12,996 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:41:12,998 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:41:12,999 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StandardToken0 := false;
[L3]                 call_approve_StandardToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6512]              assume null == 0;
[L6513]  CALL        call this := FreshRefGenerator__success();
[L2510]              havoc newRef;
[L2511]              assume Alloc[newRef] == false;
[L2512]              Alloc[newRef] := true;
[L2513]              assume newRef != null;
[L6513]  RET         call this := FreshRefGenerator__success();
[L6514]              assume now >= 0;
[L6515]              assume DType[this] == TSTToken;
[L6516]              assume msgvalue_MSG == 0;
[L6517]              gas := gas - 53000;
[L6518]  CALL        call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1532]              havoc __exception;
[L1533]              revert := false;
[L1534]  COND FALSE  !(__exception)
[L1558]  CALL        call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3627]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3627]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3628]  COND TRUE   revert
[L1558]  RET         call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1559]              assume !revert && gas >= 0;
[L6518]  RET         call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6519]              assume !revert && gas >= 0;

Loop:
[L6522]  CALL        call CorralChoice_TSTToken(this);
[L6334]              havoc msgsender_MSG;
[L6335]              havoc msgvalue_MSG;
[L6336]              havoc choice;
[L6337]              havoc __ret_0_owner;
[L6338]              havoc _newOwner_s153;
[L6339]              havoc __ret_0_totalSupply;
[L6340]              havoc _owner_s298;
[L6341]              havoc __ret_0_balanceOf;
[L6342]              havoc _to_s286;
[L6343]              havoc _value_s286;
[L6344]              havoc __ret_0_transfer;
[L6345]              havoc _owner_s479;
[L6346]              havoc _spender_s479;
[L6347]              havoc __ret_0_allowance;
[L6348]              havoc _from_s435;
[L6349]              havoc _to_s435;
[L6350]              havoc _value_s435;
[L6351]              havoc __ret_0_transferFrom;
[L6352]              havoc _spender_s463;
[L6353]              havoc _value_s463;
[L6354]              havoc __ret_0_approve;
[L6355]              havoc _spender_s521;
[L6356]              havoc _addedValue_s521;
[L6357]              havoc __ret_0_increaseApproval;
[L6358]              havoc _spender_s581;
[L6359]              havoc _subtractedValue_s581;
[L6360]              havoc __ret_0_decreaseApproval;
[L6361]              havoc __ret_0_mintingFinished;
[L6362]              havoc _to_s729;
[L6363]              havoc _amount_s729;
[L6364]              havoc __ret_0_mint;
[L6365]              havoc __ret_0_finishMinting;
[L6366]              havoc __ret_0_cap;
[L6367]              havoc _cap_s704;
[L6368]              havoc __ret_0_name;
[L6369]              havoc __ret_0_symbol;
[L6370]              havoc __ret_0_decimals;
[L6371]              havoc _cap_s750;
[L6372]              havoc tmpNow;
[L6373]              havoc gas;
[L6374]              assume gas > 4000000 && gas <= 8000000;
[L6375]              tmpNow := now;
[L6376]              havoc now;
[L6377]              assume now > tmpNow;
[L6378]              assume msgsender_MSG != null;
[L6379]              assume DType[msgsender_MSG] != SafeMath;
[L6380]              assume DType[msgsender_MSG] != Ownable;
[L6381]              assume DType[msgsender_MSG] != ERC20Basic;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != ERC20;
[L6384]              assume DType[msgsender_MSG] != StandardToken;
[L6385]              assume DType[msgsender_MSG] != MintableToken;
[L6386]              assume DType[msgsender_MSG] != CappedToken;
[L6387]              assume DType[msgsender_MSG] != TSTToken;
[L6388]              Alloc[msgsender_MSG] := true;
[L6389]  COND TRUE   choice == 18
[L6390]              gas := gas - 21000;
[L6391]  COND FALSE  !(gas >= 0)
[L6522]  RET         call CorralChoice_TSTToken(this);

[2020-11-25 06:41:13,017 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:41:13,017 INFO  L82        PathProgramCache]: Analyzing trace with hash -965482258, now seen corresponding path program 1 times
[2020-11-25 06:41:13,022 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:41:13,046 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:41:13,088 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 06:41:13,090 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:41:13,090 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 06:41:13,460 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:41:13,472 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 06:41:13,472 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 06:41:13,474 INFO  L87              Difference]: Start difference. First operand 5752 states. Second operand 4 states.
[2020-11-25 06:41:13,974 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:41:13,975 INFO  L93              Difference]: Finished difference Result 2948 states and 3371 transitions.
[2020-11-25 06:41:13,975 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 06:41:13,978 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2948 states and 3371 transitions.
[2020-11-25 06:41:14,001 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:41:14,029 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2948 states to 2944 states and 3363 transitions.
[2020-11-25 06:41:14,030 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 06:41:14,034 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 737
[2020-11-25 06:41:14,034 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2944 states and 3363 transitions.
[2020-11-25 06:41:14,046 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:41:14,046 INFO  L728         BuchiCegarLoop]: Abstraction has 2944 states and 3363 transitions.
[2020-11-25 06:41:14,068 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2944 states and 3363 transitions.
[2020-11-25 06:41:14,119 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2944 to 2944.
[2020-11-25 06:41:14,119 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2944 states.
[2020-11-25 06:41:14,126 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2944 states to 2944 states and 3363 transitions.
[2020-11-25 06:41:14,126 INFO  L751         BuchiCegarLoop]: Abstraction has 2944 states and 3363 transitions.
[2020-11-25 06:41:14,127 INFO  L631         BuchiCegarLoop]: Abstraction has 2944 states and 3363 transitions.
[2020-11-25 06:41:14,127 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 06:41:14,127 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2944 states and 3363 transitions.
[2020-11-25 06:41:14,135 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:41:14,135 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:41:14,135 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:41:14,138 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:41:14,138 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StandardToken0 := false;
[L3]                 call_approve_StandardToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6512]              assume null == 0;
[L6513]  CALL        call this := FreshRefGenerator__success();
[L2510]              havoc newRef;
[L2511]              assume Alloc[newRef] == false;
[L2512]              Alloc[newRef] := true;
[L2513]              assume newRef != null;
[L6513]  RET         call this := FreshRefGenerator__success();
[L6514]              assume now >= 0;
[L6515]              assume DType[this] == TSTToken;
[L6516]              assume msgvalue_MSG == 0;
[L6517]              gas := gas - 53000;
[L6518]  CALL        call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1532]              havoc __exception;
[L1533]              revert := false;
[L1534]  COND FALSE  !(__exception)
[L1558]  CALL        call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3627]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3627]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3628]  COND TRUE   revert
[L1558]  RET         call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1559]              assume !revert && gas >= 0;
[L6518]  RET         call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6519]              assume !revert && gas >= 0;
[L6522]  CALL        call CorralChoice_TSTToken(this);
[L6334]              havoc msgsender_MSG;
[L6335]              havoc msgvalue_MSG;
[L6336]              havoc choice;
[L6337]              havoc __ret_0_owner;
[L6338]              havoc _newOwner_s153;
[L6339]              havoc __ret_0_totalSupply;
[L6340]              havoc _owner_s298;
[L6341]              havoc __ret_0_balanceOf;
[L6342]              havoc _to_s286;
[L6343]              havoc _value_s286;
[L6344]              havoc __ret_0_transfer;
[L6345]              havoc _owner_s479;
[L6346]              havoc _spender_s479;
[L6347]              havoc __ret_0_allowance;
[L6348]              havoc _from_s435;
[L6349]              havoc _to_s435;
[L6350]              havoc _value_s435;
[L6351]              havoc __ret_0_transferFrom;
[L6352]              havoc _spender_s463;
[L6353]              havoc _value_s463;
[L6354]              havoc __ret_0_approve;
[L6355]              havoc _spender_s521;
[L6356]              havoc _addedValue_s521;
[L6357]              havoc __ret_0_increaseApproval;
[L6358]              havoc _spender_s581;
[L6359]              havoc _subtractedValue_s581;
[L6360]              havoc __ret_0_decreaseApproval;
[L6361]              havoc __ret_0_mintingFinished;
[L6362]              havoc _to_s729;
[L6363]              havoc _amount_s729;
[L6364]              havoc __ret_0_mint;
[L6365]              havoc __ret_0_finishMinting;
[L6366]              havoc __ret_0_cap;
[L6367]              havoc _cap_s704;
[L6368]              havoc __ret_0_name;
[L6369]              havoc __ret_0_symbol;
[L6370]              havoc __ret_0_decimals;
[L6371]              havoc _cap_s750;
[L6372]              havoc tmpNow;
[L6373]              havoc gas;
[L6374]              assume gas > 4000000 && gas <= 8000000;
[L6375]              tmpNow := now;
[L6376]              havoc now;
[L6377]              assume now > tmpNow;
[L6378]              assume msgsender_MSG != null;
[L6379]              assume DType[msgsender_MSG] != SafeMath;
[L6380]              assume DType[msgsender_MSG] != Ownable;
[L6381]              assume DType[msgsender_MSG] != ERC20Basic;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != ERC20;
[L6384]              assume DType[msgsender_MSG] != StandardToken;
[L6385]              assume DType[msgsender_MSG] != MintableToken;
[L6386]              assume DType[msgsender_MSG] != CappedToken;
[L6387]              assume DType[msgsender_MSG] != TSTToken;
[L6388]              Alloc[msgsender_MSG] := true;
[L6389]  COND FALSE  !(choice == 18)
[L6395]  COND FALSE  !(choice == 17)
[L6401]  COND FALSE  !(choice == 16)
[L6407]  COND FALSE  !(choice == 15)
[L6413]  COND FALSE  !(choice == 14)
[L6419]  COND FALSE  !(choice == 13)
[L6426]  COND FALSE  !(choice == 12)
[L6432]  COND FALSE  !(choice == 11)
[L6439]  COND TRUE   choice == 10
[L6440]              gas := gas - 21000;
[L6441]  COND TRUE   gas >= 0
[L6442]              assume _value_s463 >= 0 && _value_s463 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6443]              assume msgvalue_MSG == 0;
[L6444]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s463;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L859]               havoc __exception;
[L860]               revert := false;
[L861]   COND FALSE  !(__exception)
[L885]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L3134]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s463];
[L3135]              allowed_StandardToken[this][msgsender_MSG][_spender_s463] := _value_s463;
[L3136]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s463];
[L3137]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3138]              __ret_0_ := true;
[L885]   RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L886]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s463] == _value_s463) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L6444]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L6522]  RET         call CorralChoice_TSTToken(this);

Loop:
[L6522]  CALL        call CorralChoice_TSTToken(this);
[L6334]              havoc msgsender_MSG;
[L6335]              havoc msgvalue_MSG;
[L6336]              havoc choice;
[L6337]              havoc __ret_0_owner;
[L6338]              havoc _newOwner_s153;
[L6339]              havoc __ret_0_totalSupply;
[L6340]              havoc _owner_s298;
[L6341]              havoc __ret_0_balanceOf;
[L6342]              havoc _to_s286;
[L6343]              havoc _value_s286;
[L6344]              havoc __ret_0_transfer;
[L6345]              havoc _owner_s479;
[L6346]              havoc _spender_s479;
[L6347]              havoc __ret_0_allowance;
[L6348]              havoc _from_s435;
[L6349]              havoc _to_s435;
[L6350]              havoc _value_s435;
[L6351]              havoc __ret_0_transferFrom;
[L6352]              havoc _spender_s463;
[L6353]              havoc _value_s463;
[L6354]              havoc __ret_0_approve;
[L6355]              havoc _spender_s521;
[L6356]              havoc _addedValue_s521;
[L6357]              havoc __ret_0_increaseApproval;
[L6358]              havoc _spender_s581;
[L6359]              havoc _subtractedValue_s581;
[L6360]              havoc __ret_0_decreaseApproval;
[L6361]              havoc __ret_0_mintingFinished;
[L6362]              havoc _to_s729;
[L6363]              havoc _amount_s729;
[L6364]              havoc __ret_0_mint;
[L6365]              havoc __ret_0_finishMinting;
[L6366]              havoc __ret_0_cap;
[L6367]              havoc _cap_s704;
[L6368]              havoc __ret_0_name;
[L6369]              havoc __ret_0_symbol;
[L6370]              havoc __ret_0_decimals;
[L6371]              havoc _cap_s750;
[L6372]              havoc tmpNow;
[L6373]              havoc gas;
[L6374]              assume gas > 4000000 && gas <= 8000000;
[L6375]              tmpNow := now;
[L6376]              havoc now;
[L6377]              assume now > tmpNow;
[L6378]              assume msgsender_MSG != null;
[L6379]              assume DType[msgsender_MSG] != SafeMath;
[L6380]              assume DType[msgsender_MSG] != Ownable;
[L6381]              assume DType[msgsender_MSG] != ERC20Basic;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != ERC20;
[L6384]              assume DType[msgsender_MSG] != StandardToken;
[L6385]              assume DType[msgsender_MSG] != MintableToken;
[L6386]              assume DType[msgsender_MSG] != CappedToken;
[L6387]              assume DType[msgsender_MSG] != TSTToken;
[L6388]              Alloc[msgsender_MSG] := true;
[L6389]  COND FALSE  !(choice == 18)
[L6395]  COND FALSE  !(choice == 17)
[L6401]  COND FALSE  !(choice == 16)
[L6407]  COND FALSE  !(choice == 15)
[L6413]  COND FALSE  !(choice == 14)
[L6419]  COND FALSE  !(choice == 13)
[L6426]  COND FALSE  !(choice == 12)
[L6432]  COND FALSE  !(choice == 11)
[L6439]  COND TRUE   choice == 10
[L6440]              gas := gas - 21000;
[L6441]  COND TRUE   gas >= 0
[L6442]              assume _value_s463 >= 0 && _value_s463 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6443]              assume msgvalue_MSG == 0;
[L6444]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s463;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L859]               havoc __exception;
[L860]               revert := false;
[L861]   COND FALSE  !(__exception)
[L885]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L3134]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s463];
[L3135]              allowed_StandardToken[this][msgsender_MSG][_spender_s463] := _value_s463;
[L3136]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s463];
[L3137]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3138]              __ret_0_ := true;
[L885]   RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L886]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s463] == _value_s463) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L6444]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L6522]  RET         call CorralChoice_TSTToken(this);

[2020-11-25 06:41:14,143 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:41:14,143 INFO  L82        PathProgramCache]: Analyzing trace with hash 1214543044, now seen corresponding path program 1 times
[2020-11-25 06:41:14,144 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:41:14,155 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:41:14,183 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 06:41:14,183 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:41:14,183 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 06:41:14,184 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:41:14,184 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 06:41:14,185 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 06:41:14,185 INFO  L87              Difference]: Start difference. First operand 2944 states and 3363 transitions. cyclomatic complexity: 421 Second operand 3 states.
[2020-11-25 06:41:14,276 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:41:14,276 INFO  L93              Difference]: Finished difference Result 3666 states and 4147 transitions.
[2020-11-25 06:41:14,276 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 06:41:14,277 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3666 states and 4147 transitions.
[2020-11-25 06:41:14,294 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 06:41:14,311 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3666 states to 3666 states and 4147 transitions.
[2020-11-25 06:41:14,311 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 929
[2020-11-25 06:41:14,312 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 929
[2020-11-25 06:41:14,313 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3666 states and 4147 transitions.
[2020-11-25 06:41:14,319 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:41:14,319 INFO  L728         BuchiCegarLoop]: Abstraction has 3666 states and 4147 transitions.
[2020-11-25 06:41:14,323 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3666 states and 4147 transitions.
[2020-11-25 06:41:14,367 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3666 to 3096.
[2020-11-25 06:41:14,367 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3096 states.
[2020-11-25 06:41:14,371 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3096 states to 3096 states and 3445 transitions.
[2020-11-25 06:41:14,371 INFO  L751         BuchiCegarLoop]: Abstraction has 3096 states and 3445 transitions.
[2020-11-25 06:41:14,371 INFO  L631         BuchiCegarLoop]: Abstraction has 3096 states and 3445 transitions.
[2020-11-25 06:41:14,372 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 06:41:14,372 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3096 states and 3445 transitions.
[2020-11-25 06:41:14,380 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:41:14,380 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:41:14,380 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:41:14,386 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:41:14,386 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StandardToken0 := false;
[L3]                 call_approve_StandardToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6512]              assume null == 0;
[L6513]  CALL        call this := FreshRefGenerator__success();
[L2510]              havoc newRef;
[L2511]              assume Alloc[newRef] == false;
[L2512]              Alloc[newRef] := true;
[L2513]              assume newRef != null;
[L6513]  RET         call this := FreshRefGenerator__success();
[L6514]              assume now >= 0;
[L6515]              assume DType[this] == TSTToken;
[L6516]              assume msgvalue_MSG == 0;
[L6517]              gas := gas - 53000;
[L6518]  CALL        call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1532]              havoc __exception;
[L1533]              revert := false;
[L1534]  COND FALSE  !(__exception)
[L1558]  CALL        call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3627]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3627]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3628]  COND FALSE  !(revert)
[L3631]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3631]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3632]  COND FALSE  !(revert)
[L3635]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3635]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3636]  COND FALSE  !(revert)
[L3639]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3016]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3017]  COND FALSE  !(revert)
[L3020]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3020]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3021]  COND FALSE  !(revert)
[L3024]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3024]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3025]  COND FALSE  !(revert)
[L3028]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2990]              sum_allowed1[this] := 0;
[L3028]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3029]  COND FALSE  !(revert)
[L3639]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  COND FALSE  !(revert)
[L3643]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]              assume msgsender_MSG != null;
[L2625]              Balance[this] := 0;
[L2626]              owner_Ownable[this] := null;
[L2628]              owner_Ownable[this] := msgsender_MSG;
[L2641]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2642]  COND FALSE  !(revert)
[L3643]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3644]  COND FALSE  !(revert)
[L3647]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3276]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]  COND FALSE  !(revert)
[L3280]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3280]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3281]  COND FALSE  !(revert)
[L3284]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3284]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3285]  COND FALSE  !(revert)
[L3288]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3016]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3017]  COND FALSE  !(revert)
[L3020]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3020]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3021]  COND FALSE  !(revert)
[L3024]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3024]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3025]  COND FALSE  !(revert)
[L3028]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2990]              sum_allowed1[this] := 0;
[L3028]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3029]  COND FALSE  !(revert)
[L3288]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]  COND FALSE  !(revert)
[L3292]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]              assume msgsender_MSG != null;
[L2625]              Balance[this] := 0;
[L2626]              owner_Ownable[this] := null;
[L2628]              owner_Ownable[this] := msgsender_MSG;
[L2641]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2642]  COND FALSE  !(revert)
[L3292]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3293]  COND FALSE  !(revert)
[L3296]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3240]              assume msgsender_MSG != null;
[L3241]              Balance[this] := 0;
[L3242]              mintingFinished_MintableToken[this] := false;
[L3296]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3297]  COND FALSE  !(revert)
[L3647]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3648]  COND FALSE  !(revert)
[L3651]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3465]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3465]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3466]  COND FALSE  !(revert)
[L3469]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3469]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3470]  COND FALSE  !(revert)
[L3473]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3473]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3474]  COND FALSE  !(revert)
[L3477]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3016]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3017]  COND FALSE  !(revert)
[L3020]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3020]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3021]  COND FALSE  !(revert)
[L3024]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3024]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3025]  COND FALSE  !(revert)
[L3028]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2990]              sum_allowed1[this] := 0;
[L3028]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3029]  COND FALSE  !(revert)
[L3477]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3478]  COND FALSE  !(revert)
[L3481]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]              assume msgsender_MSG != null;
[L2625]              Balance[this] := 0;
[L2626]              owner_Ownable[this] := null;
[L2628]              owner_Ownable[this] := msgsender_MSG;
[L2641]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2642]  COND FALSE  !(revert)
[L3481]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3482]  COND FALSE  !(revert)
[L3485]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3276]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]  COND FALSE  !(revert)
[L3280]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3280]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3281]  COND FALSE  !(revert)
[L3284]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3284]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3285]  COND FALSE  !(revert)
[L3288]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3016]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3017]  COND FALSE  !(revert)
[L3020]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3020]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3021]  COND FALSE  !(revert)
[L3024]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3024]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3025]  COND FALSE  !(revert)
[L3028]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2990]              sum_allowed1[this] := 0;
[L3028]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3029]  COND FALSE  !(revert)
[L3288]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]  COND FALSE  !(revert)
[L3292]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]              assume msgsender_MSG != null;
[L2625]              Balance[this] := 0;
[L2626]              owner_Ownable[this] := null;
[L2628]              owner_Ownable[this] := msgsender_MSG;
[L2641]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2642]  COND FALSE  !(revert)
[L3292]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3293]  COND FALSE  !(revert)
[L3296]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3240]              assume msgsender_MSG != null;
[L3241]              Balance[this] := 0;
[L3242]              mintingFinished_MintableToken[this] := false;
[L3296]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3297]  COND FALSE  !(revert)
[L3485]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3486]  COND FALSE  !(revert)
[L3489]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3420]              assume msgsender_MSG != null;
[L3421]              Balance[this] := 0;
[L3422]              cap_CappedToken[this] := 0;
[L3424]  COND TRUE   !(_cap_s704 > 0)
[L3425]              revert := true;
[L3489]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3490]  COND TRUE   revert
[L3651]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3652]  COND TRUE   revert
[L1558]  RET         call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1559]              assume !revert && gas >= 0;
[L6518]  RET         call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6519]              assume !revert && gas >= 0;
[L6522]  CALL        call CorralChoice_TSTToken(this);
[L6334]              havoc msgsender_MSG;
[L6335]              havoc msgvalue_MSG;
[L6336]              havoc choice;
[L6337]              havoc __ret_0_owner;
[L6338]              havoc _newOwner_s153;
[L6339]              havoc __ret_0_totalSupply;
[L6340]              havoc _owner_s298;
[L6341]              havoc __ret_0_balanceOf;
[L6342]              havoc _to_s286;
[L6343]              havoc _value_s286;
[L6344]              havoc __ret_0_transfer;
[L6345]              havoc _owner_s479;
[L6346]              havoc _spender_s479;
[L6347]              havoc __ret_0_allowance;
[L6348]              havoc _from_s435;
[L6349]              havoc _to_s435;
[L6350]              havoc _value_s435;
[L6351]              havoc __ret_0_transferFrom;
[L6352]              havoc _spender_s463;
[L6353]              havoc _value_s463;
[L6354]              havoc __ret_0_approve;
[L6355]              havoc _spender_s521;
[L6356]              havoc _addedValue_s521;
[L6357]              havoc __ret_0_increaseApproval;
[L6358]              havoc _spender_s581;
[L6359]              havoc _subtractedValue_s581;
[L6360]              havoc __ret_0_decreaseApproval;
[L6361]              havoc __ret_0_mintingFinished;
[L6362]              havoc _to_s729;
[L6363]              havoc _amount_s729;
[L6364]              havoc __ret_0_mint;
[L6365]              havoc __ret_0_finishMinting;
[L6366]              havoc __ret_0_cap;
[L6367]              havoc _cap_s704;
[L6368]              havoc __ret_0_name;
[L6369]              havoc __ret_0_symbol;
[L6370]              havoc __ret_0_decimals;
[L6371]              havoc _cap_s750;
[L6372]              havoc tmpNow;
[L6373]              havoc gas;
[L6374]              assume gas > 4000000 && gas <= 8000000;
[L6375]              tmpNow := now;
[L6376]              havoc now;
[L6377]              assume now > tmpNow;
[L6378]              assume msgsender_MSG != null;
[L6379]              assume DType[msgsender_MSG] != SafeMath;
[L6380]              assume DType[msgsender_MSG] != Ownable;
[L6381]              assume DType[msgsender_MSG] != ERC20Basic;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != ERC20;
[L6384]              assume DType[msgsender_MSG] != StandardToken;
[L6385]              assume DType[msgsender_MSG] != MintableToken;
[L6386]              assume DType[msgsender_MSG] != CappedToken;
[L6387]              assume DType[msgsender_MSG] != TSTToken;
[L6388]              Alloc[msgsender_MSG] := true;
[L6389]  COND FALSE  !(choice == 18)
[L6395]  COND FALSE  !(choice == 17)
[L6401]  COND FALSE  !(choice == 16)
[L6407]  COND FALSE  !(choice == 15)
[L6413]  COND FALSE  !(choice == 14)
[L6419]  COND FALSE  !(choice == 13)
[L6426]  COND FALSE  !(choice == 12)
[L6432]  COND FALSE  !(choice == 11)
[L6439]  COND TRUE   choice == 10
[L6440]              gas := gas - 21000;
[L6441]  COND TRUE   gas >= 0
[L6442]              assume _value_s463 >= 0 && _value_s463 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6443]              assume msgvalue_MSG == 0;
[L6444]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s463;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L859]               havoc __exception;
[L860]               revert := false;
[L861]   COND FALSE  !(__exception)
[L885]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L3134]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s463];
[L3135]              allowed_StandardToken[this][msgsender_MSG][_spender_s463] := _value_s463;
[L3136]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s463];
[L3137]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3138]              __ret_0_ := true;
[L885]   RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L886]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s463] == _value_s463) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L6444]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L6522]  RET         call CorralChoice_TSTToken(this);

Loop:
[L6522]  CALL        call CorralChoice_TSTToken(this);
[L6334]              havoc msgsender_MSG;
[L6335]              havoc msgvalue_MSG;
[L6336]              havoc choice;
[L6337]              havoc __ret_0_owner;
[L6338]              havoc _newOwner_s153;
[L6339]              havoc __ret_0_totalSupply;
[L6340]              havoc _owner_s298;
[L6341]              havoc __ret_0_balanceOf;
[L6342]              havoc _to_s286;
[L6343]              havoc _value_s286;
[L6344]              havoc __ret_0_transfer;
[L6345]              havoc _owner_s479;
[L6346]              havoc _spender_s479;
[L6347]              havoc __ret_0_allowance;
[L6348]              havoc _from_s435;
[L6349]              havoc _to_s435;
[L6350]              havoc _value_s435;
[L6351]              havoc __ret_0_transferFrom;
[L6352]              havoc _spender_s463;
[L6353]              havoc _value_s463;
[L6354]              havoc __ret_0_approve;
[L6355]              havoc _spender_s521;
[L6356]              havoc _addedValue_s521;
[L6357]              havoc __ret_0_increaseApproval;
[L6358]              havoc _spender_s581;
[L6359]              havoc _subtractedValue_s581;
[L6360]              havoc __ret_0_decreaseApproval;
[L6361]              havoc __ret_0_mintingFinished;
[L6362]              havoc _to_s729;
[L6363]              havoc _amount_s729;
[L6364]              havoc __ret_0_mint;
[L6365]              havoc __ret_0_finishMinting;
[L6366]              havoc __ret_0_cap;
[L6367]              havoc _cap_s704;
[L6368]              havoc __ret_0_name;
[L6369]              havoc __ret_0_symbol;
[L6370]              havoc __ret_0_decimals;
[L6371]              havoc _cap_s750;
[L6372]              havoc tmpNow;
[L6373]              havoc gas;
[L6374]              assume gas > 4000000 && gas <= 8000000;
[L6375]              tmpNow := now;
[L6376]              havoc now;
[L6377]              assume now > tmpNow;
[L6378]              assume msgsender_MSG != null;
[L6379]              assume DType[msgsender_MSG] != SafeMath;
[L6380]              assume DType[msgsender_MSG] != Ownable;
[L6381]              assume DType[msgsender_MSG] != ERC20Basic;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != ERC20;
[L6384]              assume DType[msgsender_MSG] != StandardToken;
[L6385]              assume DType[msgsender_MSG] != MintableToken;
[L6386]              assume DType[msgsender_MSG] != CappedToken;
[L6387]              assume DType[msgsender_MSG] != TSTToken;
[L6388]              Alloc[msgsender_MSG] := true;
[L6389]  COND FALSE  !(choice == 18)
[L6395]  COND FALSE  !(choice == 17)
[L6401]  COND FALSE  !(choice == 16)
[L6407]  COND FALSE  !(choice == 15)
[L6413]  COND FALSE  !(choice == 14)
[L6419]  COND FALSE  !(choice == 13)
[L6426]  COND FALSE  !(choice == 12)
[L6432]  COND FALSE  !(choice == 11)
[L6439]  COND TRUE   choice == 10
[L6440]              gas := gas - 21000;
[L6441]  COND TRUE   gas >= 0
[L6442]              assume _value_s463 >= 0 && _value_s463 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6443]              assume msgvalue_MSG == 0;
[L6444]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s463;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L859]               havoc __exception;
[L860]               revert := false;
[L861]   COND FALSE  !(__exception)
[L885]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L3134]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s463];
[L3135]              allowed_StandardToken[this][msgsender_MSG][_spender_s463] := _value_s463;
[L3136]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s463];
[L3137]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3138]              __ret_0_ := true;
[L885]   RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L886]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s463] == _value_s463) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L6444]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L6522]  RET         call CorralChoice_TSTToken(this);

[2020-11-25 06:41:14,396 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:41:14,396 INFO  L82        PathProgramCache]: Analyzing trace with hash -1289797422, now seen corresponding path program 1 times
[2020-11-25 06:41:14,397 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:41:14,428 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:41:14,761 INFO  L134       CoverageAnalysis]: Checked inductivity of 3875 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3875 trivial. 0 not checked.
[2020-11-25 06:41:14,761 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:41:14,761 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 06:41:14,762 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:41:14,762 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 06:41:14,763 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 06:41:14,763 INFO  L87              Difference]: Start difference. First operand 3096 states and 3445 transitions. cyclomatic complexity: 351 Second operand 3 states.
[2020-11-25 06:41:14,827 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:41:14,828 INFO  L93              Difference]: Finished difference Result 3660 states and 4069 transitions.
[2020-11-25 06:41:14,828 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 06:41:14,828 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3660 states and 4069 transitions.
[2020-11-25 06:41:14,840 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 06:41:14,855 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3660 states to 3494 states and 3881 transitions.
[2020-11-25 06:41:14,855 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 873
[2020-11-25 06:41:14,856 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 888
[2020-11-25 06:41:14,856 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3494 states and 3881 transitions.
[2020-11-25 06:41:14,862 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:41:14,862 INFO  L728         BuchiCegarLoop]: Abstraction has 3494 states and 3881 transitions.
[2020-11-25 06:41:14,865 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3494 states and 3881 transitions.
[2020-11-25 06:41:14,899 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3494 to 3146.
[2020-11-25 06:41:14,899 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3146 states.
[2020-11-25 06:41:14,902 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3146 states to 3146 states and 3445 transitions.
[2020-11-25 06:41:14,903 INFO  L751         BuchiCegarLoop]: Abstraction has 3146 states and 3445 transitions.
[2020-11-25 06:41:14,903 INFO  L631         BuchiCegarLoop]: Abstraction has 3146 states and 3445 transitions.
[2020-11-25 06:41:14,903 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 06:41:14,903 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3146 states and 3445 transitions.
[2020-11-25 06:41:14,908 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 06:41:14,908 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:41:14,908 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:41:14,912 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:41:14,912 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StandardToken0 := false;
[L3]                 call_approve_StandardToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6512]              assume null == 0;
[L6513]  CALL        call this := FreshRefGenerator__success();
[L2510]              havoc newRef;
[L2511]              assume Alloc[newRef] == false;
[L2512]              Alloc[newRef] := true;
[L2513]              assume newRef != null;
[L6513]  RET         call this := FreshRefGenerator__success();
[L6514]              assume now >= 0;
[L6515]              assume DType[this] == TSTToken;
[L6516]              assume msgvalue_MSG == 0;
[L6517]              gas := gas - 53000;
[L6518]  CALL        call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1532]              havoc __exception;
[L1533]              revert := false;
[L1534]  COND FALSE  !(__exception)
[L1558]  CALL        call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3627]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3627]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3628]  COND FALSE  !(revert)
[L3631]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3631]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3632]  COND FALSE  !(revert)
[L3635]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3635]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3636]  COND FALSE  !(revert)
[L3639]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3016]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3017]  COND FALSE  !(revert)
[L3020]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3020]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3021]  COND FALSE  !(revert)
[L3024]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3024]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3025]  COND FALSE  !(revert)
[L3028]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2990]              sum_allowed1[this] := 0;
[L3028]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3029]  COND FALSE  !(revert)
[L3639]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  COND FALSE  !(revert)
[L3643]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]              assume msgsender_MSG != null;
[L2625]              Balance[this] := 0;
[L2626]              owner_Ownable[this] := null;
[L2628]              owner_Ownable[this] := msgsender_MSG;
[L2641]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2642]  COND FALSE  !(revert)
[L3643]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3644]  COND FALSE  !(revert)
[L3647]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3276]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]  COND FALSE  !(revert)
[L3280]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3280]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3281]  COND FALSE  !(revert)
[L3284]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3284]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3285]  COND FALSE  !(revert)
[L3288]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3016]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3017]  COND FALSE  !(revert)
[L3020]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3020]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3021]  COND FALSE  !(revert)
[L3024]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3024]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3025]  COND FALSE  !(revert)
[L3028]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2990]              sum_allowed1[this] := 0;
[L3028]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3029]  COND FALSE  !(revert)
[L3288]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]  COND FALSE  !(revert)
[L3292]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]              assume msgsender_MSG != null;
[L2625]              Balance[this] := 0;
[L2626]              owner_Ownable[this] := null;
[L2628]              owner_Ownable[this] := msgsender_MSG;
[L2641]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2642]  COND FALSE  !(revert)
[L3292]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3293]  COND FALSE  !(revert)
[L3296]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3240]              assume msgsender_MSG != null;
[L3241]              Balance[this] := 0;
[L3242]              mintingFinished_MintableToken[this] := false;
[L3296]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3297]  COND FALSE  !(revert)
[L3647]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3648]  COND FALSE  !(revert)
[L3651]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3465]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3465]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3466]  COND FALSE  !(revert)
[L3469]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3469]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3470]  COND FALSE  !(revert)
[L3473]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3473]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3474]  COND FALSE  !(revert)
[L3477]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3016]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3017]  COND FALSE  !(revert)
[L3020]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3020]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3021]  COND FALSE  !(revert)
[L3024]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3024]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3025]  COND FALSE  !(revert)
[L3028]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2990]              sum_allowed1[this] := 0;
[L3028]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3029]  COND FALSE  !(revert)
[L3477]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3478]  COND FALSE  !(revert)
[L3481]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]              assume msgsender_MSG != null;
[L2625]              Balance[this] := 0;
[L2626]              owner_Ownable[this] := null;
[L2628]              owner_Ownable[this] := msgsender_MSG;
[L2641]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2642]  COND FALSE  !(revert)
[L3481]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3482]  COND FALSE  !(revert)
[L3485]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3276]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]  COND FALSE  !(revert)
[L3280]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3280]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3281]  COND FALSE  !(revert)
[L3284]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3284]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3285]  COND FALSE  !(revert)
[L3288]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3016]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3017]  COND FALSE  !(revert)
[L3020]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3020]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3021]  COND FALSE  !(revert)
[L3024]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3024]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3025]  COND FALSE  !(revert)
[L3028]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2990]              sum_allowed1[this] := 0;
[L3028]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3029]  COND FALSE  !(revert)
[L3288]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]  COND FALSE  !(revert)
[L3292]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]              assume msgsender_MSG != null;
[L2625]              Balance[this] := 0;
[L2626]              owner_Ownable[this] := null;
[L2628]              owner_Ownable[this] := msgsender_MSG;
[L2641]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2642]  COND FALSE  !(revert)
[L3292]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3293]  COND FALSE  !(revert)
[L3296]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3240]              assume msgsender_MSG != null;
[L3241]              Balance[this] := 0;
[L3242]              mintingFinished_MintableToken[this] := false;
[L3296]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3297]  COND FALSE  !(revert)
[L3485]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3486]  COND FALSE  !(revert)
[L3489]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3420]              assume msgsender_MSG != null;
[L3421]              Balance[this] := 0;
[L3422]              cap_CappedToken[this] := 0;
[L3424]  COND FALSE  !(!(_cap_s704 > 0))
[L3428]              cap_CappedToken[this] := _cap_s704;
[L3489]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3490]  COND FALSE  !(revert)
[L3651]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3652]  COND FALSE  !(revert)
[L3655]  CALL        call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3581]              assume msgsender_MSG != null;
[L3582]              Balance[this] := 0;
[L3583]              name_TSTToken[this] := 1406741980;
[L3584]              symbol_TSTToken[this] := 57413297;
[L3585]              decimals_TSTToken[this] := 18;
[L3655]  RET         call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3656]  COND FALSE  !(revert)
[L1558]  RET         call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1559]              assume !revert && gas >= 0;
[L6518]  RET         call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6519]              assume !revert && gas >= 0;
[L6522]  CALL        call CorralChoice_TSTToken(this);
[L6334]              havoc msgsender_MSG;
[L6335]              havoc msgvalue_MSG;
[L6336]              havoc choice;
[L6337]              havoc __ret_0_owner;
[L6338]              havoc _newOwner_s153;
[L6339]              havoc __ret_0_totalSupply;
[L6340]              havoc _owner_s298;
[L6341]              havoc __ret_0_balanceOf;
[L6342]              havoc _to_s286;
[L6343]              havoc _value_s286;
[L6344]              havoc __ret_0_transfer;
[L6345]              havoc _owner_s479;
[L6346]              havoc _spender_s479;
[L6347]              havoc __ret_0_allowance;
[L6348]              havoc _from_s435;
[L6349]              havoc _to_s435;
[L6350]              havoc _value_s435;
[L6351]              havoc __ret_0_transferFrom;
[L6352]              havoc _spender_s463;
[L6353]              havoc _value_s463;
[L6354]              havoc __ret_0_approve;
[L6355]              havoc _spender_s521;
[L6356]              havoc _addedValue_s521;
[L6357]              havoc __ret_0_increaseApproval;
[L6358]              havoc _spender_s581;
[L6359]              havoc _subtractedValue_s581;
[L6360]              havoc __ret_0_decreaseApproval;
[L6361]              havoc __ret_0_mintingFinished;
[L6362]              havoc _to_s729;
[L6363]              havoc _amount_s729;
[L6364]              havoc __ret_0_mint;
[L6365]              havoc __ret_0_finishMinting;
[L6366]              havoc __ret_0_cap;
[L6367]              havoc _cap_s704;
[L6368]              havoc __ret_0_name;
[L6369]              havoc __ret_0_symbol;
[L6370]              havoc __ret_0_decimals;
[L6371]              havoc _cap_s750;
[L6372]              havoc tmpNow;
[L6373]              havoc gas;
[L6374]              assume gas > 4000000 && gas <= 8000000;
[L6375]              tmpNow := now;
[L6376]              havoc now;
[L6377]              assume now > tmpNow;
[L6378]              assume msgsender_MSG != null;
[L6379]              assume DType[msgsender_MSG] != SafeMath;
[L6380]              assume DType[msgsender_MSG] != Ownable;
[L6381]              assume DType[msgsender_MSG] != ERC20Basic;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != ERC20;
[L6384]              assume DType[msgsender_MSG] != StandardToken;
[L6385]              assume DType[msgsender_MSG] != MintableToken;
[L6386]              assume DType[msgsender_MSG] != CappedToken;
[L6387]              assume DType[msgsender_MSG] != TSTToken;
[L6388]              Alloc[msgsender_MSG] := true;
[L6389]  COND FALSE  !(choice == 18)
[L6395]  COND FALSE  !(choice == 17)
[L6401]  COND FALSE  !(choice == 16)
[L6407]  COND FALSE  !(choice == 15)
[L6413]  COND FALSE  !(choice == 14)
[L6419]  COND FALSE  !(choice == 13)
[L6426]  COND FALSE  !(choice == 12)
[L6432]  COND FALSE  !(choice == 11)
[L6439]  COND TRUE   choice == 10
[L6440]              gas := gas - 21000;
[L6441]  COND TRUE   gas >= 0
[L6442]              assume _value_s463 >= 0 && _value_s463 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6443]              assume msgvalue_MSG == 0;
[L6444]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s463;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L859]               havoc __exception;
[L860]               revert := false;
[L861]   COND FALSE  !(__exception)
[L885]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L3134]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s463];
[L3135]              allowed_StandardToken[this][msgsender_MSG][_spender_s463] := _value_s463;
[L3136]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s463];
[L3137]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3138]              __ret_0_ := true;
[L885]   RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L886]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s463] == _value_s463) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L6444]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L6522]  RET         call CorralChoice_TSTToken(this);

Loop:
[L6522]  CALL        call CorralChoice_TSTToken(this);
[L6334]              havoc msgsender_MSG;
[L6335]              havoc msgvalue_MSG;
[L6336]              havoc choice;
[L6337]              havoc __ret_0_owner;
[L6338]              havoc _newOwner_s153;
[L6339]              havoc __ret_0_totalSupply;
[L6340]              havoc _owner_s298;
[L6341]              havoc __ret_0_balanceOf;
[L6342]              havoc _to_s286;
[L6343]              havoc _value_s286;
[L6344]              havoc __ret_0_transfer;
[L6345]              havoc _owner_s479;
[L6346]              havoc _spender_s479;
[L6347]              havoc __ret_0_allowance;
[L6348]              havoc _from_s435;
[L6349]              havoc _to_s435;
[L6350]              havoc _value_s435;
[L6351]              havoc __ret_0_transferFrom;
[L6352]              havoc _spender_s463;
[L6353]              havoc _value_s463;
[L6354]              havoc __ret_0_approve;
[L6355]              havoc _spender_s521;
[L6356]              havoc _addedValue_s521;
[L6357]              havoc __ret_0_increaseApproval;
[L6358]              havoc _spender_s581;
[L6359]              havoc _subtractedValue_s581;
[L6360]              havoc __ret_0_decreaseApproval;
[L6361]              havoc __ret_0_mintingFinished;
[L6362]              havoc _to_s729;
[L6363]              havoc _amount_s729;
[L6364]              havoc __ret_0_mint;
[L6365]              havoc __ret_0_finishMinting;
[L6366]              havoc __ret_0_cap;
[L6367]              havoc _cap_s704;
[L6368]              havoc __ret_0_name;
[L6369]              havoc __ret_0_symbol;
[L6370]              havoc __ret_0_decimals;
[L6371]              havoc _cap_s750;
[L6372]              havoc tmpNow;
[L6373]              havoc gas;
[L6374]              assume gas > 4000000 && gas <= 8000000;
[L6375]              tmpNow := now;
[L6376]              havoc now;
[L6377]              assume now > tmpNow;
[L6378]              assume msgsender_MSG != null;
[L6379]              assume DType[msgsender_MSG] != SafeMath;
[L6380]              assume DType[msgsender_MSG] != Ownable;
[L6381]              assume DType[msgsender_MSG] != ERC20Basic;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != ERC20;
[L6384]              assume DType[msgsender_MSG] != StandardToken;
[L6385]              assume DType[msgsender_MSG] != MintableToken;
[L6386]              assume DType[msgsender_MSG] != CappedToken;
[L6387]              assume DType[msgsender_MSG] != TSTToken;
[L6388]              Alloc[msgsender_MSG] := true;
[L6389]  COND FALSE  !(choice == 18)
[L6395]  COND FALSE  !(choice == 17)
[L6401]  COND FALSE  !(choice == 16)
[L6407]  COND FALSE  !(choice == 15)
[L6413]  COND FALSE  !(choice == 14)
[L6419]  COND FALSE  !(choice == 13)
[L6426]  COND FALSE  !(choice == 12)
[L6432]  COND FALSE  !(choice == 11)
[L6439]  COND TRUE   choice == 10
[L6440]              gas := gas - 21000;
[L6441]  COND TRUE   gas >= 0
[L6442]              assume _value_s463 >= 0 && _value_s463 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6443]              assume msgvalue_MSG == 0;
[L6444]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s463;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L859]               havoc __exception;
[L860]               revert := false;
[L861]   COND FALSE  !(__exception)
[L885]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L3134]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s463];
[L3135]              allowed_StandardToken[this][msgsender_MSG][_spender_s463] := _value_s463;
[L3136]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s463];
[L3137]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3138]              __ret_0_ := true;
[L885]   RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L886]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s463] == _value_s463) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L6444]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L6522]  RET         call CorralChoice_TSTToken(this);

[2020-11-25 06:41:14,921 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:41:14,922 INFO  L82        PathProgramCache]: Analyzing trace with hash -1485762674, now seen corresponding path program 1 times
[2020-11-25 06:41:14,923 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:41:14,991 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:41:15,435 INFO  L134       CoverageAnalysis]: Checked inductivity of 3875 backedges. 31 proven. 0 refuted. 0 times theorem prover too weak. 3844 trivial. 0 not checked.
[2020-11-25 06:41:15,435 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:41:15,435 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-25 06:41:15,436 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:41:15,436 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 06:41:15,437 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=209, Unknown=0, NotChecked=0, Total=240
[2020-11-25 06:41:15,437 INFO  L87              Difference]: Start difference. First operand 3146 states and 3445 transitions. cyclomatic complexity: 301 Second operand 16 states.
[2020-11-25 06:41:17,408 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:41:17,408 INFO  L93              Difference]: Finished difference Result 3296 states and 3630 transitions.
[2020-11-25 06:41:17,408 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 06:41:17,409 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3296 states and 3630 transitions.
[2020-11-25 06:41:17,415 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 06:41:17,425 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3296 states to 3296 states and 3630 transitions.
[2020-11-25 06:41:17,426 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 900
[2020-11-25 06:41:17,427 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 900
[2020-11-25 06:41:17,427 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3296 states and 3630 transitions.
[2020-11-25 06:41:17,430 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:41:17,430 INFO  L728         BuchiCegarLoop]: Abstraction has 3296 states and 3630 transitions.
[2020-11-25 06:41:17,433 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3296 states and 3630 transitions.
[2020-11-25 06:41:17,457 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3296 to 3262.
[2020-11-25 06:41:17,457 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3262 states.
[2020-11-25 06:41:17,460 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3262 states to 3262 states and 3582 transitions.
[2020-11-25 06:41:17,460 INFO  L751         BuchiCegarLoop]: Abstraction has 3262 states and 3582 transitions.
[2020-11-25 06:41:17,460 INFO  L631         BuchiCegarLoop]: Abstraction has 3262 states and 3582 transitions.
[2020-11-25 06:41:17,460 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 06:41:17,460 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3262 states and 3582 transitions.
[2020-11-25 06:41:17,464 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 06:41:17,464 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:41:17,464 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:41:17,467 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:41:17,467 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StandardToken0 := false;
[L3]                 call_approve_StandardToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6512]              assume null == 0;
[L6513]  CALL        call this := FreshRefGenerator__success();
[L2510]              havoc newRef;
[L2511]              assume Alloc[newRef] == false;
[L2512]              Alloc[newRef] := true;
[L2513]              assume newRef != null;
[L6513]  RET         call this := FreshRefGenerator__success();
[L6514]              assume now >= 0;
[L6515]              assume DType[this] == TSTToken;
[L6516]              assume msgvalue_MSG == 0;
[L6517]              gas := gas - 53000;
[L6518]  CALL        call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1532]              havoc __exception;
[L1533]              revert := false;
[L1534]  COND TRUE   __exception
[L1535]              __tmp__Balance := Balance;
[L1536]              __tmp__DType := DType;
[L1537]              __tmp__Alloc := Alloc;
[L1538]              __tmp__balance_ADDR := balance_ADDR;
[L1539]              __tmp__M_Ref_int := M_Ref_int;
[L1540]              __tmp__sum_balances0 := sum_balances0;
[L1541]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1542]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1543]              __tmp__sum_allowed1 := sum_allowed1;
[L1544]              __tmp__Length := Length;
[L1545]              __tmp__now := now;
[L1546]              __tmp__owner_Ownable := owner_Ownable;
[L1547]              __tmp__balances_BasicToken := balances_BasicToken;
[L1548]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1549]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1550]              __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L1551]              __tmp__cap_CappedToken := cap_CappedToken;
[L1552]              __tmp__name_TSTToken := name_TSTToken;
[L1553]              __tmp__symbol_TSTToken := symbol_TSTToken;
[L1554]              __tmp__decimals_TSTToken := decimals_TSTToken;
[L1555]  CALL        call TSTToken_TSTToken__fail(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3591]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              __tmp__Balance[this] := 0;
[L2785]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3591]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3592]  COND FALSE  !(revert)
[L3595]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2952]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              __tmp__Balance[this] := 0;
[L2785]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L2952]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2953]  COND FALSE  !(revert)
[L2956]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              __tmp__Balance[this] := 0;
[L2956]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2957]  COND FALSE  !(revert)
[L3595]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3596]  COND FALSE  !(revert)
[L3599]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2823]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              __tmp__Balance[this] := 0;
[L2785]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L2823]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2824]  COND FALSE  !(revert)
[L2827]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2802]              assume msgsender_MSG != null;
[L2803]              __tmp__Balance[this] := 0;
[L2804]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L2805]              __tmp__sum_balances0[this] := 0;
[L2806]              __tmp__totalSupply__BasicToken[this] := 0;
[L2827]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2828]  COND FALSE  !(revert)
[L3599]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3600]  COND FALSE  !(revert)
[L3603]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2996]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              __tmp__Balance[this] := 0;
[L2785]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L2996]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2997]  COND FALSE  !(revert)
[L3000]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2952]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              __tmp__Balance[this] := 0;
[L2785]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L2952]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2953]  COND FALSE  !(revert)
[L2956]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              __tmp__Balance[this] := 0;
[L2956]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2957]  COND FALSE  !(revert)
[L3000]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3001]  COND FALSE  !(revert)
[L3004]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2823]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              __tmp__Balance[this] := 0;
[L2785]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L2823]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2824]  COND FALSE  !(revert)
[L2827]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2802]              assume msgsender_MSG != null;
[L2803]              __tmp__Balance[this] := 0;
[L2804]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L2805]              __tmp__sum_balances0[this] := 0;
[L2806]              __tmp__totalSupply__BasicToken[this] := 0;
[L2827]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2828]  COND FALSE  !(revert)
[L3004]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3005]  COND FALSE  !(revert)
[L3008]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2977]              assume msgsender_MSG != null;
[L2978]              __tmp__Balance[this] := 0;
[L2979]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L2980]              __tmp__sum_allowed1[this] := 0;
[L3008]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3009]  COND FALSE  !(revert)
[L3603]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3604]  COND FALSE  !(revert)
[L3607]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2633]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2614]              assume msgsender_MSG != null;
[L2615]              __tmp__Balance[this] := 0;
[L2616]              __tmp__owner_Ownable[this] := null;
[L2618]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2633]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2634]  COND FALSE  !(revert)
[L3607]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3608]  COND FALSE  !(revert)
[L3611]  CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              __tmp__Balance[this] := 0;
[L2785]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3248]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3249]  COND FALSE  !(revert)
[L3252]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2952]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              __tmp__Balance[this] := 0;
[L2785]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L2952]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2953]  COND FALSE  !(revert)
[L2956]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              __tmp__Balance[this] := 0;
[L2956]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2957]  COND FALSE  !(revert)
[L3252]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3253]  COND FALSE  !(revert)
[L3256]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2823]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              __tmp__Balance[this] := 0;
[L2785]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L2823]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2824]  COND FALSE  !(revert)
[L2827]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2802]              assume msgsender_MSG != null;
[L2803]              __tmp__Balance[this] := 0;
[L2804]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L2805]              __tmp__sum_balances0[this] := 0;
[L2806]              __tmp__totalSupply__BasicToken[this] := 0;
[L2827]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2828]  COND FALSE  !(revert)
[L3256]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3257]  COND FALSE  !(revert)
[L3260]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2996]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              __tmp__Balance[this] := 0;
[L2785]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L2996]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2997]  COND FALSE  !(revert)
[L3000]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2952]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              __tmp__Balance[this] := 0;
[L2785]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L2952]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2953]  COND FALSE  !(revert)
[L2956]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              __tmp__Balance[this] := 0;
[L2956]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2957]  COND FALSE  !(revert)
[L3000]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3001]  COND FALSE  !(revert)
[L3004]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2823]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              __tmp__Balance[this] := 0;
[L2785]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L2823]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2824]  COND FALSE  !(revert)
[L2827]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2802]              assume msgsender_MSG != null;
[L2803]              __tmp__Balance[this] := 0;
[L2804]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L2805]              __tmp__sum_balances0[this] := 0;
[L2806]              __tmp__totalSupply__BasicToken[this] := 0;
[L2827]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2828]  COND FALSE  !(revert)
[L3004]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3005]  COND FALSE  !(revert)
[L3008]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2977]              assume msgsender_MSG != null;
[L2978]              __tmp__Balance[this] := 0;
[L2979]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L2980]              __tmp__sum_allowed1[this] := 0;
[L3008]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3009]  COND FALSE  !(revert)
[L3260]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3261]  COND FALSE  !(revert)
[L3264]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2633]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2614]              assume msgsender_MSG != null;
[L2615]              __tmp__Balance[this] := 0;
[L2616]              __tmp__owner_Ownable[this] := null;
[L2618]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2633]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2634]  COND FALSE  !(revert)
[L3264]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  COND FALSE  !(revert)
[L3268]  CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3231]              assume msgsender_MSG != null;
[L3232]              __tmp__Balance[this] := 0;
[L3233]              __tmp__mintingFinished_MintableToken[this] := false;
[L3268]  RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3269]  COND FALSE  !(revert)
[L3611]  RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3612]  COND FALSE  !(revert)
[L3615]  CALL        call CappedToken_CappedToken__fail(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3433]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              __tmp__Balance[this] := 0;
[L2785]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3433]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3434]  COND FALSE  !(revert)
[L3437]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2952]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              __tmp__Balance[this] := 0;
[L2785]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L2952]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2953]  COND FALSE  !(revert)
[L2956]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              __tmp__Balance[this] := 0;
[L2956]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2957]  COND FALSE  !(revert)
[L3437]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3438]  COND FALSE  !(revert)
[L3441]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2823]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              __tmp__Balance[this] := 0;
[L2785]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L2823]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2824]  COND FALSE  !(revert)
[L2827]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2802]              assume msgsender_MSG != null;
[L2803]              __tmp__Balance[this] := 0;
[L2804]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L2805]              __tmp__sum_balances0[this] := 0;
[L2806]              __tmp__totalSupply__BasicToken[this] := 0;
[L2827]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2828]  COND FALSE  !(revert)
[L3441]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3442]  COND FALSE  !(revert)
[L3445]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2996]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              __tmp__Balance[this] := 0;
[L2785]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L2996]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2997]  COND FALSE  !(revert)
[L3000]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2952]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              __tmp__Balance[this] := 0;
[L2785]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L2952]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2953]  COND FALSE  !(revert)
[L2956]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              __tmp__Balance[this] := 0;
[L2956]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2957]  COND FALSE  !(revert)
[L3000]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3001]  COND FALSE  !(revert)
[L3004]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2823]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              __tmp__Balance[this] := 0;
[L2785]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L2823]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2824]  COND FALSE  !(revert)
[L2827]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2802]              assume msgsender_MSG != null;
[L2803]              __tmp__Balance[this] := 0;
[L2804]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L2805]              __tmp__sum_balances0[this] := 0;
[L2806]              __tmp__totalSupply__BasicToken[this] := 0;
[L2827]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2828]  COND FALSE  !(revert)
[L3004]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3005]  COND FALSE  !(revert)
[L3008]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2977]              assume msgsender_MSG != null;
[L2978]              __tmp__Balance[this] := 0;
[L2979]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L2980]              __tmp__sum_allowed1[this] := 0;
[L3008]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3009]  COND FALSE  !(revert)
[L3445]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3446]  COND FALSE  !(revert)
[L3449]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2633]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2614]              assume msgsender_MSG != null;
[L2615]              __tmp__Balance[this] := 0;
[L2616]              __tmp__owner_Ownable[this] := null;
[L2618]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2633]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2634]  COND FALSE  !(revert)
[L3449]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3450]  COND FALSE  !(revert)
[L3453]  CALL        call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3248]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              __tmp__Balance[this] := 0;
[L2785]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L3248]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L3249]  COND FALSE  !(revert)
[L3252]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2952]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              __tmp__Balance[this] := 0;
[L2785]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L2952]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2953]  COND FALSE  !(revert)
[L2956]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              __tmp__Balance[this] := 0;
[L2956]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2957]  COND FALSE  !(revert)
[L3252]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3253]  COND FALSE  !(revert)
[L3256]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2823]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              __tmp__Balance[this] := 0;
[L2785]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L2823]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2824]  COND FALSE  !(revert)
[L2827]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2802]              assume msgsender_MSG != null;
[L2803]              __tmp__Balance[this] := 0;
[L2804]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L2805]              __tmp__sum_balances0[this] := 0;
[L2806]              __tmp__totalSupply__BasicToken[this] := 0;
[L2827]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2828]  COND FALSE  !(revert)
[L3256]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3257]  COND FALSE  !(revert)
[L3260]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2996]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              __tmp__Balance[this] := 0;
[L2785]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L2996]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2997]  COND FALSE  !(revert)
[L3000]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2952]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              __tmp__Balance[this] := 0;
[L2785]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L2952]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2953]  COND FALSE  !(revert)
[L2956]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2937]              assume msgsender_MSG != null;
[L2938]              __tmp__Balance[this] := 0;
[L2956]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2957]  COND FALSE  !(revert)
[L3000]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3001]  COND FALSE  !(revert)
[L3004]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L2823]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2785]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2770]              assume msgsender_MSG != null;
[L2771]              __tmp__Balance[this] := 0;
[L2785]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2786]  COND FALSE  !(revert)
[L2823]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L2824]  COND FALSE  !(revert)
[L2827]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2802]              assume msgsender_MSG != null;
[L2803]              __tmp__Balance[this] := 0;
[L2804]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L2805]              __tmp__sum_balances0[this] := 0;
[L2806]              __tmp__totalSupply__BasicToken[this] := 0;
[L2827]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2828]  COND FALSE  !(revert)
[L3004]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3005]  COND FALSE  !(revert)
[L3008]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2977]              assume msgsender_MSG != null;
[L2978]              __tmp__Balance[this] := 0;
[L2979]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L2980]              __tmp__sum_allowed1[this] := 0;
[L3008]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3009]  COND FALSE  !(revert)
[L3260]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3261]  COND FALSE  !(revert)
[L3264]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2633]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2614]              assume msgsender_MSG != null;
[L2615]              __tmp__Balance[this] := 0;
[L2616]              __tmp__owner_Ownable[this] := null;
[L2618]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L2633]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2634]  COND FALSE  !(revert)
[L3264]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3265]  COND FALSE  !(revert)
[L3268]  CALL        call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3231]              assume msgsender_MSG != null;
[L3232]              __tmp__Balance[this] := 0;
[L3233]              __tmp__mintingFinished_MintableToken[this] := false;
[L3268]  RET         call MintableToken_MintableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3269]  COND FALSE  !(revert)
[L3453]  RET         call MintableToken_MintableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3454]  COND FALSE  !(revert)
[L3457]  CALL        call CappedToken_CappedToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3406]              assume msgsender_MSG != null;
[L3407]              __tmp__Balance[this] := 0;
[L3408]              __tmp__cap_CappedToken[this] := 0;
[L3410]  COND FALSE  !(!(_cap_s704 > 0))
[L3414]              __tmp__cap_CappedToken[this] := _cap_s704;
[L3457]  RET         call CappedToken_CappedToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3458]  COND FALSE  !(revert)
[L3615]  RET         call CappedToken_CappedToken__fail(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3616]  COND FALSE  !(revert)
[L3619]  CALL        call TSTToken_TSTToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3570]              assume msgsender_MSG != null;
[L3571]              __tmp__Balance[this] := 0;
[L3572]              __tmp__name_TSTToken[this] := 1406741980;
[L3573]              __tmp__symbol_TSTToken[this] := 57413297;
[L3574]              __tmp__decimals_TSTToken[this] := 18;
[L3619]  RET         call TSTToken_TSTToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3620]  COND FALSE  !(revert)
[L1555]  RET         call TSTToken_TSTToken__fail(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1556]              assume revert || gas < 0;
[L6518]  RET         call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6519]              assume !revert && gas >= 0;
[L6522]  CALL        call CorralChoice_TSTToken(this);
[L6334]              havoc msgsender_MSG;
[L6335]              havoc msgvalue_MSG;
[L6336]              havoc choice;
[L6337]              havoc __ret_0_owner;
[L6338]              havoc _newOwner_s153;
[L6339]              havoc __ret_0_totalSupply;
[L6340]              havoc _owner_s298;
[L6341]              havoc __ret_0_balanceOf;
[L6342]              havoc _to_s286;
[L6343]              havoc _value_s286;
[L6344]              havoc __ret_0_transfer;
[L6345]              havoc _owner_s479;
[L6346]              havoc _spender_s479;
[L6347]              havoc __ret_0_allowance;
[L6348]              havoc _from_s435;
[L6349]              havoc _to_s435;
[L6350]              havoc _value_s435;
[L6351]              havoc __ret_0_transferFrom;
[L6352]              havoc _spender_s463;
[L6353]              havoc _value_s463;
[L6354]              havoc __ret_0_approve;
[L6355]              havoc _spender_s521;
[L6356]              havoc _addedValue_s521;
[L6357]              havoc __ret_0_increaseApproval;
[L6358]              havoc _spender_s581;
[L6359]              havoc _subtractedValue_s581;
[L6360]              havoc __ret_0_decreaseApproval;
[L6361]              havoc __ret_0_mintingFinished;
[L6362]              havoc _to_s729;
[L6363]              havoc _amount_s729;
[L6364]              havoc __ret_0_mint;
[L6365]              havoc __ret_0_finishMinting;
[L6366]              havoc __ret_0_cap;
[L6367]              havoc _cap_s704;
[L6368]              havoc __ret_0_name;
[L6369]              havoc __ret_0_symbol;
[L6370]              havoc __ret_0_decimals;
[L6371]              havoc _cap_s750;
[L6372]              havoc tmpNow;
[L6373]              havoc gas;
[L6374]              assume gas > 4000000 && gas <= 8000000;
[L6375]              tmpNow := now;
[L6376]              havoc now;
[L6377]              assume now > tmpNow;
[L6378]              assume msgsender_MSG != null;
[L6379]              assume DType[msgsender_MSG] != SafeMath;
[L6380]              assume DType[msgsender_MSG] != Ownable;
[L6381]              assume DType[msgsender_MSG] != ERC20Basic;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != ERC20;
[L6384]              assume DType[msgsender_MSG] != StandardToken;
[L6385]              assume DType[msgsender_MSG] != MintableToken;
[L6386]              assume DType[msgsender_MSG] != CappedToken;
[L6387]              assume DType[msgsender_MSG] != TSTToken;
[L6388]              Alloc[msgsender_MSG] := true;
[L6389]  COND FALSE  !(choice == 18)
[L6395]  COND FALSE  !(choice == 17)
[L6401]  COND FALSE  !(choice == 16)
[L6407]  COND FALSE  !(choice == 15)
[L6413]  COND FALSE  !(choice == 14)
[L6419]  COND FALSE  !(choice == 13)
[L6426]  COND FALSE  !(choice == 12)
[L6432]  COND FALSE  !(choice == 11)
[L6439]  COND TRUE   choice == 10
[L6440]              gas := gas - 21000;
[L6441]  COND TRUE   gas >= 0
[L6442]              assume _value_s463 >= 0 && _value_s463 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6443]              assume msgvalue_MSG == 0;
[L6444]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s463;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L859]               havoc __exception;
[L860]               revert := false;
[L861]   COND FALSE  !(__exception)
[L885]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L3134]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s463];
[L3135]              allowed_StandardToken[this][msgsender_MSG][_spender_s463] := _value_s463;
[L3136]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s463];
[L3137]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3138]              __ret_0_ := true;
[L885]   RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L886]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s463] == _value_s463) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L6444]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L6522]  RET         call CorralChoice_TSTToken(this);

Loop:
[L6522]  CALL        call CorralChoice_TSTToken(this);
[L6334]              havoc msgsender_MSG;
[L6335]              havoc msgvalue_MSG;
[L6336]              havoc choice;
[L6337]              havoc __ret_0_owner;
[L6338]              havoc _newOwner_s153;
[L6339]              havoc __ret_0_totalSupply;
[L6340]              havoc _owner_s298;
[L6341]              havoc __ret_0_balanceOf;
[L6342]              havoc _to_s286;
[L6343]              havoc _value_s286;
[L6344]              havoc __ret_0_transfer;
[L6345]              havoc _owner_s479;
[L6346]              havoc _spender_s479;
[L6347]              havoc __ret_0_allowance;
[L6348]              havoc _from_s435;
[L6349]              havoc _to_s435;
[L6350]              havoc _value_s435;
[L6351]              havoc __ret_0_transferFrom;
[L6352]              havoc _spender_s463;
[L6353]              havoc _value_s463;
[L6354]              havoc __ret_0_approve;
[L6355]              havoc _spender_s521;
[L6356]              havoc _addedValue_s521;
[L6357]              havoc __ret_0_increaseApproval;
[L6358]              havoc _spender_s581;
[L6359]              havoc _subtractedValue_s581;
[L6360]              havoc __ret_0_decreaseApproval;
[L6361]              havoc __ret_0_mintingFinished;
[L6362]              havoc _to_s729;
[L6363]              havoc _amount_s729;
[L6364]              havoc __ret_0_mint;
[L6365]              havoc __ret_0_finishMinting;
[L6366]              havoc __ret_0_cap;
[L6367]              havoc _cap_s704;
[L6368]              havoc __ret_0_name;
[L6369]              havoc __ret_0_symbol;
[L6370]              havoc __ret_0_decimals;
[L6371]              havoc _cap_s750;
[L6372]              havoc tmpNow;
[L6373]              havoc gas;
[L6374]              assume gas > 4000000 && gas <= 8000000;
[L6375]              tmpNow := now;
[L6376]              havoc now;
[L6377]              assume now > tmpNow;
[L6378]              assume msgsender_MSG != null;
[L6379]              assume DType[msgsender_MSG] != SafeMath;
[L6380]              assume DType[msgsender_MSG] != Ownable;
[L6381]              assume DType[msgsender_MSG] != ERC20Basic;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != ERC20;
[L6384]              assume DType[msgsender_MSG] != StandardToken;
[L6385]              assume DType[msgsender_MSG] != MintableToken;
[L6386]              assume DType[msgsender_MSG] != CappedToken;
[L6387]              assume DType[msgsender_MSG] != TSTToken;
[L6388]              Alloc[msgsender_MSG] := true;
[L6389]  COND FALSE  !(choice == 18)
[L6395]  COND FALSE  !(choice == 17)
[L6401]  COND FALSE  !(choice == 16)
[L6407]  COND FALSE  !(choice == 15)
[L6413]  COND FALSE  !(choice == 14)
[L6419]  COND FALSE  !(choice == 13)
[L6426]  COND FALSE  !(choice == 12)
[L6432]  COND FALSE  !(choice == 11)
[L6439]  COND TRUE   choice == 10
[L6440]              gas := gas - 21000;
[L6441]  COND TRUE   gas >= 0
[L6442]              assume _value_s463 >= 0 && _value_s463 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6443]              assume msgvalue_MSG == 0;
[L6444]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s463;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L859]               havoc __exception;
[L860]               revert := false;
[L861]   COND TRUE   __exception
[L862]               __tmp__Balance := Balance;
[L863]               __tmp__DType := DType;
[L864]               __tmp__Alloc := Alloc;
[L865]               __tmp__balance_ADDR := balance_ADDR;
[L866]               __tmp__M_Ref_int := M_Ref_int;
[L867]               __tmp__sum_balances0 := sum_balances0;
[L868]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L869]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L870]               __tmp__sum_allowed1 := sum_allowed1;
[L871]               __tmp__Length := Length;
[L872]               __tmp__now := now;
[L873]               __tmp__owner_Ownable := owner_Ownable;
[L874]               __tmp__balances_BasicToken := balances_BasicToken;
[L875]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L876]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L877]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L878]               __tmp__cap_CappedToken := cap_CappedToken;
[L879]               __tmp__name_TSTToken := name_TSTToken;
[L880]               __tmp__symbol_TSTToken := symbol_TSTToken;
[L881]               __tmp__decimals_TSTToken := decimals_TSTToken;
[L882]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L3125]              __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] - __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s463];
[L3126]              __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s463] := _value_s463;
[L3127]              __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] + __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s463];
[L3128]              __ret_0_ := true;
[L882]   RET         call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L883]               assume revert || gas < 0;
[L6444]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L6522]  RET         call CorralChoice_TSTToken(this);

[2020-11-25 06:41:17,472 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:41:17,473 INFO  L82        PathProgramCache]: Analyzing trace with hash 1010975462, now seen corresponding path program 1 times
[2020-11-25 06:41:17,473 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:41:17,494 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:41:17,733 INFO  L134       CoverageAnalysis]: Checked inductivity of 3875 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3875 trivial. 0 not checked.
[2020-11-25 06:41:17,734 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:41:17,734 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 06:41:17,735 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:41:17,735 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 06:41:17,735 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 06:41:17,735 INFO  L87              Difference]: Start difference. First operand 3262 states and 3582 transitions. cyclomatic complexity: 324 Second operand 4 states.
[2020-11-25 06:41:17,849 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:41:17,849 INFO  L93              Difference]: Finished difference Result 4047 states and 4620 transitions.
[2020-11-25 06:41:17,849 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 06:41:17,849 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4047 states and 4620 transitions.
[2020-11-25 06:41:17,859 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 20
[2020-11-25 06:41:17,871 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4047 states to 3833 states and 4390 transitions.
[2020-11-25 06:41:17,871 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1035
[2020-11-25 06:41:17,872 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1035
[2020-11-25 06:41:17,872 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3833 states and 4390 transitions.
[2020-11-25 06:41:17,876 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:41:17,876 INFO  L728         BuchiCegarLoop]: Abstraction has 3833 states and 4390 transitions.
[2020-11-25 06:41:17,878 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3833 states and 4390 transitions.
[2020-11-25 06:41:17,901 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3833 to 3210.
[2020-11-25 06:41:17,901 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3210 states.
[2020-11-25 06:41:17,904 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3210 states to 3210 states and 3562 transitions.
[2020-11-25 06:41:17,904 INFO  L751         BuchiCegarLoop]: Abstraction has 3210 states and 3562 transitions.
[2020-11-25 06:41:17,904 INFO  L631         BuchiCegarLoop]: Abstraction has 3210 states and 3562 transitions.
[2020-11-25 06:41:17,904 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 06:41:17,904 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3210 states and 3562 transitions.
[2020-11-25 06:41:17,908 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-25 06:41:17,908 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:41:17,908 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:41:17,910 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:41:17,910 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StandardToken0 := false;
[L3]                 call_approve_StandardToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6512]              assume null == 0;
[L6513]  CALL        call this := FreshRefGenerator__success();
[L2510]              havoc newRef;
[L2511]              assume Alloc[newRef] == false;
[L2512]              Alloc[newRef] := true;
[L2513]              assume newRef != null;
[L6513]  RET         call this := FreshRefGenerator__success();
[L6514]              assume now >= 0;
[L6515]              assume DType[this] == TSTToken;
[L6516]              assume msgvalue_MSG == 0;
[L6517]              gas := gas - 53000;
[L6518]  CALL        call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1532]              havoc __exception;
[L1533]              revert := false;
[L1534]  COND FALSE  !(__exception)
[L1558]  CALL        call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3627]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3627]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3628]  COND FALSE  !(revert)
[L3631]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3631]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3632]  COND FALSE  !(revert)
[L3635]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3635]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3636]  COND FALSE  !(revert)
[L3639]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3016]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3017]  COND FALSE  !(revert)
[L3020]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3020]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3021]  COND FALSE  !(revert)
[L3024]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3024]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3025]  COND FALSE  !(revert)
[L3028]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2990]              sum_allowed1[this] := 0;
[L3028]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3029]  COND FALSE  !(revert)
[L3639]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  COND FALSE  !(revert)
[L3643]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]              assume msgsender_MSG != null;
[L2625]              Balance[this] := 0;
[L2626]              owner_Ownable[this] := null;
[L2628]              owner_Ownable[this] := msgsender_MSG;
[L2641]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2642]  COND FALSE  !(revert)
[L3643]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3644]  COND FALSE  !(revert)
[L3647]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3276]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]  COND FALSE  !(revert)
[L3280]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3280]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3281]  COND FALSE  !(revert)
[L3284]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3284]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3285]  COND FALSE  !(revert)
[L3288]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3016]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3017]  COND FALSE  !(revert)
[L3020]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3020]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3021]  COND FALSE  !(revert)
[L3024]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3024]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3025]  COND FALSE  !(revert)
[L3028]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2990]              sum_allowed1[this] := 0;
[L3028]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3029]  COND FALSE  !(revert)
[L3288]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]  COND FALSE  !(revert)
[L3292]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]              assume msgsender_MSG != null;
[L2625]              Balance[this] := 0;
[L2626]              owner_Ownable[this] := null;
[L2628]              owner_Ownable[this] := msgsender_MSG;
[L2641]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2642]  COND FALSE  !(revert)
[L3292]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3293]  COND FALSE  !(revert)
[L3296]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3240]              assume msgsender_MSG != null;
[L3241]              Balance[this] := 0;
[L3242]              mintingFinished_MintableToken[this] := false;
[L3296]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3297]  COND FALSE  !(revert)
[L3647]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3648]  COND FALSE  !(revert)
[L3651]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3465]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3465]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3466]  COND FALSE  !(revert)
[L3469]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3469]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3470]  COND FALSE  !(revert)
[L3473]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3473]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3474]  COND FALSE  !(revert)
[L3477]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3016]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3017]  COND FALSE  !(revert)
[L3020]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3020]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3021]  COND FALSE  !(revert)
[L3024]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3024]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3025]  COND FALSE  !(revert)
[L3028]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2990]              sum_allowed1[this] := 0;
[L3028]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3029]  COND FALSE  !(revert)
[L3477]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3478]  COND FALSE  !(revert)
[L3481]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]              assume msgsender_MSG != null;
[L2625]              Balance[this] := 0;
[L2626]              owner_Ownable[this] := null;
[L2628]              owner_Ownable[this] := msgsender_MSG;
[L2641]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2642]  COND FALSE  !(revert)
[L3481]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3482]  COND FALSE  !(revert)
[L3485]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3276]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]  COND FALSE  !(revert)
[L3280]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3280]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3281]  COND FALSE  !(revert)
[L3284]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3284]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3285]  COND FALSE  !(revert)
[L3288]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3016]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3017]  COND FALSE  !(revert)
[L3020]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3020]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3021]  COND FALSE  !(revert)
[L3024]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3024]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3025]  COND FALSE  !(revert)
[L3028]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2990]              sum_allowed1[this] := 0;
[L3028]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3029]  COND FALSE  !(revert)
[L3288]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]  COND FALSE  !(revert)
[L3292]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]              assume msgsender_MSG != null;
[L2625]              Balance[this] := 0;
[L2626]              owner_Ownable[this] := null;
[L2628]              owner_Ownable[this] := msgsender_MSG;
[L2641]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2642]  COND FALSE  !(revert)
[L3292]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3293]  COND FALSE  !(revert)
[L3296]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3240]              assume msgsender_MSG != null;
[L3241]              Balance[this] := 0;
[L3242]              mintingFinished_MintableToken[this] := false;
[L3296]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3297]  COND FALSE  !(revert)
[L3485]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3486]  COND FALSE  !(revert)
[L3489]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3420]              assume msgsender_MSG != null;
[L3421]              Balance[this] := 0;
[L3422]              cap_CappedToken[this] := 0;
[L3424]  COND FALSE  !(!(_cap_s704 > 0))
[L3428]              cap_CappedToken[this] := _cap_s704;
[L3489]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3490]  COND FALSE  !(revert)
[L3651]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3652]  COND FALSE  !(revert)
[L3655]  CALL        call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3581]              assume msgsender_MSG != null;
[L3582]              Balance[this] := 0;
[L3583]              name_TSTToken[this] := 1406741980;
[L3584]              symbol_TSTToken[this] := 57413297;
[L3585]              decimals_TSTToken[this] := 18;
[L3655]  RET         call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3656]  COND FALSE  !(revert)
[L1558]  RET         call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1559]              assume !revert && gas >= 0;
[L6518]  RET         call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6519]              assume !revert && gas >= 0;
[L6522]  CALL        call CorralChoice_TSTToken(this);
[L6334]              havoc msgsender_MSG;
[L6335]              havoc msgvalue_MSG;
[L6336]              havoc choice;
[L6337]              havoc __ret_0_owner;
[L6338]              havoc _newOwner_s153;
[L6339]              havoc __ret_0_totalSupply;
[L6340]              havoc _owner_s298;
[L6341]              havoc __ret_0_balanceOf;
[L6342]              havoc _to_s286;
[L6343]              havoc _value_s286;
[L6344]              havoc __ret_0_transfer;
[L6345]              havoc _owner_s479;
[L6346]              havoc _spender_s479;
[L6347]              havoc __ret_0_allowance;
[L6348]              havoc _from_s435;
[L6349]              havoc _to_s435;
[L6350]              havoc _value_s435;
[L6351]              havoc __ret_0_transferFrom;
[L6352]              havoc _spender_s463;
[L6353]              havoc _value_s463;
[L6354]              havoc __ret_0_approve;
[L6355]              havoc _spender_s521;
[L6356]              havoc _addedValue_s521;
[L6357]              havoc __ret_0_increaseApproval;
[L6358]              havoc _spender_s581;
[L6359]              havoc _subtractedValue_s581;
[L6360]              havoc __ret_0_decreaseApproval;
[L6361]              havoc __ret_0_mintingFinished;
[L6362]              havoc _to_s729;
[L6363]              havoc _amount_s729;
[L6364]              havoc __ret_0_mint;
[L6365]              havoc __ret_0_finishMinting;
[L6366]              havoc __ret_0_cap;
[L6367]              havoc _cap_s704;
[L6368]              havoc __ret_0_name;
[L6369]              havoc __ret_0_symbol;
[L6370]              havoc __ret_0_decimals;
[L6371]              havoc _cap_s750;
[L6372]              havoc tmpNow;
[L6373]              havoc gas;
[L6374]              assume gas > 4000000 && gas <= 8000000;
[L6375]              tmpNow := now;
[L6376]              havoc now;
[L6377]              assume now > tmpNow;
[L6378]              assume msgsender_MSG != null;
[L6379]              assume DType[msgsender_MSG] != SafeMath;
[L6380]              assume DType[msgsender_MSG] != Ownable;
[L6381]              assume DType[msgsender_MSG] != ERC20Basic;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != ERC20;
[L6384]              assume DType[msgsender_MSG] != StandardToken;
[L6385]              assume DType[msgsender_MSG] != MintableToken;
[L6386]              assume DType[msgsender_MSG] != CappedToken;
[L6387]              assume DType[msgsender_MSG] != TSTToken;
[L6388]              Alloc[msgsender_MSG] := true;
[L6389]  COND FALSE  !(choice == 18)
[L6395]  COND FALSE  !(choice == 17)
[L6401]  COND FALSE  !(choice == 16)
[L6407]  COND FALSE  !(choice == 15)
[L6413]  COND FALSE  !(choice == 14)
[L6419]  COND FALSE  !(choice == 13)
[L6426]  COND FALSE  !(choice == 12)
[L6432]  COND FALSE  !(choice == 11)
[L6439]  COND TRUE   choice == 10
[L6440]              gas := gas - 21000;
[L6441]  COND TRUE   gas >= 0
[L6442]              assume _value_s463 >= 0 && _value_s463 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6443]              assume msgvalue_MSG == 0;
[L6444]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s463;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L859]               havoc __exception;
[L860]               revert := false;
[L861]   COND TRUE   __exception
[L862]               __tmp__Balance := Balance;
[L863]               __tmp__DType := DType;
[L864]               __tmp__Alloc := Alloc;
[L865]               __tmp__balance_ADDR := balance_ADDR;
[L866]               __tmp__M_Ref_int := M_Ref_int;
[L867]               __tmp__sum_balances0 := sum_balances0;
[L868]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L869]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L870]               __tmp__sum_allowed1 := sum_allowed1;
[L871]               __tmp__Length := Length;
[L872]               __tmp__now := now;
[L873]               __tmp__owner_Ownable := owner_Ownable;
[L874]               __tmp__balances_BasicToken := balances_BasicToken;
[L875]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L876]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L877]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L878]               __tmp__cap_CappedToken := cap_CappedToken;
[L879]               __tmp__name_TSTToken := name_TSTToken;
[L880]               __tmp__symbol_TSTToken := symbol_TSTToken;
[L881]               __tmp__decimals_TSTToken := decimals_TSTToken;
[L882]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L3125]              __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] - __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s463];
[L3126]              __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s463] := _value_s463;
[L3127]              __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] + __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s463];
[L3128]              __ret_0_ := true;
[L882]   RET         call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L883]               assume revert || gas < 0;
[L6444]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L6522]  RET         call CorralChoice_TSTToken(this);

Loop:
[L6522]  CALL        call CorralChoice_TSTToken(this);
[L6334]              havoc msgsender_MSG;
[L6335]              havoc msgvalue_MSG;
[L6336]              havoc choice;
[L6337]              havoc __ret_0_owner;
[L6338]              havoc _newOwner_s153;
[L6339]              havoc __ret_0_totalSupply;
[L6340]              havoc _owner_s298;
[L6341]              havoc __ret_0_balanceOf;
[L6342]              havoc _to_s286;
[L6343]              havoc _value_s286;
[L6344]              havoc __ret_0_transfer;
[L6345]              havoc _owner_s479;
[L6346]              havoc _spender_s479;
[L6347]              havoc __ret_0_allowance;
[L6348]              havoc _from_s435;
[L6349]              havoc _to_s435;
[L6350]              havoc _value_s435;
[L6351]              havoc __ret_0_transferFrom;
[L6352]              havoc _spender_s463;
[L6353]              havoc _value_s463;
[L6354]              havoc __ret_0_approve;
[L6355]              havoc _spender_s521;
[L6356]              havoc _addedValue_s521;
[L6357]              havoc __ret_0_increaseApproval;
[L6358]              havoc _spender_s581;
[L6359]              havoc _subtractedValue_s581;
[L6360]              havoc __ret_0_decreaseApproval;
[L6361]              havoc __ret_0_mintingFinished;
[L6362]              havoc _to_s729;
[L6363]              havoc _amount_s729;
[L6364]              havoc __ret_0_mint;
[L6365]              havoc __ret_0_finishMinting;
[L6366]              havoc __ret_0_cap;
[L6367]              havoc _cap_s704;
[L6368]              havoc __ret_0_name;
[L6369]              havoc __ret_0_symbol;
[L6370]              havoc __ret_0_decimals;
[L6371]              havoc _cap_s750;
[L6372]              havoc tmpNow;
[L6373]              havoc gas;
[L6374]              assume gas > 4000000 && gas <= 8000000;
[L6375]              tmpNow := now;
[L6376]              havoc now;
[L6377]              assume now > tmpNow;
[L6378]              assume msgsender_MSG != null;
[L6379]              assume DType[msgsender_MSG] != SafeMath;
[L6380]              assume DType[msgsender_MSG] != Ownable;
[L6381]              assume DType[msgsender_MSG] != ERC20Basic;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != ERC20;
[L6384]              assume DType[msgsender_MSG] != StandardToken;
[L6385]              assume DType[msgsender_MSG] != MintableToken;
[L6386]              assume DType[msgsender_MSG] != CappedToken;
[L6387]              assume DType[msgsender_MSG] != TSTToken;
[L6388]              Alloc[msgsender_MSG] := true;
[L6389]  COND FALSE  !(choice == 18)
[L6395]  COND FALSE  !(choice == 17)
[L6401]  COND FALSE  !(choice == 16)
[L6407]  COND FALSE  !(choice == 15)
[L6413]  COND FALSE  !(choice == 14)
[L6419]  COND FALSE  !(choice == 13)
[L6426]  COND FALSE  !(choice == 12)
[L6432]  COND FALSE  !(choice == 11)
[L6439]  COND TRUE   choice == 10
[L6440]              gas := gas - 21000;
[L6441]  COND TRUE   gas >= 0
[L6442]              assume _value_s463 >= 0 && _value_s463 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6443]              assume msgvalue_MSG == 0;
[L6444]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s463;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L859]               havoc __exception;
[L860]               revert := false;
[L861]   COND TRUE   __exception
[L862]               __tmp__Balance := Balance;
[L863]               __tmp__DType := DType;
[L864]               __tmp__Alloc := Alloc;
[L865]               __tmp__balance_ADDR := balance_ADDR;
[L866]               __tmp__M_Ref_int := M_Ref_int;
[L867]               __tmp__sum_balances0 := sum_balances0;
[L868]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L869]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L870]               __tmp__sum_allowed1 := sum_allowed1;
[L871]               __tmp__Length := Length;
[L872]               __tmp__now := now;
[L873]               __tmp__owner_Ownable := owner_Ownable;
[L874]               __tmp__balances_BasicToken := balances_BasicToken;
[L875]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L876]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L877]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L878]               __tmp__cap_CappedToken := cap_CappedToken;
[L879]               __tmp__name_TSTToken := name_TSTToken;
[L880]               __tmp__symbol_TSTToken := symbol_TSTToken;
[L881]               __tmp__decimals_TSTToken := decimals_TSTToken;
[L882]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L3125]              __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] - __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s463];
[L3126]              __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s463] := _value_s463;
[L3127]              __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] + __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s463];
[L3128]              __ret_0_ := true;
[L882]   RET         call __ret_0_ := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L883]               assume revert || gas < 0;
[L6444]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L6522]  RET         call CorralChoice_TSTToken(this);

[2020-11-25 06:41:17,916 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:41:17,917 INFO  L82        PathProgramCache]: Analyzing trace with hash 369798877, now seen corresponding path program 1 times
[2020-11-25 06:41:17,917 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:41:17,936 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:41:18,133 INFO  L134       CoverageAnalysis]: Checked inductivity of 3875 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3875 trivial. 0 not checked.
[2020-11-25 06:41:18,133 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:41:18,133 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 06:41:18,134 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:41:18,134 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 06:41:18,134 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 06:41:18,134 INFO  L87              Difference]: Start difference. First operand 3210 states and 3562 transitions. cyclomatic complexity: 356 Second operand 5 states.
[2020-11-25 06:41:18,436 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:41:18,436 INFO  L93              Difference]: Finished difference Result 3715 states and 4158 transitions.
[2020-11-25 06:41:18,436 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 06:41:18,436 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3715 states and 4158 transitions.
[2020-11-25 06:41:18,444 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-11-25 06:41:18,452 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3715 states to 2786 states and 3201 transitions.
[2020-11-25 06:41:18,452 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 584
[2020-11-25 06:41:18,452 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 761
[2020-11-25 06:41:18,452 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2786 states and 3201 transitions.
[2020-11-25 06:41:18,455 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:41:18,455 INFO  L728         BuchiCegarLoop]: Abstraction has 2786 states and 3201 transitions.
[2020-11-25 06:41:18,456 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2786 states and 3201 transitions.
[2020-11-25 06:41:18,468 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2786 to 1982.
[2020-11-25 06:41:18,469 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1982 states.
[2020-11-25 06:41:18,470 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1982 states to 1982 states and 2171 transitions.
[2020-11-25 06:41:18,470 INFO  L751         BuchiCegarLoop]: Abstraction has 1982 states and 2171 transitions.
[2020-11-25 06:41:18,470 INFO  L631         BuchiCegarLoop]: Abstraction has 1982 states and 2171 transitions.
[2020-11-25 06:41:18,470 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 06:41:18,471 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1982 states and 2171 transitions.
[2020-11-25 06:41:18,473 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:41:18,473 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:41:18,473 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:41:18,474 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [24, 24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:41:18,475 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_StandardToken0 := false;
[L3]                 call_approve_StandardToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6512]              assume null == 0;
[L6513]  CALL        call this := FreshRefGenerator__success();
[L2510]              havoc newRef;
[L2511]              assume Alloc[newRef] == false;
[L2512]              Alloc[newRef] := true;
[L2513]              assume newRef != null;
[L6513]  RET         call this := FreshRefGenerator__success();
[L6514]              assume now >= 0;
[L6515]              assume DType[this] == TSTToken;
[L6516]              assume msgvalue_MSG == 0;
[L6517]              gas := gas - 53000;
[L6518]  CALL        call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1532]              havoc __exception;
[L1533]              revert := false;
[L1534]  COND FALSE  !(__exception)
[L1558]  CALL        call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3627]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3627]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3628]  COND FALSE  !(revert)
[L3631]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3631]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3632]  COND FALSE  !(revert)
[L3635]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3635]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3636]  COND FALSE  !(revert)
[L3639]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3016]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3017]  COND FALSE  !(revert)
[L3020]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3020]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3021]  COND FALSE  !(revert)
[L3024]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3024]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3025]  COND FALSE  !(revert)
[L3028]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2990]              sum_allowed1[this] := 0;
[L3028]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3029]  COND FALSE  !(revert)
[L3639]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3640]  COND FALSE  !(revert)
[L3643]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]              assume msgsender_MSG != null;
[L2625]              Balance[this] := 0;
[L2626]              owner_Ownable[this] := null;
[L2628]              owner_Ownable[this] := msgsender_MSG;
[L2641]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2642]  COND FALSE  !(revert)
[L3643]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3644]  COND FALSE  !(revert)
[L3647]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3276]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]  COND FALSE  !(revert)
[L3280]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3280]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3281]  COND FALSE  !(revert)
[L3284]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3284]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3285]  COND FALSE  !(revert)
[L3288]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3016]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3017]  COND FALSE  !(revert)
[L3020]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3020]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3021]  COND FALSE  !(revert)
[L3024]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3024]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3025]  COND FALSE  !(revert)
[L3028]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2990]              sum_allowed1[this] := 0;
[L3028]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3029]  COND FALSE  !(revert)
[L3288]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]  COND FALSE  !(revert)
[L3292]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]              assume msgsender_MSG != null;
[L2625]              Balance[this] := 0;
[L2626]              owner_Ownable[this] := null;
[L2628]              owner_Ownable[this] := msgsender_MSG;
[L2641]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2642]  COND FALSE  !(revert)
[L3292]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3293]  COND FALSE  !(revert)
[L3296]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3240]              assume msgsender_MSG != null;
[L3241]              Balance[this] := 0;
[L3242]              mintingFinished_MintableToken[this] := false;
[L3296]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3297]  COND FALSE  !(revert)
[L3647]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3648]  COND FALSE  !(revert)
[L3651]  CALL        call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3465]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3465]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3466]  COND FALSE  !(revert)
[L3469]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3469]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3470]  COND FALSE  !(revert)
[L3473]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3473]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3474]  COND FALSE  !(revert)
[L3477]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3016]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3017]  COND FALSE  !(revert)
[L3020]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3020]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3021]  COND FALSE  !(revert)
[L3024]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3024]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3025]  COND FALSE  !(revert)
[L3028]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2990]              sum_allowed1[this] := 0;
[L3028]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3029]  COND FALSE  !(revert)
[L3477]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3478]  COND FALSE  !(revert)
[L3481]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]              assume msgsender_MSG != null;
[L2625]              Balance[this] := 0;
[L2626]              owner_Ownable[this] := null;
[L2628]              owner_Ownable[this] := msgsender_MSG;
[L2641]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2642]  COND FALSE  !(revert)
[L3481]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3482]  COND FALSE  !(revert)
[L3485]  CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3276]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3276]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]  COND FALSE  !(revert)
[L3280]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3280]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3281]  COND FALSE  !(revert)
[L3284]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3284]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3285]  COND FALSE  !(revert)
[L3288]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3016]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L3016]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L3017]  COND FALSE  !(revert)
[L3020]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2964]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2964]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2965]  COND FALSE  !(revert)
[L2968]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]              assume msgsender_MSG != null;
[L2946]              Balance[this] := 0;
[L2968]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]  COND FALSE  !(revert)
[L3020]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3021]  COND FALSE  !(revert)
[L3024]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2835]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2793]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2778]              assume msgsender_MSG != null;
[L2779]              Balance[this] := 0;
[L2793]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  COND FALSE  !(revert)
[L2835]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2836]  COND FALSE  !(revert)
[L2839]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2813]              assume msgsender_MSG != null;
[L2814]              Balance[this] := 0;
[L2815]              balances_BasicToken[this] := zeroRefintArr();
[L2816]              sum_balances0[this] := 0;
[L2817]              totalSupply__BasicToken[this] := 0;
[L2839]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2840]  COND FALSE  !(revert)
[L3024]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3025]  COND FALSE  !(revert)
[L3028]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2990]              sum_allowed1[this] := 0;
[L3028]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3029]  COND FALSE  !(revert)
[L3288]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3289]  COND FALSE  !(revert)
[L3292]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2641]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]              assume msgsender_MSG != null;
[L2625]              Balance[this] := 0;
[L2626]              owner_Ownable[this] := null;
[L2628]              owner_Ownable[this] := msgsender_MSG;
[L2641]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2642]  COND FALSE  !(revert)
[L3292]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3293]  COND FALSE  !(revert)
[L3296]  CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3240]              assume msgsender_MSG != null;
[L3241]              Balance[this] := 0;
[L3242]              mintingFinished_MintableToken[this] := false;
[L3296]  RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3297]  COND FALSE  !(revert)
[L3485]  RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3486]  COND FALSE  !(revert)
[L3489]  CALL        call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3420]              assume msgsender_MSG != null;
[L3421]              Balance[this] := 0;
[L3422]              cap_CappedToken[this] := 0;
[L3424]  COND FALSE  !(!(_cap_s704 > 0))
[L3428]              cap_CappedToken[this] := _cap_s704;
[L3489]  RET         call CappedToken_CappedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s704);
[L3490]  COND FALSE  !(revert)
[L3651]  RET         call CappedToken_CappedToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3652]  COND FALSE  !(revert)
[L3655]  CALL        call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3581]              assume msgsender_MSG != null;
[L3582]              Balance[this] := 0;
[L3583]              name_TSTToken[this] := 1406741980;
[L3584]              symbol_TSTToken[this] := 57413297;
[L3585]              decimals_TSTToken[this] := 18;
[L3655]  RET         call TSTToken_TSTToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L3656]  COND FALSE  !(revert)
[L1558]  RET         call TSTToken_TSTToken__success(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L1559]              assume !revert && gas >= 0;
[L6518]  RET         call TSTToken_TSTToken(this, msgsender_MSG, msgvalue_MSG, _cap_s750);
[L6519]              assume !revert && gas >= 0;
[L6522]  CALL        call CorralChoice_TSTToken(this);
[L6334]              havoc msgsender_MSG;
[L6335]              havoc msgvalue_MSG;
[L6336]              havoc choice;
[L6337]              havoc __ret_0_owner;
[L6338]              havoc _newOwner_s153;
[L6339]              havoc __ret_0_totalSupply;
[L6340]              havoc _owner_s298;
[L6341]              havoc __ret_0_balanceOf;
[L6342]              havoc _to_s286;
[L6343]              havoc _value_s286;
[L6344]              havoc __ret_0_transfer;
[L6345]              havoc _owner_s479;
[L6346]              havoc _spender_s479;
[L6347]              havoc __ret_0_allowance;
[L6348]              havoc _from_s435;
[L6349]              havoc _to_s435;
[L6350]              havoc _value_s435;
[L6351]              havoc __ret_0_transferFrom;
[L6352]              havoc _spender_s463;
[L6353]              havoc _value_s463;
[L6354]              havoc __ret_0_approve;
[L6355]              havoc _spender_s521;
[L6356]              havoc _addedValue_s521;
[L6357]              havoc __ret_0_increaseApproval;
[L6358]              havoc _spender_s581;
[L6359]              havoc _subtractedValue_s581;
[L6360]              havoc __ret_0_decreaseApproval;
[L6361]              havoc __ret_0_mintingFinished;
[L6362]              havoc _to_s729;
[L6363]              havoc _amount_s729;
[L6364]              havoc __ret_0_mint;
[L6365]              havoc __ret_0_finishMinting;
[L6366]              havoc __ret_0_cap;
[L6367]              havoc _cap_s704;
[L6368]              havoc __ret_0_name;
[L6369]              havoc __ret_0_symbol;
[L6370]              havoc __ret_0_decimals;
[L6371]              havoc _cap_s750;
[L6372]              havoc tmpNow;
[L6373]              havoc gas;
[L6374]              assume gas > 4000000 && gas <= 8000000;
[L6375]              tmpNow := now;
[L6376]              havoc now;
[L6377]              assume now > tmpNow;
[L6378]              assume msgsender_MSG != null;
[L6379]              assume DType[msgsender_MSG] != SafeMath;
[L6380]              assume DType[msgsender_MSG] != Ownable;
[L6381]              assume DType[msgsender_MSG] != ERC20Basic;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != ERC20;
[L6384]              assume DType[msgsender_MSG] != StandardToken;
[L6385]              assume DType[msgsender_MSG] != MintableToken;
[L6386]              assume DType[msgsender_MSG] != CappedToken;
[L6387]              assume DType[msgsender_MSG] != TSTToken;
[L6388]              Alloc[msgsender_MSG] := true;
[L6389]  COND FALSE  !(choice == 18)
[L6395]  COND FALSE  !(choice == 17)
[L6401]  COND FALSE  !(choice == 16)
[L6407]  COND FALSE  !(choice == 15)
[L6413]  COND FALSE  !(choice == 14)
[L6419]  COND FALSE  !(choice == 13)
[L6426]  COND FALSE  !(choice == 12)
[L6432]  COND FALSE  !(choice == 11)
[L6439]  COND FALSE  !(choice == 10)
[L6446]  COND FALSE  !(choice == 9)
[L6453]  COND TRUE   choice == 8
[L6454]              gas := gas - 21000;
[L6455]  COND TRUE   gas >= 0
[L6456]              assume _subtractedValue_s581 >= 0 && _subtractedValue_s581 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6457]              assume msgvalue_MSG == 0;
[L6458]  CALL        call __ret_0_decreaseApproval := decreaseApproval~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s581, _subtractedValue_s581);
[L1031]              havoc __exception;
[L1032]              revert := false;
[L1033]  COND FALSE  !(__exception)
[L1057]  CALL        call __ret_0_ := decreaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s581, _subtractedValue_s581);
[L3209]              oldValue_s581 := allowed_StandardToken[this][msgsender_MSG][_spender_s581];
[L3210]  COND TRUE   _subtractedValue_s581 >= oldValue_s581
[L3211]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s581];
[L3212]              allowed_StandardToken[this][msgsender_MSG][_spender_s581] := 0;
[L3213]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s581];
[L3223]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3224]              __ret_0_ := true;
[L1057]  RET         call __ret_0_ := decreaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s581, _subtractedValue_s581);
[L1058]              assume !revert && gas >= 0;
[L6458]  RET         call __ret_0_decreaseApproval := decreaseApproval~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s581, _subtractedValue_s581);
[L6522]  RET         call CorralChoice_TSTToken(this);
[L6522]  CALL        call CorralChoice_TSTToken(this);
[L6334]              havoc msgsender_MSG;
[L6335]              havoc msgvalue_MSG;
[L6336]              havoc choice;
[L6337]              havoc __ret_0_owner;
[L6338]              havoc _newOwner_s153;
[L6339]              havoc __ret_0_totalSupply;
[L6340]              havoc _owner_s298;
[L6341]              havoc __ret_0_balanceOf;
[L6342]              havoc _to_s286;
[L6343]              havoc _value_s286;
[L6344]              havoc __ret_0_transfer;
[L6345]              havoc _owner_s479;
[L6346]              havoc _spender_s479;
[L6347]              havoc __ret_0_allowance;
[L6348]              havoc _from_s435;
[L6349]              havoc _to_s435;
[L6350]              havoc _value_s435;
[L6351]              havoc __ret_0_transferFrom;
[L6352]              havoc _spender_s463;
[L6353]              havoc _value_s463;
[L6354]              havoc __ret_0_approve;
[L6355]              havoc _spender_s521;
[L6356]              havoc _addedValue_s521;
[L6357]              havoc __ret_0_increaseApproval;
[L6358]              havoc _spender_s581;
[L6359]              havoc _subtractedValue_s581;
[L6360]              havoc __ret_0_decreaseApproval;
[L6361]              havoc __ret_0_mintingFinished;
[L6362]              havoc _to_s729;
[L6363]              havoc _amount_s729;
[L6364]              havoc __ret_0_mint;
[L6365]              havoc __ret_0_finishMinting;
[L6366]              havoc __ret_0_cap;
[L6367]              havoc _cap_s704;
[L6368]              havoc __ret_0_name;
[L6369]              havoc __ret_0_symbol;
[L6370]              havoc __ret_0_decimals;
[L6371]              havoc _cap_s750;
[L6372]              havoc tmpNow;
[L6373]              havoc gas;
[L6374]              assume gas > 4000000 && gas <= 8000000;
[L6375]              tmpNow := now;
[L6376]              havoc now;
[L6377]              assume now > tmpNow;
[L6378]              assume msgsender_MSG != null;
[L6379]              assume DType[msgsender_MSG] != SafeMath;
[L6380]              assume DType[msgsender_MSG] != Ownable;
[L6381]              assume DType[msgsender_MSG] != ERC20Basic;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != ERC20;
[L6384]              assume DType[msgsender_MSG] != StandardToken;
[L6385]              assume DType[msgsender_MSG] != MintableToken;
[L6386]              assume DType[msgsender_MSG] != CappedToken;
[L6387]              assume DType[msgsender_MSG] != TSTToken;
[L6388]              Alloc[msgsender_MSG] := true;
[L6389]  COND FALSE  !(choice == 18)
[L6395]  COND FALSE  !(choice == 17)
[L6401]  COND FALSE  !(choice == 16)
[L6407]  COND FALSE  !(choice == 15)
[L6413]  COND FALSE  !(choice == 14)
[L6419]  COND FALSE  !(choice == 13)
[L6426]  COND FALSE  !(choice == 12)
[L6432]  COND FALSE  !(choice == 11)
[L6439]  COND TRUE   choice == 10
[L6440]              gas := gas - 21000;
[L6441]  COND TRUE   gas >= 0
[L6442]              assume _value_s463 >= 0 && _value_s463 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6443]              assume msgvalue_MSG == 0;
[L6444]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s463;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L859]               havoc __exception;
[L860]               revert := false;
[L861]   COND FALSE  !(__exception)
[L885]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L3134]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s463];
[L3135]              allowed_StandardToken[this][msgsender_MSG][_spender_s463] := _value_s463;
[L3136]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s463];
[L3137]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3138]              __ret_0_ := true;
[L885]   RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L886]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s463] == _value_s463) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L6444]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L6522]  RET         call CorralChoice_TSTToken(this);

Loop:
[L6522]  CALL        call CorralChoice_TSTToken(this);
[L6334]              havoc msgsender_MSG;
[L6335]              havoc msgvalue_MSG;
[L6336]              havoc choice;
[L6337]              havoc __ret_0_owner;
[L6338]              havoc _newOwner_s153;
[L6339]              havoc __ret_0_totalSupply;
[L6340]              havoc _owner_s298;
[L6341]              havoc __ret_0_balanceOf;
[L6342]              havoc _to_s286;
[L6343]              havoc _value_s286;
[L6344]              havoc __ret_0_transfer;
[L6345]              havoc _owner_s479;
[L6346]              havoc _spender_s479;
[L6347]              havoc __ret_0_allowance;
[L6348]              havoc _from_s435;
[L6349]              havoc _to_s435;
[L6350]              havoc _value_s435;
[L6351]              havoc __ret_0_transferFrom;
[L6352]              havoc _spender_s463;
[L6353]              havoc _value_s463;
[L6354]              havoc __ret_0_approve;
[L6355]              havoc _spender_s521;
[L6356]              havoc _addedValue_s521;
[L6357]              havoc __ret_0_increaseApproval;
[L6358]              havoc _spender_s581;
[L6359]              havoc _subtractedValue_s581;
[L6360]              havoc __ret_0_decreaseApproval;
[L6361]              havoc __ret_0_mintingFinished;
[L6362]              havoc _to_s729;
[L6363]              havoc _amount_s729;
[L6364]              havoc __ret_0_mint;
[L6365]              havoc __ret_0_finishMinting;
[L6366]              havoc __ret_0_cap;
[L6367]              havoc _cap_s704;
[L6368]              havoc __ret_0_name;
[L6369]              havoc __ret_0_symbol;
[L6370]              havoc __ret_0_decimals;
[L6371]              havoc _cap_s750;
[L6372]              havoc tmpNow;
[L6373]              havoc gas;
[L6374]              assume gas > 4000000 && gas <= 8000000;
[L6375]              tmpNow := now;
[L6376]              havoc now;
[L6377]              assume now > tmpNow;
[L6378]              assume msgsender_MSG != null;
[L6379]              assume DType[msgsender_MSG] != SafeMath;
[L6380]              assume DType[msgsender_MSG] != Ownable;
[L6381]              assume DType[msgsender_MSG] != ERC20Basic;
[L6382]              assume DType[msgsender_MSG] != BasicToken;
[L6383]              assume DType[msgsender_MSG] != ERC20;
[L6384]              assume DType[msgsender_MSG] != StandardToken;
[L6385]              assume DType[msgsender_MSG] != MintableToken;
[L6386]              assume DType[msgsender_MSG] != CappedToken;
[L6387]              assume DType[msgsender_MSG] != TSTToken;
[L6388]              Alloc[msgsender_MSG] := true;
[L6389]  COND FALSE  !(choice == 18)
[L6395]  COND FALSE  !(choice == 17)
[L6401]  COND FALSE  !(choice == 16)
[L6407]  COND FALSE  !(choice == 15)
[L6413]  COND FALSE  !(choice == 14)
[L6419]  COND FALSE  !(choice == 13)
[L6426]  COND FALSE  !(choice == 12)
[L6432]  COND FALSE  !(choice == 11)
[L6439]  COND TRUE   choice == 10
[L6440]              gas := gas - 21000;
[L6441]  COND TRUE   gas >= 0
[L6442]              assume _value_s463 >= 0 && _value_s463 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6443]              assume msgvalue_MSG == 0;
[L6444]  CALL        call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s463;
[L3]                 call_approve_StandardToken0 := true;
[L3]                 call_approve_StandardToken0 := false;
[L3]                 revert := revert_hold;
[L859]               havoc __exception;
[L860]               revert := false;
[L861]   COND FALSE  !(__exception)
[L885]   CALL        call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L3134]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s463];
[L3135]              allowed_StandardToken[this][msgsender_MSG][_spender_s463] := _value_s463;
[L3136]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s463];
[L3137]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3138]              __ret_0_ := true;
[L885]   RET         call __ret_0_ := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L886]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s463] == _value_s463) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && name_TSTToken[this] == old(name_TSTToken[this])) && symbol_TSTToken[this] == old(symbol_TSTToken[this])) && decimals_TSTToken[this] == old(decimals_TSTToken[this])) && cap_CappedToken[this] == old(cap_CappedToken[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L6444]  RET         call __ret_0_approve := approve~address~uint256_StandardToken(this, msgsender_MSG, msgvalue_MSG, _spender_s463, _value_s463);
[L6522]  RET         call CorralChoice_TSTToken(this);

[2020-11-25 06:41:18,480 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:41:18,480 INFO  L82        PathProgramCache]: Analyzing trace with hash 353521342, now seen corresponding path program 1 times
[2020-11-25 06:41:18,481 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:41:18,515 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:41:18,841 INFO  L134       CoverageAnalysis]: Checked inductivity of 3941 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3941 trivial. 0 not checked.
[2020-11-25 06:41:18,841 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:41:18,841 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 06:41:18,841 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:41:18,842 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 06:41:18,842 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=29, Unknown=0, NotChecked=0, Total=42
[2020-11-25 06:41:18,842 INFO  L87              Difference]: Start difference. First operand 1982 states and 2171 transitions. cyclomatic complexity: 192 Second operand 7 states.
[2020-11-25 06:41:19,053 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:41:19,053 INFO  L93              Difference]: Finished difference Result 1131 states and 1234 transitions.
[2020-11-25 06:41:19,053 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 06:41:19,053 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1131 states and 1234 transitions.
[2020-11-25 06:41:19,055 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 06:41:19,055 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1131 states to 0 states and 0 transitions.
[2020-11-25 06:41:19,055 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 06:41:19,055 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 06:41:19,055 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 06:41:19,055 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:41:19,055 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 06:41:19,055 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 06:41:19,055 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 06:41:19,055 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 06:41:19,055 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 06:41:19,055 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 06:41:19,055 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 06:41:19,058 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 06:41:19 BasicIcfg
[2020-11-25 06:41:19,058 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 06:41:19,058 INFO  L168              Benchmark]: Toolchain (without parser) took 9672.53 ms. Allocated memory was 1.0 GB in the beginning and 2.1 GB in the end (delta: 1.1 GB). Free memory was 929.8 MB in the beginning and 967.5 MB in the end (delta: -37.7 MB). Peak memory consumption was 1.0 GB. Max. memory is 15.3 GB.
[2020-11-25 06:41:19,059 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 06:41:19,060 INFO  L168              Benchmark]: Boogie Preprocessor took 110.93 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 06:41:19,060 INFO  L168              Benchmark]: UtopiaSpecLang took 62.70 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 06:41:19,061 INFO  L168              Benchmark]: Boogie Printer took 19.75 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 06:41:19,061 INFO  L168              Benchmark]: RCFGBuilder took 1132.84 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 65.0 MB). Free memory was 903.0 MB in the beginning and 1.0 GB in the end (delta: -98.5 MB). Peak memory consumption was 190.3 MB. Max. memory is 15.3 GB.
[2020-11-25 06:41:19,061 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.22 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 991.6 MB in the end (delta: 9.9 MB). Peak memory consumption was 9.9 MB. Max. memory is 15.3 GB.
[2020-11-25 06:41:19,061 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1887.21 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 159.4 MB). Free memory was 991.6 MB in the beginning and 881.7 MB in the end (delta: 109.9 MB). Peak memory consumption was 500.5 MB. Max. memory is 15.3 GB.
[2020-11-25 06:41:19,062 INFO  L168              Benchmark]: BlockEncodingV2 took 172.65 ms. Allocated memory is still 1.3 GB. Free memory was 881.7 MB in the beginning and 779.6 MB in the end (delta: 102.1 MB). Peak memory consumption was 102.1 MB. Max. memory is 15.3 GB.
[2020-11-25 06:41:19,063 INFO  L168              Benchmark]: BuchiAutomizer took 6247.14 ms. Allocated memory was 1.3 GB in the beginning and 2.1 GB in the end (delta: 858.3 MB). Free memory was 779.6 MB in the beginning and 967.5 MB in the end (delta: -187.9 MB). Peak memory consumption was 670.3 MB. Max. memory is 15.3 GB.
[2020-11-25 06:41:19,066 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5820 locations, 10626 edges
  - StatisticsResult: Encoded RCFG
    5752 locations, 10454 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 110.93 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 62.70 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 19.75 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1132.84 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 65.0 MB). Free memory was 903.0 MB in the beginning and 1.0 GB in the end (delta: -98.5 MB). Peak memory consumption was 190.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.22 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 991.6 MB in the end (delta: 9.9 MB). Peak memory consumption was 9.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1887.21 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 159.4 MB). Free memory was 991.6 MB in the beginning and 881.7 MB in the end (delta: 109.9 MB). Peak memory consumption was 500.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 172.65 ms. Allocated memory is still 1.3 GB. Free memory was 881.7 MB in the beginning and 779.6 MB in the end (delta: 102.1 MB). Peak memory consumption was 102.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 6247.14 ms. Allocated memory was 1.3 GB in the beginning and 2.1 GB in the end (delta: 858.3 MB). Free memory was 779.6 MB in the beginning and 967.5 MB in the end (delta: -187.9 MB). Peak memory consumption was 670.3 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2304 locations, 3217 edges
  - StatisticsResult: BuchiProgram size
    5820 locations, 10626 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic). 7 modules have a trivial ranking function, the largest among these consists of 16 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 6.2s and 8 iterations.  TraceHistogramMax:24. Analysis of lassos took 2.2s. Construction of modules took 2.2s. BÃ¼chi inclusion checks took 1.0s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 6 MinimizatonAttempts, 2379 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 3262 states and ocurred in iteration 4.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 21246 SDtfs, 19244 SDslu, 25440 SDs, 0 SdLazy, 34993 SolverSat, 3609 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 2.2s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_approve_StandardToken0) ==> ( <>(success_approve_StandardToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
