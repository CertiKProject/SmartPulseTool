This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 13:56:38,027 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 13:56:38,028 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 13:56:38,041 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 13:56:38,042 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 13:56:38,043 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 13:56:38,045 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 13:56:38,047 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 13:56:38,049 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 13:56:38,049 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 13:56:38,050 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 13:56:38,050 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 13:56:38,051 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 13:56:38,052 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 13:56:38,053 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 13:56:38,053 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 13:56:38,054 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 13:56:38,055 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 13:56:38,056 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 13:56:38,058 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 13:56:38,059 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 13:56:38,059 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 13:56:38,061 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 13:56:38,061 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 13:56:38,061 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 13:56:38,062 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 13:56:38,062 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 13:56:38,062 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 13:56:38,063 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 13:56:38,063 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 13:56:38,063 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 13:56:38,064 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 13:56:38,064 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 13:56:38,065 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 13:56:38,065 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 13:56:38,065 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 13:56:38,066 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 13:56:38,066 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 13:56:38,066 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 13:56:38,067 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 13:56:38,067 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 13:56:38,067 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 13:56:38,075 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 13:56:38,075 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 13:56:38,076 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 13:56:38,076 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 13:56:38,076 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 13:56:38,076 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 13:56:38,076 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 13:56:38,077 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 13:56:38,077 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 13:56:38,077 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 13:56:38,077 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 13:56:38,077 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 13:56:38,077 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 13:56:38,077 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 13:56:38,077 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 13:56:38,077 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 13:56:38,077 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 13:56:38,078 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 13:56:38,078 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 13:56:38,078 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 13:56:38,078 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 13:56:38,078 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 13:56:38,078 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 13:56:38,078 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 13:56:38,078 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 13:56:38,078 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 13:56:38,100 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 13:56:38,111 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 13:56:38,113 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 13:56:38,114 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 13:56:38,115 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 13:56:38,115 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-normal.bpl
[2020-11-25 13:56:38,115 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-normal.bpl'
[2020-11-25 13:56:38,188 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 13:56:38,189 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 13:56:38,190 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 13:56:38,190 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 13:56:38,190 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 13:56:38,207 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:56:38" (1/1) ...
[2020-11-25 13:56:38,208 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:56:38" (1/1) ...
[2020-11-25 13:56:38,233 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:56:38" (1/1) ...
[2020-11-25 13:56:38,233 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:56:38" (1/1) ...
[2020-11-25 13:56:38,250 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:56:38" (1/1) ...
[2020-11-25 13:56:38,257 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:56:38" (1/1) ...
[2020-11-25 13:56:38,263 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:56:38" (1/1) ...
[2020-11-25 13:56:38,271 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 13:56:38,272 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 13:56:38,272 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 13:56:38,274 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 13:56:38,278 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:56:38" (1/1) ...
[2020-11-25 13:56:38,295 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(DiceToken.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_DiceToken[this][msg.sender] && balances_DiceToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_DiceToken[this][to] >= 0 && balances_DiceToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_DiceToken[this][msg.sender] >= 0 &&  balances_DiceToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DiceToken.transfer(to, value), return == true && balances_DiceToken[this][msg.sender] == old(balances_DiceToken[this][msg.sender]) - value && balances_DiceToken[this][to] == old(balances_DiceToken[this][to]) + value && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this]) && allowed_DiceToken[this] == old(allowed_DiceToken[this]) && balances_DiceToken[this][p1] == old(balances_DiceToken[this][p1]) && symbol_DiceToken[this] == old(symbol_DiceToken[this]) && name_DiceToken[this] == old(name_DiceToken[this]) && decimals_DiceToken[this] == old(decimals_DiceToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 13:56:38,300 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(DiceToken.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_DiceToken[this][msg.sender] && balances_DiceToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_DiceToken[this][to] >= 0 && balances_DiceToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_DiceToken[this][msg.sender] >= 0 &&  balances_DiceToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DiceToken.transfer(to, value), return == true && balances_DiceToken[this][msg.sender] == old(balances_DiceToken[this][msg.sender]) - value && balances_DiceToken[this][to] == old(balances_DiceToken[this][to]) + value && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this]) && allowed_DiceToken[this] == old(allowed_DiceToken[this]) && balances_DiceToken[this][p1] == old(balances_DiceToken[this][p1]) && symbol_DiceToken[this] == old(symbol_DiceToken[this]) && name_DiceToken[this] == old(name_DiceToken[this]) && decimals_DiceToken[this] == old(decimals_DiceToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 13:56:38,308 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(DiceToken.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_DiceToken[this][msg.sender] && balances_DiceToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_DiceToken[this][to] >= 0 && balances_DiceToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_DiceToken[this][msg.sender] >= 0 &&  balances_DiceToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DiceToken.transfer(to, value), return == true && balances_DiceToken[this][msg.sender] == old(balances_DiceToken[this][msg.sender]) - value && balances_DiceToken[this][to] == old(balances_DiceToken[this][to]) + value && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this]) && allowed_DiceToken[this] == old(allowed_DiceToken[this]) && balances_DiceToken[this][p1] == old(balances_DiceToken[this][p1]) && symbol_DiceToken[this] == old(symbol_DiceToken[this]) && name_DiceToken[this] == old(name_DiceToken[this]) && decimals_DiceToken[this] == old(decimals_DiceToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 13:56:38,315 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( p1!=msg.sender && p1!=to_s366 ) && msg.sender!=to_s366 ) && tokens_s366<=balances_DiceToken[this][msg.sender] ) && ( balances_DiceToken[this][to_s366] + tokens_s366 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && tokens_s366>=0 ) && tokens_s366<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_DiceToken[this][to_s366]>=0 ) && balances_DiceToken[this][to_s366]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_DiceToken[this][msg.sender]>=0 ) && balances_DiceToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s366,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>],IdentifierExpression[to_s366,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s366,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],[IdentifierExpression[to_s366,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],IdentifierExpression[tokens_s366,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s366,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s366,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],[IdentifierExpression[to_s366,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],[IdentifierExpression[to_s366,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 13:56:38,318 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( success_s366==true && balances_DiceToken[this][msg.sender]==( ( old(balances_DiceToken[this][msg.sender]) ) - tokens_s366 ) ) && balances_DiceToken[this][to_s366]==( ( old(balances_DiceToken[this][to_s366]) ) + tokens_s366 ) ) && _totalSupply_DiceToken[this]==( old(_totalSupply_DiceToken[this]) ) ) && allowed_DiceToken[this]==( old(allowed_DiceToken[this]) ) ) && balances_DiceToken[this][p1]==( old(balances_DiceToken[this][p1]) ) ) && symbol_DiceToken[this]==( old(symbol_DiceToken[this]) ) ) && name_DiceToken[this]==( old(name_DiceToken[this]) ) ) && decimals_DiceToken[this]==( old(decimals_DiceToken[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s366,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_DiceToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]]],IdentifierExpression[tokens_s366,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],[IdentifierExpression[to_s366,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],[IdentifierExpression[to_s366,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]]],IdentifierExpression[tokens_s366,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_DiceToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DiceToken>]]]]]]
[2020-11-25 13:56:38,323 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(DiceToken.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_DiceToken[this][msg.sender] && balances_DiceToken[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_DiceToken[this][to] >= 0 && balances_DiceToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_DiceToken[this][msg.sender] >= 0 &&  balances_DiceToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DiceToken.transfer(to, value), return == true && balances_DiceToken[this][msg.sender] == old(balances_DiceToken[this][msg.sender]) - value && balances_DiceToken[this][to] == old(balances_DiceToken[this][to]) + value && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this]) && allowed_DiceToken[this] == old(allowed_DiceToken[this]) && balances_DiceToken[this][p1] == old(balances_DiceToken[this][p1]) && symbol_DiceToken[this] == old(symbol_DiceToken[this]) && name_DiceToken[this] == old(name_DiceToken[this]) && decimals_DiceToken[this] == old(decimals_DiceToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 13:56:38,323 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_DiceToken0) ==> ( <>AP(success_transfer_DiceToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 13:56:38,330 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:56:38 PropertyContainer
[2020-11-25 13:56:38,331 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 13:56:38,331 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 13:56:38,331 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 13:56:38,331 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 13:56:38,332 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:56:38" (1/2) ...
[2020-11-25 13:56:38,332 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 13:56:38,332 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 13:56:38,344 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:56:38" (2/2) ...
[2020-11-25 13:56:38,345 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 13:56:38,345 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 13:56:38,345 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 13:56:38,345 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 13:56:38,346 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:56:38" (1/2) ...
[2020-11-25 13:56:38,396 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 13:56:38,396 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 13:56:38,396 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 13:56:38,396 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 13:56:38,396 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 13:56:38,396 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 13:56:38,396 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 13:56:38,396 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 13:56:38,397 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 13:56:38,397 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 13:56:38,397 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 13:56:38,397 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 13:56:38,397 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 13:56:38,397 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 13:56:38,397 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 13:56:38,397 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 13:56:38,397 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 13:56:38,398 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 13:56:38,398 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 13:56:38,398 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 13:56:38,398 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 13:56:38,398 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 13:56:38,398 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 13:56:38,398 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 13:56:38,398 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 13:56:38,398 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 13:56:38,398 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 13:56:38,398 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 13:56:38,398 INFO  L130     BoogieDeclarations]: Found specification of procedure DiceToken_DiceToken_NoBaseCtor__success
[2020-11-25 13:56:38,399 INFO  L130     BoogieDeclarations]: Found specification of procedure DiceToken_DiceToken
[2020-11-25 13:56:38,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure DiceToken_DiceToken
[2020-11-25 13:56:38,399 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_DiceToken
[2020-11-25 13:56:38,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_DiceToken
[2020-11-25 13:56:38,399 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_DiceToken
[2020-11-25 13:56:38,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_DiceToken
[2020-11-25 13:56:38,399 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DiceToken
[2020-11-25 13:56:38,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DiceToken
[2020-11-25 13:56:38,399 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_DiceToken
[2020-11-25 13:56:38,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_DiceToken
[2020-11-25 13:56:38,399 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DiceToken
[2020-11-25 13:56:38,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DiceToken
[2020-11-25 13:56:38,399 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_DiceToken
[2020-11-25 13:56:38,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_DiceToken
[2020-11-25 13:56:38,400 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_DiceToken__success
[2020-11-25 13:56:38,400 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_DiceToken
[2020-11-25 13:56:38,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_DiceToken
[2020-11-25 13:56:38,400 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DiceToken
[2020-11-25 13:56:38,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DiceToken
[2020-11-25 13:56:38,400 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DiceToken
[2020-11-25 13:56:38,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DiceToken
[2020-11-25 13:56:38,400 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DiceToken
[2020-11-25 13:56:38,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DiceToken
[2020-11-25 13:56:38,400 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_DiceToken
[2020-11-25 13:56:38,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_DiceToken
[2020-11-25 13:56:38,400 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 13:56:38,401 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 13:56:38,401 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 13:56:38,401 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 13:56:38,401 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 13:56:38,401 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 13:56:38,401 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 13:56:38,401 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 13:56:38,401 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 13:56:38,401 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 13:56:38,401 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DiceToken
[2020-11-25 13:56:38,401 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 13:56:38,401 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 13:56:38,401 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 13:56:38,401 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 13:56:38,402 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 13:56:38,402 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 13:56:38,402 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 13:56:38,402 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 13:56:38,402 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 13:56:38,402 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 13:56:38,402 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 13:56:38,402 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 13:56:38,402 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 13:56:38,402 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 13:56:38,402 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 13:56:38,402 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 13:56:38,402 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 13:56:38,403 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 13:56:38,403 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 13:56:38,403 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 13:56:38,403 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 13:56:38,403 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 13:56:38,403 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 13:56:38,403 INFO  L130     BoogieDeclarations]: Found specification of procedure DiceToken_DiceToken_NoBaseCtor__fail
[2020-11-25 13:56:38,403 INFO  L130     BoogieDeclarations]: Found specification of procedure DiceToken_DiceToken__success
[2020-11-25 13:56:38,403 INFO  L130     BoogieDeclarations]: Found specification of procedure DiceToken_DiceToken__fail
[2020-11-25 13:56:38,403 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_DiceToken__success
[2020-11-25 13:56:38,403 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_DiceToken__fail
[2020-11-25 13:56:38,403 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_DiceToken__success
[2020-11-25 13:56:38,404 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_DiceToken__fail
[2020-11-25 13:56:38,404 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DiceToken__success
[2020-11-25 13:56:38,404 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DiceToken__fail
[2020-11-25 13:56:38,404 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_DiceToken__success
[2020-11-25 13:56:38,404 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_DiceToken__fail
[2020-11-25 13:56:38,404 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DiceToken__success
[2020-11-25 13:56:38,404 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DiceToken__fail
[2020-11-25 13:56:38,404 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_DiceToken__success
[2020-11-25 13:56:38,404 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_DiceToken__fail
[2020-11-25 13:56:38,404 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_DiceToken__fail
[2020-11-25 13:56:38,404 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_DiceToken__success
[2020-11-25 13:56:38,404 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_DiceToken__fail
[2020-11-25 13:56:38,404 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DiceToken__success
[2020-11-25 13:56:38,405 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DiceToken__fail
[2020-11-25 13:56:38,405 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DiceToken__success
[2020-11-25 13:56:38,405 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DiceToken__fail
[2020-11-25 13:56:38,405 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DiceToken__success
[2020-11-25 13:56:38,405 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DiceToken__fail
[2020-11-25 13:56:38,405 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_DiceToken__success
[2020-11-25 13:56:38,405 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_DiceToken__fail
[2020-11-25 13:56:38,405 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 13:56:38,405 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 13:56:38,405 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 13:56:38,405 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 13:56:38,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 13:56:38,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 13:56:38,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 13:56:38,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 13:56:38,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 13:56:38,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 13:56:38,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 13:56:38,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 13:56:38,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 13:56:38,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 13:56:38,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 13:56:38,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 13:56:38,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 13:56:38,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 13:56:38,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 13:56:38,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 13:56:38,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 13:56:38,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 13:56:38,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 13:56:38,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 13:56:38,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 13:56:38,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 13:56:38,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 13:56:38,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 13:56:38,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 13:56:38,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 13:56:38,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 13:56:38,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 13:56:38,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 13:56:38,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 13:56:38,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure DiceToken_DiceToken_NoBaseCtor__fail
[2020-11-25 13:56:38,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure DiceToken_DiceToken_NoBaseCtor__success
[2020-11-25 13:56:38,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure DiceToken_DiceToken__fail
[2020-11-25 13:56:38,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure DiceToken_DiceToken__success
[2020-11-25 13:56:38,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_DiceToken__fail
[2020-11-25 13:56:38,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_DiceToken__success
[2020-11-25 13:56:38,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_DiceToken__fail
[2020-11-25 13:56:38,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_DiceToken__success
[2020-11-25 13:56:38,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DiceToken__fail
[2020-11-25 13:56:38,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DiceToken__success
[2020-11-25 13:56:38,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_DiceToken__fail
[2020-11-25 13:56:38,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_DiceToken__success
[2020-11-25 13:56:38,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DiceToken__fail
[2020-11-25 13:56:38,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DiceToken__success
[2020-11-25 13:56:38,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_DiceToken__fail
[2020-11-25 13:56:38,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_DiceToken__success
[2020-11-25 13:56:38,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_DiceToken__fail
[2020-11-25 13:56:38,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_DiceToken__success
[2020-11-25 13:56:38,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_DiceToken__fail
[2020-11-25 13:56:38,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_DiceToken__success
[2020-11-25 13:56:38,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DiceToken__fail
[2020-11-25 13:56:38,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DiceToken__success
[2020-11-25 13:56:38,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DiceToken__fail
[2020-11-25 13:56:38,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DiceToken__success
[2020-11-25 13:56:38,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DiceToken__fail
[2020-11-25 13:56:38,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DiceToken__success
[2020-11-25 13:56:38,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_DiceToken__fail
[2020-11-25 13:56:38,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_DiceToken__success
[2020-11-25 13:56:38,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 13:56:38,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 13:56:38,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 13:56:38,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 13:56:38,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 13:56:38,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 13:56:38,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 13:56:38,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 13:56:38,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 13:56:38,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 13:56:38,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 13:56:38,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 13:56:38,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 13:56:38,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 13:56:38,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DiceToken
[2020-11-25 13:56:38,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 13:56:38,412 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 13:56:38,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 13:56:38,780 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:56:38,831 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:56:38,831 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:56:38,831 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:56:38,963 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 13:56:38,963 INFO  L286             CfgBuilder]: Removed 4 assue(true) statements.
[2020-11-25 13:56:38,965 INFO  L202        PluginConnector]: Adding new model DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:56:38 BoogieIcfgContainer
[2020-11-25 13:56:38,965 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:56:38" (2/2) ...
[2020-11-25 13:56:38,965 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 13:56:38,965 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@502acff and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:56:38, skipping insertion in model container
[2020-11-25 13:56:38,965 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 13:56:38,966 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 13:56:38,966 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 13:56:38,967 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 13:56:38,967 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:56:38" (1/3) ...
[2020-11-25 13:56:38,968 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@2e0211e0 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:56:38, skipping insertion in model container
[2020-11-25 13:56:38,968 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:56:38" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 13:56:39,005 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:56:39 NWAContainer
[2020-11-25 13:56:39,005 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 13:56:39,005 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 13:56:39,005 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 13:56:39,006 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 13:56:39,006 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:56:38" (3/4) ...
[2020-11-25 13:56:39,007 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@62880c97 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:56:39, skipping insertion in model container
[2020-11-25 13:56:39,007 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:56:39" (4/4) ...
[2020-11-25 13:56:39,010 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 13:56:39,013 INFO  L110   BuchiProductObserver]: Initial RCFG 1191 locations, 1488 edges
[2020-11-25 13:56:39,014 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 13:56:39,024 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 13:56:40,178 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 13:56:40,182 INFO  L110   BuchiProductObserver]: BuchiProgram size 2832 locations, 4816 edges
[2020-11-25 13:56:40,182 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:56:40 BoogieIcfgContainer
[2020-11-25 13:56:40,182 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 13:56:40,182 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 13:56:40,182 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 13:56:40,184 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 13:56:40,184 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:56:40" (1/1) ...
[2020-11-25 13:56:40,329 INFO  L313           BlockEncoder]: Initial Icfg 2832 locations, 4816 edges
[2020-11-25 13:56:40,329 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 13:56:40,330 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 13:56:40,330 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 13:56:40,331 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 13:56:40,339 INFO  L70    emoveInfeasibleEdges]: Removed 51 edges and 11 locations because of local infeasibility
[2020-11-25 13:56:40,344 INFO  L70        RemoveSinkStates]: Removed 8 edges and 5 locations by removing sink states
[2020-11-25 13:56:40,351 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 13:56:40,355 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 13:56:40,358 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 13:56:40,359 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 13:56:40,363 INFO  L313           BlockEncoder]: Encoded RCFG 2798 locations, 4731 edges
[2020-11-25 13:56:40,364 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:56:40 BasicIcfg
[2020-11-25 13:56:40,364 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 13:56:40,364 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 13:56:40,364 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 13:56:40,367 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 13:56:40,367 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:56:40,367 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:56:38" (1/6) ...
[2020-11-25 13:56:40,369 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@578e1f1 and model type DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:56:40, skipping insertion in model container
[2020-11-25 13:56:40,369 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:56:40,369 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:56:38" (2/6) ...
[2020-11-25 13:56:40,369 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@578e1f1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:56:40, skipping insertion in model container
[2020-11-25 13:56:40,369 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:56:40,370 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:56:38" (3/6) ...
[2020-11-25 13:56:40,370 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@578e1f1 and model type DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:56:40, skipping insertion in model container
[2020-11-25 13:56:40,370 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:56:40,370 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:56:39" (4/6) ...
[2020-11-25 13:56:40,370 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@578e1f1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:56:40, skipping insertion in model container
[2020-11-25 13:56:40,370 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:56:40,370 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:56:40" (5/6) ...
[2020-11-25 13:56:40,370 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@578e1f1 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 01:56:40, skipping insertion in model container
[2020-11-25 13:56:40,370 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:56:40,370 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:56:40" (6/6) ...
[2020-11-25 13:56:40,371 INFO  L404   chiAutomizerObserver]: Analyzing ICFG DiceToken_0xcf67ced76e8356366291246a9222169f4dbdbe64_transfer-normal.bpl_BEv2
[2020-11-25 13:56:40,415 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 13:56:40,415 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 13:56:40,415 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 13:56:40,415 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 13:56:40,416 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 13:56:40,416 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 13:56:40,416 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 13:56:40,416 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 13:56:40,416 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 13:56:40,445 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2798 states.
[2020-11-25 13:56:40,493 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:56:40,493 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:56:40,493 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:56:40,502 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:56:40,502 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:56:40,502 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 13:56:40,502 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2798 states.
[2020-11-25 13:56:40,518 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:56:40,519 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:56:40,519 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:56:40,520 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:56:40,521 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_DiceToken0 := false;
[L3]                 call_transfer_DiceToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L3295]              assume null == 0;
[L3296]  CALL        call this := FreshRefGenerator__success();
[L1536]              havoc newRef;
[L1537]              assume Alloc[newRef] == false;
[L1538]              Alloc[newRef] := true;
[L1539]              assume newRef != null;
[L3296]  RET         call this := FreshRefGenerator__success();
[L3297]              assume now >= 0;
[L3298]              assume DType[this] == DiceToken;
[L3299]              assume msgvalue_MSG == 0;
[L3300]              gas := gas - 53000;
[L3301]  CALL        call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L502]               havoc __exception;
[L503]               revert := false;
[L504]   COND FALSE  !(__exception)
[L527]   CALL        call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1672]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1657]              assume msgsender_MSG != null;
[L1658]              Balance[this] := 0;
[L1672]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]  COND TRUE   revert
[L1854]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1855]  COND TRUE   revert
[L527]   RET         call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L528]               assume !revert && gas >= 0;
[L3301]  RET         call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L3302]              assume !revert && gas >= 0;

Loop:
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND TRUE   choice == 15
[L3194]              gas := gas - 21000;
[L3195]  COND FALSE  !(gas >= 0)
[L3305]  RET         call CorralChoice_DiceToken(this);

[2020-11-25 13:56:40,538 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:56:40,538 INFO  L82        PathProgramCache]: Analyzing trace with hash 888648177, now seen corresponding path program 1 times
[2020-11-25 13:56:40,543 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:56:40,562 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:56:40,601 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 13:56:40,603 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:56:40,603 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 13:56:40,709 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:56:40,723 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 13:56:40,723 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 13:56:40,725 INFO  L87              Difference]: Start difference. First operand 2798 states. Second operand 4 states.
[2020-11-25 13:56:40,964 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:56:40,964 INFO  L93              Difference]: Finished difference Result 1945 states and 2124 transitions.
[2020-11-25 13:56:40,964 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 13:56:40,965 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1945 states and 2124 transitions.
[2020-11-25 13:56:40,975 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:56:40,991 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1945 states to 1945 states and 2124 transitions.
[2020-11-25 13:56:40,991 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 13:56:40,993 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 647
[2020-11-25 13:56:40,993 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1945 states and 2124 transitions.
[2020-11-25 13:56:40,999 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:56:40,999 INFO  L728         BuchiCegarLoop]: Abstraction has 1945 states and 2124 transitions.
[2020-11-25 13:56:41,013 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1945 states and 2124 transitions.
[2020-11-25 13:56:41,051 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1945 to 1945.
[2020-11-25 13:56:41,052 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1945 states.
[2020-11-25 13:56:41,057 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1945 states to 1945 states and 2124 transitions.
[2020-11-25 13:56:41,058 INFO  L751         BuchiCegarLoop]: Abstraction has 1945 states and 2124 transitions.
[2020-11-25 13:56:41,058 INFO  L631         BuchiCegarLoop]: Abstraction has 1945 states and 2124 transitions.
[2020-11-25 13:56:41,058 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 13:56:41,058 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1945 states and 2124 transitions.
[2020-11-25 13:56:41,064 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:56:41,064 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:56:41,064 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:56:41,066 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:56:41,066 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_DiceToken0 := false;
[L3]                 call_transfer_DiceToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L3295]              assume null == 0;
[L3296]  CALL        call this := FreshRefGenerator__success();
[L1536]              havoc newRef;
[L1537]              assume Alloc[newRef] == false;
[L1538]              Alloc[newRef] := true;
[L1539]              assume newRef != null;
[L3296]  RET         call this := FreshRefGenerator__success();
[L3297]              assume now >= 0;
[L3298]              assume DType[this] == DiceToken;
[L3299]              assume msgvalue_MSG == 0;
[L3300]              gas := gas - 53000;
[L3301]  CALL        call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L502]               havoc __exception;
[L503]               revert := false;
[L504]   COND FALSE  !(__exception)
[L527]   CALL        call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1672]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1657]              assume msgsender_MSG != null;
[L1658]              Balance[this] := 0;
[L1672]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]  COND FALSE  !(revert)
[L1854]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1855]  COND TRUE   revert
[L527]   RET         call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L528]               assume !revert && gas >= 0;
[L3301]  RET         call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L3302]              assume !revert && gas >= 0;
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND TRUE   choice == 12
[L3212]              gas := gas - 21000;
[L3213]  COND TRUE   gas >= 0
[L3214]              assume tokens_s366 >= 0 && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              assume msgvalue_MSG == 0;
[L3216]  CALL        call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s366) && msgsender_MSG != to_s366) && tokens_s366 <= balances_DiceToken[this][msgsender_MSG]) && balances_DiceToken[this][to_s366] + tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s366 >= 0) && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s366] >= 0) && balances_DiceToken[this][to_s366] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][msgsender_MSG] >= 0) && balances_DiceToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_DiceToken0 := true;
[L3]                 call_transfer_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L666]               havoc __exception;
[L667]               revert := false;
[L668]   COND FALSE  !(__exception)
[L691]   CALL        call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L1922]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1603]  COND TRUE   !(b_s45 <= a_s45)
[L1604]              revert := true;
[L1922]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1923]  COND TRUE   revert
[L691]   RET         call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L692]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((success_s366 == true && balances_DiceToken[this][msgsender_MSG] == old(balances_DiceToken[this][msgsender_MSG]) - tokens_s366) && balances_DiceToken[this][to_s366] == old(balances_DiceToken[this][to_s366]) + tokens_s366) && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this])) && allowed_DiceToken[this] == old(allowed_DiceToken[this])) && balances_DiceToken[this][p1] == old(balances_DiceToken[this][p1])) && symbol_DiceToken[this] == old(symbol_DiceToken[this])) && name_DiceToken[this] == old(name_DiceToken[this])) && decimals_DiceToken[this] == old(decimals_DiceToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L3216]  RET         call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3305]  RET         call CorralChoice_DiceToken(this);

Loop:
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND TRUE   choice == 12
[L3212]              gas := gas - 21000;
[L3213]  COND TRUE   gas >= 0
[L3214]              assume tokens_s366 >= 0 && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              assume msgvalue_MSG == 0;
[L3216]  CALL        call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s366) && msgsender_MSG != to_s366) && tokens_s366 <= balances_DiceToken[this][msgsender_MSG]) && balances_DiceToken[this][to_s366] + tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s366 >= 0) && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s366] >= 0) && balances_DiceToken[this][to_s366] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][msgsender_MSG] >= 0) && balances_DiceToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_DiceToken0 := true;
[L3]                 call_transfer_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L666]               havoc __exception;
[L667]               revert := false;
[L668]   COND FALSE  !(__exception)
[L691]   CALL        call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L1922]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1603]  COND TRUE   !(b_s45 <= a_s45)
[L1604]              revert := true;
[L1922]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1923]  COND TRUE   revert
[L691]   RET         call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L692]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((success_s366 == true && balances_DiceToken[this][msgsender_MSG] == old(balances_DiceToken[this][msgsender_MSG]) - tokens_s366) && balances_DiceToken[this][to_s366] == old(balances_DiceToken[this][to_s366]) + tokens_s366) && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this])) && allowed_DiceToken[this] == old(allowed_DiceToken[this])) && balances_DiceToken[this][p1] == old(balances_DiceToken[this][p1])) && symbol_DiceToken[this] == old(symbol_DiceToken[this])) && name_DiceToken[this] == old(name_DiceToken[this])) && decimals_DiceToken[this] == old(decimals_DiceToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L3216]  RET         call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3305]  RET         call CorralChoice_DiceToken(this);

[2020-11-25 13:56:41,070 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:56:41,070 INFO  L82        PathProgramCache]: Analyzing trace with hash -1273127330, now seen corresponding path program 1 times
[2020-11-25 13:56:41,071 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:56:41,082 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:56:41,103 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 13:56:41,103 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:56:41,103 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 13:56:41,104 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:56:41,105 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 13:56:41,105 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 13:56:41,105 INFO  L87              Difference]: Start difference. First operand 1945 states and 2124 transitions. cyclomatic complexity: 181 Second operand 4 states.
[2020-11-25 13:56:41,433 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:56:41,434 INFO  L93              Difference]: Finished difference Result 2829 states and 3208 transitions.
[2020-11-25 13:56:41,435 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 13:56:41,436 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2829 states and 3208 transitions.
[2020-11-25 13:56:41,459 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 13:56:41,483 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2829 states to 2737 states and 3108 transitions.
[2020-11-25 13:56:41,483 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 877
[2020-11-25 13:56:41,485 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 887
[2020-11-25 13:56:41,485 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2737 states and 3108 transitions.
[2020-11-25 13:56:41,491 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:56:41,491 INFO  L728         BuchiCegarLoop]: Abstraction has 2737 states and 3108 transitions.
[2020-11-25 13:56:41,494 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2737 states and 3108 transitions.
[2020-11-25 13:56:41,522 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2737 to 1985.
[2020-11-25 13:56:41,522 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1985 states.
[2020-11-25 13:56:41,526 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1985 states to 1985 states and 2124 transitions.
[2020-11-25 13:56:41,527 INFO  L751         BuchiCegarLoop]: Abstraction has 1985 states and 2124 transitions.
[2020-11-25 13:56:41,527 INFO  L631         BuchiCegarLoop]: Abstraction has 1985 states and 2124 transitions.
[2020-11-25 13:56:41,527 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 13:56:41,527 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1985 states and 2124 transitions.
[2020-11-25 13:56:41,533 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:56:41,533 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:56:41,533 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:56:41,535 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:56:41,535 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_DiceToken0 := false;
[L3]                 call_transfer_DiceToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L3295]              assume null == 0;
[L3296]  CALL        call this := FreshRefGenerator__success();
[L1536]              havoc newRef;
[L1537]              assume Alloc[newRef] == false;
[L1538]              Alloc[newRef] := true;
[L1539]              assume newRef != null;
[L3296]  RET         call this := FreshRefGenerator__success();
[L3297]              assume now >= 0;
[L3298]              assume DType[this] == DiceToken;
[L3299]              assume msgvalue_MSG == 0;
[L3300]              gas := gas - 53000;
[L3301]  CALL        call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L502]               havoc __exception;
[L503]               revert := false;
[L504]   COND FALSE  !(__exception)
[L527]   CALL        call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1672]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1657]              assume msgsender_MSG != null;
[L1658]              Balance[this] := 0;
[L1672]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]  COND FALSE  !(revert)
[L1854]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1855]  COND FALSE  !(revert)
[L1858]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1692]              assume msgsender_MSG != null;
[L1693]              Balance[this] := 0;
[L1694]              owner_Owned[this] := null;
[L1695]              newOwner_Owned[this] := null;
[L1697]              owner_Owned[this] := msgsender_MSG;
[L1710]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]  COND FALSE  !(revert)
[L1858]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1859]  COND FALSE  !(revert)
[L1862]  CALL        call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1812]              assume msgsender_MSG != null;
[L1813]              Balance[this] := 0;
[L1814]              symbol_DiceToken[this] := 31320490;
[L1815]              name_DiceToken[this] := 31320490;
[L1816]              decimals_DiceToken[this] := 0;
[L1817]              _totalSupply_DiceToken[this] := 0;
[L1818]              balances_DiceToken[this] := zeroRefintArr();
[L1819]              sum_balances0[this] := 0;
[L1820]              allowed_DiceToken[this] := zeroRefRefintArr();
[L1821]              sum_allowed1[this] := 0;
[L1823]              decimals_DiceToken[this] := 18;
[L1824]              symbol_DiceToken[this] := 884691297;
[L1825]              name_DiceToken[this] := 869301625;
[L1826]              __var_2 := decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]              _totalSupply_DiceToken[this] := 30678 * (nonlinearPow(10, decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1828]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][owner_Owned[this]];
[L1829]              balances_DiceToken[this][owner_Owned[this]] := _totalSupply_DiceToken[this];
[L1830]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][owner_Owned[this]];
[L1831]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1862]  RET         call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1863]  COND FALSE  !(revert)
[L527]   RET         call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L528]               assume !revert && gas >= 0;
[L3301]  RET         call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L3302]              assume !revert && gas >= 0;
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND TRUE   choice == 12
[L3212]              gas := gas - 21000;
[L3213]  COND TRUE   gas >= 0
[L3214]              assume tokens_s366 >= 0 && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              assume msgvalue_MSG == 0;
[L3216]  CALL        call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s366) && msgsender_MSG != to_s366) && tokens_s366 <= balances_DiceToken[this][msgsender_MSG]) && balances_DiceToken[this][to_s366] + tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s366 >= 0) && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s366] >= 0) && balances_DiceToken[this][to_s366] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][msgsender_MSG] >= 0) && balances_DiceToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_DiceToken0 := true;
[L3]                 call_transfer_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L666]               havoc __exception;
[L667]               revert := false;
[L668]   COND TRUE   __exception
[L669]               __tmp__Balance := Balance;
[L670]               __tmp__DType := DType;
[L671]               __tmp__Alloc := Alloc;
[L672]               __tmp__balance_ADDR := balance_ADDR;
[L673]               __tmp__M_Ref_int := M_Ref_int;
[L674]               __tmp__sum_balances0 := sum_balances0;
[L675]               __tmp__alloc_allowed_DiceToken_lvl0 := alloc_allowed_DiceToken_lvl0;
[L676]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L677]               __tmp__sum_allowed1 := sum_allowed1;
[L678]               __tmp__Length := Length;
[L679]               __tmp__now := now;
[L680]               __tmp__owner_Owned := owner_Owned;
[L681]               __tmp__newOwner_Owned := newOwner_Owned;
[L682]               __tmp__symbol_DiceToken := symbol_DiceToken;
[L683]               __tmp__name_DiceToken := name_DiceToken;
[L684]               __tmp__decimals_DiceToken := decimals_DiceToken;
[L685]               __tmp___totalSupply_DiceToken := _totalSupply_DiceToken;
[L686]               __tmp__balances_DiceToken := balances_DiceToken;
[L687]               __tmp__allowed_DiceToken := allowed_DiceToken;
[L688]   CALL        call success_s366 := transfer~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L1900]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1594]  COND TRUE   !(b_s45 <= a_s45)
[L1595]              revert := true;
[L1900]  RET         call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1901]  COND TRUE   revert
[L688]   RET         call success_s366 := transfer~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L689]               assume revert || gas < 0;
[L3216]  RET         call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3305]  RET         call CorralChoice_DiceToken(this);

Loop:
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND TRUE   choice == 12
[L3212]              gas := gas - 21000;
[L3213]  COND TRUE   gas >= 0
[L3214]              assume tokens_s366 >= 0 && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              assume msgvalue_MSG == 0;
[L3216]  CALL        call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s366) && msgsender_MSG != to_s366) && tokens_s366 <= balances_DiceToken[this][msgsender_MSG]) && balances_DiceToken[this][to_s366] + tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s366 >= 0) && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s366] >= 0) && balances_DiceToken[this][to_s366] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][msgsender_MSG] >= 0) && balances_DiceToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_DiceToken0 := true;
[L3]                 call_transfer_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L666]               havoc __exception;
[L667]               revert := false;
[L668]   COND TRUE   __exception
[L669]               __tmp__Balance := Balance;
[L670]               __tmp__DType := DType;
[L671]               __tmp__Alloc := Alloc;
[L672]               __tmp__balance_ADDR := balance_ADDR;
[L673]               __tmp__M_Ref_int := M_Ref_int;
[L674]               __tmp__sum_balances0 := sum_balances0;
[L675]               __tmp__alloc_allowed_DiceToken_lvl0 := alloc_allowed_DiceToken_lvl0;
[L676]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L677]               __tmp__sum_allowed1 := sum_allowed1;
[L678]               __tmp__Length := Length;
[L679]               __tmp__now := now;
[L680]               __tmp__owner_Owned := owner_Owned;
[L681]               __tmp__newOwner_Owned := newOwner_Owned;
[L682]               __tmp__symbol_DiceToken := symbol_DiceToken;
[L683]               __tmp__name_DiceToken := name_DiceToken;
[L684]               __tmp__decimals_DiceToken := decimals_DiceToken;
[L685]               __tmp___totalSupply_DiceToken := _totalSupply_DiceToken;
[L686]               __tmp__balances_DiceToken := balances_DiceToken;
[L687]               __tmp__allowed_DiceToken := allowed_DiceToken;
[L688]   CALL        call success_s366 := transfer~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L1900]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1594]  COND TRUE   !(b_s45 <= a_s45)
[L1595]              revert := true;
[L1900]  RET         call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1901]  COND TRUE   revert
[L688]   RET         call success_s366 := transfer~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L689]               assume revert || gas < 0;
[L3216]  RET         call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3305]  RET         call CorralChoice_DiceToken(this);

[2020-11-25 13:56:41,539 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:56:41,539 INFO  L82        PathProgramCache]: Analyzing trace with hash -1944251003, now seen corresponding path program 1 times
[2020-11-25 13:56:41,540 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:56:41,556 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:56:41,618 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 13:56:41,619 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:56:41,619 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 13:56:41,619 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:56:41,619 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 13:56:41,619 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 13:56:41,620 INFO  L87              Difference]: Start difference. First operand 1985 states and 2124 transitions. cyclomatic complexity: 141 Second operand 7 states.
[2020-11-25 13:56:42,471 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:56:42,471 INFO  L93              Difference]: Finished difference Result 2163 states and 2320 transitions.
[2020-11-25 13:56:42,472 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 13:56:42,472 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2163 states and 2320 transitions.
[2020-11-25 13:56:42,480 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:56:42,487 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2163 states to 2163 states and 2320 transitions.
[2020-11-25 13:56:42,487 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 734
[2020-11-25 13:56:42,488 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 734
[2020-11-25 13:56:42,488 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2163 states and 2320 transitions.
[2020-11-25 13:56:42,490 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:56:42,490 INFO  L728         BuchiCegarLoop]: Abstraction has 2163 states and 2320 transitions.
[2020-11-25 13:56:42,492 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2163 states and 2320 transitions.
[2020-11-25 13:56:42,510 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2163 to 2041.
[2020-11-25 13:56:42,510 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2041 states.
[2020-11-25 13:56:42,513 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2041 states to 2041 states and 2188 transitions.
[2020-11-25 13:56:42,513 INFO  L751         BuchiCegarLoop]: Abstraction has 2041 states and 2188 transitions.
[2020-11-25 13:56:42,513 INFO  L631         BuchiCegarLoop]: Abstraction has 2041 states and 2188 transitions.
[2020-11-25 13:56:42,513 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 13:56:42,513 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2041 states and 2188 transitions.
[2020-11-25 13:56:42,517 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:56:42,517 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:56:42,517 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:56:42,519 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:56:42,519 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_DiceToken0 := false;
[L3]                 call_transfer_DiceToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L3295]              assume null == 0;
[L3296]  CALL        call this := FreshRefGenerator__success();
[L1536]              havoc newRef;
[L1537]              assume Alloc[newRef] == false;
[L1538]              Alloc[newRef] := true;
[L1539]              assume newRef != null;
[L3296]  RET         call this := FreshRefGenerator__success();
[L3297]              assume now >= 0;
[L3298]              assume DType[this] == DiceToken;
[L3299]              assume msgvalue_MSG == 0;
[L3300]              gas := gas - 53000;
[L3301]  CALL        call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L502]               havoc __exception;
[L503]               revert := false;
[L504]   COND FALSE  !(__exception)
[L527]   CALL        call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1672]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1657]              assume msgsender_MSG != null;
[L1658]              Balance[this] := 0;
[L1672]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]  COND FALSE  !(revert)
[L1854]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1855]  COND FALSE  !(revert)
[L1858]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1692]              assume msgsender_MSG != null;
[L1693]              Balance[this] := 0;
[L1694]              owner_Owned[this] := null;
[L1695]              newOwner_Owned[this] := null;
[L1697]              owner_Owned[this] := msgsender_MSG;
[L1710]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]  COND FALSE  !(revert)
[L1858]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1859]  COND FALSE  !(revert)
[L1862]  CALL        call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1812]              assume msgsender_MSG != null;
[L1813]              Balance[this] := 0;
[L1814]              symbol_DiceToken[this] := 31320490;
[L1815]              name_DiceToken[this] := 31320490;
[L1816]              decimals_DiceToken[this] := 0;
[L1817]              _totalSupply_DiceToken[this] := 0;
[L1818]              balances_DiceToken[this] := zeroRefintArr();
[L1819]              sum_balances0[this] := 0;
[L1820]              allowed_DiceToken[this] := zeroRefRefintArr();
[L1821]              sum_allowed1[this] := 0;
[L1823]              decimals_DiceToken[this] := 18;
[L1824]              symbol_DiceToken[this] := 884691297;
[L1825]              name_DiceToken[this] := 869301625;
[L1826]              __var_2 := decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]              _totalSupply_DiceToken[this] := 30678 * (nonlinearPow(10, decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1828]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][owner_Owned[this]];
[L1829]              balances_DiceToken[this][owner_Owned[this]] := _totalSupply_DiceToken[this];
[L1830]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][owner_Owned[this]];
[L1831]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1862]  RET         call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1863]  COND FALSE  !(revert)
[L527]   RET         call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L528]               assume !revert && gas >= 0;
[L3301]  RET         call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L3302]              assume !revert && gas >= 0;
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND TRUE   choice == 12
[L3212]              gas := gas - 21000;
[L3213]  COND TRUE   gas >= 0
[L3214]              assume tokens_s366 >= 0 && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              assume msgvalue_MSG == 0;
[L3216]  CALL        call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s366) && msgsender_MSG != to_s366) && tokens_s366 <= balances_DiceToken[this][msgsender_MSG]) && balances_DiceToken[this][to_s366] + tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s366 >= 0) && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s366] >= 0) && balances_DiceToken[this][to_s366] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][msgsender_MSG] >= 0) && balances_DiceToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_DiceToken0 := true;
[L3]                 call_transfer_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L666]               havoc __exception;
[L667]               revert := false;
[L668]   COND FALSE  !(__exception)
[L691]   CALL        call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L1922]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1603]  COND FALSE  !(!(b_s45 <= a_s45))
[L1607]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1922]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1923]  COND FALSE  !(revert)
[L1926]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][msgsender_MSG];
[L1927]              balances_DiceToken[this][msgsender_MSG] := __var_4;
[L1928]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][msgsender_MSG];
[L1929]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1585]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1586]  COND FALSE  !(!(c_s23 >= a_s23))
[L1929]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1930]  COND FALSE  !(revert)
[L1933]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][to_s366];
[L1934]              balances_DiceToken[this][to_s366] := __var_5;
[L1935]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][to_s366];
[L1936]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1937]              success_s366 := true;
[L691]   RET         call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L692]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((success_s366 == true && balances_DiceToken[this][msgsender_MSG] == old(balances_DiceToken[this][msgsender_MSG]) - tokens_s366) && balances_DiceToken[this][to_s366] == old(balances_DiceToken[this][to_s366]) + tokens_s366) && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this])) && allowed_DiceToken[this] == old(allowed_DiceToken[this])) && balances_DiceToken[this][p1] == old(balances_DiceToken[this][p1])) && symbol_DiceToken[this] == old(symbol_DiceToken[this])) && name_DiceToken[this] == old(name_DiceToken[this])) && decimals_DiceToken[this] == old(decimals_DiceToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L3216]  RET         call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3305]  RET         call CorralChoice_DiceToken(this);

Loop:
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND TRUE   choice == 12
[L3212]              gas := gas - 21000;
[L3213]  COND TRUE   gas >= 0
[L3214]              assume tokens_s366 >= 0 && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              assume msgvalue_MSG == 0;
[L3216]  CALL        call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s366) && msgsender_MSG != to_s366) && tokens_s366 <= balances_DiceToken[this][msgsender_MSG]) && balances_DiceToken[this][to_s366] + tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s366 >= 0) && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s366] >= 0) && balances_DiceToken[this][to_s366] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][msgsender_MSG] >= 0) && balances_DiceToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_DiceToken0 := true;
[L3]                 call_transfer_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L666]               havoc __exception;
[L667]               revert := false;
[L668]   COND FALSE  !(__exception)
[L691]   CALL        call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L1922]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1603]  COND FALSE  !(!(b_s45 <= a_s45))
[L1607]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1922]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1923]  COND FALSE  !(revert)
[L1926]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][msgsender_MSG];
[L1927]              balances_DiceToken[this][msgsender_MSG] := __var_4;
[L1928]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][msgsender_MSG];
[L1929]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1585]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1586]  COND FALSE  !(!(c_s23 >= a_s23))
[L1929]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1930]  COND FALSE  !(revert)
[L1933]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][to_s366];
[L1934]              balances_DiceToken[this][to_s366] := __var_5;
[L1935]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][to_s366];
[L1936]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1937]              success_s366 := true;
[L691]   RET         call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L692]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((success_s366 == true && balances_DiceToken[this][msgsender_MSG] == old(balances_DiceToken[this][msgsender_MSG]) - tokens_s366) && balances_DiceToken[this][to_s366] == old(balances_DiceToken[this][to_s366]) + tokens_s366) && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this])) && allowed_DiceToken[this] == old(allowed_DiceToken[this])) && balances_DiceToken[this][p1] == old(balances_DiceToken[this][p1])) && symbol_DiceToken[this] == old(symbol_DiceToken[this])) && name_DiceToken[this] == old(name_DiceToken[this])) && decimals_DiceToken[this] == old(decimals_DiceToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L3216]  RET         call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3305]  RET         call CorralChoice_DiceToken(this);

[2020-11-25 13:56:42,522 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:56:42,522 INFO  L82        PathProgramCache]: Analyzing trace with hash 1110382921, now seen corresponding path program 1 times
[2020-11-25 13:56:42,523 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:56:42,625 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:56:43,282 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 13:56:43,282 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:56:43,283 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [22] imperfect sequences [] total 22
[2020-11-25 13:56:43,283 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:56:43,283 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 23 interpolants.
[2020-11-25 13:56:43,283 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=52, Invalid=454, Unknown=0, NotChecked=0, Total=506
[2020-11-25 13:56:43,283 INFO  L87              Difference]: Start difference. First operand 2041 states and 2188 transitions. cyclomatic complexity: 149 Second operand 23 states.
[2020-11-25 13:56:47,255 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:56:47,256 INFO  L93              Difference]: Finished difference Result 2122 states and 2295 transitions.
[2020-11-25 13:56:47,256 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-11-25 13:56:47,256 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2122 states and 2295 transitions.
[2020-11-25 13:56:47,262 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 13:56:47,289 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2122 states to 2122 states and 2295 transitions.
[2020-11-25 13:56:47,289 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 711
[2020-11-25 13:56:47,290 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 711
[2020-11-25 13:56:47,290 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2122 states and 2295 transitions.
[2020-11-25 13:56:47,294 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:56:47,295 INFO  L728         BuchiCegarLoop]: Abstraction has 2122 states and 2295 transitions.
[2020-11-25 13:56:47,298 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2122 states and 2295 transitions.
[2020-11-25 13:56:47,314 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2122 to 2105.
[2020-11-25 13:56:47,314 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2105 states.
[2020-11-25 13:56:47,316 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2105 states to 2105 states and 2262 transitions.
[2020-11-25 13:56:47,316 INFO  L751         BuchiCegarLoop]: Abstraction has 2105 states and 2262 transitions.
[2020-11-25 13:56:47,316 INFO  L631         BuchiCegarLoop]: Abstraction has 2105 states and 2262 transitions.
[2020-11-25 13:56:47,316 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 13:56:47,316 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2105 states and 2262 transitions.
[2020-11-25 13:56:47,320 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:56:47,320 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:56:47,320 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:56:47,322 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:56:47,322 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_DiceToken0 := false;
[L3]                 call_transfer_DiceToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L3295]              assume null == 0;
[L3296]  CALL        call this := FreshRefGenerator__success();
[L1536]              havoc newRef;
[L1537]              assume Alloc[newRef] == false;
[L1538]              Alloc[newRef] := true;
[L1539]              assume newRef != null;
[L3296]  RET         call this := FreshRefGenerator__success();
[L3297]              assume now >= 0;
[L3298]              assume DType[this] == DiceToken;
[L3299]              assume msgvalue_MSG == 0;
[L3300]              gas := gas - 53000;
[L3301]  CALL        call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L502]               havoc __exception;
[L503]               revert := false;
[L504]   COND FALSE  !(__exception)
[L527]   CALL        call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1672]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1657]              assume msgsender_MSG != null;
[L1658]              Balance[this] := 0;
[L1672]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]  COND FALSE  !(revert)
[L1854]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1855]  COND FALSE  !(revert)
[L1858]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1692]              assume msgsender_MSG != null;
[L1693]              Balance[this] := 0;
[L1694]              owner_Owned[this] := null;
[L1695]              newOwner_Owned[this] := null;
[L1697]              owner_Owned[this] := msgsender_MSG;
[L1710]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]  COND FALSE  !(revert)
[L1858]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1859]  COND FALSE  !(revert)
[L1862]  CALL        call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1812]              assume msgsender_MSG != null;
[L1813]              Balance[this] := 0;
[L1814]              symbol_DiceToken[this] := 31320490;
[L1815]              name_DiceToken[this] := 31320490;
[L1816]              decimals_DiceToken[this] := 0;
[L1817]              _totalSupply_DiceToken[this] := 0;
[L1818]              balances_DiceToken[this] := zeroRefintArr();
[L1819]              sum_balances0[this] := 0;
[L1820]              allowed_DiceToken[this] := zeroRefRefintArr();
[L1821]              sum_allowed1[this] := 0;
[L1823]              decimals_DiceToken[this] := 18;
[L1824]              symbol_DiceToken[this] := 884691297;
[L1825]              name_DiceToken[this] := 869301625;
[L1826]              __var_2 := decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]              _totalSupply_DiceToken[this] := 30678 * (nonlinearPow(10, decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1828]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][owner_Owned[this]];
[L1829]              balances_DiceToken[this][owner_Owned[this]] := _totalSupply_DiceToken[this];
[L1830]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][owner_Owned[this]];
[L1831]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1862]  RET         call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1863]  COND FALSE  !(revert)
[L527]   RET         call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L528]               assume !revert && gas >= 0;
[L3301]  RET         call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L3302]              assume !revert && gas >= 0;
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND TRUE   choice == 12
[L3212]              gas := gas - 21000;
[L3213]  COND TRUE   gas >= 0
[L3214]              assume tokens_s366 >= 0 && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              assume msgvalue_MSG == 0;
[L3216]  CALL        call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s366) && msgsender_MSG != to_s366) && tokens_s366 <= balances_DiceToken[this][msgsender_MSG]) && balances_DiceToken[this][to_s366] + tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s366 >= 0) && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s366] >= 0) && balances_DiceToken[this][to_s366] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][msgsender_MSG] >= 0) && balances_DiceToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_DiceToken0 := true;
[L3]                 call_transfer_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L666]               havoc __exception;
[L667]               revert := false;
[L668]   COND TRUE   __exception
[L669]               __tmp__Balance := Balance;
[L670]               __tmp__DType := DType;
[L671]               __tmp__Alloc := Alloc;
[L672]               __tmp__balance_ADDR := balance_ADDR;
[L673]               __tmp__M_Ref_int := M_Ref_int;
[L674]               __tmp__sum_balances0 := sum_balances0;
[L675]               __tmp__alloc_allowed_DiceToken_lvl0 := alloc_allowed_DiceToken_lvl0;
[L676]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L677]               __tmp__sum_allowed1 := sum_allowed1;
[L678]               __tmp__Length := Length;
[L679]               __tmp__now := now;
[L680]               __tmp__owner_Owned := owner_Owned;
[L681]               __tmp__newOwner_Owned := newOwner_Owned;
[L682]               __tmp__symbol_DiceToken := symbol_DiceToken;
[L683]               __tmp__name_DiceToken := name_DiceToken;
[L684]               __tmp__decimals_DiceToken := decimals_DiceToken;
[L685]               __tmp___totalSupply_DiceToken := _totalSupply_DiceToken;
[L686]               __tmp__balances_DiceToken := balances_DiceToken;
[L687]               __tmp__allowed_DiceToken := allowed_DiceToken;
[L688]   CALL        call success_s366 := transfer~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L1900]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1594]  COND FALSE  !(!(b_s45 <= a_s45))
[L1598]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1900]  RET         call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1901]  COND FALSE  !(revert)
[L1904]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_DiceToken[this][msgsender_MSG];
[L1905]              __tmp__balances_DiceToken[this][msgsender_MSG] := __var_4;
[L1906]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_DiceToken[this][msgsender_MSG];
[L1907]  CALL        call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][to_s366], tokens_s366);
[L1576]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1577]  COND TRUE   !(c_s23 >= a_s23)
[L1578]              revert := true;
[L1907]  RET         call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][to_s366], tokens_s366);
[L1908]  COND TRUE   revert
[L688]   RET         call success_s366 := transfer~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L689]               assume revert || gas < 0;
[L3216]  RET         call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3305]  RET         call CorralChoice_DiceToken(this);

Loop:
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND TRUE   choice == 12
[L3212]              gas := gas - 21000;
[L3213]  COND TRUE   gas >= 0
[L3214]              assume tokens_s366 >= 0 && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              assume msgvalue_MSG == 0;
[L3216]  CALL        call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s366) && msgsender_MSG != to_s366) && tokens_s366 <= balances_DiceToken[this][msgsender_MSG]) && balances_DiceToken[this][to_s366] + tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s366 >= 0) && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s366] >= 0) && balances_DiceToken[this][to_s366] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][msgsender_MSG] >= 0) && balances_DiceToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_DiceToken0 := true;
[L3]                 call_transfer_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L666]               havoc __exception;
[L667]               revert := false;
[L668]   COND TRUE   __exception
[L669]               __tmp__Balance := Balance;
[L670]               __tmp__DType := DType;
[L671]               __tmp__Alloc := Alloc;
[L672]               __tmp__balance_ADDR := balance_ADDR;
[L673]               __tmp__M_Ref_int := M_Ref_int;
[L674]               __tmp__sum_balances0 := sum_balances0;
[L675]               __tmp__alloc_allowed_DiceToken_lvl0 := alloc_allowed_DiceToken_lvl0;
[L676]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L677]               __tmp__sum_allowed1 := sum_allowed1;
[L678]               __tmp__Length := Length;
[L679]               __tmp__now := now;
[L680]               __tmp__owner_Owned := owner_Owned;
[L681]               __tmp__newOwner_Owned := newOwner_Owned;
[L682]               __tmp__symbol_DiceToken := symbol_DiceToken;
[L683]               __tmp__name_DiceToken := name_DiceToken;
[L684]               __tmp__decimals_DiceToken := decimals_DiceToken;
[L685]               __tmp___totalSupply_DiceToken := _totalSupply_DiceToken;
[L686]               __tmp__balances_DiceToken := balances_DiceToken;
[L687]               __tmp__allowed_DiceToken := allowed_DiceToken;
[L688]   CALL        call success_s366 := transfer~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L1900]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1594]  COND FALSE  !(!(b_s45 <= a_s45))
[L1598]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1900]  RET         call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1901]  COND FALSE  !(revert)
[L1904]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_DiceToken[this][msgsender_MSG];
[L1905]              __tmp__balances_DiceToken[this][msgsender_MSG] := __var_4;
[L1906]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_DiceToken[this][msgsender_MSG];
[L1907]  CALL        call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][to_s366], tokens_s366);
[L1576]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1577]  COND TRUE   !(c_s23 >= a_s23)
[L1578]              revert := true;
[L1907]  RET         call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][to_s366], tokens_s366);
[L1908]  COND TRUE   revert
[L688]   RET         call success_s366 := transfer~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L689]               assume revert || gas < 0;
[L3216]  RET         call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3305]  RET         call CorralChoice_DiceToken(this);

[2020-11-25 13:56:47,329 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:56:47,330 INFO  L82        PathProgramCache]: Analyzing trace with hash 2007062937, now seen corresponding path program 1 times
[2020-11-25 13:56:47,330 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:56:47,338 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:56:47,381 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 13:56:47,382 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:56:47,382 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 13:56:47,382 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:56:47,382 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 13:56:47,382 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=16, Invalid=56, Unknown=0, NotChecked=0, Total=72
[2020-11-25 13:56:47,382 INFO  L87              Difference]: Start difference. First operand 2105 states and 2262 transitions. cyclomatic complexity: 161 Second operand 9 states.
[2020-11-25 13:56:47,894 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:56:47,894 INFO  L93              Difference]: Finished difference Result 2211 states and 2382 transitions.
[2020-11-25 13:56:47,894 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 13:56:47,894 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2211 states and 2382 transitions.
[2020-11-25 13:56:47,899 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 13:56:47,904 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2211 states to 2211 states and 2382 transitions.
[2020-11-25 13:56:47,904 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 757
[2020-11-25 13:56:47,905 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 757
[2020-11-25 13:56:47,905 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2211 states and 2382 transitions.
[2020-11-25 13:56:47,906 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:56:47,906 INFO  L728         BuchiCegarLoop]: Abstraction has 2211 states and 2382 transitions.
[2020-11-25 13:56:47,908 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2211 states and 2382 transitions.
[2020-11-25 13:56:47,922 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2211 to 2142.
[2020-11-25 13:56:47,922 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2142 states.
[2020-11-25 13:56:47,924 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2142 states to 2142 states and 2296 transitions.
[2020-11-25 13:56:47,924 INFO  L751         BuchiCegarLoop]: Abstraction has 2142 states and 2296 transitions.
[2020-11-25 13:56:47,924 INFO  L631         BuchiCegarLoop]: Abstraction has 2142 states and 2296 transitions.
[2020-11-25 13:56:47,924 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 13:56:47,925 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2142 states and 2296 transitions.
[2020-11-25 13:56:47,928 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:56:47,928 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:56:47,928 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:56:47,930 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:56:47,930 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_DiceToken0 := false;
[L3]                 call_transfer_DiceToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L3295]              assume null == 0;
[L3296]  CALL        call this := FreshRefGenerator__success();
[L1536]              havoc newRef;
[L1537]              assume Alloc[newRef] == false;
[L1538]              Alloc[newRef] := true;
[L1539]              assume newRef != null;
[L3296]  RET         call this := FreshRefGenerator__success();
[L3297]              assume now >= 0;
[L3298]              assume DType[this] == DiceToken;
[L3299]              assume msgvalue_MSG == 0;
[L3300]              gas := gas - 53000;
[L3301]  CALL        call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L502]               havoc __exception;
[L503]               revert := false;
[L504]   COND FALSE  !(__exception)
[L527]   CALL        call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1672]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1657]              assume msgsender_MSG != null;
[L1658]              Balance[this] := 0;
[L1672]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]  COND FALSE  !(revert)
[L1854]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1855]  COND FALSE  !(revert)
[L1858]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1692]              assume msgsender_MSG != null;
[L1693]              Balance[this] := 0;
[L1694]              owner_Owned[this] := null;
[L1695]              newOwner_Owned[this] := null;
[L1697]              owner_Owned[this] := msgsender_MSG;
[L1710]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]  COND FALSE  !(revert)
[L1858]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1859]  COND FALSE  !(revert)
[L1862]  CALL        call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1812]              assume msgsender_MSG != null;
[L1813]              Balance[this] := 0;
[L1814]              symbol_DiceToken[this] := 31320490;
[L1815]              name_DiceToken[this] := 31320490;
[L1816]              decimals_DiceToken[this] := 0;
[L1817]              _totalSupply_DiceToken[this] := 0;
[L1818]              balances_DiceToken[this] := zeroRefintArr();
[L1819]              sum_balances0[this] := 0;
[L1820]              allowed_DiceToken[this] := zeroRefRefintArr();
[L1821]              sum_allowed1[this] := 0;
[L1823]              decimals_DiceToken[this] := 18;
[L1824]              symbol_DiceToken[this] := 884691297;
[L1825]              name_DiceToken[this] := 869301625;
[L1826]              __var_2 := decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]              _totalSupply_DiceToken[this] := 30678 * (nonlinearPow(10, decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1828]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][owner_Owned[this]];
[L1829]              balances_DiceToken[this][owner_Owned[this]] := _totalSupply_DiceToken[this];
[L1830]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][owner_Owned[this]];
[L1831]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1862]  RET         call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1863]  COND FALSE  !(revert)
[L527]   RET         call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L528]               assume !revert && gas >= 0;
[L3301]  RET         call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L3302]              assume !revert && gas >= 0;
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND TRUE   choice == 12
[L3212]              gas := gas - 21000;
[L3213]  COND TRUE   gas >= 0
[L3214]              assume tokens_s366 >= 0 && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              assume msgvalue_MSG == 0;
[L3216]  CALL        call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s366) && msgsender_MSG != to_s366) && tokens_s366 <= balances_DiceToken[this][msgsender_MSG]) && balances_DiceToken[this][to_s366] + tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s366 >= 0) && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s366] >= 0) && balances_DiceToken[this][to_s366] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][msgsender_MSG] >= 0) && balances_DiceToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_DiceToken0 := true;
[L3]                 call_transfer_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L666]               havoc __exception;
[L667]               revert := false;
[L668]   COND TRUE   __exception
[L669]               __tmp__Balance := Balance;
[L670]               __tmp__DType := DType;
[L671]               __tmp__Alloc := Alloc;
[L672]               __tmp__balance_ADDR := balance_ADDR;
[L673]               __tmp__M_Ref_int := M_Ref_int;
[L674]               __tmp__sum_balances0 := sum_balances0;
[L675]               __tmp__alloc_allowed_DiceToken_lvl0 := alloc_allowed_DiceToken_lvl0;
[L676]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L677]               __tmp__sum_allowed1 := sum_allowed1;
[L678]               __tmp__Length := Length;
[L679]               __tmp__now := now;
[L680]               __tmp__owner_Owned := owner_Owned;
[L681]               __tmp__newOwner_Owned := newOwner_Owned;
[L682]               __tmp__symbol_DiceToken := symbol_DiceToken;
[L683]               __tmp__name_DiceToken := name_DiceToken;
[L684]               __tmp__decimals_DiceToken := decimals_DiceToken;
[L685]               __tmp___totalSupply_DiceToken := _totalSupply_DiceToken;
[L686]               __tmp__balances_DiceToken := balances_DiceToken;
[L687]               __tmp__allowed_DiceToken := allowed_DiceToken;
[L688]   CALL        call success_s366 := transfer~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L1900]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1594]  COND FALSE  !(!(b_s45 <= a_s45))
[L1598]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1900]  RET         call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1901]  COND FALSE  !(revert)
[L1904]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_DiceToken[this][msgsender_MSG];
[L1905]              __tmp__balances_DiceToken[this][msgsender_MSG] := __var_4;
[L1906]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_DiceToken[this][msgsender_MSG];
[L1907]  CALL        call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][to_s366], tokens_s366);
[L1576]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1577]  COND FALSE  !(!(c_s23 >= a_s23))
[L1907]  RET         call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][to_s366], tokens_s366);
[L1908]  COND FALSE  !(revert)
[L1911]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_DiceToken[this][to_s366];
[L1912]              __tmp__balances_DiceToken[this][to_s366] := __var_5;
[L1913]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_DiceToken[this][to_s366];
[L1914]              success_s366 := true;
[L688]   RET         call success_s366 := transfer~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L689]               assume revert || gas < 0;
[L3216]  RET         call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3305]  RET         call CorralChoice_DiceToken(this);

Loop:
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND TRUE   choice == 12
[L3212]              gas := gas - 21000;
[L3213]  COND TRUE   gas >= 0
[L3214]              assume tokens_s366 >= 0 && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              assume msgvalue_MSG == 0;
[L3216]  CALL        call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s366) && msgsender_MSG != to_s366) && tokens_s366 <= balances_DiceToken[this][msgsender_MSG]) && balances_DiceToken[this][to_s366] + tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s366 >= 0) && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s366] >= 0) && balances_DiceToken[this][to_s366] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][msgsender_MSG] >= 0) && balances_DiceToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_DiceToken0 := true;
[L3]                 call_transfer_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L666]               havoc __exception;
[L667]               revert := false;
[L668]   COND TRUE   __exception
[L669]               __tmp__Balance := Balance;
[L670]               __tmp__DType := DType;
[L671]               __tmp__Alloc := Alloc;
[L672]               __tmp__balance_ADDR := balance_ADDR;
[L673]               __tmp__M_Ref_int := M_Ref_int;
[L674]               __tmp__sum_balances0 := sum_balances0;
[L675]               __tmp__alloc_allowed_DiceToken_lvl0 := alloc_allowed_DiceToken_lvl0;
[L676]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L677]               __tmp__sum_allowed1 := sum_allowed1;
[L678]               __tmp__Length := Length;
[L679]               __tmp__now := now;
[L680]               __tmp__owner_Owned := owner_Owned;
[L681]               __tmp__newOwner_Owned := newOwner_Owned;
[L682]               __tmp__symbol_DiceToken := symbol_DiceToken;
[L683]               __tmp__name_DiceToken := name_DiceToken;
[L684]               __tmp__decimals_DiceToken := decimals_DiceToken;
[L685]               __tmp___totalSupply_DiceToken := _totalSupply_DiceToken;
[L686]               __tmp__balances_DiceToken := balances_DiceToken;
[L687]               __tmp__allowed_DiceToken := allowed_DiceToken;
[L688]   CALL        call success_s366 := transfer~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L1900]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1594]  COND FALSE  !(!(b_s45 <= a_s45))
[L1598]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1900]  RET         call __var_4 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1901]  COND FALSE  !(revert)
[L1904]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_DiceToken[this][msgsender_MSG];
[L1905]              __tmp__balances_DiceToken[this][msgsender_MSG] := __var_4;
[L1906]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_DiceToken[this][msgsender_MSG];
[L1907]  CALL        call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][to_s366], tokens_s366);
[L1576]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1577]  COND FALSE  !(!(c_s23 >= a_s23))
[L1907]  RET         call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_DiceToken[this][to_s366], tokens_s366);
[L1908]  COND FALSE  !(revert)
[L1911]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_DiceToken[this][to_s366];
[L1912]              __tmp__balances_DiceToken[this][to_s366] := __var_5;
[L1913]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_DiceToken[this][to_s366];
[L1914]              success_s366 := true;
[L688]   RET         call success_s366 := transfer~address~uint256_DiceToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L689]               assume revert || gas < 0;
[L3216]  RET         call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3305]  RET         call CorralChoice_DiceToken(this);

[2020-11-25 13:56:47,934 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:56:47,934 INFO  L82        PathProgramCache]: Analyzing trace with hash 1372893929, now seen corresponding path program 1 times
[2020-11-25 13:56:47,934 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:56:47,941 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:56:47,961 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 13:56:47,962 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:56:47,962 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 13:56:47,962 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:56:47,962 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 13:56:47,962 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 13:56:47,962 INFO  L87              Difference]: Start difference. First operand 2142 states and 2296 transitions. cyclomatic complexity: 158 Second operand 5 states.
[2020-11-25 13:56:48,215 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:56:48,215 INFO  L93              Difference]: Finished difference Result 2647 states and 2924 transitions.
[2020-11-25 13:56:48,215 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 13:56:48,215 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2647 states and 2924 transitions.
[2020-11-25 13:56:48,221 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 13:56:48,226 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2647 states to 1903 states and 2175 transitions.
[2020-11-25 13:56:48,226 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 519
[2020-11-25 13:56:48,226 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 519
[2020-11-25 13:56:48,226 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1903 states and 2175 transitions.
[2020-11-25 13:56:48,228 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:56:48,228 INFO  L728         BuchiCegarLoop]: Abstraction has 1903 states and 2175 transitions.
[2020-11-25 13:56:48,229 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1903 states and 2175 transitions.
[2020-11-25 13:56:48,238 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1903 to 1373.
[2020-11-25 13:56:48,238 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1373 states.
[2020-11-25 13:56:48,239 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1373 states to 1373 states and 1484 transitions.
[2020-11-25 13:56:48,239 INFO  L751         BuchiCegarLoop]: Abstraction has 1373 states and 1484 transitions.
[2020-11-25 13:56:48,240 INFO  L631         BuchiCegarLoop]: Abstraction has 1373 states and 1484 transitions.
[2020-11-25 13:56:48,240 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 13:56:48,240 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1373 states and 1484 transitions.
[2020-11-25 13:56:48,241 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:56:48,241 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:56:48,241 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:56:48,242 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:56:48,242 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_DiceToken0 := false;
[L3]                 call_transfer_DiceToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L3295]              assume null == 0;
[L3296]  CALL        call this := FreshRefGenerator__success();
[L1536]              havoc newRef;
[L1537]              assume Alloc[newRef] == false;
[L1538]              Alloc[newRef] := true;
[L1539]              assume newRef != null;
[L3296]  RET         call this := FreshRefGenerator__success();
[L3297]              assume now >= 0;
[L3298]              assume DType[this] == DiceToken;
[L3299]              assume msgvalue_MSG == 0;
[L3300]              gas := gas - 53000;
[L3301]  CALL        call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L502]               havoc __exception;
[L503]               revert := false;
[L504]   COND FALSE  !(__exception)
[L527]   CALL        call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1854]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1672]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1657]              assume msgsender_MSG != null;
[L1658]              Balance[this] := 0;
[L1672]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1673]  COND FALSE  !(revert)
[L1854]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1855]  COND FALSE  !(revert)
[L1858]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1692]              assume msgsender_MSG != null;
[L1693]              Balance[this] := 0;
[L1694]              owner_Owned[this] := null;
[L1695]              newOwner_Owned[this] := null;
[L1697]              owner_Owned[this] := msgsender_MSG;
[L1710]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]  COND FALSE  !(revert)
[L1858]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1859]  COND FALSE  !(revert)
[L1862]  CALL        call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1812]              assume msgsender_MSG != null;
[L1813]              Balance[this] := 0;
[L1814]              symbol_DiceToken[this] := 31320490;
[L1815]              name_DiceToken[this] := 31320490;
[L1816]              decimals_DiceToken[this] := 0;
[L1817]              _totalSupply_DiceToken[this] := 0;
[L1818]              balances_DiceToken[this] := zeroRefintArr();
[L1819]              sum_balances0[this] := 0;
[L1820]              allowed_DiceToken[this] := zeroRefRefintArr();
[L1821]              sum_allowed1[this] := 0;
[L1823]              decimals_DiceToken[this] := 18;
[L1824]              symbol_DiceToken[this] := 884691297;
[L1825]              name_DiceToken[this] := 869301625;
[L1826]              __var_2 := decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1827]              _totalSupply_DiceToken[this] := 30678 * (nonlinearPow(10, decimals_DiceToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1828]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][owner_Owned[this]];
[L1829]              balances_DiceToken[this][owner_Owned[this]] := _totalSupply_DiceToken[this];
[L1830]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][owner_Owned[this]];
[L1831]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1862]  RET         call DiceToken_DiceToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1863]  COND FALSE  !(revert)
[L527]   RET         call DiceToken_DiceToken__success(this, msgsender_MSG, msgvalue_MSG);
[L528]               assume !revert && gas >= 0;
[L3301]  RET         call DiceToken_DiceToken(this, msgsender_MSG, msgvalue_MSG);
[L3302]              assume !revert && gas >= 0;
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND FALSE  !(choice == 12)
[L3218]  COND FALSE  !(choice == 11)
[L3225]  COND TRUE   choice == 10
[L3226]              gas := gas - 21000;
[L3227]  COND TRUE   gas >= 0
[L3228]              assume tokens_s453 >= 0 && tokens_s453 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3229]              assume msgvalue_MSG == 0;
[L3230]  CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L780]               havoc __exception;
[L781]               revert := false;
[L782]   COND FALSE  !(__exception)
[L805]   CALL        call success_s453 := transferFrom~address~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L1995]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][from_s453], tokens_s453);
[L1603]  COND FALSE  !(!(b_s45 <= a_s45))
[L1607]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1995]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][from_s453], tokens_s453);
[L1996]  COND FALSE  !(revert)
[L1999]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][from_s453];
[L2000]              balances_DiceToken[this][from_s453] := __var_6;
[L2001]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][from_s453];
[L2002]  CALL        call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L1603]  COND FALSE  !(!(b_s45 <= a_s45))
[L1607]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2002]  RET         call __var_7 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_DiceToken[this][from_s453][msgsender_MSG], tokens_s453);
[L2003]  COND FALSE  !(revert)
[L2006]              sum_allowed1[from_s453] := sum_allowed1[from_s453] - allowed_DiceToken[this][from_s453][msgsender_MSG];
[L2007]              allowed_DiceToken[this][from_s453][msgsender_MSG] := __var_7;
[L2008]              sum_allowed1[from_s453] := sum_allowed1[from_s453] + allowed_DiceToken[this][from_s453][msgsender_MSG];
[L2009]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s453], tokens_s453);
[L1585]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1586]  COND FALSE  !(!(c_s23 >= a_s23))
[L2009]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s453], tokens_s453);
[L2010]  COND FALSE  !(revert)
[L2013]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][to_s453];
[L2014]              balances_DiceToken[this][to_s453] := __var_8;
[L2015]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][to_s453];
[L2016]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L2017]              success_s453 := true;
[L805]   RET         call success_s453 := transferFrom~address~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L806]               assume !revert && gas >= 0;
[L3230]  RET         call success_s453 := transferFrom~address~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, from_s453, to_s453, tokens_s453);
[L3305]  RET         call CorralChoice_DiceToken(this);
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND FALSE  !(choice == 15)
[L3199]  COND FALSE  !(choice == 14)
[L3205]  COND FALSE  !(choice == 13)
[L3211]  COND TRUE   choice == 12
[L3212]              gas := gas - 21000;
[L3213]  COND TRUE   gas >= 0
[L3214]              assume tokens_s366 >= 0 && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3215]              assume msgvalue_MSG == 0;
[L3216]  CALL        call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s366) && msgsender_MSG != to_s366) && tokens_s366 <= balances_DiceToken[this][msgsender_MSG]) && balances_DiceToken[this][to_s366] + tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s366 >= 0) && tokens_s366 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][to_s366] >= 0) && balances_DiceToken[this][to_s366] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_DiceToken[this][msgsender_MSG] >= 0) && balances_DiceToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_DiceToken0 := true;
[L3]                 call_transfer_DiceToken0 := false;
[L3]                 revert := revert_hold;
[L666]               havoc __exception;
[L667]               revert := false;
[L668]   COND FALSE  !(__exception)
[L691]   CALL        call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L1922]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1603]  COND FALSE  !(!(b_s45 <= a_s45))
[L1607]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1922]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][msgsender_MSG], tokens_s366);
[L1923]  COND FALSE  !(revert)
[L1926]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][msgsender_MSG];
[L1927]              balances_DiceToken[this][msgsender_MSG] := __var_4;
[L1928]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][msgsender_MSG];
[L1929]  CALL        call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1585]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1586]  COND FALSE  !(!(c_s23 >= a_s23))
[L1929]  RET         call __var_5 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_DiceToken[this][to_s366], tokens_s366);
[L1930]  COND FALSE  !(revert)
[L1933]              sum_balances0[this] := sum_balances0[this] - balances_DiceToken[this][to_s366];
[L1934]              balances_DiceToken[this][to_s366] := __var_5;
[L1935]              sum_balances0[this] := sum_balances0[this] + balances_DiceToken[this][to_s366];
[L1936]              assert { :EventEmitted "Transfer_DiceToken" } true;
[L1937]              success_s366 := true;
[L691]   RET         call success_s366 := transfer~address~uint256_DiceToken__success(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L692]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((success_s366 == true && balances_DiceToken[this][msgsender_MSG] == old(balances_DiceToken[this][msgsender_MSG]) - tokens_s366) && balances_DiceToken[this][to_s366] == old(balances_DiceToken[this][to_s366]) + tokens_s366) && _totalSupply_DiceToken[this] == old(_totalSupply_DiceToken[this])) && allowed_DiceToken[this] == old(allowed_DiceToken[this])) && balances_DiceToken[this][p1] == old(balances_DiceToken[this][p1])) && symbol_DiceToken[this] == old(symbol_DiceToken[this])) && name_DiceToken[this] == old(name_DiceToken[this])) && decimals_DiceToken[this] == old(decimals_DiceToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L3216]  RET         call success_s366 := transfer~address~uint256_DiceToken(this, msgsender_MSG, msgvalue_MSG, to_s366, tokens_s366);
[L3305]  RET         call CorralChoice_DiceToken(this);

Loop:
[L3305]  CALL        call CorralChoice_DiceToken(this);
[L3152]              havoc msgsender_MSG;
[L3153]              havoc msgvalue_MSG;
[L3154]              havoc choice;
[L3155]              havoc __ret_0_totalSupply;
[L3156]              havoc tokenOwner_s323;
[L3157]              havoc balance_s323;
[L3158]              havoc tokenOwner_s469;
[L3159]              havoc spender_s469;
[L3160]              havoc remaining_s469;
[L3161]              havoc to_s366;
[L3162]              havoc tokens_s366;
[L3163]              havoc success_s366;
[L3164]              havoc spender_s394;
[L3165]              havoc tokens_s394;
[L3166]              havoc success_s394;
[L3167]              havoc from_s453;
[L3168]              havoc to_s453;
[L3169]              havoc tokens_s453;
[L3170]              havoc success_s453;
[L3171]              havoc __ret_0_owner;
[L3172]              havoc __ret_0_newOwner;
[L3173]              havoc _newOwner_s205;
[L3174]              havoc __ret_0_symbol;
[L3175]              havoc __ret_0_name;
[L3176]              havoc __ret_0_decimals;
[L3177]              havoc __ret_0__totalSupply;
[L3178]              havoc tokenAddress_s496;
[L3179]              havoc tokens_s496;
[L3180]              havoc success_s496;
[L3181]              havoc tmpNow;
[L3182]              havoc gas;
[L3183]              assume gas > 4000000 && gas <= 8000000;
[L3184]              tmpNow := now;
[L3185]              havoc now;
[L3186]              assume now > tmpNow;
[L3187]              assume msgsender_MSG != null;
[L3188]              assume DType[msgsender_MSG] != SafeMath;
[L3189]              assume DType[msgsender_MSG] != ERC20Interface;
[L3190]              assume DType[msgsender_MSG] != Owned;
[L3191]              assume DType[msgsender_MSG] != DiceToken;
[L3192]              Alloc[msgsender_MSG] := true;
[L3193]  COND TRUE   choice == 15
[L3194]              gas := gas - 21000;
[L3195]  COND FALSE  !(gas >= 0)
[L3305]  RET         call CorralChoice_DiceToken(this);

[2020-11-25 13:56:48,245 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:56:48,245 INFO  L82        PathProgramCache]: Analyzing trace with hash 1360901637, now seen corresponding path program 1 times
[2020-11-25 13:56:48,246 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:56:48,272 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:56:48,424 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 51 trivial. 0 not checked.
[2020-11-25 13:56:48,424 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:56:48,424 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 13:56:48,425 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:56:48,425 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 13:56:48,425 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=154, Unknown=0, NotChecked=0, Total=182
[2020-11-25 13:56:48,425 INFO  L87              Difference]: Start difference. First operand 1373 states and 1484 transitions. cyclomatic complexity: 114 Second operand 14 states.
[2020-11-25 13:56:49,126 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:56:49,126 INFO  L93              Difference]: Finished difference Result 779 states and 835 transitions.
[2020-11-25 13:56:49,126 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 13:56:49,126 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 779 states and 835 transitions.
[2020-11-25 13:56:49,127 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 13:56:49,127 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 779 states to 0 states and 0 transitions.
[2020-11-25 13:56:49,127 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 13:56:49,127 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 13:56:49,127 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 13:56:49,128 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:56:49,128 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 13:56:49,128 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 13:56:49,128 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 13:56:49,128 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 13:56:49,128 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 13:56:49,128 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 13:56:49,128 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 13:56:49,131 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:56:49 BasicIcfg
[2020-11-25 13:56:49,131 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 13:56:49,131 INFO  L168              Benchmark]: Toolchain (without parser) took 10942.60 ms. Allocated memory was 1.0 GB in the beginning and 1.9 GB in the end (delta: 899.2 MB). Free memory was 940.6 MB in the beginning and 1.5 GB in the end (delta: -535.7 MB). Peak memory consumption was 363.4 MB. Max. memory is 15.3 GB.
[2020-11-25 13:56:49,132 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 13:56:49,132 INFO  L168              Benchmark]: Boogie Preprocessor took 82.19 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 13:56:49,132 INFO  L168              Benchmark]: UtopiaSpecLang took 58.55 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 13:56:49,133 INFO  L168              Benchmark]: Boogie Printer took 13.80 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 13:56:49,133 INFO  L168              Benchmark]: RCFGBuilder took 620.65 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 827.8 MB in the end (delta: 91.3 MB). Peak memory consumption was 91.3 MB. Max. memory is 15.3 GB.
[2020-11-25 13:56:49,134 INFO  L168              Benchmark]: UtopiaLTL2Aut took 39.09 ms. Allocated memory is still 1.0 GB. Free memory was 827.8 MB in the beginning and 818.9 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 13:56:49,134 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1177.12 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 53.5 MB). Free memory was 818.9 MB in the beginning and 700.7 MB in the end (delta: 118.1 MB). Peak memory consumption was 171.6 MB. Max. memory is 15.3 GB.
[2020-11-25 13:56:49,135 INFO  L168              Benchmark]: BlockEncodingV2 took 181.73 ms. Allocated memory was 1.1 GB in the beginning and 1.2 GB in the end (delta: 125.3 MB). Free memory was 700.7 MB in the beginning and 1.1 GB in the end (delta: -399.5 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 13:56:49,135 INFO  L168              Benchmark]: BuchiAutomizer took 8766.51 ms. Allocated memory was 1.2 GB in the beginning and 1.9 GB in the end (delta: 720.4 MB). Free memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: -376.1 MB). Peak memory consumption was 344.3 MB. Max. memory is 15.3 GB.
[2020-11-25 13:56:49,137 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2832 locations, 4816 edges
  - StatisticsResult: Encoded RCFG
    2798 locations, 4731 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 82.19 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 58.55 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 13.80 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 620.65 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 827.8 MB in the end (delta: 91.3 MB). Peak memory consumption was 91.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 39.09 ms. Allocated memory is still 1.0 GB. Free memory was 827.8 MB in the beginning and 818.9 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1177.12 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 53.5 MB). Free memory was 818.9 MB in the beginning and 700.7 MB in the end (delta: 118.1 MB). Peak memory consumption was 171.6 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 181.73 ms. Allocated memory was 1.1 GB in the beginning and 1.2 GB in the end (delta: 125.3 MB). Free memory was 700.7 MB in the beginning and 1.1 GB in the end (delta: -399.5 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 8766.51 ms. Allocated memory was 1.2 GB in the beginning and 1.9 GB in the end (delta: 720.4 MB). Free memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: -376.1 MB). Peak memory consumption was 344.3 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1191 locations, 1488 edges
  - StatisticsResult: BuchiProgram size
    2832 locations, 4816 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic). 7 modules have a trivial ranking function, the largest among these consists of 23 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 8.7s and 8 iterations.  TraceHistogramMax:2. Analysis of lassos took 1.3s. Construction of modules took 5.5s. BÃ¼chi inclusion checks took 1.3s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 6 MinimizatonAttempts, 1490 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 2142 states and ocurred in iteration 5.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 13718 SDtfs, 14392 SDslu, 35185 SDs, 0 SdLazy, 36228 SolverSat, 2490 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 5.5s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_DiceToken0) ==> ( <>(success_transfer_DiceToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
