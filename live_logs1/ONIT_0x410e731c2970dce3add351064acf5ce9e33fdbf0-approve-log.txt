This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 02:43:46,487 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 02:43:46,489 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 02:43:46,499 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 02:43:46,499 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 02:43:46,500 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 02:43:46,501 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 02:43:46,502 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 02:43:46,504 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 02:43:46,504 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 02:43:46,505 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 02:43:46,505 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 02:43:46,506 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 02:43:46,507 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 02:43:46,508 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 02:43:46,508 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 02:43:46,509 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 02:43:46,510 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 02:43:46,511 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 02:43:46,513 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 02:43:46,514 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 02:43:46,514 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 02:43:46,516 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 02:43:46,516 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 02:43:46,516 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 02:43:46,517 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 02:43:46,517 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 02:43:46,518 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 02:43:46,518 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 02:43:46,518 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 02:43:46,519 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 02:43:46,519 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 02:43:46,520 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 02:43:46,520 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 02:43:46,521 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 02:43:46,521 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 02:43:46,522 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 02:43:46,522 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 02:43:46,522 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 02:43:46,523 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 02:43:46,523 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 02:43:46,524 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 02:43:46,531 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 02:43:46,532 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 02:43:46,533 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 02:43:46,533 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 02:43:46,533 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 02:43:46,533 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 02:43:46,534 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 02:43:46,534 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 02:43:46,534 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 02:43:46,534 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 02:43:46,534 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 02:43:46,534 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 02:43:46,534 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 02:43:46,535 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 02:43:46,535 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 02:43:46,535 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 02:43:46,535 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 02:43:46,535 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 02:43:46,535 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 02:43:46,535 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 02:43:46,535 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 02:43:46,535 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 02:43:46,536 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 02:43:46,536 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 02:43:46,536 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 02:43:46,536 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 02:43:46,561 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 02:43:46,575 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 02:43:46,578 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 02:43:46,579 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 02:43:46,579 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 02:43:46,580 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_approve.bpl
[2020-11-25 02:43:46,580 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_approve.bpl'
[2020-11-25 02:43:46,718 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 02:43:46,719 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 02:43:46,720 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 02:43:46,720 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 02:43:46,720 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 02:43:46,737 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:46" (1/1) ...
[2020-11-25 02:43:46,738 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:46" (1/1) ...
[2020-11-25 02:43:46,791 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:46" (1/1) ...
[2020-11-25 02:43:46,793 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:46" (1/1) ...
[2020-11-25 02:43:46,832 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:46" (1/1) ...
[2020-11-25 02:43:46,864 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:46" (1/1) ...
[2020-11-25 02:43:46,880 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:46" (1/1) ...
[2020-11-25 02:43:46,903 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 02:43:46,904 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 02:43:46,904 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 02:43:46,906 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 02:43:46,910 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:46" (1/1) ...
[2020-11-25 02:43:46,940 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20.approve(spender, value), return == true && _allowed_ERC20[this][msg.sender][spender] == value &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2]) && implementation_ONIT[this] == old(implementation_ONIT[this]) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]]) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && newOwner_Ownable[this] == old(newOwner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 02:43:46,945 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20.approve(spender, value), return == true && _allowed_ERC20[this][msg.sender][spender] == value &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2]) && implementation_ONIT[this] == old(implementation_ONIT[this]) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]]) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && newOwner_Ownable[this] == old(newOwner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 02:43:46,954 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20.approve(spender, value), return == true && _allowed_ERC20[this][msg.sender][spender] == value &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2]) && implementation_ONIT[this] == old(implementation_ONIT[this]) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]]) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && newOwner_Ownable[this] == old(newOwner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 02:43:46,962 INFO  L636   opiaSpecLangObserver]: Parsed ( p1!=msg.sender || p2!=spender_s711 ) to BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[spender_s711,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]
[2020-11-25 02:43:46,966 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( __ret_0_==true && _allowed_ERC20[this][msg.sender][spender_s711]==value_s711 ) && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowed_ERC20[this][p1][p2]==( old(_allowed_ERC20[this][p1][p2]) ) ) && implementation_ONIT[this]==( old(implementation_ONIT[this]) ) ) && M_Ref_Ref[timelockList_ONIT[this]]==( old(M_Ref_Ref[timelockList_ONIT[this]]) ) ) && frozenAccount_ONIT[this]==( old(frozenAccount_ONIT[this]) ) ) && _paused_Pausable[this]==( old(_paused_Pausable[this]) ) ) && _pausers_PauserRole[this]==( old(_pausers_PauserRole[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) && newOwner_Ownable[this]==( old(newOwner_Ownable[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,approve~address~uint256_ERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],[IdentifierExpression[spender_s711,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],IdentifierExpression[value_s711,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[implementation_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[implementation_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[M_Ref_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[timelockList_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[M_Ref_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[timelockList_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[frozenAccount_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[frozenAccount_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]]
[2020-11-25 02:43:46,973 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20.approve(spender, value), return == true && _allowed_ERC20[this][msg.sender][spender] == value &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2]) && implementation_ONIT[this] == old(implementation_ONIT[this]) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]]) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && newOwner_Ownable[this] == old(newOwner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 02:43:46,974 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_approve_ERC200) ==> ( <>AP(success_approve_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 02:43:46,996 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:43:46 PropertyContainer
[2020-11-25 02:43:46,997 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 02:43:46,997 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 02:43:46,997 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 02:43:46,997 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 02:43:46,998 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:46" (1/2) ...
[2020-11-25 02:43:46,999 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 02:43:46,999 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 02:43:47,028 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:43:46" (2/2) ...
[2020-11-25 02:43:47,028 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 02:43:47,028 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 02:43:47,028 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 02:43:47,029 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 02:43:47,029 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:46" (1/2) ...
[2020-11-25 02:43:47,085 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 02:43:47,086 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 02:43:47,086 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT.LockInfo_ctor__success
[2020-11-25 02:43:47,086 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:43:47,086 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 02:43:47,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 02:43:47,086 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:43:47,086 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:43:47,086 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:43:47,087 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:43:47,087 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:43:47,087 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:43:47,087 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 02:43:47,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 02:43:47,087 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 02:43:47,087 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 02:43:47,088 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 02:43:47,088 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 02:43:47,088 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 02:43:47,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 02:43:47,088 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_Ownable
[2020-11-25 02:43:47,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_Ownable
[2020-11-25 02:43:47,088 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 02:43:47,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 02:43:47,089 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Ownable
[2020-11-25 02:43:47,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Ownable
[2020-11-25 02:43:47,089 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 02:43:47,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 02:43:47,089 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Ownable
[2020-11-25 02:43:47,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Ownable
[2020-11-25 02:43:47,089 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:43:47,089 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 02:43:47,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 02:43:47,090 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 02:43:47,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 02:43:47,090 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 02:43:47,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 02:43:47,090 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole
[2020-11-25 02:43:47,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole
[2020-11-25 02:43:47,090 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 02:43:47,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 02:43:47,090 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:43:47,091 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:43:47,091 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:43:47,091 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 02:43:47,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 02:43:47,091 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 02:43:47,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 02:43:47,091 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 02:43:47,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 02:43:47,091 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 02:43:47,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 02:43:47,092 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:43:47,092 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 02:43:47,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 02:43:47,092 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 02:43:47,092 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 02:43:47,092 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 02:43:47,092 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 02:43:47,092 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 02:43:47,092 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 02:43:47,092 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:43:47,092 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 02:43:47,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 02:43:47,093 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 02:43:47,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 02:43:47,093 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 02:43:47,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 02:43:47,093 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 02:43:47,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 02:43:47,093 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 02:43:47,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 02:43:47,093 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 02:43:47,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 02:43:47,094 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:43:47,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:43:47,094 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:43:47,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:43:47,094 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:43:47,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:43:47,094 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:43:47,094 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:43:47,094 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:43:47,095 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:43:47,095 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:43:47,095 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:43:47,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:43:47,095 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:43:47,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:43:47,095 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:43:47,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:43:47,095 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:43:47,095 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:43:47,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:43:47,096 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 02:43:47,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 02:43:47,096 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 02:43:47,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 02:43:47,096 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 02:43:47,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 02:43:47,096 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT_NoBaseCtor__success
[2020-11-25 02:43:47,096 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT
[2020-11-25 02:43:47,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT
[2020-11-25 02:43:47,096 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ONIT
[2020-11-25 02:43:47,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ONIT
[2020-11-25 02:43:47,097 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ONIT
[2020-11-25 02:43:47,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ONIT
[2020-11-25 02:43:47,097 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ONIT
[2020-11-25 02:43:47,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ONIT
[2020-11-25 02:43:47,097 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_ONIT
[2020-11-25 02:43:47,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_ONIT
[2020-11-25 02:43:47,097 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_ONIT
[2020-11-25 02:43:47,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_ONIT
[2020-11-25 02:43:47,098 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ONIT
[2020-11-25 02:43:47,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ONIT
[2020-11-25 02:43:47,098 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_ONIT
[2020-11-25 02:43:47,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_ONIT
[2020-11-25 02:43:47,098 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_ONIT
[2020-11-25 02:43:47,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_ONIT
[2020-11-25 02:43:47,098 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_ONIT
[2020-11-25 02:43:47,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_ONIT
[2020-11-25 02:43:47,098 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_ONIT__success
[2020-11-25 02:43:47,098 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_ONIT__success
[2020-11-25 02:43:47,099 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_ONIT__success
[2020-11-25 02:43:47,099 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~uint256_ONIT
[2020-11-25 02:43:47,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~uint256_ONIT
[2020-11-25 02:43:47,099 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_ONIT__success
[2020-11-25 02:43:47,099 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ONIT__success
[2020-11-25 02:43:47,099 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_ONIT
[2020-11-25 02:43:47,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_ONIT
[2020-11-25 02:43:47,099 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_ONIT
[2020-11-25 02:43:47,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_ONIT
[2020-11-25 02:43:47,099 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ONIT
[2020-11-25 02:43:47,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ONIT
[2020-11-25 02:43:47,100 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 02:43:47,100 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 02:43:47,100 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 02:43:47,100 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 02:43:47,100 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__success
[2020-11-25 02:43:47,100 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 02:43:47,100 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 02:43:47,100 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 02:43:47,101 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__success
[2020-11-25 02:43:47,101 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 02:43:47,101 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 02:43:47,101 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 02:43:47,101 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 02:43:47,101 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 02:43:47,101 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 02:43:47,102 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 02:43:47,102 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 02:43:47,102 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 02:43:47,102 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 02:43:47,102 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 02:43:47,102 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 02:43:47,102 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 02:43:47,102 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 02:43:47,102 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:43:47,102 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:43:47,103 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:43:47,103 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:43:47,103 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ONIT
[2020-11-25 02:43:47,103 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 02:43:47,103 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 02:43:47,103 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 02:43:47,103 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT.LockInfo_ctor__fail
[2020-11-25 02:43:47,103 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:43:47,103 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 02:43:47,103 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 02:43:47,103 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:43:47,104 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:43:47,104 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:43:47,104 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:43:47,104 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:43:47,104 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:43:47,104 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 02:43:47,104 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 02:43:47,104 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 02:43:47,104 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 02:43:47,104 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 02:43:47,104 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 02:43:47,105 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 02:43:47,105 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 02:43:47,105 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_Ownable__success
[2020-11-25 02:43:47,105 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_Ownable__fail
[2020-11-25 02:43:47,105 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 02:43:47,105 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 02:43:47,105 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Ownable__success
[2020-11-25 02:43:47,105 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Ownable__fail
[2020-11-25 02:43:47,105 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 02:43:47,105 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 02:43:47,105 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Ownable__success
[2020-11-25 02:43:47,106 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Ownable__fail
[2020-11-25 02:43:47,106 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:43:47,106 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 02:43:47,106 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 02:43:47,106 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 02:43:47,106 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:43:47,106 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 02:43:47,106 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:43:47,106 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__success
[2020-11-25 02:43:47,106 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__fail
[2020-11-25 02:43:47,106 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 02:43:47,106 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:43:47,107 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:43:47,107 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:43:47,107 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:43:47,107 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 02:43:47,107 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 02:43:47,107 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 02:43:47,107 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 02:43:47,107 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 02:43:47,107 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 02:43:47,107 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 02:43:47,107 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 02:43:47,107 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:43:47,108 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 02:43:47,108 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 02:43:47,108 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:43:47,108 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 02:43:47,108 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 02:43:47,108 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 02:43:47,108 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 02:43:47,108 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 02:43:47,108 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:43:47,108 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 02:43:47,108 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:43:47,108 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:43:47,109 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:43:47,109 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:43:47,109 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:43:47,109 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:43:47,109 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:43:47,109 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:43:47,109 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:43:47,109 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:43:47,109 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:43:47,109 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:43:47,109 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:43:47,110 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:43:47,110 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:43:47,110 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:43:47,110 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:43:47,110 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:43:47,110 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:43:47,110 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:43:47,110 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:43:47,110 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:43:47,110 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:43:47,110 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:43:47,110 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:43:47,111 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 02:43:47,111 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 02:43:47,111 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 02:43:47,111 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:43:47,111 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 02:43:47,111 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:43:47,111 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT_NoBaseCtor__fail
[2020-11-25 02:43:47,111 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT__success
[2020-11-25 02:43:47,111 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT__fail
[2020-11-25 02:43:47,111 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ONIT__success
[2020-11-25 02:43:47,111 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ONIT__fail
[2020-11-25 02:43:47,111 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ONIT__success
[2020-11-25 02:43:47,112 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ONIT__fail
[2020-11-25 02:43:47,112 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ONIT__success
[2020-11-25 02:43:47,112 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ONIT__fail
[2020-11-25 02:43:47,112 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_ONIT__success
[2020-11-25 02:43:47,112 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_ONIT__fail
[2020-11-25 02:43:47,112 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_ONIT__success
[2020-11-25 02:43:47,112 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_ONIT__fail
[2020-11-25 02:43:47,112 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ONIT__success
[2020-11-25 02:43:47,112 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:43:47,113 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_ONIT__success
[2020-11-25 02:43:47,113 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:43:47,113 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_ONIT__success
[2020-11-25 02:43:47,113 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_ONIT__fail
[2020-11-25 02:43:47,113 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_ONIT__success
[2020-11-25 02:43:47,113 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_ONIT__fail
[2020-11-25 02:43:47,113 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:43:47,114 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_ONIT__fail
[2020-11-25 02:43:47,114 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_ONIT__fail
[2020-11-25 02:43:47,114 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~uint256_ONIT__success
[2020-11-25 02:43:47,114 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~uint256_ONIT__fail
[2020-11-25 02:43:47,114 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_ONIT__fail
[2020-11-25 02:43:47,114 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ONIT__fail
[2020-11-25 02:43:47,114 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_ONIT__success
[2020-11-25 02:43:47,114 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_ONIT__fail
[2020-11-25 02:43:47,115 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_ONIT__success
[2020-11-25 02:43:47,115 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_ONIT__fail
[2020-11-25 02:43:47,115 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ONIT__success
[2020-11-25 02:43:47,115 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ONIT__fail
[2020-11-25 02:43:47,115 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 02:43:47,115 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 02:43:47,115 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 02:43:47,115 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 02:43:47,115 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__fail
[2020-11-25 02:43:47,115 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 02:43:47,115 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 02:43:47,116 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 02:43:47,116 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__fail
[2020-11-25 02:43:47,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 02:43:47,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 02:43:47,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 02:43:47,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 02:43:47,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT.LockInfo_ctor__fail
[2020-11-25 02:43:47,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT.LockInfo_ctor__success
[2020-11-25 02:43:47,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:43:47,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:43:47,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 02:43:47,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 02:43:47,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:43:47,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:43:47,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:43:47,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:43:47,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:43:47,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:43:47,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:43:47,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:43:47,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:43:47,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:43:47,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:43:47,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:43:47,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 02:43:47,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 02:43:47,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 02:43:47,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 02:43:47,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 02:43:47,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 02:43:47,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 02:43:47,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 02:43:47,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 02:43:47,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 02:43:47,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 02:43:47,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 02:43:47,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_Ownable__fail
[2020-11-25 02:43:47,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_Ownable__success
[2020-11-25 02:43:47,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 02:43:47,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 02:43:47,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Ownable__fail
[2020-11-25 02:43:47,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Ownable__success
[2020-11-25 02:43:47,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 02:43:47,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 02:43:47,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Ownable__fail
[2020-11-25 02:43:47,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Ownable__success
[2020-11-25 02:43:47,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:43:47,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:43:47,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 02:43:47,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 02:43:47,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:43:47,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 02:43:47,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:43:47,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 02:43:47,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__fail
[2020-11-25 02:43:47,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__success
[2020-11-25 02:43:47,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:43:47,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 02:43:47,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:43:47,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:43:47,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:43:47,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:43:47,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:43:47,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:43:47,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 02:43:47,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 02:43:47,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 02:43:47,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 02:43:47,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 02:43:47,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 02:43:47,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 02:43:47,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 02:43:47,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:43:47,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:43:47,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 02:43:47,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 02:43:47,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:43:47,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:43:47,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 02:43:47,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 02:43:47,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 02:43:47,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 02:43:47,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:43:47,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 02:43:47,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:43:47,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 02:43:47,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:43:47,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:43:47,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:43:47,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:43:47,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:43:47,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:43:47,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:43:47,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:43:47,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:43:47,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:43:47,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:43:47,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:43:47,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:43:47,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:43:47,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:43:47,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:43:47,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:43:47,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:43:47,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:43:47,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:43:47,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:43:47,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:43:47,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:43:47,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:43:47,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:43:47,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:43:47,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:43:47,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:43:47,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:43:47,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:43:47,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 02:43:47,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 02:43:47,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:43:47,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 02:43:47,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:43:47,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 02:43:47,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT_NoBaseCtor__fail
[2020-11-25 02:43:47,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT_NoBaseCtor__success
[2020-11-25 02:43:47,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT__fail
[2020-11-25 02:43:47,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT__success
[2020-11-25 02:43:47,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ONIT__fail
[2020-11-25 02:43:47,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ONIT__success
[2020-11-25 02:43:47,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ONIT__fail
[2020-11-25 02:43:47,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ONIT__success
[2020-11-25 02:43:47,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ONIT__fail
[2020-11-25 02:43:47,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ONIT__success
[2020-11-25 02:43:47,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_ONIT__fail
[2020-11-25 02:43:47,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_ONIT__success
[2020-11-25 02:43:47,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_ONIT__fail
[2020-11-25 02:43:47,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_ONIT__success
[2020-11-25 02:43:47,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:43:47,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ONIT__success
[2020-11-25 02:43:47,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:43:47,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_ONIT__success
[2020-11-25 02:43:47,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_ONIT__fail
[2020-11-25 02:43:47,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_ONIT__success
[2020-11-25 02:43:47,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_ONIT__fail
[2020-11-25 02:43:47,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_ONIT__success
[2020-11-25 02:43:47,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:43:47,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_ONIT__success
[2020-11-25 02:43:47,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_ONIT__fail
[2020-11-25 02:43:47,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_ONIT__success
[2020-11-25 02:43:47,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_ONIT__fail
[2020-11-25 02:43:47,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_ONIT__success
[2020-11-25 02:43:47,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~uint256_ONIT__fail
[2020-11-25 02:43:47,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~uint256_ONIT__success
[2020-11-25 02:43:47,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_ONIT__fail
[2020-11-25 02:43:47,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_ONIT__success
[2020-11-25 02:43:47,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ONIT__fail
[2020-11-25 02:43:47,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ONIT__success
[2020-11-25 02:43:47,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_ONIT__fail
[2020-11-25 02:43:47,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_ONIT__success
[2020-11-25 02:43:47,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_ONIT__fail
[2020-11-25 02:43:47,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_ONIT__success
[2020-11-25 02:43:47,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ONIT__fail
[2020-11-25 02:43:47,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ONIT__success
[2020-11-25 02:43:47,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 02:43:47,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 02:43:47,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 02:43:47,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 02:43:47,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 02:43:47,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 02:43:47,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 02:43:47,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 02:43:47,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__fail
[2020-11-25 02:43:47,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__success
[2020-11-25 02:43:47,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 02:43:47,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 02:43:47,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 02:43:47,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 02:43:47,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 02:43:47,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 02:43:47,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__fail
[2020-11-25 02:43:47,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__success
[2020-11-25 02:43:47,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 02:43:47,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 02:43:47,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 02:43:47,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 02:43:47,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 02:43:47,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 02:43:47,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 02:43:47,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 02:43:47,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 02:43:47,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 02:43:47,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 02:43:47,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 02:43:47,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 02:43:47,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 02:43:47,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:43:47,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:43:47,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:43:47,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:43:47,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ONIT
[2020-11-25 02:43:47,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 02:43:47,133 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 02:43:47,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 02:43:47,439 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:43:47,439 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:43:47,439 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:43:48,241 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:43:48,479 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 02:43:48,479 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 02:43:48,482 INFO  L202        PluginConnector]: Adding new model ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:43:48 BoogieIcfgContainer
[2020-11-25 02:43:48,482 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:43:46" (2/2) ...
[2020-11-25 02:43:48,482 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 02:43:48,482 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@2e477cdf and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:43:48, skipping insertion in model container
[2020-11-25 02:43:48,482 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 02:43:48,483 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 02:43:48,483 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 02:43:48,484 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 02:43:48,484 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:46" (1/3) ...
[2020-11-25 02:43:48,484 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@12918791 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:43:48, skipping insertion in model container
[2020-11-25 02:43:48,484 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:43:46" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 02:43:48,520 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:43:48 NWAContainer
[2020-11-25 02:43:48,520 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 02:43:48,520 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 02:43:48,520 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 02:43:48,521 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 02:43:48,522 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:43:48" (3/4) ...
[2020-11-25 02:43:48,523 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@53c5416 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:43:48, skipping insertion in model container
[2020-11-25 02:43:48,523 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:43:48" (4/4) ...
[2020-11-25 02:43:48,525 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 02:43:48,533 INFO  L110   BuchiProductObserver]: Initial RCFG 4670 locations, 6457 edges
[2020-11-25 02:43:48,533 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 02:43:48,548 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 02:43:51,729 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 02:43:51,743 INFO  L110   BuchiProductObserver]: BuchiProgram size 11596 locations, 21005 edges
[2020-11-25 02:43:51,743 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:43:51 BoogieIcfgContainer
[2020-11-25 02:43:51,744 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 02:43:51,744 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 02:43:51,744 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 02:43:51,745 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 02:43:51,746 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:43:51" (1/1) ...
[2020-11-25 02:43:51,928 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 02:43:51,929 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 02:43:51,954 INFO  L313           BlockEncoder]: Initial Icfg 11596 locations, 21005 edges
[2020-11-25 02:43:51,954 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 02:43:51,954 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 02:43:51,954 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 02:43:51,955 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 02:43:51,976 INFO  L70    emoveInfeasibleEdges]: Removed 219 edges and 23 locations because of local infeasibility
[2020-11-25 02:43:51,997 INFO  L70        RemoveSinkStates]: Removed 104 edges and 69 locations by removing sink states
[2020-11-25 02:43:52,019 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 02:43:52,027 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 02:43:52,034 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 02:43:52,035 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 02:43:52,040 INFO  L313           BlockEncoder]: Encoded RCFG 11450 locations, 20602 edges
[2020-11-25 02:43:52,040 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:43:52 BasicIcfg
[2020-11-25 02:43:52,041 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 02:43:52,041 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 02:43:52,041 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 02:43:52,043 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 02:43:52,043 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:43:52,043 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:46" (1/6) ...
[2020-11-25 02:43:52,044 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@693fdf48 and model type ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:43:52, skipping insertion in model container
[2020-11-25 02:43:52,044 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:43:52,044 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:43:46" (2/6) ...
[2020-11-25 02:43:52,045 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@693fdf48 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:43:52, skipping insertion in model container
[2020-11-25 02:43:52,045 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:43:52,045 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:43:48" (3/6) ...
[2020-11-25 02:43:52,045 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@693fdf48 and model type ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:43:52, skipping insertion in model container
[2020-11-25 02:43:52,045 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:43:52,045 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:43:48" (4/6) ...
[2020-11-25 02:43:52,045 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@693fdf48 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:43:52, skipping insertion in model container
[2020-11-25 02:43:52,045 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:43:52,046 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:43:51" (5/6) ...
[2020-11-25 02:43:52,046 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@693fdf48 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:43:52, skipping insertion in model container
[2020-11-25 02:43:52,046 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:43:52,046 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:43:52" (6/6) ...
[2020-11-25 02:43:52,047 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_approve.bpl_BEv2
[2020-11-25 02:43:52,080 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 02:43:52,080 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 02:43:52,080 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 02:43:52,080 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 02:43:52,080 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 02:43:52,081 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 02:43:52,081 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 02:43:52,081 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 02:43:52,081 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 02:43:52,156 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11450 states.
[2020-11-25 02:43:52,284 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:43:52,284 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:43:52,284 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:43:52,292 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:43:52,292 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:43:52,292 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 02:43:52,292 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11450 states.
[2020-11-25 02:43:52,328 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:43:52,328 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:43:52,328 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:43:52,329 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:43:52,329 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND TRUE   revert
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND TRUE   choice == 33
[L12132]              gas := gas - 21000;
[L12133]  COND FALSE  !(gas >= 0)
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:43:52,343 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:43:52,343 INFO  L82        PathProgramCache]: Analyzing trace with hash -333121824, now seen corresponding path program 1 times
[2020-11-25 02:43:52,347 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:43:52,362 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:43:52,394 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:43:52,396 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:43:52,396 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:43:52,794 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:43:52,802 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:43:52,803 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:43:52,804 INFO  L87              Difference]: Start difference. First operand 11450 states. Second operand 4 states.
[2020-11-25 02:43:53,901 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:43:53,901 INFO  L93              Difference]: Finished difference Result 7354 states and 8608 transitions.
[2020-11-25 02:43:53,902 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:43:53,903 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7354 states and 8608 transitions.
[2020-11-25 02:43:53,937 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:43:53,977 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7354 states to 7354 states and 8608 transitions.
[2020-11-25 02:43:53,978 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 02:43:53,981 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1357
[2020-11-25 02:43:53,981 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7354 states and 8608 transitions.
[2020-11-25 02:43:53,997 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:43:53,997 INFO  L728         BuchiCegarLoop]: Abstraction has 7354 states and 8608 transitions.
[2020-11-25 02:43:54,018 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7354 states and 8608 transitions.
[2020-11-25 02:43:54,105 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7354 to 7354.
[2020-11-25 02:43:54,106 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7354 states.
[2020-11-25 02:43:54,116 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7354 states to 7354 states and 8608 transitions.
[2020-11-25 02:43:54,116 INFO  L751         BuchiCegarLoop]: Abstraction has 7354 states and 8608 transitions.
[2020-11-25 02:43:54,116 INFO  L631         BuchiCegarLoop]: Abstraction has 7354 states and 8608 transitions.
[2020-11-25 02:43:54,117 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 02:43:54,117 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7354 states and 8608 transitions.
[2020-11-25 02:43:54,128 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:43:54,128 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:43:54,128 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:43:54,130 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:43:54,130 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND TRUE   revert
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND TRUE   choice == 20
[L12211]              gas := gas - 21000;
[L12212]  COND TRUE   gas >= 0
[L12213]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12214]              assume msgvalue_MSG == 0;
[L12215]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6702]               __var_14 := null;
[L6703]   COND TRUE   !(spender_s711 != null)
[L6704]               revert := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12215]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND TRUE   choice == 20
[L12211]              gas := gas - 21000;
[L12212]  COND TRUE   gas >= 0
[L12213]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12214]              assume msgvalue_MSG == 0;
[L12215]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6702]               __var_14 := null;
[L6703]   COND TRUE   !(spender_s711 != null)
[L6704]               revert := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12215]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:43:54,135 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:43:54,135 INFO  L82        PathProgramCache]: Analyzing trace with hash -1959357786, now seen corresponding path program 1 times
[2020-11-25 02:43:54,136 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:43:54,147 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:43:54,172 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:43:54,172 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:43:54,172 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:43:54,173 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:43:54,174 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:43:54,174 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:43:54,174 INFO  L87              Difference]: Start difference. First operand 7354 states and 8608 transitions. cyclomatic complexity: 1264 Second operand 3 states.
[2020-11-25 02:43:54,376 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:43:54,376 INFO  L93              Difference]: Finished difference Result 9380 states and 10961 transitions.
[2020-11-25 02:43:54,376 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:43:54,377 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9380 states and 10961 transitions.
[2020-11-25 02:43:54,401 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:43:54,442 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9380 states to 9380 states and 10961 transitions.
[2020-11-25 02:43:54,442 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1893
[2020-11-25 02:43:54,444 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1893
[2020-11-25 02:43:54,444 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9380 states and 10961 transitions.
[2020-11-25 02:43:54,454 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:43:54,454 INFO  L728         BuchiCegarLoop]: Abstraction has 9380 states and 10961 transitions.
[2020-11-25 02:43:54,463 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9380 states and 10961 transitions.
[2020-11-25 02:43:54,554 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9380 to 8184.
[2020-11-25 02:43:54,554 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8184 states.
[2020-11-25 02:43:54,566 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8184 states to 8184 states and 9515 transitions.
[2020-11-25 02:43:54,566 INFO  L751         BuchiCegarLoop]: Abstraction has 8184 states and 9515 transitions.
[2020-11-25 02:43:54,566 INFO  L631         BuchiCegarLoop]: Abstraction has 8184 states and 9515 transitions.
[2020-11-25 02:43:54,566 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 02:43:54,566 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8184 states and 9515 transitions.
[2020-11-25 02:43:54,577 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:43:54,577 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:43:54,577 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:43:54,579 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:43:54,579 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6125]   COND FALSE  !(DType[this] == Pausable)
[L6130]   COND TRUE   DType[this] == PauserRole
[L6131]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND TRUE   !(account_s164 != null)
[L5839]               revert := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND TRUE   revert
[L6131]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6132]   COND TRUE   revert
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND TRUE   revert
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND TRUE   revert
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND TRUE   choice == 20
[L12211]              gas := gas - 21000;
[L12212]  COND TRUE   gas >= 0
[L12213]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12214]              assume msgvalue_MSG == 0;
[L12215]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6702]               __var_14 := null;
[L6703]   COND TRUE   !(spender_s711 != null)
[L6704]               revert := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12215]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND TRUE   choice == 20
[L12211]              gas := gas - 21000;
[L12212]  COND TRUE   gas >= 0
[L12213]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12214]              assume msgvalue_MSG == 0;
[L12215]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6702]               __var_14 := null;
[L6703]   COND TRUE   !(spender_s711 != null)
[L6704]               revert := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12215]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:43:54,584 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:43:54,584 INFO  L82        PathProgramCache]: Analyzing trace with hash -976687662, now seen corresponding path program 1 times
[2020-11-25 02:43:54,585 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:43:54,597 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:43:54,659 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 02:43:54,659 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:43:54,660 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 02:43:54,660 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:43:54,660 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:43:54,660 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:43:54,660 INFO  L87              Difference]: Start difference. First operand 8184 states and 9515 transitions. cyclomatic complexity: 1341 Second operand 9 states.
[2020-11-25 02:43:54,856 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:43:54,856 INFO  L93              Difference]: Finished difference Result 8230 states and 9590 transitions.
[2020-11-25 02:43:54,857 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:43:54,857 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8230 states and 9590 transitions.
[2020-11-25 02:43:54,882 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:43:54,915 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8230 states to 8230 states and 9590 transitions.
[2020-11-25 02:43:54,915 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1586
[2020-11-25 02:43:54,916 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1586
[2020-11-25 02:43:54,916 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8230 states and 9590 transitions.
[2020-11-25 02:43:54,924 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:43:54,925 INFO  L728         BuchiCegarLoop]: Abstraction has 8230 states and 9590 transitions.
[2020-11-25 02:43:54,933 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8230 states and 9590 transitions.
[2020-11-25 02:43:55,009 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8230 to 8221.
[2020-11-25 02:43:55,009 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8221 states.
[2020-11-25 02:43:55,021 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8221 states to 8221 states and 9574 transitions.
[2020-11-25 02:43:55,021 INFO  L751         BuchiCegarLoop]: Abstraction has 8221 states and 9574 transitions.
[2020-11-25 02:43:55,022 INFO  L631         BuchiCegarLoop]: Abstraction has 8221 states and 9574 transitions.
[2020-11-25 02:43:55,022 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 02:43:55,022 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8221 states and 9574 transitions.
[2020-11-25 02:43:55,035 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:43:55,035 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:43:55,036 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:43:55,038 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:43:55,038 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND TRUE   DType[this] == ERC20Pausable
[L6121]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND TRUE   !(account_s218 != null)
[L5910]               revert := true;
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND TRUE   revert
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND TRUE   revert
[L6121]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6122]   COND TRUE   revert
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND TRUE   revert
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND TRUE   revert
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND TRUE   choice == 20
[L12211]              gas := gas - 21000;
[L12212]  COND TRUE   gas >= 0
[L12213]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12214]              assume msgvalue_MSG == 0;
[L12215]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6702]               __var_14 := null;
[L6703]   COND TRUE   !(spender_s711 != null)
[L6704]               revert := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12215]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND TRUE   choice == 20
[L12211]              gas := gas - 21000;
[L12212]  COND TRUE   gas >= 0
[L12213]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12214]              assume msgvalue_MSG == 0;
[L12215]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6702]               __var_14 := null;
[L6703]   COND TRUE   !(spender_s711 != null)
[L6704]               revert := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12215]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:43:55,043 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:43:55,043 INFO  L82        PathProgramCache]: Analyzing trace with hash -2060504755, now seen corresponding path program 1 times
[2020-11-25 02:43:55,044 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:43:55,056 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:43:55,152 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 02:43:55,152 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:43:55,153 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 02:43:55,153 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:43:55,153 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 02:43:55,153 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 02:43:55,153 INFO  L87              Difference]: Start difference. First operand 8221 states and 9574 transitions. cyclomatic complexity: 1363 Second operand 10 states.
[2020-11-25 02:43:55,259 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:43:55,260 INFO  L93              Difference]: Finished difference Result 8281 states and 9665 transitions.
[2020-11-25 02:43:55,260 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 02:43:55,260 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8281 states and 9665 transitions.
[2020-11-25 02:43:55,275 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:43:55,294 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8281 states to 8281 states and 9665 transitions.
[2020-11-25 02:43:55,294 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1593
[2020-11-25 02:43:55,295 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1593
[2020-11-25 02:43:55,295 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8281 states and 9665 transitions.
[2020-11-25 02:43:55,300 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:43:55,300 INFO  L728         BuchiCegarLoop]: Abstraction has 8281 states and 9665 transitions.
[2020-11-25 02:43:55,307 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8281 states and 9665 transitions.
[2020-11-25 02:43:55,353 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8281 to 8228.
[2020-11-25 02:43:55,354 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8228 states.
[2020-11-25 02:43:55,362 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8228 states to 8228 states and 9582 transitions.
[2020-11-25 02:43:55,362 INFO  L751         BuchiCegarLoop]: Abstraction has 8228 states and 9582 transitions.
[2020-11-25 02:43:55,362 INFO  L631         BuchiCegarLoop]: Abstraction has 8228 states and 9582 transitions.
[2020-11-25 02:43:55,362 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 02:43:55,363 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8228 states and 9582 transitions.
[2020-11-25 02:43:55,371 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:43:55,371 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:43:55,371 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:43:55,373 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:43:55,373 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND TRUE   DType[this] == ERC20Pausable
[L6121]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND TRUE   !!__var_2
[L5847]               revert := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND TRUE   revert
[L6121]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6122]   COND TRUE   revert
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND TRUE   revert
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND TRUE   revert
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND TRUE   choice == 20
[L12211]              gas := gas - 21000;
[L12212]  COND TRUE   gas >= 0
[L12213]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12214]              assume msgvalue_MSG == 0;
[L12215]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6702]               __var_14 := null;
[L6703]   COND TRUE   !(spender_s711 != null)
[L6704]               revert := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12215]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND TRUE   choice == 20
[L12211]              gas := gas - 21000;
[L12212]  COND TRUE   gas >= 0
[L12213]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12214]              assume msgvalue_MSG == 0;
[L12215]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6702]               __var_14 := null;
[L6703]   COND TRUE   !(spender_s711 != null)
[L6704]               revert := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12215]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:43:55,376 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:43:55,376 INFO  L82        PathProgramCache]: Analyzing trace with hash 1674394409, now seen corresponding path program 1 times
[2020-11-25 02:43:55,377 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:43:55,386 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:43:55,421 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 51 trivial. 0 not checked.
[2020-11-25 02:43:55,421 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:43:55,422 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:43:55,422 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:43:55,422 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:43:55,422 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:43:55,422 INFO  L87              Difference]: Start difference. First operand 8228 states and 9582 transitions. cyclomatic complexity: 1364 Second operand 3 states.
[2020-11-25 02:43:55,534 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:43:55,534 INFO  L93              Difference]: Finished difference Result 9400 states and 10635 transitions.
[2020-11-25 02:43:55,534 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:43:55,534 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9400 states and 10635 transitions.
[2020-11-25 02:43:55,551 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:43:55,571 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9400 states to 8706 states and 9813 transitions.
[2020-11-25 02:43:55,571 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1684
[2020-11-25 02:43:55,572 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1770
[2020-11-25 02:43:55,572 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8706 states and 9813 transitions.
[2020-11-25 02:43:55,578 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:43:55,578 INFO  L728         BuchiCegarLoop]: Abstraction has 8706 states and 9813 transitions.
[2020-11-25 02:43:55,584 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8706 states and 9813 transitions.
[2020-11-25 02:43:55,625 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8706 to 7686.
[2020-11-25 02:43:55,625 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7686 states.
[2020-11-25 02:43:55,633 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7686 states to 7686 states and 8543 transitions.
[2020-11-25 02:43:55,633 INFO  L751         BuchiCegarLoop]: Abstraction has 7686 states and 8543 transitions.
[2020-11-25 02:43:55,633 INFO  L631         BuchiCegarLoop]: Abstraction has 7686 states and 8543 transitions.
[2020-11-25 02:43:55,633 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 02:43:55,633 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7686 states and 8543 transitions.
[2020-11-25 02:43:55,641 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:43:55,641 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:43:55,641 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:43:55,644 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:43:55,644 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6125]   COND TRUE   DType[this] == Pausable
[L6126]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6126]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6127]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6125]   COND TRUE   DType[this] == Pausable
[L6126]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6126]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6127]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6125]   COND TRUE   DType[this] == Pausable
[L6126]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6126]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6127]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6125]   COND TRUE   DType[this] == Pausable
[L6126]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6126]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6127]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND TRUE   choice == 20
[L12211]              gas := gas - 21000;
[L12212]  COND TRUE   gas >= 0
[L12213]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12214]              assume msgvalue_MSG == 0;
[L12215]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6702]               __var_14 := null;
[L6703]   COND FALSE  !(!(spender_s711 != null))
[L6707]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6708]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6709]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6710]               assert { :EventEmitted "Approval_ERC20" } true;
[L6711]               __ret_0_ := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12215]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND TRUE   choice == 20
[L12211]              gas := gas - 21000;
[L12212]  COND TRUE   gas >= 0
[L12213]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12214]              assume msgvalue_MSG == 0;
[L12215]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6702]               __var_14 := null;
[L6703]   COND FALSE  !(!(spender_s711 != null))
[L6707]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6708]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6709]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6710]               assert { :EventEmitted "Approval_ERC20" } true;
[L6711]               __ret_0_ := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12215]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:43:55,650 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:43:55,650 INFO  L82        PathProgramCache]: Analyzing trace with hash 46295480, now seen corresponding path program 1 times
[2020-11-25 02:43:55,650 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:43:55,664 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:43:55,820 INFO  L134       CoverageAnalysis]: Checked inductivity of 942 backedges. 0 proven. 33 refuted. 0 times theorem prover too weak. 909 trivial. 0 not checked.
[2020-11-25 02:43:55,821 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:43:55,821 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 02:43:55,821 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:43:55,821 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:43:55,821 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:43:55,822 INFO  L87              Difference]: Start difference. First operand 7686 states and 8543 transitions. cyclomatic complexity: 867 Second operand 7 states.
[2020-11-25 02:43:55,960 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:43:55,960 INFO  L93              Difference]: Finished difference Result 7709 states and 8570 transitions.
[2020-11-25 02:43:55,960 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:43:55,961 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7709 states and 8570 transitions.
[2020-11-25 02:43:55,975 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:43:55,992 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7709 states to 7692 states and 8550 transitions.
[2020-11-25 02:43:55,992 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1536
[2020-11-25 02:43:55,993 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1536
[2020-11-25 02:43:55,993 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7692 states and 8550 transitions.
[2020-11-25 02:43:55,997 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:43:55,998 INFO  L728         BuchiCegarLoop]: Abstraction has 7692 states and 8550 transitions.
[2020-11-25 02:43:56,003 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7692 states and 8550 transitions.
[2020-11-25 02:43:56,040 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7692 to 7692.
[2020-11-25 02:43:56,040 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7692 states.
[2020-11-25 02:43:56,048 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7692 states to 7692 states and 8550 transitions.
[2020-11-25 02:43:56,048 INFO  L751         BuchiCegarLoop]: Abstraction has 7692 states and 8550 transitions.
[2020-11-25 02:43:56,048 INFO  L631         BuchiCegarLoop]: Abstraction has 7692 states and 8550 transitions.
[2020-11-25 02:43:56,048 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 02:43:56,048 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7692 states and 8550 transitions.
[2020-11-25 02:43:56,055 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:43:56,056 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:43:56,056 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:43:56,058 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:43:56,058 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6125]   COND TRUE   DType[this] == Pausable
[L6126]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6126]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6127]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6125]   COND TRUE   DType[this] == Pausable
[L6126]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6126]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6127]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6125]   COND TRUE   DType[this] == Pausable
[L6126]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6126]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6127]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND TRUE   choice == 20
[L12211]              gas := gas - 21000;
[L12212]  COND TRUE   gas >= 0
[L12213]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12214]              assume msgvalue_MSG == 0;
[L12215]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6702]               __var_14 := null;
[L6703]   COND FALSE  !(!(spender_s711 != null))
[L6707]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6708]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6709]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6710]               assert { :EventEmitted "Approval_ERC20" } true;
[L6711]               __ret_0_ := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12215]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND TRUE   choice == 20
[L12211]              gas := gas - 21000;
[L12212]  COND TRUE   gas >= 0
[L12213]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12214]              assume msgvalue_MSG == 0;
[L12215]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6702]               __var_14 := null;
[L6703]   COND FALSE  !(!(spender_s711 != null))
[L6707]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6708]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6709]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6710]               assert { :EventEmitted "Approval_ERC20" } true;
[L6711]               __ret_0_ := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12215]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:43:56,063 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:43:56,063 INFO  L82        PathProgramCache]: Analyzing trace with hash 1395125816, now seen corresponding path program 1 times
[2020-11-25 02:43:56,064 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:43:56,079 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:43:56,230 INFO  L134       CoverageAnalysis]: Checked inductivity of 924 backedges. 6 proven. 29 refuted. 0 times theorem prover too weak. 889 trivial. 0 not checked.
[2020-11-25 02:43:56,231 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:43:56,231 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:43:56,231 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:43:56,231 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:43:56,231 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:43:56,231 INFO  L87              Difference]: Start difference. First operand 7692 states and 8550 transitions. cyclomatic complexity: 868 Second operand 8 states.
[2020-11-25 02:43:56,383 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:43:56,384 INFO  L93              Difference]: Finished difference Result 7713 states and 8574 transitions.
[2020-11-25 02:43:56,384 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:43:56,384 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7713 states and 8574 transitions.
[2020-11-25 02:43:56,400 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:43:56,416 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7713 states to 7699 states and 8558 transitions.
[2020-11-25 02:43:56,416 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1536
[2020-11-25 02:43:56,417 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1536
[2020-11-25 02:43:56,417 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7699 states and 8558 transitions.
[2020-11-25 02:43:56,421 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:43:56,422 INFO  L728         BuchiCegarLoop]: Abstraction has 7699 states and 8558 transitions.
[2020-11-25 02:43:56,428 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7699 states and 8558 transitions.
[2020-11-25 02:43:56,470 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7699 to 7699.
[2020-11-25 02:43:56,470 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7699 states.
[2020-11-25 02:43:56,478 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7699 states to 7699 states and 8558 transitions.
[2020-11-25 02:43:56,478 INFO  L751         BuchiCegarLoop]: Abstraction has 7699 states and 8558 transitions.
[2020-11-25 02:43:56,478 INFO  L631         BuchiCegarLoop]: Abstraction has 7699 states and 8558 transitions.
[2020-11-25 02:43:56,478 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 02:43:56,478 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7699 states and 8558 transitions.
[2020-11-25 02:43:56,486 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:43:56,486 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:43:56,486 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:43:56,489 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:43:56,489 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND TRUE   DType[this] == ERC20Pausable
[L6121]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6121]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6122]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND TRUE   choice == 20
[L12211]              gas := gas - 21000;
[L12212]  COND TRUE   gas >= 0
[L12213]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12214]              assume msgvalue_MSG == 0;
[L12215]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6702]               __var_14 := null;
[L6703]   COND FALSE  !(!(spender_s711 != null))
[L6707]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6708]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6709]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6710]               assert { :EventEmitted "Approval_ERC20" } true;
[L6711]               __ret_0_ := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12215]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND TRUE   choice == 20
[L12211]              gas := gas - 21000;
[L12212]  COND TRUE   gas >= 0
[L12213]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12214]              assume msgvalue_MSG == 0;
[L12215]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6702]               __var_14 := null;
[L6703]   COND FALSE  !(!(spender_s711 != null))
[L6707]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6708]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6709]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6710]               assert { :EventEmitted "Approval_ERC20" } true;
[L6711]               __ret_0_ := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12215]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:43:56,494 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:43:56,494 INFO  L82        PathProgramCache]: Analyzing trace with hash -1522967299, now seen corresponding path program 1 times
[2020-11-25 02:43:56,495 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:43:56,510 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:43:56,709 INFO  L134       CoverageAnalysis]: Checked inductivity of 918 backedges. 12 proven. 6 refuted. 0 times theorem prover too weak. 900 trivial. 0 not checked.
[2020-11-25 02:43:56,709 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:43:56,709 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:43:56,709 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:43:56,709 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:43:56,709 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:43:56,710 INFO  L87              Difference]: Start difference. First operand 7699 states and 8558 transitions. cyclomatic complexity: 869 Second operand 8 states.
[2020-11-25 02:43:56,838 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:43:56,838 INFO  L93              Difference]: Finished difference Result 7726 states and 8589 transitions.
[2020-11-25 02:43:56,838 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:43:56,838 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7726 states and 8589 transitions.
[2020-11-25 02:43:56,851 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:43:56,864 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7726 states to 7705 states and 8564 transitions.
[2020-11-25 02:43:56,864 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1536
[2020-11-25 02:43:56,864 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1536
[2020-11-25 02:43:56,864 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7705 states and 8564 transitions.
[2020-11-25 02:43:56,868 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:43:56,868 INFO  L728         BuchiCegarLoop]: Abstraction has 7705 states and 8564 transitions.
[2020-11-25 02:43:56,874 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7705 states and 8564 transitions.
[2020-11-25 02:43:56,908 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7705 to 7705.
[2020-11-25 02:43:56,908 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7705 states.
[2020-11-25 02:43:56,915 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7705 states to 7705 states and 8564 transitions.
[2020-11-25 02:43:56,915 INFO  L751         BuchiCegarLoop]: Abstraction has 7705 states and 8564 transitions.
[2020-11-25 02:43:56,915 INFO  L631         BuchiCegarLoop]: Abstraction has 7705 states and 8564 transitions.
[2020-11-25 02:43:56,915 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 02:43:56,915 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7705 states and 8564 transitions.
[2020-11-25 02:43:56,923 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:43:56,923 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:43:56,923 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:43:56,925 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:43:56,925 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND TRUE   __exception
[L3018]               __tmp__Balance := Balance;
[L3019]               __tmp__DType := DType;
[L3020]               __tmp__Alloc := Alloc;
[L3021]               __tmp__balance_ADDR := balance_ADDR;
[L3022]               __tmp__M_Ref_bool := M_Ref_bool;
[L3023]               __tmp__sum := sum;
[L3024]               __tmp__M_Ref_int := M_Ref_int;
[L3025]               __tmp__sum__balances0 := sum__balances0;
[L3026]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3027]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3028]               __tmp__sum__allowed1 := sum__allowed1;
[L3029]               __tmp__M_int_Ref := M_int_Ref;
[L3030]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3031]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3032]               __tmp__Length := Length;
[L3033]               __tmp__now := now;
[L3034]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3035]               __tmp__owner_Ownable := owner_Ownable;
[L3036]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3037]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3038]               __tmp___paused_Pausable := _paused_Pausable;
[L3039]               __tmp___balances_ERC20 := _balances_ERC20;
[L3040]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3041]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3042]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3043]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3044]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3045]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3046]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3047]               __tmp__implementation_ONIT := implementation_ONIT;
[L3048]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3049]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3050]   CALL        call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L7396]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L7396]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7397]   COND FALSE  !(revert)
[L7400]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7276]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L7276]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7277]   COND FALSE  !(revert)
[L7280]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7249]               assume msgsender_MSG != null;
[L7250]               __tmp__Balance[this] := 0;
[L7251]               __tmp___name_ERC20Detailed[this] := -1540954157;
[L7252]               __tmp___symbol_ERC20Detailed[this] := -1540954157;
[L7253]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7255]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7256]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7257]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7280]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7281]   COND FALSE  !(revert)
[L7400]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7401]   COND FALSE  !(revert)
[L7404]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L6578]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6579]   COND FALSE  !(revert)
[L6582]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]               assume msgsender_MSG != null;
[L6554]               __tmp__Balance[this] := 0;
[L6555]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6556]               __tmp__sum__balances0[this] := 0;
[L6557]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6558]               __tmp__sum__allowed1[this] := 0;
[L6559]               __tmp___totalSupply_ERC20[this] := 0;
[L6582]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6583]   COND FALSE  !(revert)
[L7404]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7405]   COND FALSE  !(revert)
[L7408]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L7408]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7409]   COND FALSE  !(revert)
[L7412]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6143]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6144]   COND FALSE  !(revert)
[L6147]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6068]               assume msgsender_MSG != null;
[L6069]               __tmp__Balance[this] := 0;
[L6071]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L6071]   RET         call __var_10 := FreshRefGenerator__fail();
[L6072]   COND FALSE  !(revert)
[L6075]               __tmp___pausers_PauserRole[this] := __var_10;
[L6077]   COND TRUE   __tmp__DType[this] == ONIT
[L6078]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6368]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5817]               __var_1 := null;
[L5818]   COND FALSE  !(!(account_s164 != null))
[L5822]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5896]               __var_5 := null;
[L5897]   COND FALSE  !(!(account_s218 != null))
[L5901]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5822]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5823]   COND FALSE  !(revert)
[L5826]   COND FALSE  !(!!__var_2)
[L5830]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6368]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6369]   COND FALSE  !(revert)
[L6078]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6079]   COND FALSE  !(revert)
[L6147]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6148]   COND FALSE  !(revert)
[L7412]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7413]   COND FALSE  !(revert)
[L7416]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6422]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6423]   COND FALSE  !(revert)
[L6426]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6143]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6144]   COND FALSE  !(revert)
[L6147]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6068]               assume msgsender_MSG != null;
[L6069]               __tmp__Balance[this] := 0;
[L6071]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L6071]   RET         call __var_10 := FreshRefGenerator__fail();
[L6072]   COND FALSE  !(revert)
[L6075]               __tmp___pausers_PauserRole[this] := __var_10;
[L6077]   COND TRUE   __tmp__DType[this] == ONIT
[L6078]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6368]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5817]               __var_1 := null;
[L5818]   COND FALSE  !(!(account_s164 != null))
[L5822]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5896]               __var_5 := null;
[L5897]   COND FALSE  !(!(account_s218 != null))
[L5901]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5822]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5823]   COND FALSE  !(revert)
[L5826]   COND FALSE  !(!!__var_2)
[L5830]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6368]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6369]   COND FALSE  !(revert)
[L6078]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6079]   COND FALSE  !(revert)
[L6147]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6148]   COND FALSE  !(revert)
[L6426]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6427]   COND FALSE  !(revert)
[L6430]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6403]               assume msgsender_MSG != null;
[L6404]               __tmp__Balance[this] := 0;
[L6405]               __tmp___paused_Pausable[this] := false;
[L6407]               __tmp___paused_Pausable[this] := false;
[L6430]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L7416]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7417]   COND FALSE  !(revert)
[L7420]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L7092]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7096]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L6578]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6579]   COND FALSE  !(revert)
[L6582]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]               assume msgsender_MSG != null;
[L6554]               __tmp__Balance[this] := 0;
[L6555]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6556]               __tmp__sum__balances0[this] := 0;
[L6557]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6558]               __tmp__sum__allowed1[this] := 0;
[L6559]               __tmp___totalSupply_ERC20[this] := 0;
[L6582]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6583]   COND FALSE  !(revert)
[L7096]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7097]   COND FALSE  !(revert)
[L7100]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L7100]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7101]   COND FALSE  !(revert)
[L7104]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6143]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6144]   COND FALSE  !(revert)
[L6147]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6068]               assume msgsender_MSG != null;
[L6069]               __tmp__Balance[this] := 0;
[L6071]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L6071]   RET         call __var_10 := FreshRefGenerator__fail();
[L6072]   COND FALSE  !(revert)
[L6075]               __tmp___pausers_PauserRole[this] := __var_10;
[L6077]   COND TRUE   __tmp__DType[this] == ONIT
[L6078]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6368]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5817]               __var_1 := null;
[L5818]   COND FALSE  !(!(account_s164 != null))
[L5822]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5896]               __var_5 := null;
[L5897]   COND FALSE  !(!(account_s218 != null))
[L5901]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5822]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5823]   COND FALSE  !(revert)
[L5826]   COND FALSE  !(!!__var_2)
[L5830]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6368]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6369]   COND FALSE  !(revert)
[L6078]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6079]   COND FALSE  !(revert)
[L6147]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6148]   COND FALSE  !(revert)
[L7104]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7105]   COND FALSE  !(revert)
[L7108]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6422]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6423]   COND FALSE  !(revert)
[L6426]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6143]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6144]   COND FALSE  !(revert)
[L6147]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6068]               assume msgsender_MSG != null;
[L6069]               __tmp__Balance[this] := 0;
[L6071]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L6071]   RET         call __var_10 := FreshRefGenerator__fail();
[L6072]   COND FALSE  !(revert)
[L6075]               __tmp___pausers_PauserRole[this] := __var_10;
[L6077]   COND TRUE   __tmp__DType[this] == ONIT
[L6078]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6368]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5817]               __var_1 := null;
[L5818]   COND FALSE  !(!(account_s164 != null))
[L5822]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5896]               __var_5 := null;
[L5897]   COND FALSE  !(!(account_s218 != null))
[L5901]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5822]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5823]   COND FALSE  !(revert)
[L5826]   COND FALSE  !(!!__var_2)
[L5830]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6368]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6369]   COND FALSE  !(revert)
[L6078]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6079]   COND FALSE  !(revert)
[L6147]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6148]   COND FALSE  !(revert)
[L6426]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6427]   COND FALSE  !(revert)
[L6430]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6403]               assume msgsender_MSG != null;
[L6404]               __tmp__Balance[this] := 0;
[L6405]               __tmp___paused_Pausable[this] := false;
[L6407]               __tmp___paused_Pausable[this] := false;
[L6430]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L7108]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7077]               assume msgsender_MSG != null;
[L7078]               __tmp__Balance[this] := 0;
[L7112]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7420]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7421]   COND FALSE  !(revert)
[L7424]   CALL        call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7339]               assume msgsender_MSG != null;
[L7340]               __tmp__Balance[this] := 0;
[L7341]               __tmp__implementation_ONIT[this] := null;
[L7343]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L7343]   RET         call __var_36 := FreshRefGenerator__fail();
[L7344]   COND FALSE  !(revert)
[L7347]               __tmp__timelockList_ONIT[this] := __var_36;
[L7349]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]] := zeroRefboolArr();
[L7350]               __tmp__frozenAccount_ONIT[this] := zeroRefboolArr();
[L7352]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7353]   COND TRUE   __tmp__DType[this] == ONIT
[L7354]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6920]               __var_23 := null;
[L6921]   COND FALSE  !(!(account_s946 != null))
[L6925]   CALL        call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L5740]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5741]   COND FALSE  !(!(c_s106 >= a_s106))
[L5745]               __ret_0_ := c_s106;
[L6925]   RET         call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L6926]   COND FALSE  !(revert)
[L6929]               __tmp___totalSupply_ERC20[this] := __var_24;
[L6930]   CALL        call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L5740]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5741]   COND FALSE  !(!(c_s106 >= a_s106))
[L5745]               __ret_0_ := c_s106;
[L6930]   RET         call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L6931]   COND FALSE  !(revert)
[L6934]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s946];
[L6935]               __tmp___balances_ERC20[this][account_s946] := __var_25;
[L6936]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s946];
[L7354]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7355]   COND FALSE  !(revert)
[L7424]   RET         call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7425]   COND FALSE  !(revert)
[L3050]   RET         call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L3051]               assume revert || gas < 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND TRUE   choice == 20
[L12211]              gas := gas - 21000;
[L12212]  COND TRUE   gas >= 0
[L12213]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12214]              assume msgvalue_MSG == 0;
[L12215]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6702]               __var_14 := null;
[L6703]   COND FALSE  !(!(spender_s711 != null))
[L6707]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6708]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6709]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6710]               assert { :EventEmitted "Approval_ERC20" } true;
[L6711]               __ret_0_ := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12215]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND TRUE   choice == 20
[L12211]              gas := gas - 21000;
[L12212]  COND TRUE   gas >= 0
[L12213]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12214]              assume msgvalue_MSG == 0;
[L12215]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6702]               __var_14 := null;
[L6703]   COND FALSE  !(!(spender_s711 != null))
[L6707]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6708]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6709]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6710]               assert { :EventEmitted "Approval_ERC20" } true;
[L6711]               __ret_0_ := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12215]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:43:56,930 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:43:56,931 INFO  L82        PathProgramCache]: Analyzing trace with hash 1032682771, now seen corresponding path program 1 times
[2020-11-25 02:43:56,931 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:43:56,952 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:43:57,119 INFO  L134       CoverageAnalysis]: Checked inductivity of 894 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 894 trivial. 0 not checked.
[2020-11-25 02:43:57,119 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:43:57,120 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:43:57,120 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:43:57,120 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:43:57,120 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:43:57,120 INFO  L87              Difference]: Start difference. First operand 7705 states and 8564 transitions. cyclomatic complexity: 869 Second operand 4 states.
[2020-11-25 02:43:57,532 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:43:57,532 INFO  L93              Difference]: Finished difference Result 9905 states and 11189 transitions.
[2020-11-25 02:43:57,532 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 02:43:57,532 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9905 states and 11189 transitions.
[2020-11-25 02:43:57,553 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 02:43:57,571 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9905 states to 9380 states and 10614 transitions.
[2020-11-25 02:43:57,571 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1992
[2020-11-25 02:43:57,572 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2011
[2020-11-25 02:43:57,572 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9380 states and 10614 transitions.
[2020-11-25 02:43:57,577 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:43:57,577 INFO  L728         BuchiCegarLoop]: Abstraction has 9380 states and 10614 transitions.
[2020-11-25 02:43:57,583 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9380 states and 10614 transitions.
[2020-11-25 02:43:57,631 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9380 to 8255.
[2020-11-25 02:43:57,631 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8255 states.
[2020-11-25 02:43:57,640 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8255 states to 8255 states and 9219 transitions.
[2020-11-25 02:43:57,640 INFO  L751         BuchiCegarLoop]: Abstraction has 8255 states and 9219 transitions.
[2020-11-25 02:43:57,640 INFO  L631         BuchiCegarLoop]: Abstraction has 8255 states and 9219 transitions.
[2020-11-25 02:43:57,640 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 02:43:57,640 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8255 states and 9219 transitions.
[2020-11-25 02:43:57,649 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:43:57,649 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:43:57,649 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:43:57,650 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:43:57,650 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6125]   COND FALSE  !(DType[this] == Pausable)
[L6130]   COND TRUE   DType[this] == PauserRole
[L6131]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6131]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6132]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6125]   COND FALSE  !(DType[this] == Pausable)
[L6130]   COND TRUE   DType[this] == PauserRole
[L6131]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6131]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6132]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND TRUE   choice == 20
[L12211]              gas := gas - 21000;
[L12212]  COND TRUE   gas >= 0
[L12213]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12214]              assume msgvalue_MSG == 0;
[L12215]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6702]               __var_14 := null;
[L6703]   COND FALSE  !(!(spender_s711 != null))
[L6707]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6708]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6709]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6710]               assert { :EventEmitted "Approval_ERC20" } true;
[L6711]               __ret_0_ := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12215]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND TRUE   choice == 33
[L12132]              gas := gas - 21000;
[L12133]  COND FALSE  !(gas >= 0)
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:43:57,655 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:43:57,655 INFO  L82        PathProgramCache]: Analyzing trace with hash -1513991564, now seen corresponding path program 1 times
[2020-11-25 02:43:57,656 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:43:57,670 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:43:57,824 INFO  L134       CoverageAnalysis]: Checked inductivity of 917 backedges. 12 proven. 12 refuted. 0 times theorem prover too weak. 893 trivial. 0 not checked.
[2020-11-25 02:43:57,824 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:43:57,824 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:43:57,825 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:43:57,825 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:43:57,825 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:43:57,825 INFO  L87              Difference]: Start difference. First operand 8255 states and 9219 transitions. cyclomatic complexity: 974 Second operand 8 states.
[2020-11-25 02:43:57,976 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:43:57,976 INFO  L93              Difference]: Finished difference Result 8276 states and 9243 transitions.
[2020-11-25 02:43:57,976 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:43:57,976 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8276 states and 9243 transitions.
[2020-11-25 02:43:57,992 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:43:58,005 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8276 states to 8255 states and 9218 transitions.
[2020-11-25 02:43:58,005 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1928
[2020-11-25 02:43:58,006 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1928
[2020-11-25 02:43:58,006 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8255 states and 9218 transitions.
[2020-11-25 02:43:58,010 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:43:58,010 INFO  L728         BuchiCegarLoop]: Abstraction has 8255 states and 9218 transitions.
[2020-11-25 02:43:58,016 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8255 states and 9218 transitions.
[2020-11-25 02:43:58,049 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8255 to 8249.
[2020-11-25 02:43:58,049 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8249 states.
[2020-11-25 02:43:58,056 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8249 states to 8249 states and 9212 transitions.
[2020-11-25 02:43:58,056 INFO  L751         BuchiCegarLoop]: Abstraction has 8249 states and 9212 transitions.
[2020-11-25 02:43:58,056 INFO  L631         BuchiCegarLoop]: Abstraction has 8249 states and 9212 transitions.
[2020-11-25 02:43:58,056 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 02:43:58,056 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8249 states and 9212 transitions.
[2020-11-25 02:43:58,064 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:43:58,064 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:43:58,064 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:43:58,066 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:43:58,066 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND TRUE   choice == 20
[L12211]              gas := gas - 21000;
[L12212]  COND TRUE   gas >= 0
[L12213]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12214]              assume msgvalue_MSG == 0;
[L12215]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6702]               __var_14 := null;
[L6703]   COND FALSE  !(!(spender_s711 != null))
[L6707]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6708]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6709]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6710]               assert { :EventEmitted "Approval_ERC20" } true;
[L6711]               __ret_0_ := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12215]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND TRUE   choice == 20
[L12211]              gas := gas - 21000;
[L12212]  COND TRUE   gas >= 0
[L12213]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12214]              assume msgvalue_MSG == 0;
[L12215]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6702]               __var_14 := null;
[L6703]   COND FALSE  !(!(spender_s711 != null))
[L6707]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6708]               _allowed_ERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6709]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ERC20[this][msgsender_MSG][spender_s711];
[L6710]               assert { :EventEmitted "Approval_ERC20" } true;
[L6711]               __ret_0_ := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_ERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12215]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:43:58,071 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:43:58,071 INFO  L82        PathProgramCache]: Analyzing trace with hash 881060536, now seen corresponding path program 1 times
[2020-11-25 02:43:58,072 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:43:58,128 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:43:58,500 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 8 proven. 0 refuted. 0 times theorem prover too weak. 922 trivial. 0 not checked.
[2020-11-25 02:43:58,500 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:43:58,500 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 02:43:58,500 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:43:58,501 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 02:43:58,501 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=181, Unknown=0, NotChecked=0, Total=210
[2020-11-25 02:43:58,501 INFO  L87              Difference]: Start difference. First operand 8249 states and 9212 transitions. cyclomatic complexity: 973 Second operand 15 states.
[2020-11-25 02:44:04,383 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:44:04,383 INFO  L93              Difference]: Finished difference Result 8407 states and 9399 transitions.
[2020-11-25 02:44:04,383 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 02:44:04,383 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8407 states and 9399 transitions.
[2020-11-25 02:44:04,397 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 02:44:04,409 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8407 states to 8407 states and 9399 transitions.
[2020-11-25 02:44:04,410 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1996
[2020-11-25 02:44:04,411 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1996
[2020-11-25 02:44:04,411 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8407 states and 9399 transitions.
[2020-11-25 02:44:04,415 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:44:04,415 INFO  L728         BuchiCegarLoop]: Abstraction has 8407 states and 9399 transitions.
[2020-11-25 02:44:04,421 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8407 states and 9399 transitions.
[2020-11-25 02:44:04,459 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8407 to 8367.
[2020-11-25 02:44:04,459 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8367 states.
[2020-11-25 02:44:04,467 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8367 states to 8367 states and 9358 transitions.
[2020-11-25 02:44:04,467 INFO  L751         BuchiCegarLoop]: Abstraction has 8367 states and 9358 transitions.
[2020-11-25 02:44:04,467 INFO  L631         BuchiCegarLoop]: Abstraction has 8367 states and 9358 transitions.
[2020-11-25 02:44:04,467 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 02:44:04,467 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8367 states and 9358 transitions.
[2020-11-25 02:44:04,475 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 02:44:04,475 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:44:04,475 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:44:04,477 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:44:04,477 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND TRUE   DType[this] == ERC20Pausable
[L6121]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6121]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6122]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND TRUE   choice == 20
[L12211]              gas := gas - 21000;
[L12212]  COND TRUE   gas >= 0
[L12213]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12214]              assume msgvalue_MSG == 0;
[L12215]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND TRUE   __exception
[L2042]               __tmp__Balance := Balance;
[L2043]               __tmp__DType := DType;
[L2044]               __tmp__Alloc := Alloc;
[L2045]               __tmp__balance_ADDR := balance_ADDR;
[L2046]               __tmp__M_Ref_bool := M_Ref_bool;
[L2047]               __tmp__sum := sum;
[L2048]               __tmp__M_Ref_int := M_Ref_int;
[L2049]               __tmp__sum__balances0 := sum__balances0;
[L2050]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2051]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2052]               __tmp__sum__allowed1 := sum__allowed1;
[L2053]               __tmp__M_int_Ref := M_int_Ref;
[L2054]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L2055]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L2056]               __tmp__Length := Length;
[L2057]               __tmp__now := now;
[L2058]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2059]               __tmp__owner_Ownable := owner_Ownable;
[L2060]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L2061]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2062]               __tmp___paused_Pausable := _paused_Pausable;
[L2063]               __tmp___balances_ERC20 := _balances_ERC20;
[L2064]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L2065]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2066]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2067]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2068]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2069]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L2070]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L2071]               __tmp__implementation_ONIT := implementation_ONIT;
[L2072]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L2073]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L2074]   CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6687]               __var_14 := null;
[L6688]   COND TRUE   !(spender_s711 != null)
[L6689]               revert := true;
[L2074]   RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2075]               assume revert || gas < 0;
[L12215]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND TRUE   choice == 20
[L12211]              gas := gas - 21000;
[L12212]  COND TRUE   gas >= 0
[L12213]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12214]              assume msgvalue_MSG == 0;
[L12215]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND TRUE   __exception
[L2042]               __tmp__Balance := Balance;
[L2043]               __tmp__DType := DType;
[L2044]               __tmp__Alloc := Alloc;
[L2045]               __tmp__balance_ADDR := balance_ADDR;
[L2046]               __tmp__M_Ref_bool := M_Ref_bool;
[L2047]               __tmp__sum := sum;
[L2048]               __tmp__M_Ref_int := M_Ref_int;
[L2049]               __tmp__sum__balances0 := sum__balances0;
[L2050]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2051]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2052]               __tmp__sum__allowed1 := sum__allowed1;
[L2053]               __tmp__M_int_Ref := M_int_Ref;
[L2054]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L2055]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L2056]               __tmp__Length := Length;
[L2057]               __tmp__now := now;
[L2058]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2059]               __tmp__owner_Ownable := owner_Ownable;
[L2060]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L2061]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2062]               __tmp___paused_Pausable := _paused_Pausable;
[L2063]               __tmp___balances_ERC20 := _balances_ERC20;
[L2064]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L2065]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2066]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2067]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2068]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2069]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L2070]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L2071]               __tmp__implementation_ONIT := implementation_ONIT;
[L2072]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L2073]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L2074]   CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6687]               __var_14 := null;
[L6688]   COND TRUE   !(spender_s711 != null)
[L6689]               revert := true;
[L2074]   RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2075]               assume revert || gas < 0;
[L12215]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:44:04,482 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:44:04,482 INFO  L82        PathProgramCache]: Analyzing trace with hash 825829089, now seen corresponding path program 1 times
[2020-11-25 02:44:04,483 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:44:04,501 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:44:04,659 INFO  L134       CoverageAnalysis]: Checked inductivity of 918 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 893 trivial. 0 not checked.
[2020-11-25 02:44:04,660 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:44:04,660 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 02:44:04,660 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:44:04,660 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:44:04,660 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:44:04,661 INFO  L87              Difference]: Start difference. First operand 8367 states and 9358 transitions. cyclomatic complexity: 1003 Second operand 9 states.
[2020-11-25 02:44:04,799 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:44:04,799 INFO  L93              Difference]: Finished difference Result 8398 states and 9391 transitions.
[2020-11-25 02:44:04,799 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:44:04,799 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8398 states and 9391 transitions.
[2020-11-25 02:44:04,813 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 02:44:04,826 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8398 states to 8363 states and 9352 transitions.
[2020-11-25 02:44:04,826 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1996
[2020-11-25 02:44:04,827 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1996
[2020-11-25 02:44:04,827 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8363 states and 9352 transitions.
[2020-11-25 02:44:04,831 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:44:04,832 INFO  L728         BuchiCegarLoop]: Abstraction has 8363 states and 9352 transitions.
[2020-11-25 02:44:04,837 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8363 states and 9352 transitions.
[2020-11-25 02:44:04,876 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8363 to 8363.
[2020-11-25 02:44:04,876 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8363 states.
[2020-11-25 02:44:04,885 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8363 states to 8363 states and 9352 transitions.
[2020-11-25 02:44:04,885 INFO  L751         BuchiCegarLoop]: Abstraction has 8363 states and 9352 transitions.
[2020-11-25 02:44:04,885 INFO  L631         BuchiCegarLoop]: Abstraction has 8363 states and 9352 transitions.
[2020-11-25 02:44:04,885 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 02:44:04,885 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8363 states and 9352 transitions.
[2020-11-25 02:44:04,893 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 02:44:04,893 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:44:04,893 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:44:04,895 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:44:04,895 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_ERC200 := false;
[L3]                  call_approve_ERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND TRUE   choice == 20
[L12211]              gas := gas - 21000;
[L12212]  COND TRUE   gas >= 0
[L12213]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12214]              assume msgvalue_MSG == 0;
[L12215]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND TRUE   __exception
[L2042]               __tmp__Balance := Balance;
[L2043]               __tmp__DType := DType;
[L2044]               __tmp__Alloc := Alloc;
[L2045]               __tmp__balance_ADDR := balance_ADDR;
[L2046]               __tmp__M_Ref_bool := M_Ref_bool;
[L2047]               __tmp__sum := sum;
[L2048]               __tmp__M_Ref_int := M_Ref_int;
[L2049]               __tmp__sum__balances0 := sum__balances0;
[L2050]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2051]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2052]               __tmp__sum__allowed1 := sum__allowed1;
[L2053]               __tmp__M_int_Ref := M_int_Ref;
[L2054]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L2055]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L2056]               __tmp__Length := Length;
[L2057]               __tmp__now := now;
[L2058]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2059]               __tmp__owner_Ownable := owner_Ownable;
[L2060]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L2061]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2062]               __tmp___paused_Pausable := _paused_Pausable;
[L2063]               __tmp___balances_ERC20 := _balances_ERC20;
[L2064]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L2065]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2066]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2067]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2068]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2069]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L2070]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L2071]               __tmp__implementation_ONIT := implementation_ONIT;
[L2072]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L2073]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L2074]   CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6687]               __var_14 := null;
[L6688]   COND TRUE   !(spender_s711 != null)
[L6689]               revert := true;
[L2074]   RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2075]               assume revert || gas < 0;
[L12215]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND TRUE   choice == 20
[L12211]              gas := gas - 21000;
[L12212]  COND TRUE   gas >= 0
[L12213]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12214]              assume msgvalue_MSG == 0;
[L12215]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_ERC200 := true;
[L3]                  call_approve_ERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND TRUE   __exception
[L2042]               __tmp__Balance := Balance;
[L2043]               __tmp__DType := DType;
[L2044]               __tmp__Alloc := Alloc;
[L2045]               __tmp__balance_ADDR := balance_ADDR;
[L2046]               __tmp__M_Ref_bool := M_Ref_bool;
[L2047]               __tmp__sum := sum;
[L2048]               __tmp__M_Ref_int := M_Ref_int;
[L2049]               __tmp__sum__balances0 := sum__balances0;
[L2050]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2051]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2052]               __tmp__sum__allowed1 := sum__allowed1;
[L2053]               __tmp__M_int_Ref := M_int_Ref;
[L2054]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L2055]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L2056]               __tmp__Length := Length;
[L2057]               __tmp__now := now;
[L2058]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2059]               __tmp__owner_Ownable := owner_Ownable;
[L2060]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L2061]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2062]               __tmp___paused_Pausable := _paused_Pausable;
[L2063]               __tmp___balances_ERC20 := _balances_ERC20;
[L2064]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L2065]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2066]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2067]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2068]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2069]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L2070]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L2071]               __tmp__implementation_ONIT := implementation_ONIT;
[L2072]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L2073]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L2074]   CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6687]               __var_14 := null;
[L6688]   COND TRUE   !(spender_s711 != null)
[L6689]               revert := true;
[L2074]   RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2075]               assume revert || gas < 0;
[L12215]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:44:04,900 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:44:04,900 INFO  L82        PathProgramCache]: Analyzing trace with hash 289994592, now seen corresponding path program 1 times
[2020-11-25 02:44:04,901 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:44:04,922 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:44:04,948 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:44:05,105 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:44:05,105 INFO  L82        PathProgramCache]: Analyzing trace with hash -1694331487, now seen corresponding path program 1 times
[2020-11-25 02:44:05,106 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:44:05,110 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:44:05,115 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:44:05,129 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:44:05,130 INFO  L82        PathProgramCache]: Analyzing trace with hash 1415839040, now seen corresponding path program 1 times
[2020-11-25 02:44:05,130 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:44:05,156 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:44:05,188 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 3137 to 6271
Garbage collection #8: 6271 nodes / 0 free / 0.002s / 0.005s total
Resizing node table from 6271 to 12541
[2020-11-25 02:44:05,527 WARN  L188               SmtUtils]: Spent 120.00 ms on a formula simplification. DAG size of input: 127 DAG size of output: 121
[2020-11-25 02:44:05,679 WARN  L188               SmtUtils]: Spent 150.00 ms on a formula simplification that was a NOOP. DAG size: 328
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 7933 to 15859
[2020-11-25 02:44:06,280 WARN  L188               SmtUtils]: Spent 578.00 ms on a formula simplification. DAG size of input: 258 DAG size of output: 258
[2020-11-25 02:44:07,090 WARN  L188               SmtUtils]: Spent 805.00 ms on a formula simplification. DAG size of input: 358 DAG size of output: 317
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3517 to 7027
Garbage collection #7: 7027 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 7027 to 14051
Garbage collection #8: 14051 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 14051 to 28099
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 4357 to 8713
Garbage collection #8: 8713 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 8713 to 17419
[2020-11-25 02:44:07,312 WARN  L188               SmtUtils]: Spent 192.00 ms on a formula simplification. DAG size of input: 188 DAG size of output: 182
[2020-11-25 02:44:07,593 WARN  L188               SmtUtils]: Spent 279.00 ms on a formula simplification that was a NOOP. DAG size: 441
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 11177 to 22349
[2020-11-25 02:44:08,359 WARN  L188               SmtUtils]: Spent 751.00 ms on a formula simplification. DAG size of input: 358 DAG size of output: 358
[2020-11-25 02:44:08,694 WARN  L188               SmtUtils]: Spent 330.00 ms on a formula simplification that was a NOOP. DAG size: 358
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 8543 to 17077
Garbage collection #8: 17077 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 17077 to 34147
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
[2020-11-25 02:44:08,914 WARN  L188               SmtUtils]: Spent 202.00 ms on a formula simplification. DAG size of input: 196 DAG size of output: 196
[2020-11-25 02:44:08,925 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-11-25 02:44:09,705 WARN  L188               SmtUtils]: Spent 121.00 ms on a formula simplification. DAG size of input: 231 DAG size of output: 217
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
[2020-11-25 02:44:10,972 WARN  L188               SmtUtils]: Spent 952.00 ms on a formula simplification. DAG size of input: 447 DAG size of output: 421
Garbage collection #1: 151 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 151 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 02:44:11,178 WARN  L188               SmtUtils]: Spent 160.00 ms on a formula simplification that was a NOOP. DAG size: 252
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
[2020-11-25 02:44:11,386 WARN  L188               SmtUtils]: Spent 138.00 ms on a formula simplification. DAG size of input: 217 DAG size of output: 216
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
[2020-11-25 02:44:11,636 WARN  L188               SmtUtils]: Spent 206.00 ms on a formula simplification that was a NOOP. DAG size: 415
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
[2020-11-25 02:44:11,813 WARN  L188               SmtUtils]: Spent 171.00 ms on a formula simplification that was a NOOP. DAG size: 375
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-25 02:44:12,079 WARN  L188               SmtUtils]: Spent 134.00 ms on a formula simplification that was a NOOP. DAG size: 328
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
[2020-11-25 02:44:12,584 WARN  L188               SmtUtils]: Spent 494.00 ms on a formula simplification. DAG size of input: 258 DAG size of output: 258
[2020-11-25 02:44:13,476 WARN  L188               SmtUtils]: Spent 889.00 ms on a formula simplification. DAG size of input: 357 DAG size of output: 317
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #7: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
Garbage collection #8: 14051 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 14051 to 28099
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #8: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
[2020-11-25 02:44:13,714 WARN  L188               SmtUtils]: Spent 218.00 ms on a formula simplification. DAG size of input: 189 DAG size of output: 183
[2020-11-25 02:44:13,947 WARN  L188               SmtUtils]: Spent 231.00 ms on a formula simplification that was a NOOP. DAG size: 442
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
Garbage collection #8: 22349 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 22349 to 44687
[2020-11-25 02:44:14,285 WARN  L188               SmtUtils]: Spent 326.00 ms on a formula simplification that was a NOOP. DAG size: 359
[2020-11-25 02:44:16,054 WARN  L188               SmtUtils]: Spent 1.77 s on a formula simplification. DAG size of input: 693 DAG size of output: 688
Garbage collection #1: 269 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 269 to 523
Garbage collection #2: 523 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 523 to 1039
Garbage collection #3: 1039 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1039 to 2069
Garbage collection #4: 2069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2069 to 4133
Garbage collection #5: 4133 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 4133 to 8263
Garbage collection #6: 8263 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 8263 to 16519
Garbage collection #7: 16519 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 16519 to 33037
Garbage collection #8: 33037 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 33037 to 66071
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
[2020-11-25 02:44:16,755 WARN  L188               SmtUtils]: Spent 645.00 ms on a formula simplification. DAG size of input: 312 DAG size of output: 312
[2020-11-25 02:44:17,278 WARN  L188               SmtUtils]: Spent 487.00 ms on a formula simplification that was a NOOP. DAG size: 476
Garbage collection #1: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #2: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #3: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #4: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #5: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #6: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #7: 9973 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9973 to 19937
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #7: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
[2020-11-25 02:44:18,645 WARN  L188               SmtUtils]: Spent 1.35 s on a formula simplification. DAG size of input: 350 DAG size of output: 337
[2020-11-25 02:44:19,752 WARN  L188               SmtUtils]: Spent 1.11 s on a formula simplification. DAG size of input: 503 DAG size of output: 502
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
Garbage collection #8: 22349 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 22349 to 44687
Garbage collection #9: 44687 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 44687 to 89371
Garbage collection #10: 89371 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 89371 to 139369
[2020-11-25 02:44:22,939 WARN  L188               SmtUtils]: Spent 3.15 s on a formula simplification. DAG size of input: 510 DAG size of output: 497
[2020-11-25 02:44:22,969 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:44:22,999 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:44:23,013 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:44:23 BasicIcfg
[2020-11-25 02:44:23,013 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 02:44:23,013 INFO  L168              Benchmark]: Toolchain (without parser) took 36294.26 ms. Allocated memory was 1.0 GB in the beginning and 3.9 GB in the end (delta: 2.9 GB). Free memory was 919.1 MB in the beginning and 1.5 GB in the end (delta: -615.2 MB). Peak memory consumption was 2.9 GB. Max. memory is 15.3 GB.
[2020-11-25 02:44:23,014 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 02:44:23,014 INFO  L168              Benchmark]: Boogie Preprocessor took 183.87 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.0 MB in the end (delta: 27.1 MB). Peak memory consumption was 27.1 MB. Max. memory is 15.3 GB.
[2020-11-25 02:44:23,014 INFO  L168              Benchmark]: UtopiaSpecLang took 92.75 ms. Allocated memory is still 1.0 GB. Free memory was 892.0 MB in the beginning and 881.2 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:44:23,015 INFO  L168              Benchmark]: Boogie Printer took 31.04 ms. Allocated memory is still 1.0 GB. Free memory was 881.2 MB in the beginning and 870.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:44:23,015 INFO  L168              Benchmark]: RCFGBuilder took 1454.14 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 56.1 MB). Free memory was 870.5 MB in the beginning and 756.2 MB in the end (delta: 114.3 MB). Peak memory consumption was 170.4 MB. Max. memory is 15.3 GB.
[2020-11-25 02:44:23,016 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.13 ms. Allocated memory is still 1.1 GB. Free memory was 756.2 MB in the beginning and 747.0 MB in the end (delta: 9.2 MB). Peak memory consumption was 9.2 MB. Max. memory is 15.3 GB.
[2020-11-25 02:44:23,016 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3223.63 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 462.9 MB). Free memory was 747.0 MB in the beginning and 861.7 MB in the end (delta: -114.7 MB). Peak memory consumption was 351.6 MB. Max. memory is 15.3 GB.
[2020-11-25 02:44:23,016 INFO  L168              Benchmark]: BlockEncodingV2 took 296.83 ms. Allocated memory is still 1.5 GB. Free memory was 861.7 MB in the beginning and 704.2 MB in the end (delta: 157.4 MB). Peak memory consumption was 157.4 MB. Max. memory is 15.3 GB.
[2020-11-25 02:44:23,017 INFO  L168              Benchmark]: BuchiAutomizer took 30971.80 ms. Allocated memory was 1.5 GB in the beginning and 3.9 GB in the end (delta: 2.4 GB). Free memory was 704.2 MB in the beginning and 1.5 GB in the end (delta: -830.1 MB). Peak memory consumption was 2.1 GB. Max. memory is 15.3 GB.
[2020-11-25 02:44:23,020 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    11596 locations, 21005 edges
  - StatisticsResult: Encoded RCFG
    11450 locations, 20602 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 183.87 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.0 MB in the end (delta: 27.1 MB). Peak memory consumption was 27.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 92.75 ms. Allocated memory is still 1.0 GB. Free memory was 892.0 MB in the beginning and 881.2 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 31.04 ms. Allocated memory is still 1.0 GB. Free memory was 881.2 MB in the beginning and 870.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1454.14 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 56.1 MB). Free memory was 870.5 MB in the beginning and 756.2 MB in the end (delta: 114.3 MB). Peak memory consumption was 170.4 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.13 ms. Allocated memory is still 1.1 GB. Free memory was 756.2 MB in the beginning and 747.0 MB in the end (delta: 9.2 MB). Peak memory consumption was 9.2 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3223.63 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 462.9 MB). Free memory was 747.0 MB in the beginning and 861.7 MB in the end (delta: -114.7 MB). Peak memory consumption was 351.6 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 296.83 ms. Allocated memory is still 1.5 GB. Free memory was 861.7 MB in the beginning and 704.2 MB in the end (delta: 157.4 MB). Peak memory consumption was 157.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 30971.80 ms. Allocated memory was 1.5 GB in the beginning and 3.9 GB in the end (delta: 2.4 GB). Free memory was 704.2 MB in the beginning and 1.5 GB in the end (delta: -830.1 MB). Peak memory consumption was 2.1 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    4670 locations, 6457 edges
  - StatisticsResult: BuchiProgram size
    11596 locations, 21005 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 12 terminating modules (12 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.12 modules have a trivial ranking function, the largest among these consists of 15 locations. The remainder module has 8363 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 30.9s and 13 iterations.  TraceHistogramMax:8. Analysis of lassos took 20.3s. Construction of modules took 6.0s. BÃ¼chi inclusion checks took 2.6s. Highest rank in rank-based complementation 0. Minimization of det autom 12. Minimization of nondet autom 0. Automata minimization 0.8s AutomataMinimizationTime, 12 MinimizatonAttempts, 3449 StatesRemovedByMinimization, 7 NontrivialMinimizations. Non-live state removal took 0.4s Buchi closure took 0.0s. Biggest automaton had 8367 states and ocurred in iteration 11.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 101725 SDtfs, 34547 SDslu, 403726 SDs, 0 SdLazy, 87466 SolverSat, 6187 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 6.0s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU12 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(789885600000000000000000029) = (new ONIT)({from : 789885600000000000000000023});
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
ERC20(789885600000000000000000029).approve~address~uint256.gas(3979002)({from : 789885600000000000000000005, spender : 0, value : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L2039]              havoc __exception;
[L2040]              revert := false;
[L2041]   COND TRUE  __exception
[L2042]              __tmp__Balance := Balance;
[L2043]              __tmp__DType := DType;
[L2044]              __tmp__Alloc := Alloc;
[L2045]              __tmp__balance_ADDR := balance_ADDR;
[L2046]              __tmp__M_Ref_bool := M_Ref_bool;
[L2047]              __tmp__sum := sum;
[L2048]              __tmp__M_Ref_int := M_Ref_int;
[L2049]              __tmp__sum__balances0 := sum__balances0;
[L2050]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2051]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2052]              __tmp__sum__allowed1 := sum__allowed1;
[L2053]              __tmp__M_int_Ref := M_int_Ref;
[L2054]              __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L2055]              __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L2056]              __tmp__Length := Length;
[L2057]              __tmp__now := now;
[L2058]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2059]              __tmp__owner_Ownable := owner_Ownable;
[L2060]              __tmp__newOwner_Ownable := newOwner_Ownable;
[L2061]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2062]              __tmp___paused_Pausable := _paused_Pausable;
[L2063]              __tmp___balances_ERC20 := _balances_ERC20;
[L2064]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2065]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2066]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2067]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2068]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2069]              __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L2070]              __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L2071]              __tmp__implementation_ONIT := implementation_ONIT;
[L2072]              __tmp__timelockList_ONIT := timelockList_ONIT;
[L2073]              __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L2074]   CALL       call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6687]              __var_14 := null;
[L6688]   COND TRUE  !(spender_s711 != null)
[L6689]              revert := true;
[L2074]   RET        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2075]              assume revert || gas < 0;
[L12215]  RET        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);

Loop:
ERC20(789885600000000000000000029).approve~address~uint256.gas(3979001)({from : 789885600000000000000000007, spender : 0, value : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L2039]              havoc __exception;
[L2040]              revert := false;
[L2041]   COND TRUE  __exception
[L2042]              __tmp__Balance := Balance;
[L2043]              __tmp__DType := DType;
[L2044]              __tmp__Alloc := Alloc;
[L2045]              __tmp__balance_ADDR := balance_ADDR;
[L2046]              __tmp__M_Ref_bool := M_Ref_bool;
[L2047]              __tmp__sum := sum;
[L2048]              __tmp__M_Ref_int := M_Ref_int;
[L2049]              __tmp__sum__balances0 := sum__balances0;
[L2050]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2051]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2052]              __tmp__sum__allowed1 := sum__allowed1;
[L2053]              __tmp__M_int_Ref := M_int_Ref;
[L2054]              __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L2055]              __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L2056]              __tmp__Length := Length;
[L2057]              __tmp__now := now;
[L2058]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2059]              __tmp__owner_Ownable := owner_Ownable;
[L2060]              __tmp__newOwner_Ownable := newOwner_Ownable;
[L2061]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2062]              __tmp___paused_Pausable := _paused_Pausable;
[L2063]              __tmp___balances_ERC20 := _balances_ERC20;
[L2064]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2065]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2066]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2067]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2068]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2069]              __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L2070]              __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L2071]              __tmp__implementation_ONIT := implementation_ONIT;
[L2072]              __tmp__timelockList_ONIT := timelockList_ONIT;
[L2073]              __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L2074]   CALL       call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6687]              __var_14 := null;
[L6688]   COND TRUE  !(spender_s711 != null)
[L6689]              revert := true;
[L2074]   RET        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2075]              assume revert || gas < 0;
[L12215]  RET        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
