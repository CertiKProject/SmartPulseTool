This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 01:16:24,358 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 01:16:24,360 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 01:16:24,371 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 01:16:24,371 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 01:16:24,372 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 01:16:24,373 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 01:16:24,375 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 01:16:24,376 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 01:16:24,377 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 01:16:24,378 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 01:16:24,378 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 01:16:24,379 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 01:16:24,380 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 01:16:24,381 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 01:16:24,381 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 01:16:24,382 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 01:16:24,383 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 01:16:24,385 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 01:16:24,386 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 01:16:24,387 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 01:16:24,388 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 01:16:24,390 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 01:16:24,390 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 01:16:24,390 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 01:16:24,391 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 01:16:24,391 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 01:16:24,392 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 01:16:24,392 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 01:16:24,392 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 01:16:24,393 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 01:16:24,393 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 01:16:24,394 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 01:16:24,394 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 01:16:24,395 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 01:16:24,395 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 01:16:24,396 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 01:16:24,396 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 01:16:24,396 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 01:16:24,397 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 01:16:24,397 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 01:16:24,398 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 01:16:24,406 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 01:16:24,406 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 01:16:24,407 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 01:16:24,407 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 01:16:24,407 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 01:16:24,407 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 01:16:24,407 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 01:16:24,407 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 01:16:24,408 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 01:16:24,408 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 01:16:24,408 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 01:16:24,408 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 01:16:24,408 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 01:16:24,408 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 01:16:24,408 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 01:16:24,408 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 01:16:24,408 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 01:16:24,408 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 01:16:24,409 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 01:16:24,409 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 01:16:24,409 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 01:16:24,409 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 01:16:24,409 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 01:16:24,409 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 01:16:24,409 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 01:16:24,409 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 01:16:24,430 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 01:16:24,442 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 01:16:24,445 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 01:16:24,446 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 01:16:24,446 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 01:16:24,447 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transfer-self.bpl
[2020-11-25 01:16:24,447 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transfer-self.bpl'
[2020-11-25 01:16:24,529 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 01:16:24,530 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 01:16:24,530 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 01:16:24,530 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 01:16:24,531 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 01:16:24,548 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:16:24" (1/1) ...
[2020-11-25 01:16:24,549 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:16:24" (1/1) ...
[2020-11-25 01:16:24,582 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:16:24" (1/1) ...
[2020-11-25 01:16:24,583 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:16:24" (1/1) ...
[2020-11-25 01:16:24,607 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:16:24" (1/1) ...
[2020-11-25 01:16:24,618 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:16:24" (1/1) ...
[2020-11-25 01:16:24,625 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:16:24" (1/1) ...
[2020-11-25 01:16:24,635 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 01:16:24,636 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 01:16:24,636 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 01:16:24,638 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 01:16:24,642 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:16:24" (1/1) ...
[2020-11-25 01:16:24,659 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]))))
[2020-11-25 01:16:24,665 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]))))
[2020-11-25 01:16:24,673 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]))))
[2020-11-25 01:16:24,679 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s307 && value_s307<=_balances_ERC20[this][msg.sender] ) && value_s307>=0 ) && value_s307<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s307]>=0 ) && _balances_ERC20[this][to_s307]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IdentifierExpression[to_s307,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s307,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s307,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s307,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[to_s307,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[to_s307,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 01:16:24,681 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( __ret_0_==true && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowed_ERC20[this]==( old(_allowed_ERC20[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]]
[2020-11-25 01:16:24,687 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]))))
[2020-11-25 01:16:24,687 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC200) ==> ( <>AP(success_transfer_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 01:16:24,696 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:16:24 PropertyContainer
[2020-11-25 01:16:24,696 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 01:16:24,696 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 01:16:24,696 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 01:16:24,696 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 01:16:24,697 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:16:24" (1/2) ...
[2020-11-25 01:16:24,697 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 01:16:24,698 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 01:16:24,711 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:16:24" (2/2) ...
[2020-11-25 01:16:24,711 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 01:16:24,712 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 01:16:24,712 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 01:16:24,712 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 01:16:24,714 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:16:24" (1/2) ...
[2020-11-25 01:16:24,766 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 01:16:24,766 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 01:16:24,766 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 01:16:24,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 01:16:24,767 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 01:16:24,767 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 01:16:24,767 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 01:16:24,767 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 01:16:24,767 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 01:16:24,767 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 01:16:24,767 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 01:16:24,767 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 01:16:24,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 01:16:24,767 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 01:16:24,767 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 01:16:24,768 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 01:16:24,768 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 01:16:24,768 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 01:16:24,768 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 01:16:24,768 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 01:16:24,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 01:16:24,768 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 01:16:24,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 01:16:24,768 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 01:16:24,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 01:16:24,768 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 01:16:24,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 01:16:24,769 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 01:16:24,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 01:16:24,769 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 01:16:24,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 01:16:24,769 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 01:16:24,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 01:16:24,769 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 01:16:24,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 01:16:24,769 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 01:16:24,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 01:16:24,769 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 01:16:24,769 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 01:16:24,770 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 01:16:24,770 INFO  L130     BoogieDeclarations]: Found specification of procedure BT_BT_NoBaseCtor__success
[2020-11-25 01:16:24,770 INFO  L130     BoogieDeclarations]: Found specification of procedure BT_BT
[2020-11-25 01:16:24,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure BT_BT
[2020-11-25 01:16:24,770 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BT
[2020-11-25 01:16:24,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BT
[2020-11-25 01:16:24,770 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_BT
[2020-11-25 01:16:24,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_BT
[2020-11-25 01:16:24,770 INFO  L130     BoogieDeclarations]: Found specification of procedure name_BT
[2020-11-25 01:16:24,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_BT
[2020-11-25 01:16:24,770 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_BT
[2020-11-25 01:16:24,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_BT
[2020-11-25 01:16:24,770 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_BT
[2020-11-25 01:16:24,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_BT
[2020-11-25 01:16:24,771 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_BT
[2020-11-25 01:16:24,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_BT
[2020-11-25 01:16:24,771 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 01:16:24,771 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 01:16:24,771 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 01:16:24,771 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 01:16:24,771 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 01:16:24,771 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 01:16:24,771 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 01:16:24,771 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 01:16:24,771 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 01:16:24,771 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BT
[2020-11-25 01:16:24,771 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 01:16:24,772 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 01:16:24,772 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 01:16:24,772 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 01:16:24,772 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 01:16:24,772 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 01:16:24,772 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 01:16:24,772 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 01:16:24,772 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 01:16:24,772 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 01:16:24,772 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 01:16:24,772 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 01:16:24,772 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 01:16:24,773 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 01:16:24,773 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 01:16:24,773 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 01:16:24,773 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 01:16:24,773 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 01:16:24,773 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 01:16:24,773 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 01:16:24,773 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 01:16:24,773 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 01:16:24,773 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 01:16:24,773 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 01:16:24,773 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 01:16:24,774 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 01:16:24,774 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 01:16:24,774 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 01:16:24,774 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 01:16:24,774 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 01:16:24,774 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 01:16:24,774 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 01:16:24,774 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 01:16:24,774 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 01:16:24,774 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 01:16:24,774 INFO  L130     BoogieDeclarations]: Found specification of procedure BT_BT_NoBaseCtor__fail
[2020-11-25 01:16:24,774 INFO  L130     BoogieDeclarations]: Found specification of procedure BT_BT__success
[2020-11-25 01:16:24,774 INFO  L130     BoogieDeclarations]: Found specification of procedure BT_BT__fail
[2020-11-25 01:16:24,774 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BT__success
[2020-11-25 01:16:24,775 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BT__fail
[2020-11-25 01:16:24,775 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_BT__success
[2020-11-25 01:16:24,775 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_BT__fail
[2020-11-25 01:16:24,775 INFO  L130     BoogieDeclarations]: Found specification of procedure name_BT__success
[2020-11-25 01:16:24,775 INFO  L130     BoogieDeclarations]: Found specification of procedure name_BT__fail
[2020-11-25 01:16:24,775 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_BT__success
[2020-11-25 01:16:24,775 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_BT__fail
[2020-11-25 01:16:24,775 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_BT__success
[2020-11-25 01:16:24,775 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_BT__fail
[2020-11-25 01:16:24,775 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_BT__success
[2020-11-25 01:16:24,775 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_BT__fail
[2020-11-25 01:16:24,775 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 01:16:24,776 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 01:16:24,776 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 01:16:24,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 01:16:24,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 01:16:24,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 01:16:24,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 01:16:24,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 01:16:24,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 01:16:24,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 01:16:24,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 01:16:24,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 01:16:24,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 01:16:24,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 01:16:24,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 01:16:24,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 01:16:24,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 01:16:24,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 01:16:24,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 01:16:24,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 01:16:24,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 01:16:24,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 01:16:24,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 01:16:24,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 01:16:24,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 01:16:24,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 01:16:24,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 01:16:24,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 01:16:24,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 01:16:24,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 01:16:24,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 01:16:24,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 01:16:24,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 01:16:24,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 01:16:24,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 01:16:24,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 01:16:24,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 01:16:24,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 01:16:24,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 01:16:24,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 01:16:24,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 01:16:24,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 01:16:24,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 01:16:24,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 01:16:24,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 01:16:24,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 01:16:24,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 01:16:24,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 01:16:24,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 01:16:24,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure BT_BT_NoBaseCtor__fail
[2020-11-25 01:16:24,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure BT_BT_NoBaseCtor__success
[2020-11-25 01:16:24,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure BT_BT__fail
[2020-11-25 01:16:24,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure BT_BT__success
[2020-11-25 01:16:24,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BT__fail
[2020-11-25 01:16:24,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BT__success
[2020-11-25 01:16:24,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_BT__fail
[2020-11-25 01:16:24,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_BT__success
[2020-11-25 01:16:24,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_BT__fail
[2020-11-25 01:16:24,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_BT__success
[2020-11-25 01:16:24,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_BT__fail
[2020-11-25 01:16:24,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_BT__success
[2020-11-25 01:16:24,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_BT__fail
[2020-11-25 01:16:24,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_BT__success
[2020-11-25 01:16:24,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_BT__fail
[2020-11-25 01:16:24,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_BT__success
[2020-11-25 01:16:24,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 01:16:24,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 01:16:24,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 01:16:24,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 01:16:24,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 01:16:24,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 01:16:24,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 01:16:24,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 01:16:24,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 01:16:24,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 01:16:24,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 01:16:24,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 01:16:24,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BT
[2020-11-25 01:16:24,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 01:16:24,783 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 01:16:24,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 01:16:24,974 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:16:24,974 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:16:24,975 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:16:25,433 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 01:16:25,434 INFO  L286             CfgBuilder]: Removed 4 assue(true) statements.
[2020-11-25 01:16:25,435 INFO  L202        PluginConnector]: Adding new model BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:16:25 BoogieIcfgContainer
[2020-11-25 01:16:25,436 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:16:24" (2/2) ...
[2020-11-25 01:16:25,436 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 01:16:25,436 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@9bc1eff and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:16:25, skipping insertion in model container
[2020-11-25 01:16:25,436 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 01:16:25,436 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 01:16:25,437 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 01:16:25,438 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 01:16:25,438 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:16:24" (1/3) ...
[2020-11-25 01:16:25,439 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@643c580a and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:16:25, skipping insertion in model container
[2020-11-25 01:16:25,439 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:16:24" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 01:16:25,476 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:16:25 NWAContainer
[2020-11-25 01:16:25,476 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 01:16:25,476 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 01:16:25,477 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 01:16:25,477 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 01:16:25,478 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:16:25" (3/4) ...
[2020-11-25 01:16:25,479 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@54dc7612 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:16:25, skipping insertion in model container
[2020-11-25 01:16:25,479 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:16:25" (4/4) ...
[2020-11-25 01:16:25,482 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 01:16:25,486 INFO  L110   BuchiProductObserver]: Initial RCFG 1240 locations, 1626 edges
[2020-11-25 01:16:25,486 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 01:16:25,496 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 01:16:26,690 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 01:16:26,694 INFO  L110   BuchiProductObserver]: BuchiProgram size 3022 locations, 5301 edges
[2020-11-25 01:16:26,694 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:16:26 BoogieIcfgContainer
[2020-11-25 01:16:26,695 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 01:16:26,695 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 01:16:26,695 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 01:16:26,696 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 01:16:26,697 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:16:26" (1/1) ...
[2020-11-25 01:16:26,766 INFO  L313           BlockEncoder]: Initial Icfg 3022 locations, 5301 edges
[2020-11-25 01:16:26,766 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 01:16:26,767 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 01:16:26,767 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 01:16:26,768 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 01:16:26,780 INFO  L70    emoveInfeasibleEdges]: Removed 75 edges and 11 locations because of local infeasibility
[2020-11-25 01:16:26,788 INFO  L70        RemoveSinkStates]: Removed 26 edges and 17 locations by removing sink states
[2020-11-25 01:16:26,797 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 01:16:26,800 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 01:16:26,802 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 01:16:26,803 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 01:16:26,806 INFO  L313           BlockEncoder]: Encoded RCFG 2972 locations, 5168 edges
[2020-11-25 01:16:26,806 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:16:26 BasicIcfg
[2020-11-25 01:16:26,806 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 01:16:26,807 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 01:16:26,807 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 01:16:26,809 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 01:16:26,809 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:16:26,809 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:16:24" (1/6) ...
[2020-11-25 01:16:26,811 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@42d76a41 and model type BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:16:26, skipping insertion in model container
[2020-11-25 01:16:26,811 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:16:26,811 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:16:24" (2/6) ...
[2020-11-25 01:16:26,811 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@42d76a41 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:16:26, skipping insertion in model container
[2020-11-25 01:16:26,811 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:16:26,811 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:16:25" (3/6) ...
[2020-11-25 01:16:26,811 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@42d76a41 and model type BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:16:26, skipping insertion in model container
[2020-11-25 01:16:26,811 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:16:26,811 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:16:25" (4/6) ...
[2020-11-25 01:16:26,811 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@42d76a41 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:16:26, skipping insertion in model container
[2020-11-25 01:16:26,811 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:16:26,812 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:16:26" (5/6) ...
[2020-11-25 01:16:26,812 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@42d76a41 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 01:16:26, skipping insertion in model container
[2020-11-25 01:16:26,812 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:16:26,812 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:16:26" (6/6) ...
[2020-11-25 01:16:26,813 INFO  L404   chiAutomizerObserver]: Analyzing ICFG BT_0xBC52a198619553fc1A0F925bB5B2E6EfaA9e45F1_transfer-self.bpl_BEv2
[2020-11-25 01:16:26,848 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 01:16:26,848 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 01:16:26,848 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 01:16:26,848 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 01:16:26,848 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 01:16:26,848 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 01:16:26,848 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 01:16:26,848 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 01:16:26,848 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 01:16:26,877 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2972 states.
[2020-11-25 01:16:26,917 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:16:26,917 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:16:26,917 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:16:26,925 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:16:26,925 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:16:26,925 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 01:16:26,925 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2972 states.
[2020-11-25 01:16:26,939 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:16:26,939 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:16:26,939 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:16:26,941 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:16:26,941 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L3463]              assume null == 0;
[L3464]  CALL        call this := FreshRefGenerator__success();
[L1500]              havoc newRef;
[L1501]              assume Alloc[newRef] == false;
[L1502]              Alloc[newRef] := true;
[L1503]              assume newRef != null;
[L3464]  RET         call this := FreshRefGenerator__success();
[L3465]              assume now >= 0;
[L3466]              assume DType[this] == BT;
[L3467]              assume msgvalue_MSG == 0;
[L3468]              gas := gas - 53000;
[L3469]  CALL        call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L726]               havoc __exception;
[L727]               revert := false;
[L728]   COND FALSE  !(__exception)
[L750]   CALL        call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L2275]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND TRUE   revert
[L750]   RET         call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L751]               assume !revert && gas >= 0;
[L3469]  RET         call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L3470]              assume !revert && gas >= 0;

Loop:
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND TRUE   choice == 14
[L3365]              gas := gas - 21000;
[L3366]  COND FALSE  !(gas >= 0)
[L3473]  RET         call CorralChoice_BT(this);

[2020-11-25 01:16:26,953 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:16:26,954 INFO  L82        PathProgramCache]: Analyzing trace with hash -242430560, now seen corresponding path program 1 times
[2020-11-25 01:16:26,958 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:16:26,975 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:16:27,020 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:16:27,022 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:16:27,022 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:16:27,026 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:16:27,151 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:16:27,151 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:16:27,152 INFO  L87              Difference]: Start difference. First operand 2972 states. Second operand 3 states.
[2020-11-25 01:16:27,281 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:16:27,282 INFO  L93              Difference]: Finished difference Result 2111 states and 2380 transitions.
[2020-11-25 01:16:27,282 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:16:27,283 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2111 states and 2380 transitions.
[2020-11-25 01:16:27,292 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:16:27,306 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2111 states to 2111 states and 2380 transitions.
[2020-11-25 01:16:27,307 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 01:16:27,308 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 551
[2020-11-25 01:16:27,309 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2111 states and 2380 transitions.
[2020-11-25 01:16:27,314 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:16:27,314 INFO  L728         BuchiCegarLoop]: Abstraction has 2111 states and 2380 transitions.
[2020-11-25 01:16:27,327 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2111 states and 2380 transitions.
[2020-11-25 01:16:27,361 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2111 to 2111.
[2020-11-25 01:16:27,362 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2111 states.
[2020-11-25 01:16:27,366 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2111 states to 2111 states and 2380 transitions.
[2020-11-25 01:16:27,367 INFO  L751         BuchiCegarLoop]: Abstraction has 2111 states and 2380 transitions.
[2020-11-25 01:16:27,367 INFO  L631         BuchiCegarLoop]: Abstraction has 2111 states and 2380 transitions.
[2020-11-25 01:16:27,367 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 01:16:27,367 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2111 states and 2380 transitions.
[2020-11-25 01:16:27,373 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:16:27,373 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:16:27,373 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:16:27,374 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:16:27,374 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L3463]              assume null == 0;
[L3464]  CALL        call this := FreshRefGenerator__success();
[L1500]              havoc newRef;
[L1501]              assume Alloc[newRef] == false;
[L1502]              Alloc[newRef] := true;
[L1503]              assume newRef != null;
[L3464]  RET         call this := FreshRefGenerator__success();
[L3465]              assume now >= 0;
[L3466]              assume DType[this] == BT;
[L3467]              assume msgvalue_MSG == 0;
[L3468]              gas := gas - 53000;
[L3469]  CALL        call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L726]               havoc __exception;
[L727]               revert := false;
[L728]   COND FALSE  !(__exception)
[L750]   CALL        call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L2275]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND TRUE   revert
[L750]   RET         call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L751]               assume !revert && gas >= 0;
[L3469]  RET         call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L3470]              assume !revert && gas >= 0;
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND TRUE   choice == 11
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume value_s307 >= 0 && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s307 && value_s307 <= _balances_ERC20[this][msgsender_MSG]) && value_s307 >= 0) && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s307] >= 0) && _balances_ERC20[this][to_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L415]               havoc __exception;
[L416]               revert := false;
[L417]   COND FALSE  !(__exception)
[L439]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L1817]  COND TRUE   !(value_s307 <= _balances_ERC20[this][msgsender_MSG])
[L1818]              revert := true;
[L439]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L440]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this]));
[L2]                 revert := revert_hold;
[L3387]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L3473]  RET         call CorralChoice_BT(this);

Loop:
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND TRUE   choice == 11
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume value_s307 >= 0 && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s307 && value_s307 <= _balances_ERC20[this][msgsender_MSG]) && value_s307 >= 0) && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s307] >= 0) && _balances_ERC20[this][to_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L415]               havoc __exception;
[L416]               revert := false;
[L417]   COND FALSE  !(__exception)
[L439]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L1817]  COND TRUE   !(value_s307 <= _balances_ERC20[this][msgsender_MSG])
[L1818]              revert := true;
[L439]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L440]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this]));
[L2]                 revert := revert_hold;
[L3387]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L3473]  RET         call CorralChoice_BT(this);

[2020-11-25 01:16:27,378 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:16:27,378 INFO  L82        PathProgramCache]: Analyzing trace with hash -1769185545, now seen corresponding path program 1 times
[2020-11-25 01:16:27,379 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:16:27,388 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:16:27,403 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:16:27,403 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:16:27,403 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:16:27,405 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:16:27,405 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:16:27,405 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:16:27,405 INFO  L87              Difference]: Start difference. First operand 2111 states and 2380 transitions. cyclomatic complexity: 271 Second operand 3 states.
[2020-11-25 01:16:27,465 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:16:27,465 INFO  L93              Difference]: Finished difference Result 2781 states and 3192 transitions.
[2020-11-25 01:16:27,466 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:16:27,467 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2781 states and 3192 transitions.
[2020-11-25 01:16:27,490 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:16:27,507 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2781 states to 2781 states and 3192 transitions.
[2020-11-25 01:16:27,507 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 741
[2020-11-25 01:16:27,508 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 741
[2020-11-25 01:16:27,508 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2781 states and 3192 transitions.
[2020-11-25 01:16:27,514 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:16:27,514 INFO  L728         BuchiCegarLoop]: Abstraction has 2781 states and 3192 transitions.
[2020-11-25 01:16:27,517 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2781 states and 3192 transitions.
[2020-11-25 01:16:27,548 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2781 to 2279.
[2020-11-25 01:16:27,549 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2279 states.
[2020-11-25 01:16:27,557 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2279 states to 2279 states and 2582 transitions.
[2020-11-25 01:16:27,557 INFO  L751         BuchiCegarLoop]: Abstraction has 2279 states and 2582 transitions.
[2020-11-25 01:16:27,557 INFO  L631         BuchiCegarLoop]: Abstraction has 2279 states and 2582 transitions.
[2020-11-25 01:16:27,557 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 01:16:27,557 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2279 states and 2582 transitions.
[2020-11-25 01:16:27,564 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:16:27,564 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:16:27,564 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:16:27,566 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:16:27,567 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L3463]              assume null == 0;
[L3464]  CALL        call this := FreshRefGenerator__success();
[L1500]              havoc newRef;
[L1501]              assume Alloc[newRef] == false;
[L1502]              Alloc[newRef] := true;
[L1503]              assume newRef != null;
[L3464]  RET         call this := FreshRefGenerator__success();
[L3465]              assume now >= 0;
[L3466]              assume DType[this] == BT;
[L3467]              assume msgvalue_MSG == 0;
[L3468]              gas := gas - 53000;
[L3469]  CALL        call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L726]               havoc __exception;
[L727]               revert := false;
[L728]   COND FALSE  !(__exception)
[L750]   CALL        call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L2275]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1734]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L1734]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1735]  COND FALSE  !(revert)
[L1738]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]              assume msgsender_MSG != null;
[L1711]              Balance[this] := 0;
[L1712]              _balances_ERC20[this] := zeroRefintArr();
[L1713]              sum__balances0[this] := 0;
[L1714]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1715]              sum__allowed1[this] := 0;
[L1716]              _totalSupply_ERC20[this] := 0;
[L1738]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]  COND FALSE  !(revert)
[L2279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]              assume msgsender_MSG != null;
[L2238]              Balance[this] := 0;
[L2239]              name_BT[this] := 876474985;
[L2240]              symbol_BT[this] := 95884948;
[L2241]              decimals_BT[this] := 18;
[L2242]              __var_20 := decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2243]              INITIAL_SUPPLY_BT[this] := 100000000 * (nonlinearPow(10, decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2245]  COND TRUE   DType[this] == BT
[L2246]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2076]              __var_13 := null;
[L2077]  COND TRUE   !(account_s571 != null)
[L2078]              revert := true;
[L2246]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2247]  COND TRUE   revert
[L2283]  RET         call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L750]   RET         call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L751]               assume !revert && gas >= 0;
[L3469]  RET         call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L3470]              assume !revert && gas >= 0;
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND TRUE   choice == 11
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume value_s307 >= 0 && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s307 && value_s307 <= _balances_ERC20[this][msgsender_MSG]) && value_s307 >= 0) && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s307] >= 0) && _balances_ERC20[this][to_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L415]               havoc __exception;
[L416]               revert := false;
[L417]   COND FALSE  !(__exception)
[L439]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L1817]  COND TRUE   !(value_s307 <= _balances_ERC20[this][msgsender_MSG])
[L1818]              revert := true;
[L439]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L440]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this]));
[L2]                 revert := revert_hold;
[L3387]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L3473]  RET         call CorralChoice_BT(this);

Loop:
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND TRUE   choice == 11
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume value_s307 >= 0 && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s307 && value_s307 <= _balances_ERC20[this][msgsender_MSG]) && value_s307 >= 0) && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s307] >= 0) && _balances_ERC20[this][to_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L415]               havoc __exception;
[L416]               revert := false;
[L417]   COND FALSE  !(__exception)
[L439]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L1817]  COND TRUE   !(value_s307 <= _balances_ERC20[this][msgsender_MSG])
[L1818]              revert := true;
[L439]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L440]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this]));
[L2]                 revert := revert_hold;
[L3387]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L3473]  RET         call CorralChoice_BT(this);

[2020-11-25 01:16:27,571 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:16:27,571 INFO  L82        PathProgramCache]: Analyzing trace with hash -1242854193, now seen corresponding path program 1 times
[2020-11-25 01:16:27,572 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:16:27,582 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:16:27,631 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 3 trivial. 0 not checked.
[2020-11-25 01:16:27,631 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:16:27,631 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 01:16:27,632 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:16:27,632 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:16:27,632 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:16:27,632 INFO  L87              Difference]: Start difference. First operand 2279 states and 2582 transitions. cyclomatic complexity: 305 Second operand 7 states.
[2020-11-25 01:16:27,681 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:16:27,681 INFO  L93              Difference]: Finished difference Result 2287 states and 2589 transitions.
[2020-11-25 01:16:27,681 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:16:27,682 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2287 states and 2589 transitions.
[2020-11-25 01:16:27,693 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:16:27,704 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2287 states to 2278 states and 2580 transitions.
[2020-11-25 01:16:27,704 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 595
[2020-11-25 01:16:27,704 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 595
[2020-11-25 01:16:27,705 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2278 states and 2580 transitions.
[2020-11-25 01:16:27,707 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:16:27,707 INFO  L728         BuchiCegarLoop]: Abstraction has 2278 states and 2580 transitions.
[2020-11-25 01:16:27,710 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2278 states and 2580 transitions.
[2020-11-25 01:16:27,732 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2278 to 2278.
[2020-11-25 01:16:27,732 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2278 states.
[2020-11-25 01:16:27,736 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2278 states to 2278 states and 2580 transitions.
[2020-11-25 01:16:27,736 INFO  L751         BuchiCegarLoop]: Abstraction has 2278 states and 2580 transitions.
[2020-11-25 01:16:27,736 INFO  L631         BuchiCegarLoop]: Abstraction has 2278 states and 2580 transitions.
[2020-11-25 01:16:27,736 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 01:16:27,736 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2278 states and 2580 transitions.
[2020-11-25 01:16:27,743 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:16:27,743 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:16:27,743 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:16:27,745 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:16:27,745 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L3463]              assume null == 0;
[L3464]  CALL        call this := FreshRefGenerator__success();
[L1500]              havoc newRef;
[L1501]              assume Alloc[newRef] == false;
[L1502]              Alloc[newRef] := true;
[L1503]              assume newRef != null;
[L3464]  RET         call this := FreshRefGenerator__success();
[L3465]              assume now >= 0;
[L3466]              assume DType[this] == BT;
[L3467]              assume msgvalue_MSG == 0;
[L3468]              gas := gas - 53000;
[L3469]  CALL        call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L726]               havoc __exception;
[L727]               revert := false;
[L728]   COND FALSE  !(__exception)
[L750]   CALL        call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L2275]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1734]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L1734]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1735]  COND FALSE  !(revert)
[L1738]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]              assume msgsender_MSG != null;
[L1711]              Balance[this] := 0;
[L1712]              _balances_ERC20[this] := zeroRefintArr();
[L1713]              sum__balances0[this] := 0;
[L1714]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1715]              sum__allowed1[this] := 0;
[L1716]              _totalSupply_ERC20[this] := 0;
[L1738]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]  COND FALSE  !(revert)
[L2279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]              assume msgsender_MSG != null;
[L2238]              Balance[this] := 0;
[L2239]              name_BT[this] := 876474985;
[L2240]              symbol_BT[this] := 95884948;
[L2241]              decimals_BT[this] := 18;
[L2242]              __var_20 := decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2243]              INITIAL_SUPPLY_BT[this] := 100000000 * (nonlinearPow(10, decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2245]  COND TRUE   DType[this] == BT
[L2246]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2076]              __var_13 := null;
[L2077]  COND FALSE  !(!(account_s571 != null))
[L2081]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L1665]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1666]  COND TRUE   !(c_s173 >= a_s173)
[L1667]              revert := true;
[L2081]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L2082]  COND TRUE   revert
[L2246]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2247]  COND TRUE   revert
[L2283]  RET         call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L750]   RET         call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L751]               assume !revert && gas >= 0;
[L3469]  RET         call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L3470]              assume !revert && gas >= 0;
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND TRUE   choice == 11
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume value_s307 >= 0 && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s307 && value_s307 <= _balances_ERC20[this][msgsender_MSG]) && value_s307 >= 0) && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s307] >= 0) && _balances_ERC20[this][to_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L415]               havoc __exception;
[L416]               revert := false;
[L417]   COND FALSE  !(__exception)
[L439]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L1817]  COND TRUE   !(value_s307 <= _balances_ERC20[this][msgsender_MSG])
[L1818]              revert := true;
[L439]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L440]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this]));
[L2]                 revert := revert_hold;
[L3387]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L3473]  RET         call CorralChoice_BT(this);

Loop:
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND TRUE   choice == 11
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume value_s307 >= 0 && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s307 && value_s307 <= _balances_ERC20[this][msgsender_MSG]) && value_s307 >= 0) && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s307] >= 0) && _balances_ERC20[this][to_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L415]               havoc __exception;
[L416]               revert := false;
[L417]   COND FALSE  !(__exception)
[L439]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L1817]  COND TRUE   !(value_s307 <= _balances_ERC20[this][msgsender_MSG])
[L1818]              revert := true;
[L439]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L440]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this]));
[L2]                 revert := revert_hold;
[L3387]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L3473]  RET         call CorralChoice_BT(this);

[2020-11-25 01:16:27,749 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:16:27,749 INFO  L82        PathProgramCache]: Analyzing trace with hash -1580026047, now seen corresponding path program 1 times
[2020-11-25 01:16:27,750 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:16:27,761 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:16:27,789 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 01:16:27,789 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:16:27,789 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 01:16:27,790 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:16:27,790 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 01:16:27,790 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 01:16:27,790 INFO  L87              Difference]: Start difference. First operand 2278 states and 2580 transitions. cyclomatic complexity: 304 Second operand 3 states.
[2020-11-25 01:16:27,843 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:16:27,843 INFO  L93              Difference]: Finished difference Result 2780 states and 3110 transitions.
[2020-11-25 01:16:27,843 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 01:16:27,844 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2780 states and 3110 transitions.
[2020-11-25 01:16:27,855 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:16:27,870 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2780 states to 2589 states and 2884 transitions.
[2020-11-25 01:16:27,871 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 680
[2020-11-25 01:16:27,872 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 696
[2020-11-25 01:16:27,872 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2589 states and 2884 transitions.
[2020-11-25 01:16:27,876 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:16:27,876 INFO  L728         BuchiCegarLoop]: Abstraction has 2589 states and 2884 transitions.
[2020-11-25 01:16:27,879 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2589 states and 2884 transitions.
[2020-11-25 01:16:27,906 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2589 to 2155.
[2020-11-25 01:16:27,906 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2155 states.
[2020-11-25 01:16:27,911 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2155 states to 2155 states and 2342 transitions.
[2020-11-25 01:16:27,911 INFO  L751         BuchiCegarLoop]: Abstraction has 2155 states and 2342 transitions.
[2020-11-25 01:16:27,911 INFO  L631         BuchiCegarLoop]: Abstraction has 2155 states and 2342 transitions.
[2020-11-25 01:16:27,911 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 01:16:27,911 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2155 states and 2342 transitions.
[2020-11-25 01:16:27,916 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:16:27,916 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:16:27,916 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:16:27,919 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:16:27,919 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L3463]              assume null == 0;
[L3464]  CALL        call this := FreshRefGenerator__success();
[L1500]              havoc newRef;
[L1501]              assume Alloc[newRef] == false;
[L1502]              Alloc[newRef] := true;
[L1503]              assume newRef != null;
[L3464]  RET         call this := FreshRefGenerator__success();
[L3465]              assume now >= 0;
[L3466]              assume DType[this] == BT;
[L3467]              assume msgvalue_MSG == 0;
[L3468]              gas := gas - 53000;
[L3469]  CALL        call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L726]               havoc __exception;
[L727]               revert := false;
[L728]   COND FALSE  !(__exception)
[L750]   CALL        call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L2275]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1734]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L1734]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1735]  COND FALSE  !(revert)
[L1738]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]              assume msgsender_MSG != null;
[L1711]              Balance[this] := 0;
[L1712]              _balances_ERC20[this] := zeroRefintArr();
[L1713]              sum__balances0[this] := 0;
[L1714]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1715]              sum__allowed1[this] := 0;
[L1716]              _totalSupply_ERC20[this] := 0;
[L1738]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]  COND FALSE  !(revert)
[L2279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]              assume msgsender_MSG != null;
[L2238]              Balance[this] := 0;
[L2239]              name_BT[this] := 876474985;
[L2240]              symbol_BT[this] := 95884948;
[L2241]              decimals_BT[this] := 18;
[L2242]              __var_20 := decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2243]              INITIAL_SUPPLY_BT[this] := 100000000 * (nonlinearPow(10, decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2245]  COND TRUE   DType[this] == BT
[L2246]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2076]              __var_13 := null;
[L2077]  COND FALSE  !(!(account_s571 != null))
[L2081]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L1665]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1666]  COND FALSE  !(!(c_s173 >= a_s173))
[L1670]              __ret_0_ := c_s173;
[L2081]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L2082]  COND FALSE  !(revert)
[L2085]              _totalSupply_ERC20[this] := __var_14;
[L2086]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s571], amount_s571);
[L1665]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1666]  COND FALSE  !(!(c_s173 >= a_s173))
[L1670]              __ret_0_ := c_s173;
[L2086]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s571], amount_s571);
[L2087]  COND FALSE  !(revert)
[L2090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s571];
[L2091]              _balances_ERC20[this][account_s571] := __var_15;
[L2092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s571];
[L2093]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2246]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2247]  COND FALSE  !(revert)
[L2283]  RET         call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L750]   RET         call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L751]               assume !revert && gas >= 0;
[L3469]  RET         call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L3470]              assume !revert && gas >= 0;
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND TRUE   choice == 11
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume value_s307 >= 0 && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s307 && value_s307 <= _balances_ERC20[this][msgsender_MSG]) && value_s307 >= 0) && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s307] >= 0) && _balances_ERC20[this][to_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L415]               havoc __exception;
[L416]               revert := false;
[L417]   COND TRUE   __exception
[L418]               __tmp__Balance := Balance;
[L419]               __tmp__DType := DType;
[L420]               __tmp__Alloc := Alloc;
[L421]               __tmp__balance_ADDR := balance_ADDR;
[L422]               __tmp__M_Ref_int := M_Ref_int;
[L423]               __tmp__sum__balances0 := sum__balances0;
[L424]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L425]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L426]               __tmp__sum__allowed1 := sum__allowed1;
[L427]               __tmp__Length := Length;
[L428]               __tmp__now := now;
[L429]               __tmp___balances_ERC20 := _balances_ERC20;
[L430]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L431]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L432]               __tmp__name_BT := name_BT;
[L433]               __tmp__symbol_BT := symbol_BT;
[L434]               __tmp__decimals_BT := decimals_BT;
[L435]               __tmp__INITIAL_SUPPLY_BT := INITIAL_SUPPLY_BT;
[L436]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L1785]  COND TRUE   !(value_s307 <= __tmp___balances_ERC20[this][msgsender_MSG])
[L1786]              revert := true;
[L436]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L437]               assume revert || gas < 0;
[L3387]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L3473]  RET         call CorralChoice_BT(this);

Loop:
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND TRUE   choice == 11
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume value_s307 >= 0 && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s307 && value_s307 <= _balances_ERC20[this][msgsender_MSG]) && value_s307 >= 0) && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s307] >= 0) && _balances_ERC20[this][to_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L415]               havoc __exception;
[L416]               revert := false;
[L417]   COND TRUE   __exception
[L418]               __tmp__Balance := Balance;
[L419]               __tmp__DType := DType;
[L420]               __tmp__Alloc := Alloc;
[L421]               __tmp__balance_ADDR := balance_ADDR;
[L422]               __tmp__M_Ref_int := M_Ref_int;
[L423]               __tmp__sum__balances0 := sum__balances0;
[L424]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L425]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L426]               __tmp__sum__allowed1 := sum__allowed1;
[L427]               __tmp__Length := Length;
[L428]               __tmp__now := now;
[L429]               __tmp___balances_ERC20 := _balances_ERC20;
[L430]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L431]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L432]               __tmp__name_BT := name_BT;
[L433]               __tmp__symbol_BT := symbol_BT;
[L434]               __tmp__decimals_BT := decimals_BT;
[L435]               __tmp__INITIAL_SUPPLY_BT := INITIAL_SUPPLY_BT;
[L436]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L1785]  COND TRUE   !(value_s307 <= __tmp___balances_ERC20[this][msgsender_MSG])
[L1786]              revert := true;
[L436]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L437]               assume revert || gas < 0;
[L3387]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L3473]  RET         call CorralChoice_BT(this);

[2020-11-25 01:16:27,923 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:16:27,923 INFO  L82        PathProgramCache]: Analyzing trace with hash -722543816, now seen corresponding path program 1 times
[2020-11-25 01:16:27,924 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:16:27,947 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:16:28,032 INFO  L134       CoverageAnalysis]: Checked inductivity of 15 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 15 trivial. 0 not checked.
[2020-11-25 01:16:28,033 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:16:28,033 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 01:16:28,033 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:16:28,033 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 01:16:28,034 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 01:16:28,034 INFO  L87              Difference]: Start difference. First operand 2155 states and 2342 transitions. cyclomatic complexity: 189 Second operand 6 states.
[2020-11-25 01:16:28,497 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:16:28,497 INFO  L93              Difference]: Finished difference Result 2335 states and 2539 transitions.
[2020-11-25 01:16:28,497 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:16:28,497 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2335 states and 2539 transitions.
[2020-11-25 01:16:28,502 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:16:28,509 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2335 states to 2335 states and 2539 transitions.
[2020-11-25 01:16:28,510 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 643
[2020-11-25 01:16:28,510 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 643
[2020-11-25 01:16:28,510 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2335 states and 2539 transitions.
[2020-11-25 01:16:28,512 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:16:28,512 INFO  L728         BuchiCegarLoop]: Abstraction has 2335 states and 2539 transitions.
[2020-11-25 01:16:28,514 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2335 states and 2539 transitions.
[2020-11-25 01:16:28,531 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2335 to 2209.
[2020-11-25 01:16:28,531 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2209 states.
[2020-11-25 01:16:28,534 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2209 states to 2209 states and 2400 transitions.
[2020-11-25 01:16:28,534 INFO  L751         BuchiCegarLoop]: Abstraction has 2209 states and 2400 transitions.
[2020-11-25 01:16:28,534 INFO  L631         BuchiCegarLoop]: Abstraction has 2209 states and 2400 transitions.
[2020-11-25 01:16:28,534 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 01:16:28,534 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2209 states and 2400 transitions.
[2020-11-25 01:16:28,536 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:16:28,537 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:16:28,537 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:16:28,538 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:16:28,539 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L3463]              assume null == 0;
[L3464]  CALL        call this := FreshRefGenerator__success();
[L1500]              havoc newRef;
[L1501]              assume Alloc[newRef] == false;
[L1502]              Alloc[newRef] := true;
[L1503]              assume newRef != null;
[L3464]  RET         call this := FreshRefGenerator__success();
[L3465]              assume now >= 0;
[L3466]              assume DType[this] == BT;
[L3467]              assume msgvalue_MSG == 0;
[L3468]              gas := gas - 53000;
[L3469]  CALL        call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L726]               havoc __exception;
[L727]               revert := false;
[L728]   COND FALSE  !(__exception)
[L750]   CALL        call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L2275]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1734]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L1734]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1735]  COND FALSE  !(revert)
[L1738]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]              assume msgsender_MSG != null;
[L1711]              Balance[this] := 0;
[L1712]              _balances_ERC20[this] := zeroRefintArr();
[L1713]              sum__balances0[this] := 0;
[L1714]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1715]              sum__allowed1[this] := 0;
[L1716]              _totalSupply_ERC20[this] := 0;
[L1738]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]  COND FALSE  !(revert)
[L2279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]              assume msgsender_MSG != null;
[L2238]              Balance[this] := 0;
[L2239]              name_BT[this] := 876474985;
[L2240]              symbol_BT[this] := 95884948;
[L2241]              decimals_BT[this] := 18;
[L2242]              __var_20 := decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2243]              INITIAL_SUPPLY_BT[this] := 100000000 * (nonlinearPow(10, decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2245]  COND TRUE   DType[this] == BT
[L2246]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2076]              __var_13 := null;
[L2077]  COND FALSE  !(!(account_s571 != null))
[L2081]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L1665]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1666]  COND FALSE  !(!(c_s173 >= a_s173))
[L1670]              __ret_0_ := c_s173;
[L2081]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L2082]  COND FALSE  !(revert)
[L2085]              _totalSupply_ERC20[this] := __var_14;
[L2086]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s571], amount_s571);
[L1665]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1666]  COND FALSE  !(!(c_s173 >= a_s173))
[L1670]              __ret_0_ := c_s173;
[L2086]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s571], amount_s571);
[L2087]  COND FALSE  !(revert)
[L2090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s571];
[L2091]              _balances_ERC20[this][account_s571] := __var_15;
[L2092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s571];
[L2093]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2246]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2247]  COND FALSE  !(revert)
[L2283]  RET         call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L750]   RET         call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L751]               assume !revert && gas >= 0;
[L3469]  RET         call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L3470]              assume !revert && gas >= 0;
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND TRUE   choice == 11
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume value_s307 >= 0 && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s307 && value_s307 <= _balances_ERC20[this][msgsender_MSG]) && value_s307 >= 0) && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s307] >= 0) && _balances_ERC20[this][to_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L415]               havoc __exception;
[L416]               revert := false;
[L417]   COND TRUE   __exception
[L418]               __tmp__Balance := Balance;
[L419]               __tmp__DType := DType;
[L420]               __tmp__Alloc := Alloc;
[L421]               __tmp__balance_ADDR := balance_ADDR;
[L422]               __tmp__M_Ref_int := M_Ref_int;
[L423]               __tmp__sum__balances0 := sum__balances0;
[L424]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L425]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L426]               __tmp__sum__allowed1 := sum__allowed1;
[L427]               __tmp__Length := Length;
[L428]               __tmp__now := now;
[L429]               __tmp___balances_ERC20 := _balances_ERC20;
[L430]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L431]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L432]               __tmp__name_BT := name_BT;
[L433]               __tmp__symbol_BT := symbol_BT;
[L434]               __tmp__decimals_BT := decimals_BT;
[L435]               __tmp__INITIAL_SUPPLY_BT := INITIAL_SUPPLY_BT;
[L436]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L1785]  COND FALSE  !(!(value_s307 <= __tmp___balances_ERC20[this][msgsender_MSG]))
[L1789]              __var_1 := null;
[L1790]  COND TRUE   !(to_s307 != null)
[L1791]              revert := true;
[L436]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L437]               assume revert || gas < 0;
[L3387]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L3473]  RET         call CorralChoice_BT(this);

Loop:
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND TRUE   choice == 11
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume value_s307 >= 0 && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s307 && value_s307 <= _balances_ERC20[this][msgsender_MSG]) && value_s307 >= 0) && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s307] >= 0) && _balances_ERC20[this][to_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L415]               havoc __exception;
[L416]               revert := false;
[L417]   COND TRUE   __exception
[L418]               __tmp__Balance := Balance;
[L419]               __tmp__DType := DType;
[L420]               __tmp__Alloc := Alloc;
[L421]               __tmp__balance_ADDR := balance_ADDR;
[L422]               __tmp__M_Ref_int := M_Ref_int;
[L423]               __tmp__sum__balances0 := sum__balances0;
[L424]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L425]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L426]               __tmp__sum__allowed1 := sum__allowed1;
[L427]               __tmp__Length := Length;
[L428]               __tmp__now := now;
[L429]               __tmp___balances_ERC20 := _balances_ERC20;
[L430]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L431]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L432]               __tmp__name_BT := name_BT;
[L433]               __tmp__symbol_BT := symbol_BT;
[L434]               __tmp__decimals_BT := decimals_BT;
[L435]               __tmp__INITIAL_SUPPLY_BT := INITIAL_SUPPLY_BT;
[L436]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L1785]  COND FALSE  !(!(value_s307 <= __tmp___balances_ERC20[this][msgsender_MSG]))
[L1789]              __var_1 := null;
[L1790]  COND TRUE   !(to_s307 != null)
[L1791]              revert := true;
[L436]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L437]               assume revert || gas < 0;
[L3387]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L3473]  RET         call CorralChoice_BT(this);

[2020-11-25 01:16:28,541 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:16:28,541 INFO  L82        PathProgramCache]: Analyzing trace with hash -382769176, now seen corresponding path program 1 times
[2020-11-25 01:16:28,542 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:16:28,549 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:16:28,575 INFO  L134       CoverageAnalysis]: Checked inductivity of 15 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 15 trivial. 0 not checked.
[2020-11-25 01:16:28,575 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:16:28,575 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 01:16:28,576 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:16:28,576 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 01:16:28,576 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 01:16:28,576 INFO  L87              Difference]: Start difference. First operand 2209 states and 2400 transitions. cyclomatic complexity: 193 Second operand 6 states.
[2020-11-25 01:16:28,614 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:16:28,614 INFO  L93              Difference]: Finished difference Result 2243 states and 2437 transitions.
[2020-11-25 01:16:28,614 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 01:16:28,614 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2243 states and 2437 transitions.
[2020-11-25 01:16:28,618 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:16:28,623 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2243 states to 2235 states and 2429 transitions.
[2020-11-25 01:16:28,623 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 595
[2020-11-25 01:16:28,623 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 595
[2020-11-25 01:16:28,623 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2235 states and 2429 transitions.
[2020-11-25 01:16:28,625 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:16:28,625 INFO  L728         BuchiCegarLoop]: Abstraction has 2235 states and 2429 transitions.
[2020-11-25 01:16:28,626 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2235 states and 2429 transitions.
[2020-11-25 01:16:28,640 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2235 to 2216.
[2020-11-25 01:16:28,640 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2216 states.
[2020-11-25 01:16:28,642 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2216 states to 2216 states and 2408 transitions.
[2020-11-25 01:16:28,642 INFO  L751         BuchiCegarLoop]: Abstraction has 2216 states and 2408 transitions.
[2020-11-25 01:16:28,642 INFO  L631         BuchiCegarLoop]: Abstraction has 2216 states and 2408 transitions.
[2020-11-25 01:16:28,642 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 01:16:28,642 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2216 states and 2408 transitions.
[2020-11-25 01:16:28,645 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:16:28,645 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:16:28,645 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:16:28,646 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:16:28,646 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L3463]              assume null == 0;
[L3464]  CALL        call this := FreshRefGenerator__success();
[L1500]              havoc newRef;
[L1501]              assume Alloc[newRef] == false;
[L1502]              Alloc[newRef] := true;
[L1503]              assume newRef != null;
[L3464]  RET         call this := FreshRefGenerator__success();
[L3465]              assume now >= 0;
[L3466]              assume DType[this] == BT;
[L3467]              assume msgvalue_MSG == 0;
[L3468]              gas := gas - 53000;
[L3469]  CALL        call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L726]               havoc __exception;
[L727]               revert := false;
[L728]   COND FALSE  !(__exception)
[L750]   CALL        call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L2275]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1734]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L1734]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1735]  COND FALSE  !(revert)
[L1738]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]              assume msgsender_MSG != null;
[L1711]              Balance[this] := 0;
[L1712]              _balances_ERC20[this] := zeroRefintArr();
[L1713]              sum__balances0[this] := 0;
[L1714]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1715]              sum__allowed1[this] := 0;
[L1716]              _totalSupply_ERC20[this] := 0;
[L1738]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]  COND FALSE  !(revert)
[L2279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]              assume msgsender_MSG != null;
[L2238]              Balance[this] := 0;
[L2239]              name_BT[this] := 876474985;
[L2240]              symbol_BT[this] := 95884948;
[L2241]              decimals_BT[this] := 18;
[L2242]              __var_20 := decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2243]              INITIAL_SUPPLY_BT[this] := 100000000 * (nonlinearPow(10, decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2245]  COND TRUE   DType[this] == BT
[L2246]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2076]              __var_13 := null;
[L2077]  COND FALSE  !(!(account_s571 != null))
[L2081]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L1665]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1666]  COND FALSE  !(!(c_s173 >= a_s173))
[L1670]              __ret_0_ := c_s173;
[L2081]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L2082]  COND FALSE  !(revert)
[L2085]              _totalSupply_ERC20[this] := __var_14;
[L2086]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s571], amount_s571);
[L1665]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1666]  COND FALSE  !(!(c_s173 >= a_s173))
[L1670]              __ret_0_ := c_s173;
[L2086]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s571], amount_s571);
[L2087]  COND FALSE  !(revert)
[L2090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s571];
[L2091]              _balances_ERC20[this][account_s571] := __var_15;
[L2092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s571];
[L2093]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2246]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2247]  COND FALSE  !(revert)
[L2283]  RET         call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L750]   RET         call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L751]               assume !revert && gas >= 0;
[L3469]  RET         call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L3470]              assume !revert && gas >= 0;
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND TRUE   choice == 11
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume value_s307 >= 0 && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s307 && value_s307 <= _balances_ERC20[this][msgsender_MSG]) && value_s307 >= 0) && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s307] >= 0) && _balances_ERC20[this][to_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L415]               havoc __exception;
[L416]               revert := false;
[L417]   COND TRUE   __exception
[L418]               __tmp__Balance := Balance;
[L419]               __tmp__DType := DType;
[L420]               __tmp__Alloc := Alloc;
[L421]               __tmp__balance_ADDR := balance_ADDR;
[L422]               __tmp__M_Ref_int := M_Ref_int;
[L423]               __tmp__sum__balances0 := sum__balances0;
[L424]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L425]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L426]               __tmp__sum__allowed1 := sum__allowed1;
[L427]               __tmp__Length := Length;
[L428]               __tmp__now := now;
[L429]               __tmp___balances_ERC20 := _balances_ERC20;
[L430]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L431]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L432]               __tmp__name_BT := name_BT;
[L433]               __tmp__symbol_BT := symbol_BT;
[L434]               __tmp__decimals_BT := decimals_BT;
[L435]               __tmp__INITIAL_SUPPLY_BT := INITIAL_SUPPLY_BT;
[L436]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L1785]  COND FALSE  !(!(value_s307 <= __tmp___balances_ERC20[this][msgsender_MSG]))
[L1789]              __var_1 := null;
[L1790]  COND FALSE  !(!(to_s307 != null))
[L1794]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][msgsender_MSG], value_s307);
[L1629]  COND TRUE   !(b_s149 <= a_s149)
[L1630]              revert := true;
[L1794]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][msgsender_MSG], value_s307);
[L1795]  COND TRUE   revert
[L436]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L437]               assume revert || gas < 0;
[L3387]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L3473]  RET         call CorralChoice_BT(this);

Loop:
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND TRUE   choice == 11
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume value_s307 >= 0 && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s307 && value_s307 <= _balances_ERC20[this][msgsender_MSG]) && value_s307 >= 0) && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s307] >= 0) && _balances_ERC20[this][to_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L415]               havoc __exception;
[L416]               revert := false;
[L417]   COND TRUE   __exception
[L418]               __tmp__Balance := Balance;
[L419]               __tmp__DType := DType;
[L420]               __tmp__Alloc := Alloc;
[L421]               __tmp__balance_ADDR := balance_ADDR;
[L422]               __tmp__M_Ref_int := M_Ref_int;
[L423]               __tmp__sum__balances0 := sum__balances0;
[L424]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L425]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L426]               __tmp__sum__allowed1 := sum__allowed1;
[L427]               __tmp__Length := Length;
[L428]               __tmp__now := now;
[L429]               __tmp___balances_ERC20 := _balances_ERC20;
[L430]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L431]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L432]               __tmp__name_BT := name_BT;
[L433]               __tmp__symbol_BT := symbol_BT;
[L434]               __tmp__decimals_BT := decimals_BT;
[L435]               __tmp__INITIAL_SUPPLY_BT := INITIAL_SUPPLY_BT;
[L436]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L1785]  COND FALSE  !(!(value_s307 <= __tmp___balances_ERC20[this][msgsender_MSG]))
[L1789]              __var_1 := null;
[L1790]  COND FALSE  !(!(to_s307 != null))
[L1794]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][msgsender_MSG], value_s307);
[L1629]  COND TRUE   !(b_s149 <= a_s149)
[L1630]              revert := true;
[L1794]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][msgsender_MSG], value_s307);
[L1795]  COND TRUE   revert
[L436]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L437]               assume revert || gas < 0;
[L3387]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L3473]  RET         call CorralChoice_BT(this);

[2020-11-25 01:16:28,649 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:16:28,649 INFO  L82        PathProgramCache]: Analyzing trace with hash 1129851561, now seen corresponding path program 1 times
[2020-11-25 01:16:28,649 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:16:28,657 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:16:28,693 INFO  L134       CoverageAnalysis]: Checked inductivity of 15 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 15 trivial. 0 not checked.
[2020-11-25 01:16:28,693 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:16:28,693 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 01:16:28,693 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:16:28,693 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:16:28,694 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:16:28,694 INFO  L87              Difference]: Start difference. First operand 2216 states and 2408 transitions. cyclomatic complexity: 194 Second operand 7 states.
[2020-11-25 01:16:29,221 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:16:29,221 INFO  L93              Difference]: Finished difference Result 2339 states and 2540 transitions.
[2020-11-25 01:16:29,221 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 01:16:29,221 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2339 states and 2540 transitions.
[2020-11-25 01:16:29,225 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:16:29,230 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2339 states to 2339 states and 2540 transitions.
[2020-11-25 01:16:29,230 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 649
[2020-11-25 01:16:29,230 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 649
[2020-11-25 01:16:29,231 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2339 states and 2540 transitions.
[2020-11-25 01:16:29,233 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:16:29,233 INFO  L728         BuchiCegarLoop]: Abstraction has 2339 states and 2540 transitions.
[2020-11-25 01:16:29,234 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2339 states and 2540 transitions.
[2020-11-25 01:16:29,250 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2339 to 2216.
[2020-11-25 01:16:29,250 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2216 states.
[2020-11-25 01:16:29,251 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2216 states to 2216 states and 2408 transitions.
[2020-11-25 01:16:29,252 INFO  L751         BuchiCegarLoop]: Abstraction has 2216 states and 2408 transitions.
[2020-11-25 01:16:29,252 INFO  L631         BuchiCegarLoop]: Abstraction has 2216 states and 2408 transitions.
[2020-11-25 01:16:29,252 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 01:16:29,252 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2216 states and 2408 transitions.
[2020-11-25 01:16:29,255 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:16:29,255 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:16:29,255 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:16:29,256 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:16:29,257 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L3463]              assume null == 0;
[L3464]  CALL        call this := FreshRefGenerator__success();
[L1500]              havoc newRef;
[L1501]              assume Alloc[newRef] == false;
[L1502]              Alloc[newRef] := true;
[L1503]              assume newRef != null;
[L3464]  RET         call this := FreshRefGenerator__success();
[L3465]              assume now >= 0;
[L3466]              assume DType[this] == BT;
[L3467]              assume msgvalue_MSG == 0;
[L3468]              gas := gas - 53000;
[L3469]  CALL        call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L726]               havoc __exception;
[L727]               revert := false;
[L728]   COND FALSE  !(__exception)
[L750]   CALL        call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L2275]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1734]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L1734]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1735]  COND FALSE  !(revert)
[L1738]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]              assume msgsender_MSG != null;
[L1711]              Balance[this] := 0;
[L1712]              _balances_ERC20[this] := zeroRefintArr();
[L1713]              sum__balances0[this] := 0;
[L1714]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1715]              sum__allowed1[this] := 0;
[L1716]              _totalSupply_ERC20[this] := 0;
[L1738]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]  COND FALSE  !(revert)
[L2279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]              assume msgsender_MSG != null;
[L2238]              Balance[this] := 0;
[L2239]              name_BT[this] := 876474985;
[L2240]              symbol_BT[this] := 95884948;
[L2241]              decimals_BT[this] := 18;
[L2242]              __var_20 := decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2243]              INITIAL_SUPPLY_BT[this] := 100000000 * (nonlinearPow(10, decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2245]  COND TRUE   DType[this] == BT
[L2246]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2076]              __var_13 := null;
[L2077]  COND FALSE  !(!(account_s571 != null))
[L2081]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L1665]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1666]  COND FALSE  !(!(c_s173 >= a_s173))
[L1670]              __ret_0_ := c_s173;
[L2081]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L2082]  COND FALSE  !(revert)
[L2085]              _totalSupply_ERC20[this] := __var_14;
[L2086]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s571], amount_s571);
[L1665]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1666]  COND FALSE  !(!(c_s173 >= a_s173))
[L1670]              __ret_0_ := c_s173;
[L2086]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s571], amount_s571);
[L2087]  COND FALSE  !(revert)
[L2090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s571];
[L2091]              _balances_ERC20[this][account_s571] := __var_15;
[L2092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s571];
[L2093]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2246]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2247]  COND FALSE  !(revert)
[L2283]  RET         call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L750]   RET         call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L751]               assume !revert && gas >= 0;
[L3469]  RET         call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L3470]              assume !revert && gas >= 0;
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND TRUE   choice == 11
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume value_s307 >= 0 && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s307 && value_s307 <= _balances_ERC20[this][msgsender_MSG]) && value_s307 >= 0) && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s307] >= 0) && _balances_ERC20[this][to_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L415]               havoc __exception;
[L416]               revert := false;
[L417]   COND FALSE  !(__exception)
[L439]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L1817]  COND FALSE  !(!(value_s307 <= _balances_ERC20[this][msgsender_MSG]))
[L1821]              __var_1 := null;
[L1822]  COND FALSE  !(!(to_s307 != null))
[L1826]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s307);
[L1641]  COND FALSE  !(!(b_s149 <= a_s149))
[L1645]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1646]              __ret_0_ := c_s149;
[L1826]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s307);
[L1827]  COND FALSE  !(revert)
[L1830]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][msgsender_MSG];
[L1831]              _balances_ERC20[this][msgsender_MSG] := __var_2;
[L1832]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][msgsender_MSG];
[L1833]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s307], value_s307);
[L1665]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1666]  COND FALSE  !(!(c_s173 >= a_s173))
[L1670]              __ret_0_ := c_s173;
[L1833]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s307], value_s307);
[L1834]  COND FALSE  !(revert)
[L1837]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s307];
[L1838]              _balances_ERC20[this][to_s307] := __var_3;
[L1839]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s307];
[L1840]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1841]              __ret_0_ := true;
[L439]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L440]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this]));
[L2]                 revert := revert_hold;
[L3387]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L3473]  RET         call CorralChoice_BT(this);

Loop:
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND TRUE   choice == 11
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume value_s307 >= 0 && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s307 && value_s307 <= _balances_ERC20[this][msgsender_MSG]) && value_s307 >= 0) && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s307] >= 0) && _balances_ERC20[this][to_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L415]               havoc __exception;
[L416]               revert := false;
[L417]   COND FALSE  !(__exception)
[L439]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L1817]  COND FALSE  !(!(value_s307 <= _balances_ERC20[this][msgsender_MSG]))
[L1821]              __var_1 := null;
[L1822]  COND FALSE  !(!(to_s307 != null))
[L1826]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s307);
[L1641]  COND FALSE  !(!(b_s149 <= a_s149))
[L1645]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1646]              __ret_0_ := c_s149;
[L1826]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s307);
[L1827]  COND FALSE  !(revert)
[L1830]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][msgsender_MSG];
[L1831]              _balances_ERC20[this][msgsender_MSG] := __var_2;
[L1832]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][msgsender_MSG];
[L1833]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s307], value_s307);
[L1665]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1666]  COND FALSE  !(!(c_s173 >= a_s173))
[L1670]              __ret_0_ := c_s173;
[L1833]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s307], value_s307);
[L1834]  COND FALSE  !(revert)
[L1837]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s307];
[L1838]              _balances_ERC20[this][to_s307] := __var_3;
[L1839]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s307];
[L1840]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1841]              __ret_0_ := true;
[L439]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L440]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this]));
[L2]                 revert := revert_hold;
[L3387]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L3473]  RET         call CorralChoice_BT(this);

[2020-11-25 01:16:29,260 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:16:29,260 INFO  L82        PathProgramCache]: Analyzing trace with hash -852899161, now seen corresponding path program 1 times
[2020-11-25 01:16:29,260 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:16:29,313 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:16:30,107 INFO  L134       CoverageAnalysis]: Checked inductivity of 15 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 11 trivial. 0 not checked.
[2020-11-25 01:16:30,108 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:16:30,108 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [27] imperfect sequences [] total 27
[2020-11-25 01:16:30,108 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:16:30,108 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-11-25 01:16:30,109 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=68, Invalid=688, Unknown=0, NotChecked=0, Total=756
[2020-11-25 01:16:30,109 INFO  L87              Difference]: Start difference. First operand 2216 states and 2408 transitions. cyclomatic complexity: 194 Second operand 28 states.
[2020-11-25 01:16:34,911 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:16:34,911 INFO  L93              Difference]: Finished difference Result 2280 states and 2489 transitions.
[2020-11-25 01:16:34,911 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-11-25 01:16:34,911 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2280 states and 2489 transitions.
[2020-11-25 01:16:34,915 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 01:16:34,920 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2280 states to 2280 states and 2489 transitions.
[2020-11-25 01:16:34,920 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 614
[2020-11-25 01:16:34,920 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 614
[2020-11-25 01:16:34,920 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2280 states and 2489 transitions.
[2020-11-25 01:16:34,922 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:16:34,922 INFO  L728         BuchiCegarLoop]: Abstraction has 2280 states and 2489 transitions.
[2020-11-25 01:16:34,923 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2280 states and 2489 transitions.
[2020-11-25 01:16:34,934 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2280 to 2269.
[2020-11-25 01:16:34,935 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2269 states.
[2020-11-25 01:16:34,937 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2269 states to 2269 states and 2470 transitions.
[2020-11-25 01:16:34,937 INFO  L751         BuchiCegarLoop]: Abstraction has 2269 states and 2470 transitions.
[2020-11-25 01:16:34,937 INFO  L631         BuchiCegarLoop]: Abstraction has 2269 states and 2470 transitions.
[2020-11-25 01:16:34,937 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 01:16:34,937 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2269 states and 2470 transitions.
[2020-11-25 01:16:34,939 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:16:34,939 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:16:34,939 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:16:34,941 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:16:34,941 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L3463]              assume null == 0;
[L3464]  CALL        call this := FreshRefGenerator__success();
[L1500]              havoc newRef;
[L1501]              assume Alloc[newRef] == false;
[L1502]              Alloc[newRef] := true;
[L1503]              assume newRef != null;
[L3464]  RET         call this := FreshRefGenerator__success();
[L3465]              assume now >= 0;
[L3466]              assume DType[this] == BT;
[L3467]              assume msgvalue_MSG == 0;
[L3468]              gas := gas - 53000;
[L3469]  CALL        call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L726]               havoc __exception;
[L727]               revert := false;
[L728]   COND FALSE  !(__exception)
[L750]   CALL        call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L2275]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1734]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L1734]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1735]  COND FALSE  !(revert)
[L1738]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]              assume msgsender_MSG != null;
[L1711]              Balance[this] := 0;
[L1712]              _balances_ERC20[this] := zeroRefintArr();
[L1713]              sum__balances0[this] := 0;
[L1714]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1715]              sum__allowed1[this] := 0;
[L1716]              _totalSupply_ERC20[this] := 0;
[L1738]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]  COND FALSE  !(revert)
[L2279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]              assume msgsender_MSG != null;
[L2238]              Balance[this] := 0;
[L2239]              name_BT[this] := 876474985;
[L2240]              symbol_BT[this] := 95884948;
[L2241]              decimals_BT[this] := 18;
[L2242]              __var_20 := decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2243]              INITIAL_SUPPLY_BT[this] := 100000000 * (nonlinearPow(10, decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2245]  COND TRUE   DType[this] == BT
[L2246]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2076]              __var_13 := null;
[L2077]  COND FALSE  !(!(account_s571 != null))
[L2081]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L1665]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1666]  COND FALSE  !(!(c_s173 >= a_s173))
[L1670]              __ret_0_ := c_s173;
[L2081]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L2082]  COND FALSE  !(revert)
[L2085]              _totalSupply_ERC20[this] := __var_14;
[L2086]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s571], amount_s571);
[L1665]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1666]  COND FALSE  !(!(c_s173 >= a_s173))
[L1670]              __ret_0_ := c_s173;
[L2086]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s571], amount_s571);
[L2087]  COND FALSE  !(revert)
[L2090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s571];
[L2091]              _balances_ERC20[this][account_s571] := __var_15;
[L2092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s571];
[L2093]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2246]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2247]  COND FALSE  !(revert)
[L2283]  RET         call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L750]   RET         call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L751]               assume !revert && gas >= 0;
[L3469]  RET         call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L3470]              assume !revert && gas >= 0;
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND TRUE   choice == 11
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume value_s307 >= 0 && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s307 && value_s307 <= _balances_ERC20[this][msgsender_MSG]) && value_s307 >= 0) && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s307] >= 0) && _balances_ERC20[this][to_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L415]               havoc __exception;
[L416]               revert := false;
[L417]   COND TRUE   __exception
[L418]               __tmp__Balance := Balance;
[L419]               __tmp__DType := DType;
[L420]               __tmp__Alloc := Alloc;
[L421]               __tmp__balance_ADDR := balance_ADDR;
[L422]               __tmp__M_Ref_int := M_Ref_int;
[L423]               __tmp__sum__balances0 := sum__balances0;
[L424]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L425]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L426]               __tmp__sum__allowed1 := sum__allowed1;
[L427]               __tmp__Length := Length;
[L428]               __tmp__now := now;
[L429]               __tmp___balances_ERC20 := _balances_ERC20;
[L430]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L431]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L432]               __tmp__name_BT := name_BT;
[L433]               __tmp__symbol_BT := symbol_BT;
[L434]               __tmp__decimals_BT := decimals_BT;
[L435]               __tmp__INITIAL_SUPPLY_BT := INITIAL_SUPPLY_BT;
[L436]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L1785]  COND FALSE  !(!(value_s307 <= __tmp___balances_ERC20[this][msgsender_MSG]))
[L1789]              __var_1 := null;
[L1790]  COND FALSE  !(!(to_s307 != null))
[L1794]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][msgsender_MSG], value_s307);
[L1629]  COND FALSE  !(!(b_s149 <= a_s149))
[L1633]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1634]              __ret_0_ := c_s149;
[L1794]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][msgsender_MSG], value_s307);
[L1795]  COND FALSE  !(revert)
[L1798]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][msgsender_MSG];
[L1799]              __tmp___balances_ERC20[this][msgsender_MSG] := __var_2;
[L1800]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][msgsender_MSG];
[L1801]  CALL        call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s307], value_s307);
[L1653]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1654]  COND TRUE   !(c_s173 >= a_s173)
[L1655]              revert := true;
[L1801]  RET         call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s307], value_s307);
[L1802]  COND TRUE   revert
[L436]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L437]               assume revert || gas < 0;
[L3387]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L3473]  RET         call CorralChoice_BT(this);

Loop:
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND TRUE   choice == 11
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume value_s307 >= 0 && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s307 && value_s307 <= _balances_ERC20[this][msgsender_MSG]) && value_s307 >= 0) && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s307] >= 0) && _balances_ERC20[this][to_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L415]               havoc __exception;
[L416]               revert := false;
[L417]   COND TRUE   __exception
[L418]               __tmp__Balance := Balance;
[L419]               __tmp__DType := DType;
[L420]               __tmp__Alloc := Alloc;
[L421]               __tmp__balance_ADDR := balance_ADDR;
[L422]               __tmp__M_Ref_int := M_Ref_int;
[L423]               __tmp__sum__balances0 := sum__balances0;
[L424]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L425]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L426]               __tmp__sum__allowed1 := sum__allowed1;
[L427]               __tmp__Length := Length;
[L428]               __tmp__now := now;
[L429]               __tmp___balances_ERC20 := _balances_ERC20;
[L430]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L431]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L432]               __tmp__name_BT := name_BT;
[L433]               __tmp__symbol_BT := symbol_BT;
[L434]               __tmp__decimals_BT := decimals_BT;
[L435]               __tmp__INITIAL_SUPPLY_BT := INITIAL_SUPPLY_BT;
[L436]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L1785]  COND FALSE  !(!(value_s307 <= __tmp___balances_ERC20[this][msgsender_MSG]))
[L1789]              __var_1 := null;
[L1790]  COND FALSE  !(!(to_s307 != null))
[L1794]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][msgsender_MSG], value_s307);
[L1629]  COND FALSE  !(!(b_s149 <= a_s149))
[L1633]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1634]              __ret_0_ := c_s149;
[L1794]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][msgsender_MSG], value_s307);
[L1795]  COND FALSE  !(revert)
[L1798]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][msgsender_MSG];
[L1799]              __tmp___balances_ERC20[this][msgsender_MSG] := __var_2;
[L1800]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][msgsender_MSG];
[L1801]  CALL        call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s307], value_s307);
[L1653]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1654]  COND TRUE   !(c_s173 >= a_s173)
[L1655]              revert := true;
[L1801]  RET         call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s307], value_s307);
[L1802]  COND TRUE   revert
[L436]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L437]               assume revert || gas < 0;
[L3387]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L3473]  RET         call CorralChoice_BT(this);

[2020-11-25 01:16:34,944 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:16:34,944 INFO  L82        PathProgramCache]: Analyzing trace with hash 1310097196, now seen corresponding path program 1 times
[2020-11-25 01:16:34,944 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:16:34,953 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:16:35,013 INFO  L134       CoverageAnalysis]: Checked inductivity of 15 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 15 trivial. 0 not checked.
[2020-11-25 01:16:35,013 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:16:35,013 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 01:16:35,013 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:16:35,013 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 01:16:35,013 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=129, Unknown=0, NotChecked=0, Total=156
[2020-11-25 01:16:35,013 INFO  L87              Difference]: Start difference. First operand 2269 states and 2470 transitions. cyclomatic complexity: 205 Second operand 13 states.
[2020-11-25 01:16:35,738 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:16:35,738 INFO  L93              Difference]: Finished difference Result 2359 states and 2576 transitions.
[2020-11-25 01:16:35,738 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 01:16:35,738 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2359 states and 2576 transitions.
[2020-11-25 01:16:35,744 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 01:16:35,749 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2359 states to 2359 states and 2576 transitions.
[2020-11-25 01:16:35,749 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 654
[2020-11-25 01:16:35,749 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 654
[2020-11-25 01:16:35,750 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2359 states and 2576 transitions.
[2020-11-25 01:16:35,751 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:16:35,751 INFO  L728         BuchiCegarLoop]: Abstraction has 2359 states and 2576 transitions.
[2020-11-25 01:16:35,753 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2359 states and 2576 transitions.
[2020-11-25 01:16:35,766 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2359 to 2301.
[2020-11-25 01:16:35,766 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2301 states.
[2020-11-25 01:16:35,768 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2301 states to 2301 states and 2503 transitions.
[2020-11-25 01:16:35,768 INFO  L751         BuchiCegarLoop]: Abstraction has 2301 states and 2503 transitions.
[2020-11-25 01:16:35,769 INFO  L631         BuchiCegarLoop]: Abstraction has 2301 states and 2503 transitions.
[2020-11-25 01:16:35,769 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 01:16:35,769 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2301 states and 2503 transitions.
[2020-11-25 01:16:35,771 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:16:35,772 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:16:35,772 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:16:35,772 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:16:35,772 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L3463]              assume null == 0;
[L3464]  CALL        call this := FreshRefGenerator__success();
[L1500]              havoc newRef;
[L1501]              assume Alloc[newRef] == false;
[L1502]              Alloc[newRef] := true;
[L1503]              assume newRef != null;
[L3464]  RET         call this := FreshRefGenerator__success();
[L3465]              assume now >= 0;
[L3466]              assume DType[this] == BT;
[L3467]              assume msgvalue_MSG == 0;
[L3468]              gas := gas - 53000;
[L3469]  CALL        call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L726]               havoc __exception;
[L727]               revert := false;
[L728]   COND FALSE  !(__exception)
[L750]   CALL        call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L2275]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1734]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L1734]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1735]  COND FALSE  !(revert)
[L1738]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]              assume msgsender_MSG != null;
[L1711]              Balance[this] := 0;
[L1712]              _balances_ERC20[this] := zeroRefintArr();
[L1713]              sum__balances0[this] := 0;
[L1714]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1715]              sum__allowed1[this] := 0;
[L1716]              _totalSupply_ERC20[this] := 0;
[L1738]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]  COND FALSE  !(revert)
[L2279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]              assume msgsender_MSG != null;
[L2238]              Balance[this] := 0;
[L2239]              name_BT[this] := 876474985;
[L2240]              symbol_BT[this] := 95884948;
[L2241]              decimals_BT[this] := 18;
[L2242]              __var_20 := decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2243]              INITIAL_SUPPLY_BT[this] := 100000000 * (nonlinearPow(10, decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2245]  COND TRUE   DType[this] == BT
[L2246]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2076]              __var_13 := null;
[L2077]  COND FALSE  !(!(account_s571 != null))
[L2081]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L1665]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1666]  COND FALSE  !(!(c_s173 >= a_s173))
[L1670]              __ret_0_ := c_s173;
[L2081]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L2082]  COND FALSE  !(revert)
[L2085]              _totalSupply_ERC20[this] := __var_14;
[L2086]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s571], amount_s571);
[L1665]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1666]  COND FALSE  !(!(c_s173 >= a_s173))
[L1670]              __ret_0_ := c_s173;
[L2086]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s571], amount_s571);
[L2087]  COND FALSE  !(revert)
[L2090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s571];
[L2091]              _balances_ERC20[this][account_s571] := __var_15;
[L2092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s571];
[L2093]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2246]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2247]  COND FALSE  !(revert)
[L2283]  RET         call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L750]   RET         call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L751]               assume !revert && gas >= 0;
[L3469]  RET         call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L3470]              assume !revert && gas >= 0;
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND TRUE   choice == 11
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume value_s307 >= 0 && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s307 && value_s307 <= _balances_ERC20[this][msgsender_MSG]) && value_s307 >= 0) && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s307] >= 0) && _balances_ERC20[this][to_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L415]               havoc __exception;
[L416]               revert := false;
[L417]   COND TRUE   __exception
[L418]               __tmp__Balance := Balance;
[L419]               __tmp__DType := DType;
[L420]               __tmp__Alloc := Alloc;
[L421]               __tmp__balance_ADDR := balance_ADDR;
[L422]               __tmp__M_Ref_int := M_Ref_int;
[L423]               __tmp__sum__balances0 := sum__balances0;
[L424]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L425]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L426]               __tmp__sum__allowed1 := sum__allowed1;
[L427]               __tmp__Length := Length;
[L428]               __tmp__now := now;
[L429]               __tmp___balances_ERC20 := _balances_ERC20;
[L430]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L431]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L432]               __tmp__name_BT := name_BT;
[L433]               __tmp__symbol_BT := symbol_BT;
[L434]               __tmp__decimals_BT := decimals_BT;
[L435]               __tmp__INITIAL_SUPPLY_BT := INITIAL_SUPPLY_BT;
[L436]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L1785]  COND FALSE  !(!(value_s307 <= __tmp___balances_ERC20[this][msgsender_MSG]))
[L1789]              __var_1 := null;
[L1790]  COND FALSE  !(!(to_s307 != null))
[L1794]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][msgsender_MSG], value_s307);
[L1629]  COND FALSE  !(!(b_s149 <= a_s149))
[L1633]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1634]              __ret_0_ := c_s149;
[L1794]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][msgsender_MSG], value_s307);
[L1795]  COND FALSE  !(revert)
[L1798]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][msgsender_MSG];
[L1799]              __tmp___balances_ERC20[this][msgsender_MSG] := __var_2;
[L1800]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][msgsender_MSG];
[L1801]  CALL        call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s307], value_s307);
[L1653]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1654]  COND FALSE  !(!(c_s173 >= a_s173))
[L1658]              __ret_0_ := c_s173;
[L1801]  RET         call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][to_s307], value_s307);
[L1802]  COND FALSE  !(revert)
[L1805]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][to_s307];
[L1806]              __tmp___balances_ERC20[this][to_s307] := __var_3;
[L1807]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][to_s307];
[L1808]              __ret_0_ := true;
[L436]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L437]               assume revert || gas < 0;
[L3387]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L3473]  RET         call CorralChoice_BT(this);

Loop:
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND TRUE   choice == 14
[L3365]              gas := gas - 21000;
[L3366]  COND FALSE  !(gas >= 0)
[L3473]  RET         call CorralChoice_BT(this);

[2020-11-25 01:16:35,775 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:16:35,775 INFO  L82        PathProgramCache]: Analyzing trace with hash 181736733, now seen corresponding path program 1 times
[2020-11-25 01:16:35,776 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:16:35,784 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:16:35,819 INFO  L134       CoverageAnalysis]: Checked inductivity of 15 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 15 trivial. 0 not checked.
[2020-11-25 01:16:35,819 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:16:35,819 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 01:16:35,820 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:16:35,820 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 01:16:35,820 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 01:16:35,820 INFO  L87              Difference]: Start difference. First operand 2301 states and 2503 transitions. cyclomatic complexity: 206 Second operand 5 states.
[2020-11-25 01:16:36,113 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:16:36,113 INFO  L93              Difference]: Finished difference Result 2852 states and 3173 transitions.
[2020-11-25 01:16:36,113 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:16:36,113 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2852 states and 3173 transitions.
[2020-11-25 01:16:36,118 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 01:16:36,124 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2852 states to 2209 states and 2523 transitions.
[2020-11-25 01:16:36,124 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 474
[2020-11-25 01:16:36,124 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 474
[2020-11-25 01:16:36,124 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2209 states and 2523 transitions.
[2020-11-25 01:16:36,126 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:16:36,126 INFO  L728         BuchiCegarLoop]: Abstraction has 2209 states and 2523 transitions.
[2020-11-25 01:16:36,128 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2209 states and 2523 transitions.
[2020-11-25 01:16:36,137 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2209 to 1673.
[2020-11-25 01:16:36,137 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1673 states.
[2020-11-25 01:16:36,138 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1673 states to 1673 states and 1830 transitions.
[2020-11-25 01:16:36,138 INFO  L751         BuchiCegarLoop]: Abstraction has 1673 states and 1830 transitions.
[2020-11-25 01:16:36,138 INFO  L631         BuchiCegarLoop]: Abstraction has 1673 states and 1830 transitions.
[2020-11-25 01:16:36,138 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 01:16:36,139 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1673 states and 1830 transitions.
[2020-11-25 01:16:36,140 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:16:36,140 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:16:36,140 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:16:36,141 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:16:36,141 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L3463]              assume null == 0;
[L3464]  CALL        call this := FreshRefGenerator__success();
[L1500]              havoc newRef;
[L1501]              assume Alloc[newRef] == false;
[L1502]              Alloc[newRef] := true;
[L1503]              assume newRef != null;
[L3464]  RET         call this := FreshRefGenerator__success();
[L3465]              assume now >= 0;
[L3466]              assume DType[this] == BT;
[L3467]              assume msgvalue_MSG == 0;
[L3468]              gas := gas - 53000;
[L3469]  CALL        call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L726]               havoc __exception;
[L727]               revert := false;
[L728]   COND FALSE  !(__exception)
[L750]   CALL        call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L2275]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L2275]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  COND FALSE  !(revert)
[L2279]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1734]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1532]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume msgsender_MSG != null;
[L1518]              Balance[this] := 0;
[L1532]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1533]  COND FALSE  !(revert)
[L1734]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1735]  COND FALSE  !(revert)
[L1738]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1710]              assume msgsender_MSG != null;
[L1711]              Balance[this] := 0;
[L1712]              _balances_ERC20[this] := zeroRefintArr();
[L1713]              sum__balances0[this] := 0;
[L1714]              _allowed_ERC20[this] := zeroRefRefintArr();
[L1715]              sum__allowed1[this] := 0;
[L1716]              _totalSupply_ERC20[this] := 0;
[L1738]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1739]  COND FALSE  !(revert)
[L2279]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2280]  COND FALSE  !(revert)
[L2283]  CALL        call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2237]              assume msgsender_MSG != null;
[L2238]              Balance[this] := 0;
[L2239]              name_BT[this] := 876474985;
[L2240]              symbol_BT[this] := 95884948;
[L2241]              decimals_BT[this] := 18;
[L2242]              __var_20 := decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2243]              INITIAL_SUPPLY_BT[this] := 100000000 * (nonlinearPow(10, decimals_BT[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2245]  COND TRUE   DType[this] == BT
[L2246]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2076]              __var_13 := null;
[L2077]  COND FALSE  !(!(account_s571 != null))
[L2081]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L1665]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1666]  COND FALSE  !(!(c_s173 >= a_s173))
[L1670]              __ret_0_ := c_s173;
[L2081]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s571);
[L2082]  COND FALSE  !(revert)
[L2085]              _totalSupply_ERC20[this] := __var_14;
[L2086]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s571], amount_s571);
[L1665]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1666]  COND FALSE  !(!(c_s173 >= a_s173))
[L1670]              __ret_0_ := c_s173;
[L2086]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s571], amount_s571);
[L2087]  COND FALSE  !(revert)
[L2090]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s571];
[L2091]              _balances_ERC20[this][account_s571] := __var_15;
[L2092]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s571];
[L2093]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2246]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_BT[this]);
[L2247]  COND FALSE  !(revert)
[L2283]  RET         call BT_BT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L750]   RET         call BT_BT__success(this, msgsender_MSG, msgvalue_MSG);
[L751]               assume !revert && gas >= 0;
[L3469]  RET         call BT_BT(this, msgsender_MSG, msgvalue_MSG);
[L3470]              assume !revert && gas >= 0;
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND TRUE   choice == 11
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume value_s307 >= 0 && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s307 && value_s307 <= _balances_ERC20[this][msgsender_MSG]) && value_s307 >= 0) && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s307] >= 0) && _balances_ERC20[this][to_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L415]               havoc __exception;
[L416]               revert := false;
[L417]   COND FALSE  !(__exception)
[L439]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L1817]  COND FALSE  !(!(value_s307 <= _balances_ERC20[this][msgsender_MSG]))
[L1821]              __var_1 := null;
[L1822]  COND FALSE  !(!(to_s307 != null))
[L1826]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s307);
[L1641]  COND FALSE  !(!(b_s149 <= a_s149))
[L1645]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1646]              __ret_0_ := c_s149;
[L1826]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s307);
[L1827]  COND FALSE  !(revert)
[L1830]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][msgsender_MSG];
[L1831]              _balances_ERC20[this][msgsender_MSG] := __var_2;
[L1832]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][msgsender_MSG];
[L1833]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s307], value_s307);
[L1665]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1666]  COND FALSE  !(!(c_s173 >= a_s173))
[L1670]              __ret_0_ := c_s173;
[L1833]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s307], value_s307);
[L1834]  COND FALSE  !(revert)
[L1837]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s307];
[L1838]              _balances_ERC20[this][to_s307] := __var_3;
[L1839]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s307];
[L1840]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1841]              __ret_0_ := true;
[L439]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L440]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this]));
[L2]                 revert := revert_hold;
[L3387]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L3473]  RET         call CorralChoice_BT(this);
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND FALSE  !(choice == 14)
[L3370]  COND FALSE  !(choice == 13)
[L3376]  COND FALSE  !(choice == 12)
[L3382]  COND TRUE   choice == 11
[L3383]              gas := gas - 21000;
[L3384]  COND TRUE   gas >= 0
[L3385]              assume value_s307 >= 0 && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3386]              assume msgvalue_MSG == 0;
[L3387]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s307 && value_s307 <= _balances_ERC20[this][msgsender_MSG]) && value_s307 >= 0) && value_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s307] >= 0) && _balances_ERC20[this][to_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L415]               havoc __exception;
[L416]               revert := false;
[L417]   COND FALSE  !(__exception)
[L439]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L1817]  COND FALSE  !(!(value_s307 <= _balances_ERC20[this][msgsender_MSG]))
[L1821]              __var_1 := null;
[L1822]  COND FALSE  !(!(to_s307 != null))
[L1826]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s307);
[L1641]  COND FALSE  !(!(b_s149 <= a_s149))
[L1645]              c_s149 := (a_s149 - b_s149) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1646]              __ret_0_ := c_s149;
[L1826]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][msgsender_MSG], value_s307);
[L1827]  COND FALSE  !(revert)
[L1830]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][msgsender_MSG];
[L1831]              _balances_ERC20[this][msgsender_MSG] := __var_2;
[L1832]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][msgsender_MSG];
[L1833]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s307], value_s307);
[L1665]              c_s173 := (a_s173 + b_s173) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1666]  COND FALSE  !(!(c_s173 >= a_s173))
[L1670]              __ret_0_ := c_s173;
[L1833]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s307], value_s307);
[L1834]  COND FALSE  !(revert)
[L1837]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s307];
[L1838]              _balances_ERC20[this][to_s307] := __var_3;
[L1839]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s307];
[L1840]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1841]              __ret_0_ := true;
[L439]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L440]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this]));
[L2]                 revert := revert_hold;
[L3387]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s307, value_s307);
[L3473]  RET         call CorralChoice_BT(this);

Loop:
[L3473]  CALL        call CorralChoice_BT(this);
[L3320]              havoc msgsender_MSG;
[L3321]              havoc msgvalue_MSG;
[L3322]              havoc choice;
[L3323]              havoc __ret_0_totalSupply;
[L3324]              havoc owner_s231;
[L3325]              havoc __ret_0_balanceOf;
[L3326]              havoc owner_s247;
[L3327]              havoc spender_s247;
[L3328]              havoc __ret_0_allowance;
[L3329]              havoc to_s307;
[L3330]              havoc value_s307;
[L3331]              havoc __ret_0_transfer;
[L3332]              havoc spender_s343;
[L3333]              havoc value_s343;
[L3334]              havoc __ret_0_approve;
[L3335]              havoc from_s429;
[L3336]              havoc to_s429;
[L3337]              havoc value_s429;
[L3338]              havoc __ret_0_transferFrom;
[L3339]              havoc spender_s479;
[L3340]              havoc addedValue_s479;
[L3341]              havoc __ret_0_increaseAllowance;
[L3342]              havoc spender_s529;
[L3343]              havoc subtractedValue_s529;
[L3344]              havoc __ret_0_decreaseAllowance;
[L3345]              havoc __ret_0_name;
[L3346]              havoc __ret_0_symbol;
[L3347]              havoc __ret_0_decimals;
[L3348]              havoc __ret_0_INITIAL_SUPPLY;
[L3349]              havoc amount_s706;
[L3350]              havoc account_s719;
[L3351]              havoc amount_s719;
[L3352]              havoc tmpNow;
[L3353]              havoc gas;
[L3354]              assume gas > 4000000 && gas <= 8000000;
[L3355]              tmpNow := now;
[L3356]              havoc now;
[L3357]              assume now > tmpNow;
[L3358]              assume msgsender_MSG != null;
[L3359]              assume DType[msgsender_MSG] != IERC20;
[L3360]              assume DType[msgsender_MSG] != SafeMath;
[L3361]              assume DType[msgsender_MSG] != ERC20;
[L3362]              assume DType[msgsender_MSG] != BT;
[L3363]              Alloc[msgsender_MSG] := true;
[L3364]  COND TRUE   choice == 14
[L3365]              gas := gas - 21000;
[L3366]  COND FALSE  !(gas >= 0)
[L3473]  RET         call CorralChoice_BT(this);

[2020-11-25 01:16:36,144 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:16:36,144 INFO  L82        PathProgramCache]: Analyzing trace with hash -1599174180, now seen corresponding path program 1 times
[2020-11-25 01:16:36,144 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:16:36,180 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Received shutdown request...
[2020-11-25 01:31:23,060 FATAL L265        ToolchainWalker]: An unrecoverable error occured during an interaction with an SMT solver:
de.uni_freiburg.informatik.ultimate.logic.SMTLIBException: Timeout exceeded
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$MixedLAInterpolator.convert(Interpolator.java:1288)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.cacheConvert(TermTransformer.java:131)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.access$0(TermTransformer.java:127)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer$Convert.walk(TermTransformer.java:79)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.transform(TermTransformer.java:253)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.mixedPivotLA(Interpolator.java:1478)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.combine(Interpolator.java:359)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.access$2(Interpolator.java:328)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$CombineInterpolants.walk(Interpolator.java:153)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.interpolate(Interpolator.java:220)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.getInterpolants(Interpolator.java:201)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.smtlib2.SMTInterpol.getInterpolants(SMTInterpol.java:919)
	at de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.managedscript.ManagedScript.getInterpolants(ManagedScript.java:200)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.computeCraigInterpolants(NestedInterpolantsBuilder.java:303)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:167)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:182)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolantsTree(InterpolatingTraceCheckCraig.java:271)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolants(InterpolatingTraceCheckCraig.java:207)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.<init>(InterpolatingTraceCheckCraig.java:109)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructCraig(TraceCheckConstructor.java:211)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructTraceCheck(TraceCheckConstructor.java:183)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.get(TraceCheckConstructor.java:165)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.FixedRefinementStrategy.getTraceCheck(FixedRefinementStrategy.java:134)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.checkFeasibility(BaseRefinementStrategy.java:223)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.executeStrategy(BaseRefinementStrategy.java:197)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceAbstractionRefinementEngine.<init>(TraceAbstractionRefinementEngine.java:70)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkFeasibilityAndComputeInterpolants(LassoCheck.java:1126)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkStemFeasibility(LassoCheck.java:1080)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:994)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-25 01:31:23,061 INFO  L168              Benchmark]: Toolchain (without parser) took 898531.63 ms. Allocated memory was 1.0 GB in the beginning and 6.4 GB in the end (delta: 5.4 GB). Free memory was 945.9 MB in the beginning and 5.4 GB in the end (delta: -4.5 GB). Peak memory consumption was 6.0 GB. Max. memory is 15.3 GB.
[2020-11-25 01:31:23,062 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 01:31:23,062 INFO  L168              Benchmark]: Boogie Preprocessor took 105.53 ms. Allocated memory is still 1.0 GB. Free memory was 945.9 MB in the beginning and 929.8 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 01:31:23,062 INFO  L168              Benchmark]: UtopiaSpecLang took 59.74 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 01:31:23,062 INFO  L168              Benchmark]: Boogie Printer took 15.45 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 01:31:23,063 INFO  L168              Benchmark]: RCFGBuilder took 724.39 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 827.8 MB in the end (delta: 91.3 MB). Peak memory consumption was 91.3 MB. Max. memory is 15.3 GB.
[2020-11-25 01:31:23,063 INFO  L168              Benchmark]: UtopiaLTL2Aut took 39.90 ms. Allocated memory is still 1.0 GB. Free memory was 827.8 MB in the beginning and 818.9 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 01:31:23,063 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1218.06 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 196.1 MB). Free memory was 818.9 MB in the beginning and 1.2 GB in the end (delta: -338.9 MB). Peak memory consumption was 194.7 MB. Max. memory is 15.3 GB.
[2020-11-25 01:31:23,064 INFO  L168              Benchmark]: BlockEncodingV2 took 111.66 ms. Allocated memory is still 1.2 GB. Free memory was 1.2 GB in the beginning and 1.1 GB in the end (delta: 49.6 MB). Peak memory consumption was 49.6 MB. Max. memory is 15.3 GB.
[2020-11-25 01:31:23,064 INFO  L168              Benchmark]: BuchiAutomizer took 896253.86 ms. Allocated memory was 1.2 GB in the beginning and 6.4 GB in the end (delta: 5.2 GB). Free memory was 1.1 GB in the beginning and 5.4 GB in the end (delta: -4.3 GB). Peak memory consumption was 6.0 GB. Max. memory is 15.3 GB.
[2020-11-25 01:31:23,067 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3022 locations, 5301 edges
  - StatisticsResult: Encoded RCFG
    2972 locations, 5168 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 105.53 ms. Allocated memory is still 1.0 GB. Free memory was 945.9 MB in the beginning and 929.8 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 59.74 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 15.45 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 724.39 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 827.8 MB in the end (delta: 91.3 MB). Peak memory consumption was 91.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 39.90 ms. Allocated memory is still 1.0 GB. Free memory was 827.8 MB in the beginning and 818.9 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1218.06 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 196.1 MB). Free memory was 818.9 MB in the beginning and 1.2 GB in the end (delta: -338.9 MB). Peak memory consumption was 194.7 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 111.66 ms. Allocated memory is still 1.2 GB. Free memory was 1.2 GB in the beginning and 1.1 GB in the end (delta: 49.6 MB). Peak memory consumption was 49.6 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 896253.86 ms. Allocated memory was 1.2 GB in the beginning and 6.4 GB in the end (delta: 5.2 GB). Free memory was 1.1 GB in the beginning and 5.4 GB in the end (delta: -4.3 GB). Peak memory consumption was 6.0 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1240 locations, 1626 edges
  - StatisticsResult: BuchiProgram size
    3022 locations, 5301 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: SMTLIBException: Timeout exceeded
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: SMTLIBException: Timeout exceeded: de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Completed graceful shutdown
